
NUCLEO-F446RE_Gizmo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014cf8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d88  08014ec8  08014ec8  00015ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018c50  08018c50  0001a204  2**0
                  CONTENTS
  4 .ARM          00000008  08018c50  08018c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018c58  08018c58  0001a204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018c58  08018c58  00019c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018c5c  08018c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  08018c60  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002868  20000204  08018e64  0001a204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a6c  08018e64  0001aa6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002054d  00000000  00000000  0001a234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005718  00000000  00000000  0003a781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  0003fea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001422  00000000  00000000  00041928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002985b  00000000  00000000  00042d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000295a5  00000000  00000000  0006c5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e068a  00000000  00000000  00095b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001761d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008024  00000000  00000000  00176218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014eb0 	.word	0x08014eb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	08014eb0 	.word	0x08014eb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001028:	4b2e      	ldr	r3, [pc, #184]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 800102a:	4a2f      	ldr	r2, [pc, #188]	@ (80010e8 <MX_CAN1_Init+0xc4>)
 800102c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800102e:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 8001030:	2205      	movs	r2, #5
 8001032:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001034:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800103a:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 8001042:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001046:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001048:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 8001050:	2200      	movs	r2, #0
 8001052:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 8001056:	2200      	movs	r2, #0
 8001058:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800105a:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 800105c:	2200      	movs	r2, #0
 800105e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001060:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 8001062:	2200      	movs	r2, #0
 8001064:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 8001068:	2200      	movs	r2, #0
 800106a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 800106e:	2200      	movs	r2, #0
 8001070:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001072:	481c      	ldr	r0, [pc, #112]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 8001074:	f004 f89e 	bl	80051b4 <HAL_CAN_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800107e:	f001 f8af 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  // Define filter

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_CAN1_Init+0xc8>)
 8001084:	2201      	movs	r2, #1
 8001086:	621a      	str	r2, [r3, #32]
	filter.FilterBank = 0x00;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MX_CAN1_Init+0xc8>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <MX_CAN1_Init+0xc8>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <MX_CAN1_Init+0xc8>)
 8001096:	2201      	movs	r2, #1
 8001098:	61da      	str	r2, [r3, #28]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_CAN1_Init+0xc8>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
	filter.FilterMaskIdHigh = 0x00;
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <MX_CAN1_Init+0xc8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow = 0x00;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_CAN1_Init+0xc8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
	//can0_filter.FilterIdHigh = 0x00;
	//can0_filter.FilterIdLow = module_id;

	// Add filter
	if ( HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK)
 80010ac:	490f      	ldr	r1, [pc, #60]	@ (80010ec <MX_CAN1_Init+0xc8>)
 80010ae:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 80010b0:	f004 f97c 	bl	80053ac <HAL_CAN_ConfigFilter>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_CAN1_Init+0x9a>
	{
		Error_Handler();
 80010ba:	f001 f891 	bl	80021e0 <Error_Handler>
	}

	// Start CAN
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 80010c0:	f004 fa54 	bl	800556c <HAL_CAN_Start>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_CAN1_Init+0xaa>
	{
		Error_Handler();
 80010ca:	f001 f889 	bl	80021e0 <Error_Handler>
	}
	if( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010ce:	2102      	movs	r1, #2
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_CAN1_Init+0xc0>)
 80010d2:	f004 fc81 	bl	80059d8 <HAL_CAN_ActivateNotification>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_CAN1_Init+0xbc>
	{
		Error_Handler();
 80010dc:	f001 f880 	bl	80021e0 <Error_Handler>
	}
  /* USER CODE END CAN1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000248 	.word	0x20000248
 80010e8:	40006400 	.word	0x40006400
 80010ec:	20000220 	.word	0x20000220

080010f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2d      	ldr	r2, [pc, #180]	@ (80011c4 <HAL_CAN_MspInit+0xd4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d153      	bne.n	80011ba <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <HAL_CAN_MspInit+0xd8>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	4a2b      	ldr	r2, [pc, #172]	@ (80011c8 <HAL_CAN_MspInit+0xd8>)
 800111c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001120:	6413      	str	r3, [r2, #64]	@ 0x40
 8001122:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <HAL_CAN_MspInit+0xd8>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <HAL_CAN_MspInit+0xd8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a24      	ldr	r2, [pc, #144]	@ (80011c8 <HAL_CAN_MspInit+0xd8>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b22      	ldr	r3, [pc, #136]	@ (80011c8 <HAL_CAN_MspInit+0xd8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <HAL_CAN_MspInit+0xd8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a1d      	ldr	r2, [pc, #116]	@ (80011c8 <HAL_CAN_MspInit+0xd8>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <HAL_CAN_MspInit+0xd8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001178:	2309      	movs	r3, #9
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4812      	ldr	r0, [pc, #72]	@ (80011cc <HAL_CAN_MspInit+0xdc>)
 8001184:	f005 fb92 	bl	80068ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800119a:	2309      	movs	r3, #9
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <HAL_CAN_MspInit+0xe0>)
 80011a6:	f005 fb81 	bl	80068ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2014      	movs	r0, #20
 80011b0:	f004 ff43 	bl	800603a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011b4:	2014      	movs	r0, #20
 80011b6:	f004 ff5c 	bl	8006072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40006400 	.word	0x40006400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400

080011d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <MX_DMA_Init+0x4c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <MX_DMA_Init+0x4c>)
 80011e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <MX_DMA_Init+0x4c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2010      	movs	r0, #16
 80011fc:	f004 ff1d 	bl	800603a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001200:	2010      	movs	r0, #16
 8001202:	f004 ff36 	bl	8006072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2011      	movs	r0, #17
 800120c:	f004 ff15 	bl	800603a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001210:	2011      	movs	r0, #17
 8001212:	f004 ff2e 	bl	8006072 <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b50      	ldr	r3, [pc, #320]	@ (8001380 <MX_GPIO_Init+0x15c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a4f      	ldr	r2, [pc, #316]	@ (8001380 <MX_GPIO_Init+0x15c>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b4d      	ldr	r3, [pc, #308]	@ (8001380 <MX_GPIO_Init+0x15c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b49      	ldr	r3, [pc, #292]	@ (8001380 <MX_GPIO_Init+0x15c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a48      	ldr	r2, [pc, #288]	@ (8001380 <MX_GPIO_Init+0x15c>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b46      	ldr	r3, [pc, #280]	@ (8001380 <MX_GPIO_Init+0x15c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b42      	ldr	r3, [pc, #264]	@ (8001380 <MX_GPIO_Init+0x15c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a41      	ldr	r2, [pc, #260]	@ (8001380 <MX_GPIO_Init+0x15c>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b3f      	ldr	r3, [pc, #252]	@ (8001380 <MX_GPIO_Init+0x15c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b3b      	ldr	r3, [pc, #236]	@ (8001380 <MX_GPIO_Init+0x15c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a3a      	ldr	r2, [pc, #232]	@ (8001380 <MX_GPIO_Init+0x15c>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b38      	ldr	r3, [pc, #224]	@ (8001380 <MX_GPIO_Init+0x15c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b34      	ldr	r3, [pc, #208]	@ (8001380 <MX_GPIO_Init+0x15c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a33      	ldr	r2, [pc, #204]	@ (8001380 <MX_GPIO_Init+0x15c>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <MX_GPIO_Init+0x15c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f240 210d 	movw	r1, #525	@ 0x20d
 80012cc:	482d      	ldr	r0, [pc, #180]	@ (8001384 <MX_GPIO_Init+0x160>)
 80012ce:	f005 fc99 	bl	8006c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 80012d8:	482b      	ldr	r0, [pc, #172]	@ (8001388 <MX_GPIO_Init+0x164>)
 80012da:	f005 fc93 	bl	8006c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2101      	movs	r1, #1
 80012e2:	482a      	ldr	r0, [pc, #168]	@ (800138c <MX_GPIO_Init+0x168>)
 80012e4:	f005 fc8e 	bl	8006c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4821      	ldr	r0, [pc, #132]	@ (8001384 <MX_GPIO_Init+0x160>)
 8001300:	f005 fad4 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9;
 8001304:	f240 230d 	movw	r3, #525	@ 0x20d
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4819      	ldr	r0, [pc, #100]	@ (8001384 <MX_GPIO_Init+0x160>)
 800131e:	f005 fac5 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8001322:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4813      	ldr	r0, [pc, #76]	@ (8001388 <MX_GPIO_Init+0x164>)
 800133c:	f005 fab6 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001340:	2301      	movs	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_GPIO_Init+0x168>)
 8001358:	f005 faa8 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800135c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001366:	2302      	movs	r3, #2
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_GPIO_Init+0x164>)
 8001372:	f005 fa9b 	bl	80068ac <HAL_GPIO_Init>

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	@ 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400

08001390 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_I2C1_Init+0x50>)
 8001396:	4a13      	ldr	r2, [pc, #76]	@ (80013e4 <MX_I2C1_Init+0x54>)
 8001398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_I2C1_Init+0x50>)
 800139c:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <MX_I2C1_Init+0x58>)
 800139e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013ce:	f005 fc33 	bl	8006c38 <HAL_I2C_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f000 ff02 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000270 	.word	0x20000270
 80013e4:	40005400 	.word	0x40005400
 80013e8:	000186a0 	.word	0x000186a0

080013ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	@ (8001470 <HAL_I2C_MspInit+0x84>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_I2C_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a17      	ldr	r2, [pc, #92]	@ (8001474 <HAL_I2C_MspInit+0x88>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_I2C_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800142a:	23c0      	movs	r3, #192	@ 0xc0
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142e:	2312      	movs	r3, #18
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800143a:	2304      	movs	r3, #4
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <HAL_I2C_MspInit+0x8c>)
 8001446:	f005 fa31 	bl	80068ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_I2C_MspInit+0x88>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <HAL_I2C_MspInit+0x88>)
 8001454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001458:	6413      	str	r3, [r2, #64]	@ 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_I2C_MspInit+0x88>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	@ 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40005400 	.word	0x40005400
 8001474:	40023800 	.word	0x40023800
 8001478:	40020400 	.word	0x40020400

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001482:	f003 fe01 	bl	8005088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001486:	f000 f897 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148a:	f7ff fecb 	bl	8001224 <MX_GPIO_Init>
  MX_DMA_Init();
 800148e:	f7ff fea1 	bl	80011d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001492:	f001 fa4d 	bl	8002930 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 8001496:	f000 ff61 	bl	800235c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800149a:	f00b fd9b 	bl	800cfd4 <MX_FATFS_Init>
  MX_SPI3_Init();
 800149e:	f001 f823 	bl	80024e8 <MX_SPI3_Init>
  MX_RTC_Init();
 80014a2:	f000 fea3 	bl	80021ec <MX_RTC_Init>
  MX_I2C1_Init();
 80014a6:	f7ff ff73 	bl	8001390 <MX_I2C1_Init>
  MX_UART4_Init();
 80014aa:	f001 fa17 	bl	80028dc <MX_UART4_Init>
  MX_CAN1_Init();
 80014ae:	f7ff fdb9 	bl	8001024 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  	InitLogging(&hrtc);
 80014b2:	482d      	ldr	r0, [pc, #180]	@ (8001568 <main+0xec>)
 80014b4:	f002 fb5e 	bl	8003b74 <InitLogging>
  	Screen_Init();
 80014b8:	f001 fd8e 	bl	8002fd8 <Screen_Init>
  	Screen_DrawInitScreen();
 80014bc:	f001 fdbe 	bl	800303c <Screen_DrawInitScreen>

	servo0 = &Servo0;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <main+0xf0>)
 80014c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001570 <main+0xf4>)
 80014c4:	601a      	str	r2, [r3, #0]
	servo1 = &Servo1;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <main+0xf8>)
 80014c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001578 <main+0xfc>)
 80014ca:	601a      	str	r2, [r3, #0]
	acc0 = &Acc0;
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <main+0x100>)
 80014ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001580 <main+0x104>)
 80014d0:	601a      	str	r2, [r3, #0]
	acc1 = &Acc1;
 80014d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001584 <main+0x108>)
 80014d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001588 <main+0x10c>)
 80014d6:	601a      	str	r2, [r3, #0]

	Servo0_struct.tx_buffer = servo0_tx_buff;
 80014d8:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <main+0x110>)
 80014da:	4a2d      	ldr	r2, [pc, #180]	@ (8001590 <main+0x114>)
 80014dc:	601a      	str	r2, [r3, #0]
	Servo0_struct.servo_line = 0x00;
 80014de:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <main+0x110>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	711a      	strb	r2, [r3, #4]
	Servo0_struct.state = servo0;
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <main+0xf0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a28      	ldr	r2, [pc, #160]	@ (800158c <main+0x110>)
 80014ea:	60d3      	str	r3, [r2, #12]

	Acc0_struct.angles = acc0_angles;
 80014ec:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <main+0x118>)
 80014ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001598 <main+0x11c>)
 80014f0:	601a      	str	r2, [r3, #0]
	Acc0_struct.raw_measurement = acc0_measurment;
 80014f2:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <main+0x118>)
 80014f4:	4a29      	ldr	r2, [pc, #164]	@ (800159c <main+0x120>)
 80014f6:	605a      	str	r2, [r3, #4]
	Acc0_struct.acc_line = 0x00;
 80014f8:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <main+0x118>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	721a      	strb	r2, [r3, #8]
	Acc0_struct.state = acc0;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <main+0x100>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a24      	ldr	r2, [pc, #144]	@ (8001594 <main+0x118>)
 8001504:	60d3      	str	r3, [r2, #12]


	CAN_Config();
 8001506:	f000 fc31 	bl	8001d6c <CAN_Config>



	Servo_AddControler(0x00, &huart4);
 800150a:	4925      	ldr	r1, [pc, #148]	@ (80015a0 <main+0x124>)
 800150c:	2000      	movs	r0, #0
 800150e:	f002 f8c3 	bl	8003698 <Servo_AddControler>
	ServoSetPos(0x00, 0x00, 3400, 50);
 8001512:	2332      	movs	r3, #50	@ 0x32
 8001514:	f640 5248 	movw	r2, #3400	@ 0xd48
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f002 f998 	bl	8003850 <ServoSetPos>

	ReturnCode status = Acc_AddController(&hi2c1, 0x00);
 8001520:	2100      	movs	r1, #0
 8001522:	4820      	ldr	r0, [pc, #128]	@ (80015a4 <main+0x128>)
 8001524:	f001 fb40 	bl	8002ba8 <Acc_AddController>
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
	status = Acc_SelfTest(acc0_measurment, 0x00);
 800152c:	2100      	movs	r1, #0
 800152e:	481b      	ldr	r0, [pc, #108]	@ (800159c <main+0x120>)
 8001530:	f001 fc4a 	bl	8002dc8 <Acc_SelfTest>
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]

	Screen_DrawInfoScreen();
 8001538:	f001 fe18 	bl	800316c <Screen_DrawInfoScreen>

	HAL_UART_Receive_DMA(&huart2, rx_buffer_DMA, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	491a      	ldr	r1, [pc, #104]	@ (80015a8 <main+0x12c>)
 8001540:	481a      	ldr	r0, [pc, #104]	@ (80015ac <main+0x130>)
 8001542:	f009 fe45 	bl	800b1d0 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(module_role == MODULE_CONTROLLER)
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <main+0x134>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d104      	bne.n	8001558 <main+0xdc>
		  CANRoutine(can0_struct);
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <main+0x138>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fcd4 	bl	8001f00 <CANRoutine>
	  ServoRoutine(&Servo0_struct);
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <main+0x110>)
 800155a:	f000 f97d 	bl	8001858 <ServoRoutine>
	  AccelometerRoutine(&Acc0_struct);
 800155e:	480d      	ldr	r0, [pc, #52]	@ (8001594 <main+0x118>)
 8001560:	f000 fb2e 	bl	8001bc0 <AccelometerRoutine>
	  if(module_role == MODULE_CONTROLLER)
 8001564:	e7ef      	b.n	8001546 <main+0xca>
 8001566:	bf00      	nop
 8001568:	200003f0 	.word	0x200003f0
 800156c:	20000388 	.word	0x20000388
 8001570:	20000374 	.word	0x20000374
 8001574:	2000038c 	.word	0x2000038c
 8001578:	20000378 	.word	0x20000378
 800157c:	20000390 	.word	0x20000390
 8001580:	2000037c 	.word	0x2000037c
 8001584:	20000394 	.word	0x20000394
 8001588:	20000380 	.word	0x20000380
 800158c:	200002e0 	.word	0x200002e0
 8001590:	200003a8 	.word	0x200003a8
 8001594:	200002f0 	.word	0x200002f0
 8001598:	2000039c 	.word	0x2000039c
 800159c:	200003b8 	.word	0x200003b8
 80015a0:	200004f0 	.word	0x200004f0
 80015a4:	20000270 	.word	0x20000270
 80015a8:	200002d4 	.word	0x200002d4
 80015ac:	20000538 	.word	0x20000538
 80015b0:	200002c4 	.word	0x200002c4
 80015b4:	20000310 	.word	0x20000310

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	@ 0x50
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	2234      	movs	r2, #52	@ 0x34
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f010 f87b 	bl	80116c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <SystemClock_Config+0xd8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001690 <SystemClock_Config+0xd8>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <SystemClock_Config+0xd8>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <SystemClock_Config+0xdc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001604:	4a23      	ldr	r2, [pc, #140]	@ (8001694 <SystemClock_Config+0xdc>)
 8001606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <SystemClock_Config+0xdc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001618:	230a      	movs	r3, #10
 800161a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001624:	2310      	movs	r3, #16
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001628:	2301      	movs	r3, #1
 800162a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162c:	2302      	movs	r3, #2
 800162e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001630:	2300      	movs	r3, #0
 8001632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001634:	2308      	movs	r3, #8
 8001636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001638:	2332      	movs	r3, #50	@ 0x32
 800163a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163c:	2302      	movs	r3, #2
 800163e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001640:	2303      	movs	r3, #3
 8001642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001644:	2302      	movs	r3, #2
 8001646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4618      	mov	r0, r3
 800164e:	f007 f97b 	bl	8008948 <HAL_RCC_OscConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001658:	f000 fdc2 	bl	80021e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165c:	230f      	movs	r3, #15
 800165e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001660:	2302      	movs	r3, #2
 8001662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2101      	movs	r1, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f006 faf1 	bl	8007c60 <HAL_RCC_ClockConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001684:	f000 fdac 	bl	80021e0 <Error_Handler>
  }
}
 8001688:	bf00      	nop
 800168a:	3750      	adds	r7, #80	@ 0x50
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000

08001698 <TransmitResponse>:

/* USER CODE BEGIN 4 */
ReturnCode TransmitResponse(ReturnCode status, uint8_t *data, uint8_t bytes, COM_COMMAND cmd)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6039      	str	r1, [r7, #0]
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	460b      	mov	r3, r1
 80016aa:	71bb      	strb	r3, [r7, #6]
 80016ac:	4613      	mov	r3, r2
 80016ae:	717b      	strb	r3, [r7, #5]
	if (module_role == MODULE_CONTROLLER)
 80016b0:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <TransmitResponse+0x48>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <TransmitResponse+0x30>
		return COM_TransmitResponse(status, data, bytes);
 80016b8:	79ba      	ldrb	r2, [r7, #6]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f810 	bl	80016e4 <COM_TransmitResponse>
 80016c4:	4603      	mov	r3, r0
 80016c6:	e006      	b.n	80016d6 <TransmitResponse+0x3e>
	else
	{
		return CAN_TransmitResponse(status, data, bytes, cmd);
 80016c8:	797b      	ldrb	r3, [r7, #5]
 80016ca:	79ba      	ldrb	r2, [r7, #6]
 80016cc:	79f8      	ldrb	r0, [r7, #7]
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	f000 fbc6 	bl	8001e60 <CAN_TransmitResponse>
 80016d4:	4603      	mov	r3, r0
	}
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200002c4 	.word	0x200002c4

080016e4 <COM_TransmitResponse>:


ReturnCode COM_TransmitResponse(ReturnCode status, uint8_t *data, uint8_t bytes)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71bb      	strb	r3, [r7, #6]
	if (module_role == MODULE_TARGET)
 80016f4:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <COM_TransmitResponse+0xd4>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <COM_TransmitResponse+0x1c>
		return G_SUCCESS;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e056      	b.n	80017ae <COM_TransmitResponse+0xca>

	uint8_t checksum = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
	uint8_t transmit_size = 4;
 8001704:	2304      	movs	r3, #4
 8001706:	73bb      	strb	r3, [r7, #14]

	if (bytes - 4 > DMA_TX_SIZE)
 8001708:	79bb      	ldrb	r3, [r7, #6]
 800170a:	2b0e      	cmp	r3, #14
 800170c:	d904      	bls.n	8001718 <COM_TransmitResponse+0x34>
	{
		// If transmit too big output error
		transmit_size = 4;
 800170e:	2304      	movs	r3, #4
 8001710:	73bb      	strb	r3, [r7, #14]
		status = G_COM_OVERFLOW;
 8001712:	2305      	movs	r3, #5
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	e01f      	b.n	8001758 <COM_TransmitResponse+0x74>
	}
	else if( data != NULL)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01c      	beq.n	8001758 <COM_TransmitResponse+0x74>
	{
		for(uint16_t i = 0; i < bytes; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	81bb      	strh	r3, [r7, #12]
 8001722:	e014      	b.n	800174e <COM_TransmitResponse+0x6a>
		{
			// Write data to TX buffer
			tx_buffer_DMA[i + 3] = *(data + i);
 8001724:	89bb      	ldrh	r3, [r7, #12]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	441a      	add	r2, r3
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	3303      	adds	r3, #3
 800172e:	7811      	ldrb	r1, [r2, #0]
 8001730:	4a22      	ldr	r2, [pc, #136]	@ (80017bc <COM_TransmitResponse+0xd8>)
 8001732:	54d1      	strb	r1, [r2, r3]
			transmit_size++;
 8001734:	7bbb      	ldrb	r3, [r7, #14]
 8001736:	3301      	adds	r3, #1
 8001738:	73bb      	strb	r3, [r7, #14]

			// Increment checksum
			checksum += *(data + i);
 800173a:	89bb      	ldrh	r3, [r7, #12]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	4413      	add	r3, r2
 8001746:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0; i < bytes; i++)
 8001748:	89bb      	ldrh	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	81bb      	strh	r3, [r7, #12]
 800174e:	79bb      	ldrb	r3, [r7, #6]
 8001750:	b29b      	uxth	r3, r3
 8001752:	89ba      	ldrh	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d3e5      	bcc.n	8001724 <COM_TransmitResponse+0x40>
		}
	}

	checksum += transmit_size + module_id + status;
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <COM_TransmitResponse+0xdc>)
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	7bbb      	ldrb	r3, [r7, #14]
 800175e:	4413      	add	r3, r2
 8001760:	b2da      	uxtb	r2, r3
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	4413      	add	r3, r2
 8001766:	b2da      	uxtb	r2, r3
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	4413      	add	r3, r2
 800176c:	73fb      	strb	r3, [r7, #15]
	checksum = ~checksum;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	43db      	mvns	r3, r3
 8001772:	73fb      	strb	r3, [r7, #15]

	// Fill in standard frame
	tx_buffer_DMA[0] = transmit_size;
 8001774:	4a11      	ldr	r2, [pc, #68]	@ (80017bc <COM_TransmitResponse+0xd8>)
 8001776:	7bbb      	ldrb	r3, [r7, #14]
 8001778:	7013      	strb	r3, [r2, #0]
	tx_buffer_DMA[1] = module_id;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <COM_TransmitResponse+0xdc>)
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <COM_TransmitResponse+0xd8>)
 8001780:	705a      	strb	r2, [r3, #1]
	tx_buffer_DMA[2] = status;
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <COM_TransmitResponse+0xd8>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	7093      	strb	r3, [r2, #2]
	tx_buffer_DMA[transmit_size - 1] = checksum;
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	3b01      	subs	r3, #1
 800178c:	490b      	ldr	r1, [pc, #44]	@ (80017bc <COM_TransmitResponse+0xd8>)
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	54ca      	strb	r2, [r1, r3]

	header_sent = 0x01;
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <COM_TransmitResponse+0xe0>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
	if ( HAL_UART_Transmit_DMA(&huart2, tx_buffer_DMA, 1) != HAL_OK )
 8001798:	2201      	movs	r2, #1
 800179a:	4908      	ldr	r1, [pc, #32]	@ (80017bc <COM_TransmitResponse+0xd8>)
 800179c:	480a      	ldr	r0, [pc, #40]	@ (80017c8 <COM_TransmitResponse+0xe4>)
 800179e:	f009 fca7 	bl	800b0f0 <HAL_UART_Transmit_DMA>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <COM_TransmitResponse+0xc8>
		return G_COM_TRANSMIT;
 80017a8:	2306      	movs	r3, #6
 80017aa:	e000      	b.n	80017ae <COM_TransmitResponse+0xca>

	return G_SUCCESS;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002c4 	.word	0x200002c4
 80017bc:	200002c8 	.word	0x200002c8
 80017c0:	20000000 	.word	0x20000000
 80017c4:	200002df 	.word	0x200002df
 80017c8:	20000538 	.word	0x20000538

080017cc <Screen_ServoUpdate>:

ReturnCode Screen_ServoUpdate(servo* servo)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	float last_write = (servo->last_write_pos) * 360 / 4095;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017da:	461a      	mov	r2, r3
 80017dc:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001854 <Screen_ServoUpdate+0x88>)
 80017e6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ea:	441a      	add	r2, r3
 80017ec:	12d2      	asrs	r2, r2, #11
 80017ee:	17db      	asrs	r3, r3, #31
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	edc7 7a05 	vstr	s15, [r7, #20]
	float last_read = (servo->last_read_pos) * 360 / 4095;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001804:	461a      	mov	r2, r3
 8001806:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <Screen_ServoUpdate+0x88>)
 8001810:	fb82 1203 	smull	r1, r2, r2, r3
 8001814:	441a      	add	r2, r3
 8001816:	12d2      	asrs	r2, r2, #11
 8001818:	17db      	asrs	r3, r3, #31
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001824:	edc7 7a04 	vstr	s15, [r7, #16]
	float data[] = {last_write, last_read};
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	60fb      	str	r3, [r7, #12]

	return Screen_UpdateData( ((servo->servo_line == 0x00) ? SERVO_0: SERVO_1), data, 2);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	791b      	ldrb	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <Screen_ServoUpdate+0x70>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <Screen_ServoUpdate+0x72>
 800183c:	2302      	movs	r3, #2
 800183e:	f107 0108 	add.w	r1, r7, #8
 8001842:	2202      	movs	r2, #2
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fe73 	bl	8003530 <Screen_UpdateData>
 800184a:	4603      	mov	r3, r0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	80080081 	.word	0x80080081

08001858 <ServoRoutine>:

void ServoRoutine(servo *servo)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af02      	add	r7, sp, #8
 800185e:	6078      	str	r0, [r7, #4]
	peripheral_state *per_state = servo->state;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]

	switch( per_state->state )
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	785b      	ldrb	r3, [r3, #1]
 800186a:	2b04      	cmp	r3, #4
 800186c:	f200 8127 	bhi.w	8001abe <ServoRoutine+0x266>
 8001870:	a201      	add	r2, pc, #4	@ (adr r2, 8001878 <ServoRoutine+0x20>)
 8001872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001876:	bf00      	nop
 8001878:	08001abf 	.word	0x08001abf
 800187c:	080018a5 	.word	0x080018a5
 8001880:	080018b3 	.word	0x080018b3
 8001884:	08001abf 	.word	0x08001abf
 8001888:	0800188d 	.word	0x0800188d
			return;

		case PER_ERROR:
		{
			// Log error
			per_state->state = PER_IDLE;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2200      	movs	r2, #0
 8001890:	705a      	strb	r2, [r3, #1]
			per_state->cmd = COM_IDLE;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
			SD_LogStatus(per_state->last_code);
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	789b      	ldrb	r3, [r3, #2]
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fa45 	bl	8003d2c <SD_LogStatus>
			return;
 80018a2:	e10d      	b.n	8001ac0 <ServoRoutine+0x268>
		}

		case PER_DONE:
		{
			// Log success
			per_state->state = PER_IDLE;
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2200      	movs	r2, #0
 80018a8:	705a      	strb	r2, [r3, #1]
			per_state->cmd = COM_IDLE;
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]

			return;
 80018b0:	e106      	b.n	8001ac0 <ServoRoutine+0x268>
		}

		case PER_WORKING:
		{
			if( per_state->cmd == COM_SERVO_POS_SET )
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d14d      	bne.n	8001956 <ServoRoutine+0xfe>
			{
				int16_t pos = *(servo->tx_buffer);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	83fb      	strh	r3, [r7, #30]

				if (pos > SERVO_MAX_ANGLE)
 80018c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018c6:	f5b3 7f0e 	cmp.w	r3, #568	@ 0x238
 80018ca:	dd03      	ble.n	80018d4 <ServoRoutine+0x7c>
					pos = SERVO_MAX_ANGLE;
 80018cc:	f44f 730e 	mov.w	r3, #568	@ 0x238
 80018d0:	83fb      	strh	r3, [r7, #30]
 80018d2:	e00b      	b.n	80018ec <ServoRoutine+0x94>
				else if (pos < -SERVO_MAX_ANGLE && pos < 0)
 80018d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018d8:	f513 7f0e 	cmn.w	r3, #568	@ 0x238
 80018dc:	da06      	bge.n	80018ec <ServoRoutine+0x94>
 80018de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	da02      	bge.n	80018ec <ServoRoutine+0x94>
					pos = -SERVO_MAX_ANGLE;
 80018e6:	f64f 53c8 	movw	r3, #64968	@ 0xfdc8
 80018ea:	83fb      	strh	r3, [r7, #30]

				ReturnCode status = ServoSetPos(servo->servo_line, (uint16_t) pos, servo0_tx_buff[1], servo0_tx_buff[2]);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7918      	ldrb	r0, [r3, #4]
 80018f0:	8bf9      	ldrh	r1, [r7, #30]
 80018f2:	4b75      	ldr	r3, [pc, #468]	@ (8001ac8 <ServoRoutine+0x270>)
 80018f4:	885a      	ldrh	r2, [r3, #2]
 80018f6:	4b74      	ldr	r3, [pc, #464]	@ (8001ac8 <ServoRoutine+0x270>)
 80018f8:	889b      	ldrh	r3, [r3, #4]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f001 ffa8 	bl	8003850 <ServoSetPos>
 8001900:	4603      	mov	r3, r0
 8001902:	753b      	strb	r3, [r7, #20]
				PeripheralUpdateState(servo->state, status);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	7d3a      	ldrb	r2, [r7, #20]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fc93 	bl	8004238 <PeripheralUpdateState>

				status = TransmitResponse(status, NULL, 0, COM_SERVO_POS_SET);
 8001912:	7d38      	ldrb	r0, [r7, #20]
 8001914:	2302      	movs	r3, #2
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	f7ff febd 	bl	8001698 <TransmitResponse>
 800191e:	4603      	mov	r3, r0
 8001920:	753b      	strb	r3, [r7, #20]

				// Update value
				servo->last_write_pos = pos;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	8bfa      	ldrh	r2, [r7, #30]
 8001926:	80da      	strh	r2, [r3, #6]

				// Log
				snprintf(msg_buffer, sizeof(msg_buffer), "S%02d write: %d\n", (uint8_t) servo->servo_line, pos);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	791b      	ldrb	r3, [r3, #4]
 800192c:	461a      	mov	r2, r3
 800192e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	4a65      	ldr	r2, [pc, #404]	@ (8001acc <ServoRoutine+0x274>)
 8001938:	2120      	movs	r1, #32
 800193a:	4865      	ldr	r0, [pc, #404]	@ (8001ad0 <ServoRoutine+0x278>)
 800193c:	f00f fe2a 	bl	8011594 <sniprintf>
				status =SD_LogMsg(msg_buffer);
 8001940:	4863      	ldr	r0, [pc, #396]	@ (8001ad0 <ServoRoutine+0x278>)
 8001942:	f002 fa81 	bl	8003e48 <SD_LogMsg>
 8001946:	4603      	mov	r3, r0
 8001948:	753b      	strb	r3, [r7, #20]

				status = Screen_ServoUpdate(servo);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff3e 	bl	80017cc <Screen_ServoUpdate>
 8001950:	4603      	mov	r3, r0
 8001952:	753b      	strb	r3, [r7, #20]
				return;
 8001954:	e0b4      	b.n	8001ac0 <ServoRoutine+0x268>
			}
			else if( per_state->cmd == COM_SERVO_POS_READ)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d147      	bne.n	80019ee <ServoRoutine+0x196>
			{
				uint16_t pos;
				ReturnCode status = ServoCurrentPosition(servo->servo_line, &pos);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	791b      	ldrb	r3, [r3, #4]
 8001962:	f107 0212 	add.w	r2, r7, #18
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f002 f8e4 	bl	8003b36 <ServoCurrentPosition>
 800196e:	4603      	mov	r3, r0
 8001970:	757b      	strb	r3, [r7, #21]
				PeripheralUpdateState(servo->state, status);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	7d7a      	ldrb	r2, [r7, #21]
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fc5c 	bl	8004238 <PeripheralUpdateState>

				if (status == G_SUCCESS)
 8001980:	7d7b      	ldrb	r3, [r7, #21]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d111      	bne.n	80019aa <ServoRoutine+0x152>
				{
					// Translate pos into 2 bytes
					uint8_t buff[] = { (( pos & 0xFF00) >> 8), (pos & 0x0FF)};
 8001986:	8a7b      	ldrh	r3, [r7, #18]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b29b      	uxth	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	743b      	strb	r3, [r7, #16]
 8001990:	8a7b      	ldrh	r3, [r7, #18]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	747b      	strb	r3, [r7, #17]

					// Send response
					status = TransmitResponse(status, buff, 2, COM_SERVO_POS_READ);
 8001996:	f107 0110 	add.w	r1, r7, #16
 800199a:	7d78      	ldrb	r0, [r7, #21]
 800199c:	2301      	movs	r3, #1
 800199e:	2202      	movs	r2, #2
 80019a0:	f7ff fe7a 	bl	8001698 <TransmitResponse>
 80019a4:	4603      	mov	r3, r0
 80019a6:	757b      	strb	r3, [r7, #21]
 80019a8:	e007      	b.n	80019ba <ServoRoutine+0x162>
				}
				else
				{
					status = TransmitResponse(status, NULL, 0, COM_SERVO_POS_READ);
 80019aa:	7d78      	ldrb	r0, [r7, #21]
 80019ac:	2301      	movs	r3, #1
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	f7ff fe71 	bl	8001698 <TransmitResponse>
 80019b6:	4603      	mov	r3, r0
 80019b8:	757b      	strb	r3, [r7, #21]
				}

				// Update
				servo->last_read_pos = pos;
 80019ba:	8a7b      	ldrh	r3, [r7, #18]
 80019bc:	b21a      	sxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	811a      	strh	r2, [r3, #8]

				// Log
				snprintf(msg_buffer, sizeof(msg_buffer), "S%02d read: %d\n", (uint8_t) servo->servo_line, pos);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	791b      	ldrb	r3, [r3, #4]
 80019c6:	461a      	mov	r2, r3
 80019c8:	8a7b      	ldrh	r3, [r7, #18]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	4a41      	ldr	r2, [pc, #260]	@ (8001ad4 <ServoRoutine+0x27c>)
 80019d0:	2120      	movs	r1, #32
 80019d2:	483f      	ldr	r0, [pc, #252]	@ (8001ad0 <ServoRoutine+0x278>)
 80019d4:	f00f fdde 	bl	8011594 <sniprintf>
				status = SD_LogMsg(msg_buffer);
 80019d8:	483d      	ldr	r0, [pc, #244]	@ (8001ad0 <ServoRoutine+0x278>)
 80019da:	f002 fa35 	bl	8003e48 <SD_LogMsg>
 80019de:	4603      	mov	r3, r0
 80019e0:	757b      	strb	r3, [r7, #21]

				status = Screen_ServoUpdate(servo);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fef2 	bl	80017cc <Screen_ServoUpdate>
 80019e8:	4603      	mov	r3, r0
 80019ea:	757b      	strb	r3, [r7, #21]
 80019ec:	e068      	b.n	8001ac0 <ServoRoutine+0x268>
				return;
			}
			else if ( per_state->cmd == COM_SERVO_PING )
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d134      	bne.n	8001a60 <ServoRoutine+0x208>
			{
				ReturnCode status = ServoPing(servo->servo_line, 0x01);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	791b      	ldrb	r3, [r3, #4]
 80019fa:	2101      	movs	r1, #1
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 ffdd 	bl	80039bc <ServoPing>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75bb      	strb	r3, [r7, #22]
				PeripheralUpdateState(servo->state, status);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	7dba      	ldrb	r2, [r7, #22]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fc12 	bl	8004238 <PeripheralUpdateState>
				status = TransmitResponse(status, NULL, 0, COM_SERVO_PING);
 8001a14:	7db8      	ldrb	r0, [r7, #22]
 8001a16:	2304      	movs	r3, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f7ff fe3c 	bl	8001698 <TransmitResponse>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75bb      	strb	r3, [r7, #22]

				// Log
				snprintf(msg_buffer, sizeof(msg_buffer), "S%02d status: %d\n", (uint8_t) servo->servo_line, status);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	791b      	ldrb	r3, [r3, #4]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	7dbb      	ldrb	r3, [r7, #22]
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	4a29      	ldr	r2, [pc, #164]	@ (8001ad8 <ServoRoutine+0x280>)
 8001a32:	2120      	movs	r1, #32
 8001a34:	4826      	ldr	r0, [pc, #152]	@ (8001ad0 <ServoRoutine+0x278>)
 8001a36:	f00f fdad 	bl	8011594 <sniprintf>
				SD_LogMsg(msg_buffer);
 8001a3a:	4825      	ldr	r0, [pc, #148]	@ (8001ad0 <ServoRoutine+0x278>)
 8001a3c:	f002 fa04 	bl	8003e48 <SD_LogMsg>

				status = Screen_UpdateStatus(((servo->servo_line == 0x00) ? SERVO_0: SERVO_1), per_state->last_code);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	791b      	ldrb	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <ServoRoutine+0x1f4>
 8001a48:	2201      	movs	r2, #1
 8001a4a:	e000      	b.n	8001a4e <ServoRoutine+0x1f6>
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	789b      	ldrb	r3, [r3, #2]
 8001a52:	4619      	mov	r1, r3
 8001a54:	4610      	mov	r0, r2
 8001a56:	f001 fce7 	bl	8003428 <Screen_UpdateStatus>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	75bb      	strb	r3, [r7, #22]
				return;
 8001a5e:	e02f      	b.n	8001ac0 <ServoRoutine+0x268>
			}
			else if ( per_state->cmd == COM_SERVO_READ_TEMP )
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d12a      	bne.n	8001abe <ServoRoutine+0x266>
			{
				uint8_t temp;
				ReturnCode status = ServoTemp(servo->servo_line, &temp);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	791b      	ldrb	r3, [r3, #4]
 8001a6c:	f107 020f 	add.w	r2, r7, #15
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 f84c 	bl	8003b10 <ServoTemp>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	75fb      	strb	r3, [r7, #23]

				PeripheralUpdateState(servo->state, status);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	7dfa      	ldrb	r2, [r7, #23]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fbd7 	bl	8004238 <PeripheralUpdateState>
				status = TransmitResponse(status, &temp, 1, COM_SERVO_READ_TEMP);
 8001a8a:	f107 010f 	add.w	r1, r7, #15
 8001a8e:	7df8      	ldrb	r0, [r7, #23]
 8001a90:	2303      	movs	r3, #3
 8001a92:	2201      	movs	r2, #1
 8001a94:	f7ff fe00 	bl	8001698 <TransmitResponse>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	75fb      	strb	r3, [r7, #23]

				// Log
				snprintf(msg_buffer, sizeof(msg_buffer), "S%02d temp: %d\n", (uint8_t) servo->servo_line, temp);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	791b      	ldrb	r3, [r3, #4]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8001adc <ServoRoutine+0x284>)
 8001aaa:	2120      	movs	r1, #32
 8001aac:	4808      	ldr	r0, [pc, #32]	@ (8001ad0 <ServoRoutine+0x278>)
 8001aae:	f00f fd71 	bl	8011594 <sniprintf>
				status = SD_LogMsg(msg_buffer);
 8001ab2:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <ServoRoutine+0x278>)
 8001ab4:	f002 f9c8 	bl	8003e48 <SD_LogMsg>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	75fb      	strb	r3, [r7, #23]
 8001abc:	e000      	b.n	8001ac0 <ServoRoutine+0x268>

				return;
			}
		}
		default:
			return;
 8001abe:	bf00      	nop
	}
	return;
}
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200003a8 	.word	0x200003a8
 8001acc:	08014ec8 	.word	0x08014ec8
 8001ad0:	200003d0 	.word	0x200003d0
 8001ad4:	08014edc 	.word	0x08014edc
 8001ad8:	08014eec 	.word	0x08014eec
 8001adc:	08014f00 	.word	0x08014f00

08001ae0 <AccelometerPrepareTransmitData>:

void AccelometerPrepareTransmitData(accelometer* acc, uint8_t* data)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	@ 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
	for( uint8_t i = 0; i<3; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	77fb      	strb	r3, [r7, #31]
 8001aee:	e05b      	b.n	8001ba8 <AccelometerPrepareTransmitData+0xc8>
	{
		float angle = *(acc->angles + i);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	7ffb      	ldrb	r3, [r7, #31]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
		float temp;
		if(angle < 0)
 8001afe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	d517      	bpl.n	8001b3c <AccelometerPrepareTransmitData+0x5c>
		{
			angle = -angle;
 8001b0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b10:	eef1 7a67 	vneg.f32	s15, s15
 8001b14:	edc7 7a06 	vstr	s15, [r7, #24]
			*(data + 2*i + 1) = ((uint8_t) angle) | (0x01 << 7);
 8001b18:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b20:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b24:	793b      	ldrb	r3, [r7, #4]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	7ffb      	ldrb	r3, [r7, #31]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	440b      	add	r3, r1
 8001b32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e00d      	b.n	8001b58 <AccelometerPrepareTransmitData+0x78>
		}
		else
		{
			*(data + 2*i + 1) = ((uint8_t) angle);
 8001b3c:	7ffb      	ldrb	r3, [r7, #31]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	3301      	adds	r3, #1
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	4413      	add	r3, r2
 8001b46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b4e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b52:	793a      	ldrb	r2, [r7, #4]
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	701a      	strb	r2, [r3, #0]
		}

		temp = angle * 100 - ((int) angle) * 100;
 8001b58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b5c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001bbc <AccelometerPrepareTransmitData+0xdc>
 8001b60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6c:	ee17 2a90 	vmov	r2, s15
 8001b70:	2364      	movs	r3, #100	@ 0x64
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b82:	edc7 7a05 	vstr	s15, [r7, #20]
		*(data + 2*i) = (uint8_t) temp;
 8001b86:	7ffb      	ldrb	r3, [r7, #31]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4413      	add	r3, r2
 8001b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b98:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b9c:	793a      	ldrb	r2, [r7, #4]
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]
	for( uint8_t i = 0; i<3; i++)
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]
 8001ba8:	7ffb      	ldrb	r3, [r7, #31]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d9a0      	bls.n	8001af0 <AccelometerPrepareTransmitData+0x10>
	}
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	3724      	adds	r7, #36	@ 0x24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	42c80000 	.word	0x42c80000

08001bc0 <AccelometerRoutine>:

void AccelometerRoutine(accelometer* acc)
{
 8001bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc4:	b08d      	sub	sp, #52	@ 0x34
 8001bc6:	af06      	add	r7, sp, #24
 8001bc8:	6078      	str	r0, [r7, #4]
	peripheral_state *per_state = acc->state;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	617b      	str	r3, [r7, #20]

	switch( per_state->state )
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	f200 80c0 	bhi.w	8001d5a <AccelometerRoutine+0x19a>
 8001bda:	a201      	add	r2, pc, #4	@ (adr r2, 8001be0 <AccelometerRoutine+0x20>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001d5b 	.word	0x08001d5b
 8001be4:	08001c0d 	.word	0x08001c0d
 8001be8:	08001c1b 	.word	0x08001c1b
 8001bec:	08001d5b 	.word	0x08001d5b
 8001bf0:	08001bf5 	.word	0x08001bf5
			return;

		case PER_ERROR:
		{
			// Log error
			per_state->state = PER_IDLE;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	705a      	strb	r2, [r3, #1]
			per_state->cmd = COM_IDLE;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
			SD_LogStatus(per_state->last_code);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	789b      	ldrb	r3, [r3, #2]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 f891 	bl	8003d2c <SD_LogStatus>
			return;
 8001c0a:	e0a7      	b.n	8001d5c <AccelometerRoutine+0x19c>
		}

		case PER_DONE:
		{
			// Log success
			per_state->state = PER_IDLE;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	705a      	strb	r2, [r3, #1]
			per_state->cmd = COM_IDLE;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

			return;
 8001c18:	e0a0      	b.n	8001d5c <AccelometerRoutine+0x19c>
		}

		case PER_WORKING:
		{
			if( per_state->cmd == COM_ACC_ANGLES_READ )
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d174      	bne.n	8001d0c <AccelometerRoutine+0x14c>
			{

				ReturnCode status = Acc_AvgMeasurment(acc->raw_measurement, 32, acc->acc_line);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6858      	ldr	r0, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7a1b      	ldrb	r3, [r3, #8]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2120      	movs	r1, #32
 8001c2e:	f001 f871 	bl	8002d14 <Acc_AvgMeasurment>
 8001c32:	4603      	mov	r3, r0
 8001c34:	74bb      	strb	r3, [r7, #18]
				if(status != G_SUCCESS)
 8001c36:	7cbb      	ldrb	r3, [r7, #18]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d00d      	beq.n	8001c58 <AccelometerRoutine+0x98>
				{
					PeripheralUpdateState(per_state, status);
 8001c3c:	7cbb      	ldrb	r3, [r7, #18]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6978      	ldr	r0, [r7, #20]
 8001c42:	f002 faf9 	bl	8004238 <PeripheralUpdateState>
					status = TransmitResponse(status, NULL, 0, COM_ACC_ANGLES_READ);
 8001c46:	7cb8      	ldrb	r0, [r7, #18]
 8001c48:	2305      	movs	r3, #5
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f7ff fd23 	bl	8001698 <TransmitResponse>
 8001c52:	4603      	mov	r3, r0
 8001c54:	74bb      	strb	r3, [r7, #18]

					return;
 8001c56:	e081      	b.n	8001d5c <AccelometerRoutine+0x19c>

				}

				// Calculate angles
				GetTiltAngles(acc->angles, acc->raw_measurement);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f002 fbce 	bl	8004404 <GetTiltAngles>

				uint8_t data[6];
				AccelometerPrepareTransmitData(acc, data);
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff36 	bl	8001ae0 <AccelometerPrepareTransmitData>
				PeripheralUpdateState(per_state, status);
 8001c74:	7cbb      	ldrb	r3, [r7, #18]
 8001c76:	4619      	mov	r1, r3
 8001c78:	6978      	ldr	r0, [r7, #20]
 8001c7a:	f002 fadd 	bl	8004238 <PeripheralUpdateState>

				status = TransmitResponse(status, data, 6, COM_ACC_ANGLES_READ);
 8001c7e:	f107 010c 	add.w	r1, r7, #12
 8001c82:	7cb8      	ldrb	r0, [r7, #18]
 8001c84:	2305      	movs	r3, #5
 8001c86:	2206      	movs	r2, #6
 8001c88:	f7ff fd06 	bl	8001698 <TransmitResponse>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	74bb      	strb	r3, [r7, #18]

				// Log
				snprintf(msg_buffer, sizeof(msg_buffer), "A%02d: %2.2f %2.2f %2.2f\n", acc->acc_line, *(acc->angles), *(acc->angles + 1), *(acc->angles + 2));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7a1b      	ldrb	r3, [r3, #8]
 8001c94:	461e      	mov	r6, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc73 	bl	8000588 <__aeabi_f2d>
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3304      	adds	r3, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc6a 	bl	8000588 <__aeabi_f2d>
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	4689      	mov	r9, r1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc61 	bl	8000588 <__aeabi_f2d>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001cd2:	e9cd 4500 	strd	r4, r5, [sp]
 8001cd6:	4633      	mov	r3, r6
 8001cd8:	4a22      	ldr	r2, [pc, #136]	@ (8001d64 <AccelometerRoutine+0x1a4>)
 8001cda:	2120      	movs	r1, #32
 8001cdc:	4822      	ldr	r0, [pc, #136]	@ (8001d68 <AccelometerRoutine+0x1a8>)
 8001cde:	f00f fc59 	bl	8011594 <sniprintf>
				status = SD_LogMsg(msg_buffer);
 8001ce2:	4821      	ldr	r0, [pc, #132]	@ (8001d68 <AccelometerRoutine+0x1a8>)
 8001ce4:	f002 f8b0 	bl	8003e48 <SD_LogMsg>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	74bb      	strb	r3, [r7, #18]

				status = Screen_UpdateData((acc->acc_line == 0x00 ? ACC_0 : ACC_1) , acc->angles, 3);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7a1b      	ldrb	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <AccelometerRoutine+0x138>
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	e000      	b.n	8001cfa <AccelometerRoutine+0x13a>
 8001cf8:	2004      	movs	r0, #4
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2203      	movs	r2, #3
 8001d00:	4619      	mov	r1, r3
 8001d02:	f001 fc15 	bl	8003530 <Screen_UpdateData>
 8001d06:	4603      	mov	r3, r0
 8001d08:	74bb      	strb	r3, [r7, #18]
				return;
 8001d0a:	e027      	b.n	8001d5c <AccelometerRoutine+0x19c>
			}
			else if ( per_state->cmd == COM_ACC_STATUS)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d122      	bne.n	8001d5a <AccelometerRoutine+0x19a>
			{
				ReturnCode status ;

				status = TransmitResponse(status, NULL, 0, COM_ACC_STATUS);
 8001d14:	7cf8      	ldrb	r0, [r7, #19]
 8001d16:	2306      	movs	r3, #6
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	f7ff fcbc 	bl	8001698 <TransmitResponse>
 8001d20:	4603      	mov	r3, r0
 8001d22:	74fb      	strb	r3, [r7, #19]
				PeripheralUpdateState(per_state, G_SUCCESS);
 8001d24:	2101      	movs	r1, #1
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f002 fa86 	bl	8004238 <PeripheralUpdateState>

				// Log
				status = SD_LogStatus(per_state->last_code);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	789b      	ldrb	r3, [r3, #2]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fffb 	bl	8003d2c <SD_LogStatus>
 8001d36:	4603      	mov	r3, r0
 8001d38:	74fb      	strb	r3, [r7, #19]

				status = Screen_UpdateStatus((acc->acc_line == 0x00 ? ACC_0 : ACC_1) , per_state->last_code);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	7a1b      	ldrb	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <AccelometerRoutine+0x186>
 8001d42:	2203      	movs	r2, #3
 8001d44:	e000      	b.n	8001d48 <AccelometerRoutine+0x188>
 8001d46:	2204      	movs	r2, #4
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	789b      	ldrb	r3, [r3, #2]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f001 fb6a 	bl	8003428 <Screen_UpdateStatus>
 8001d54:	4603      	mov	r3, r0
 8001d56:	74fb      	strb	r3, [r7, #19]
				return;
 8001d58:	e000      	b.n	8001d5c <AccelometerRoutine+0x19c>
			}
		}

		default:
			return;
 8001d5a:	bf00      	nop
	}
	return;
}
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d64:	08014f10 	.word	0x08014f10
 8001d68:	200003d0 	.word	0x200003d0

08001d6c <CAN_Config>:

ReturnCode CAN_Config()
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
	// Init
	can0 = &Can0;
 8001d70:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <CAN_Config+0x5c>)
 8001d72:	4a16      	ldr	r2, [pc, #88]	@ (8001dcc <CAN_Config+0x60>)
 8001d74:	601a      	str	r2, [r3, #0]
	Can_struct.state = can0;
 8001d76:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <CAN_Config+0x5c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a15      	ldr	r2, [pc, #84]	@ (8001dd0 <CAN_Config+0x64>)
 8001d7c:	60d3      	str	r3, [r2, #12]
	Can_struct.tx_buffer = can_tx_buffer;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <CAN_Config+0x64>)
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <CAN_Config+0x68>)
 8001d82:	605a      	str	r2, [r3, #4]
	Can_struct.rx_buffer = can_rx_buffer;
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <CAN_Config+0x64>)
 8001d86:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <CAN_Config+0x6c>)
 8001d88:	609a      	str	r2, [r3, #8]

	can0_struct = &Can_struct;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <CAN_Config+0x70>)
 8001d8c:	4a10      	ldr	r2, [pc, #64]	@ (8001dd0 <CAN_Config+0x64>)
 8001d8e:	601a      	str	r2, [r3, #0]


	// Define filter
	can0_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <CAN_Config+0x74>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	621a      	str	r2, [r3, #32]
	can0_filter.FilterBank = 0x00;
 8001d96:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <CAN_Config+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
	can0_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <CAN_Config+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
	can0_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <CAN_Config+0x74>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	61da      	str	r2, [r3, #28]
	can0_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001da8:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <CAN_Config+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
	can0_filter.FilterMaskIdHigh = 0x00;
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <CAN_Config+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
	can0_filter.FilterMaskIdLow = 0x00;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <CAN_Config+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]

	// Add interrupt on msg received
	if( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
		return C_CAN_CONFIG;
	*/
	return G_SUCCESS;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000398 	.word	0x20000398
 8001dcc:	20000384 	.word	0x20000384
 8001dd0:	20000300 	.word	0x20000300
 8001dd4:	200003c0 	.word	0x200003c0
 8001dd8:	200003c8 	.word	0x200003c8
 8001ddc:	20000310 	.word	0x20000310
 8001de0:	2000034c 	.word	0x2000034c

08001de4 <CAN_ConfigMsg>:



void CAN_ConfigMsg(CAN_TxHeaderTypeDef *header, can* can, uint8_t is_response, COM_COMMAND cmd)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	460b      	mov	r3, r1
 8001df4:	71fb      	strb	r3, [r7, #7]
 8001df6:	4613      	mov	r3, r2
 8001df8:	71bb      	strb	r3, [r7, #6]
	// Get proper identifier
	header->StdId =  ((can->weight) << 8) | (can->receiver_id);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	7852      	ldrb	r2, [r2, #1]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	601a      	str	r2, [r3, #0]

	if (is_response == 0x00)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10a      	bne.n	8001e28 <CAN_ConfigMsg+0x44>
	{
		// Get data length
		switch(cmd)
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d103      	bne.n	8001e20 <CAN_ConfigMsg+0x3c>
		{
			case COM_SERVO_POS_SET:
				header->DLC = 8;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	611a      	str	r2, [r3, #16]
				break;
 8001e1e:	e015      	b.n	8001e4c <CAN_ConfigMsg+0x68>
			default:
				header->DLC = 2;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2202      	movs	r2, #2
 8001e24:	611a      	str	r2, [r3, #16]
				break;
 8001e26:	e011      	b.n	8001e4c <CAN_ConfigMsg+0x68>
		}
	}
	else
	{
		// Get data length
		switch(cmd)
 8001e28:	79bb      	ldrb	r3, [r7, #6]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d002      	beq.n	8001e34 <CAN_ConfigMsg+0x50>
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d004      	beq.n	8001e3c <CAN_ConfigMsg+0x58>
 8001e32:	e007      	b.n	8001e44 <CAN_ConfigMsg+0x60>
		{
			case COM_SERVO_POS_SET:
				header->DLC = 3;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2203      	movs	r2, #3
 8001e38:	611a      	str	r2, [r3, #16]
				break;
 8001e3a:	e007      	b.n	8001e4c <CAN_ConfigMsg+0x68>
			case COM_ACC_ANGLES_READ:
				header->DLC = 7;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2207      	movs	r2, #7
 8001e40:	611a      	str	r2, [r3, #16]
				break;
 8001e42:	e003      	b.n	8001e4c <CAN_ConfigMsg+0x68>
			default:
				header->DLC = 2;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2202      	movs	r2, #2
 8001e48:	611a      	str	r2, [r3, #16]
				break;
 8001e4a:	bf00      	nop
		}
	}


	header->RTR = CAN_RTR_DATA;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <CAN_TransmitResponse>:

ReturnCode CAN_TransmitResponse(ReturnCode status, uint8_t *data, uint8_t bytes, COM_COMMAND cmd)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6039      	str	r1, [r7, #0]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	460b      	mov	r3, r1
 8001e72:	71bb      	strb	r3, [r7, #6]
 8001e74:	4613      	mov	r3, r2
 8001e76:	717b      	strb	r3, [r7, #5]
	if (bytes > 7)
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	2b07      	cmp	r3, #7
 8001e7c:	d901      	bls.n	8001e82 <CAN_TransmitResponse+0x22>
		return C_CAN_OVERFLOW;
 8001e7e:	2313      	movs	r3, #19
 8001e80:	e032      	b.n	8001ee8 <CAN_TransmitResponse+0x88>

	can0_struct->weight = CAN_WRITE;
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <CAN_TransmitResponse+0x90>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2205      	movs	r2, #5
 8001e88:	701a      	strb	r2, [r3, #0]
	*(can0_struct->tx_buffer) = cmd;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <CAN_TransmitResponse+0x90>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	797a      	ldrb	r2, [r7, #5]
 8001e92:	701a      	strb	r2, [r3, #0]
	CAN_ConfigMsg(&tx_header, can0_struct, 0x01, cmd);
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <CAN_TransmitResponse+0x90>)
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	797b      	ldrb	r3, [r7, #5]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4815      	ldr	r0, [pc, #84]	@ (8001ef4 <CAN_TransmitResponse+0x94>)
 8001e9e:	f7ff ffa1 	bl	8001de4 <CAN_ConfigMsg>

	for(uint8_t i = 0; i < bytes; i++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	e00d      	b.n	8001ec4 <CAN_TransmitResponse+0x64>
	{
		*(can0_struct->tx_buffer + i + 1) = *(data + i);
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	441a      	add	r2, r3
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <CAN_TransmitResponse+0x90>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	440b      	add	r3, r1
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < bytes; i++)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3ed      	bcc.n	8001ea8 <CAN_TransmitResponse+0x48>
	}

	if ( HAL_CAN_AddTxMessage(&hcan1, &tx_header, can0_struct->tx_buffer, &tx_mail) != HAL_OK)
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <CAN_TransmitResponse+0x90>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <CAN_TransmitResponse+0x98>)
 8001ed4:	4907      	ldr	r1, [pc, #28]	@ (8001ef4 <CAN_TransmitResponse+0x94>)
 8001ed6:	4809      	ldr	r0, [pc, #36]	@ (8001efc <CAN_TransmitResponse+0x9c>)
 8001ed8:	f003 fb8c 	bl	80055f4 <HAL_CAN_AddTxMessage>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <CAN_TransmitResponse+0x86>
		return C_CAN_TXADD;
 8001ee2:	2312      	movs	r3, #18
 8001ee4:	e000      	b.n	8001ee8 <CAN_TransmitResponse+0x88>

	return G_SUCCESS;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000310 	.word	0x20000310
 8001ef4:	20000314 	.word	0x20000314
 8001ef8:	20000348 	.word	0x20000348
 8001efc:	20000248 	.word	0x20000248

08001f00 <CANRoutine>:

void CANRoutine(can* can)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	peripheral_state *per_state = can->state;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	613b      	str	r3, [r7, #16]

	switch( per_state->state )
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	f200 808c 	bhi.w	8002030 <CANRoutine+0x130>
 8001f18:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <CANRoutine+0x20>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	08002031 	.word	0x08002031
 8001f24:	08001f4d 	.word	0x08001f4d
 8001f28:	08001f5b 	.word	0x08001f5b
 8001f2c:	08001fb1 	.word	0x08001fb1
 8001f30:	08001f35 	.word	0x08001f35
			return;

		case PER_ERROR:
		{
			// Log error
			per_state->state = PER_IDLE;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2200      	movs	r2, #0
 8001f38:	705a      	strb	r2, [r3, #1]
			per_state->cmd = COM_IDLE;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
			SD_LogStatus(per_state->last_code);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	789b      	ldrb	r3, [r3, #2]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 fef1 	bl	8003d2c <SD_LogStatus>
			return;
 8001f4a:	e074      	b.n	8002036 <CANRoutine+0x136>
		}
		case PER_DONE:
		{
			// Log success
			per_state->state = PER_IDLE;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	705a      	strb	r2, [r3, #1]
			per_state->cmd = COM_IDLE;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]

			return;
 8001f58:	e06d      	b.n	8002036 <CANRoutine+0x136>
		}
		case PER_WORKING:
		{

			CAN_ConfigMsg(&tx_header, can, 0x00, (per_state->cmd));
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4836      	ldr	r0, [pc, #216]	@ (800203c <CANRoutine+0x13c>)
 8001f64:	f7ff ff3e 	bl	8001de4 <CAN_ConfigMsg>

			// Add new message
			if ( HAL_CAN_AddTxMessage(&hcan1, &tx_header, can->tx_buffer, &tx_mail) != HAL_OK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <CANRoutine+0x140>)
 8001f6e:	4933      	ldr	r1, [pc, #204]	@ (800203c <CANRoutine+0x13c>)
 8001f70:	4834      	ldr	r0, [pc, #208]	@ (8002044 <CANRoutine+0x144>)
 8001f72:	f003 fb3f 	bl	80055f4 <HAL_CAN_AddTxMessage>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <CANRoutine+0x88>
				PeripheralUpdateState(can->state, C_CAN_TXADD);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2112      	movs	r1, #18
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 f958 	bl	8004238 <PeripheralUpdateState>

			// Log
			snprintf(msg_buffer, sizeof(msg_buffer), "CAN transmit: %d\n", can->state->cmd);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002048 <CANRoutine+0x148>)
 8001f90:	2120      	movs	r1, #32
 8001f92:	482e      	ldr	r0, [pc, #184]	@ (800204c <CANRoutine+0x14c>)
 8001f94:	f00f fafe 	bl	8011594 <sniprintf>
			ReturnCode status = SD_LogMsg(msg_buffer);
 8001f98:	482c      	ldr	r0, [pc, #176]	@ (800204c <CANRoutine+0x14c>)
 8001f9a:	f001 ff55 	bl	8003e48 <SD_LogMsg>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	73fb      	strb	r3, [r7, #15]

			can->finished_trans = 0x00;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	709a      	strb	r2, [r3, #2]
			per_state->state = PER_WAITING;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2203      	movs	r2, #3
 8001fac:	705a      	strb	r2, [r3, #1]
			return;
 8001fae:	e042      	b.n	8002036 <CANRoutine+0x136>
		}
		case PER_WAITING:
		{
			// Wait for response from other module
			if (can->finished_trans == 0x00)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	789b      	ldrb	r3, [r3, #2]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d03d      	beq.n	8002034 <CANRoutine+0x134>
				return;

			// If there was an error return status
			if(per_state->last_code != G_SUCCESS)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	789b      	ldrb	r3, [r3, #2]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d006      	beq.n	8001fce <CANRoutine+0xce>
				COM_TransmitResponse(per_state->last_code, NULL, 0);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	789b      	ldrb	r3, [r3, #2]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fb8b 	bl	80016e4 <COM_TransmitResponse>

			// If operation was successful sent results
			uint8_t number_bytes = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]
			switch( *(can->rx_buffer))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d00b      	beq.n	8001ff4 <CANRoutine+0xf4>
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	dc0c      	bgt.n	8001ffa <CANRoutine+0xfa>
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d004      	beq.n	8001fee <CANRoutine+0xee>
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d108      	bne.n	8001ffa <CANRoutine+0xfa>
			{
				case COM_SERVO_READ_TEMP:
					number_bytes = 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	75fb      	strb	r3, [r7, #23]
					break;
 8001fec:	e008      	b.n	8002000 <CANRoutine+0x100>
				case COM_SERVO_POS_READ:
					number_bytes = 2;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	75fb      	strb	r3, [r7, #23]
					break;
 8001ff2:	e005      	b.n	8002000 <CANRoutine+0x100>
				case COM_ACC_ANGLES_READ:
					number_bytes = 6;
 8001ff4:	2306      	movs	r3, #6
 8001ff6:	75fb      	strb	r3, [r7, #23]
					break;
 8001ff8:	e002      	b.n	8002000 <CANRoutine+0x100>
				default:
					number_bytes = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
					break;
 8001ffe:	bf00      	nop
			}

			if (number_bytes == 0)
 8002000:	7dfb      	ldrb	r3, [r7, #23]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <CANRoutine+0x116>
				COM_TransmitResponse(per_state->last_code, NULL, 0);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	789b      	ldrb	r3, [r3, #2]
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fb68 	bl	80016e4 <COM_TransmitResponse>
 8002014:	e008      	b.n	8002028 <CANRoutine+0x128>
			else
				COM_TransmitResponse(per_state->last_code, (can->rx_buffer + 1), number_bytes);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	7898      	ldrb	r0, [r3, #2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	3301      	adds	r3, #1
 8002020:	7dfa      	ldrb	r2, [r7, #23]
 8002022:	4619      	mov	r1, r3
 8002024:	f7ff fb5e 	bl	80016e4 <COM_TransmitResponse>

			// Update state
			PeripheralUpdateState(per_state, G_SUCCESS);
 8002028:	2101      	movs	r1, #1
 800202a:	6938      	ldr	r0, [r7, #16]
 800202c:	f002 f904 	bl	8004238 <PeripheralUpdateState>

		}
		default:
			return;
 8002030:	bf00      	nop
 8002032:	e000      	b.n	8002036 <CANRoutine+0x136>
				return;
 8002034:	bf00      	nop
	}
	return;
}
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000314 	.word	0x20000314
 8002040:	20000348 	.word	0x20000348
 8002044:	20000248 	.word	0x20000248
 8002048:	08014f2c 	.word	0x08014f2c
 800204c:	200003d0 	.word	0x200003d0

08002050 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	if( huart == &huart2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a11      	ldr	r2, [pc, #68]	@ (80020a0 <HAL_UART_RxCpltCallback+0x50>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d11b      	bne.n	8002098 <HAL_UART_RxCpltCallback+0x48>
	{
		// First messege wasn't received yet
		if(header_received == 0x00)
 8002060:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_UART_RxCpltCallback+0x54>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10c      	bne.n	8002082 <HAL_UART_RxCpltCallback+0x32>
		{
			HAL_UART_Receive_DMA(&huart2, rx_buffer_DMA + 1, rx_buffer_DMA[0] - 1);
 8002068:	490f      	ldr	r1, [pc, #60]	@ (80020a8 <HAL_UART_RxCpltCallback+0x58>)
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <HAL_UART_RxCpltCallback+0x5c>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	3b01      	subs	r3, #1
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	480a      	ldr	r0, [pc, #40]	@ (80020a0 <HAL_UART_RxCpltCallback+0x50>)
 8002076:	f009 f8ab 	bl	800b1d0 <HAL_UART_Receive_DMA>
			header_received = 0x01;
 800207a:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_UART_RxCpltCallback+0x54>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_DMA(&huart2, rx_buffer_DMA, 1);
			header_received = 0x00;
		}
	}
}
 8002080:	e00a      	b.n	8002098 <HAL_UART_RxCpltCallback+0x48>
			UART_Decode(rx_buffer_DMA);
 8002082:	480a      	ldr	r0, [pc, #40]	@ (80020ac <HAL_UART_RxCpltCallback+0x5c>)
 8002084:	f002 f87a 	bl	800417c <UART_Decode>
			HAL_UART_Receive_DMA(&huart2, rx_buffer_DMA, 1);
 8002088:	2201      	movs	r2, #1
 800208a:	4908      	ldr	r1, [pc, #32]	@ (80020ac <HAL_UART_RxCpltCallback+0x5c>)
 800208c:	4804      	ldr	r0, [pc, #16]	@ (80020a0 <HAL_UART_RxCpltCallback+0x50>)
 800208e:	f009 f89f 	bl	800b1d0 <HAL_UART_Receive_DMA>
			header_received = 0x00;
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <HAL_UART_RxCpltCallback+0x54>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000538 	.word	0x20000538
 80020a4:	200002de 	.word	0x200002de
 80020a8:	200002d5 	.word	0x200002d5
 80020ac:	200002d4 	.word	0x200002d4

080020b0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_UART_TxCpltCallback+0x38>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d10f      	bne.n	80020e0 <HAL_UART_TxCpltCallback+0x30>
	{
		if(header_sent == 0x01)
 80020c0:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_UART_TxCpltCallback+0x3c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d10b      	bne.n	80020e0 <HAL_UART_TxCpltCallback+0x30>
		{
			header_sent = 0x00;
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <HAL_UART_TxCpltCallback+0x3c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, tx_buffer_DMA + 1, tx_buffer_DMA[0] - 1);
 80020ce:	4908      	ldr	r1, [pc, #32]	@ (80020f0 <HAL_UART_TxCpltCallback+0x40>)
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <HAL_UART_TxCpltCallback+0x44>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4803      	ldr	r0, [pc, #12]	@ (80020e8 <HAL_UART_TxCpltCallback+0x38>)
 80020dc:	f009 f808 	bl	800b0f0 <HAL_UART_Transmit_DMA>
		}
	}
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000538 	.word	0x20000538
 80020ec:	200002df 	.word	0x200002df
 80020f0:	200002c9 	.word	0x200002c9
 80020f4:	200002c8 	.word	0x200002c8

080020f8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	if( HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, (can0_struct->rx_buffer)) != HAL_OK)
 8002100:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4a32      	ldr	r2, [pc, #200]	@ (80021d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8002108:	2100      	movs	r1, #0
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f003 fb42 	bl	8005794 <HAL_CAN_GetRxMessage>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
	{
		PeripheralUpdateState(can0, C_CAN_READ);
 8002116:	4b2f      	ldr	r3, [pc, #188]	@ (80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2115      	movs	r1, #21
 800211c:	4618      	mov	r0, r3
 800211e:	f002 f88b 	bl	8004238 <PeripheralUpdateState>
		return;
 8002122:	e050      	b.n	80021c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
	}

	if (module_role == MODULE_CONTROLLER)
 8002124:	4b2c      	ldr	r3, [pc, #176]	@ (80021d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d11a      	bne.n	8002162 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	{
		if ( can0->cmd != *(can0_struct->rx_buffer))
 800212c:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	4b26      	ldr	r3, [pc, #152]	@ (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d006      	beq.n	800214c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		{
			PeripheralUpdateState(can0, C_CAN_READ);
 800213e:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2115      	movs	r1, #21
 8002144:	4618      	mov	r0, r3
 8002146:	f002 f877 	bl	8004238 <PeripheralUpdateState>
			return;
 800214a:	e03c      	b.n	80021c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
		}

		PeripheralUpdateState(can0, G_SUCCESS);
 800214c:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f002 f870 	bl	8004238 <PeripheralUpdateState>
		can0_struct->finished_trans = 0x01;
 8002158:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	709a      	strb	r2, [r3, #2]
 8002160:	e031      	b.n	80021c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
	}
	else
	{
		if( (rx_header.StdId & 0x0F) != module_id)
 8002162:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	4293      	cmp	r3, r2
 8002170:	d006      	beq.n	8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
		{
			PeripheralUpdateState(can0, C_CAN_READ);
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2115      	movs	r1, #21
 8002178:	4618      	mov	r0, r3
 800217a:	f002 f85d 	bl	8004238 <PeripheralUpdateState>
			return;
 800217e:	e022      	b.n	80021c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
		}

		ReturnCode code = CAN_Decode(can0_struct->rx_buffer, rx_header.DLC - 1);
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f002 f834 	bl	8004200 <CAN_Decode>
 8002198:	4603      	mov	r3, r0
 800219a:	73fb      	strb	r3, [r7, #15]
		if (code != G_SUCCESS)
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d007      	beq.n	80021b2 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
		{
			// Error handling
			PeripheralUpdateState(can0, code);
 80021a2:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 f844 	bl	8004238 <PeripheralUpdateState>
			return;
 80021b0:	e009      	b.n	80021c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
		}

		PeripheralUpdateState(can0, G_SUCCESS);
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 f83d 	bl	8004238 <PeripheralUpdateState>
		can0_struct->finished_trans = 0x01;
 80021be:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	709a      	strb	r2, [r3, #2]
	}
}
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000310 	.word	0x20000310
 80021d0:	2000032c 	.word	0x2000032c
 80021d4:	20000398 	.word	0x20000398
 80021d8:	200002c4 	.word	0x200002c4
 80021dc:	20000000 	.word	0x20000000

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <Error_Handler+0x8>

080021ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b090      	sub	sp, #64	@ 0x40
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80021f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002202:	2300      	movs	r3, #0
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002206:	463b      	mov	r3, r7
 8002208:	2228      	movs	r2, #40	@ 0x28
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f00f fa58 	bl	80116c2 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002212:	4b3b      	ldr	r3, [pc, #236]	@ (8002300 <MX_RTC_Init+0x114>)
 8002214:	4a3b      	ldr	r2, [pc, #236]	@ (8002304 <MX_RTC_Init+0x118>)
 8002216:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002218:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <MX_RTC_Init+0x114>)
 800221a:	2200      	movs	r2, #0
 800221c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800221e:	4b38      	ldr	r3, [pc, #224]	@ (8002300 <MX_RTC_Init+0x114>)
 8002220:	227f      	movs	r2, #127	@ 0x7f
 8002222:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002224:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <MX_RTC_Init+0x114>)
 8002226:	22ff      	movs	r2, #255	@ 0xff
 8002228:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800222a:	4b35      	ldr	r3, [pc, #212]	@ (8002300 <MX_RTC_Init+0x114>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002230:	4b33      	ldr	r3, [pc, #204]	@ (8002300 <MX_RTC_Init+0x114>)
 8002232:	2200      	movs	r2, #0
 8002234:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002236:	4b32      	ldr	r3, [pc, #200]	@ (8002300 <MX_RTC_Init+0x114>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800223c:	4830      	ldr	r0, [pc, #192]	@ (8002300 <MX_RTC_Init+0x114>)
 800223e:	f006 fe21 	bl	8008e84 <HAL_RTC_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002248:	f7ff ffca 	bl	80021e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 800224c:	2323      	movs	r3, #35	@ 0x23
 800224e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002258:	2300      	movs	r3, #0
 800225a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800225e:	2300      	movs	r3, #0
 8002260:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002266:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800226a:	2201      	movs	r2, #1
 800226c:	4619      	mov	r1, r3
 800226e:	4824      	ldr	r0, [pc, #144]	@ (8002300 <MX_RTC_Init+0x114>)
 8002270:	f006 fe8b 	bl	8008f8a <HAL_RTC_SetTime>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800227a:	f7ff ffb1 	bl	80021e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800227e:	2301      	movs	r3, #1
 8002280:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x25;
 8002290:	2325      	movs	r3, #37	@ 0x25
 8002292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002296:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800229a:	2201      	movs	r2, #1
 800229c:	4619      	mov	r1, r3
 800229e:	4818      	ldr	r0, [pc, #96]	@ (8002300 <MX_RTC_Init+0x114>)
 80022a0:	f006 ff6b 	bl	800917a <HAL_RTC_SetDate>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80022aa:	f7ff ff99 	bl	80021e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x23;
 80022ae:	2323      	movs	r3, #35	@ 0x23
 80022b0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x59;
 80022b2:	2359      	movs	r3, #89	@ 0x59
 80022b4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x59;
 80022b6:	2359      	movs	r3, #89	@ 0x59
 80022b8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80022c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80022ca:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80022da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022e0:	463b      	mov	r3, r7
 80022e2:	2201      	movs	r2, #1
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	@ (8002300 <MX_RTC_Init+0x114>)
 80022e8:	f007 f81a 	bl	8009320 <HAL_RTC_SetAlarm>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80022f2:	f7ff ff75 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	3740      	adds	r7, #64	@ 0x40
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200003f0 	.word	0x200003f0
 8002304:	40002800 	.word	0x40002800

08002308 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b09a      	sub	sp, #104	@ 0x68
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	225c      	movs	r2, #92	@ 0x5c
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f00f f9d2 	bl	80116c2 <memset>
  if(rtcHandle->Instance==RTC)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <HAL_RTC_MspInit+0x4c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d111      	bne.n	800234c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002328:	2320      	movs	r3, #32
 800232a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800232c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002330:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	4618      	mov	r0, r3
 8002338:	f005 fdac 	bl	8007e94 <HAL_RCCEx_PeriphCLKConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002342:	f7ff ff4d 	bl	80021e0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002346:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <HAL_RTC_MspInit+0x50>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800234c:	bf00      	nop
 800234e:	3768      	adds	r7, #104	@ 0x68
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40002800 	.word	0x40002800
 8002358:	42470e3c 	.word	0x42470e3c

0800235c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <MX_SDIO_SD_Init+0x38>)
 8002362:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <MX_SDIO_SD_Init+0x3c>)
 8002364:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002366:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <MX_SDIO_SD_Init+0x38>)
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <MX_SDIO_SD_Init+0x38>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002372:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <MX_SDIO_SD_Init+0x38>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <MX_SDIO_SD_Init+0x38>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800237e:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <MX_SDIO_SD_Init+0x38>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8002384:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <MX_SDIO_SD_Init+0x38>)
 8002386:	2202      	movs	r2, #2
 8002388:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	20000410 	.word	0x20000410
 8002398:	40012c00 	.word	0x40012c00

0800239c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b0a2      	sub	sp, #136	@ 0x88
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b4:	f107 0318 	add.w	r3, r7, #24
 80023b8:	225c      	movs	r2, #92	@ 0x5c
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f00f f980 	bl	80116c2 <memset>
  if(sdHandle->Instance==SDIO)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a43      	ldr	r2, [pc, #268]	@ (80024d4 <HAL_SD_MspInit+0x138>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d17f      	bne.n	80024cc <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80023cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80023d2:	2300      	movs	r3, #0
 80023d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80023d6:	2300      	movs	r3, #0
 80023d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023da:	f107 0318 	add.w	r3, r7, #24
 80023de:	4618      	mov	r0, r3
 80023e0:	f005 fd58 	bl	8007e94 <HAL_RCCEx_PeriphCLKConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80023ea:	f7ff fef9 	bl	80021e0 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	4b39      	ldr	r3, [pc, #228]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	4a38      	ldr	r2, [pc, #224]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 80023f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fe:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	4b32      	ldr	r3, [pc, #200]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a31      	ldr	r2, [pc, #196]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b2f      	ldr	r3, [pc, #188]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b2b      	ldr	r3, [pc, #172]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6313      	str	r3, [r2, #48]	@ 0x30
 8002436:	4b28      	ldr	r3, [pc, #160]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a23      	ldr	r2, [pc, #140]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b21      	ldr	r3, [pc, #132]	@ (80024d8 <HAL_SD_MspInit+0x13c>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800245e:	2304      	movs	r3, #4
 8002460:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002470:	230c      	movs	r3, #12
 8002472:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800247a:	4619      	mov	r1, r3
 800247c:	4817      	ldr	r0, [pc, #92]	@ (80024dc <HAL_SD_MspInit+0x140>)
 800247e:	f004 fa15 	bl	80068ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002482:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002486:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248c:	2301      	movs	r3, #1
 800248e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002496:	230c      	movs	r3, #12
 8002498:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80024a0:	4619      	mov	r1, r3
 80024a2:	480f      	ldr	r0, [pc, #60]	@ (80024e0 <HAL_SD_MspInit+0x144>)
 80024a4:	f004 fa02 	bl	80068ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024a8:	2304      	movs	r3, #4
 80024aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b0:	2301      	movs	r3, #1
 80024b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80024ba:	230c      	movs	r3, #12
 80024bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80024c4:	4619      	mov	r1, r3
 80024c6:	4807      	ldr	r0, [pc, #28]	@ (80024e4 <HAL_SD_MspInit+0x148>)
 80024c8:	f004 f9f0 	bl	80068ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80024cc:	bf00      	nop
 80024ce:	3788      	adds	r7, #136	@ 0x88
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40020800 	.word	0x40020800
 80024e4:	40020c00 	.word	0x40020c00

080024e8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80024ec:	4b18      	ldr	r3, [pc, #96]	@ (8002550 <MX_SPI3_Init+0x68>)
 80024ee:	4a19      	ldr	r2, [pc, #100]	@ (8002554 <MX_SPI3_Init+0x6c>)
 80024f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024f2:	4b17      	ldr	r3, [pc, #92]	@ (8002550 <MX_SPI3_Init+0x68>)
 80024f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <MX_SPI3_Init+0x68>)
 80024fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002500:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002502:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <MX_SPI3_Init+0x68>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002508:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <MX_SPI3_Init+0x68>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <MX_SPI3_Init+0x68>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002514:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <MX_SPI3_Init+0x68>)
 8002516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800251a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <MX_SPI3_Init+0x68>)
 800251e:	2210      	movs	r2, #16
 8002520:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002522:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <MX_SPI3_Init+0x68>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002528:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <MX_SPI3_Init+0x68>)
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <MX_SPI3_Init+0x68>)
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <MX_SPI3_Init+0x68>)
 8002536:	220a      	movs	r2, #10
 8002538:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800253a:	4805      	ldr	r0, [pc, #20]	@ (8002550 <MX_SPI3_Init+0x68>)
 800253c:	f008 f860 	bl	800a600 <HAL_SPI_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002546:	f7ff fe4b 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000494 	.word	0x20000494
 8002554:	40003c00 	.word	0x40003c00

08002558 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	@ 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a25      	ldr	r2, [pc, #148]	@ (800260c <HAL_SPI_MspInit+0xb4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d144      	bne.n	8002604 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <HAL_SPI_MspInit+0xb8>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	4a23      	ldr	r2, [pc, #140]	@ (8002610 <HAL_SPI_MspInit+0xb8>)
 8002584:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002588:	6413      	str	r3, [r2, #64]	@ 0x40
 800258a:	4b21      	ldr	r3, [pc, #132]	@ (8002610 <HAL_SPI_MspInit+0xb8>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_SPI_MspInit+0xb8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <HAL_SPI_MspInit+0xb8>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <HAL_SPI_MspInit+0xb8>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025b2:	2302      	movs	r3, #2
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 80025c2:	2305      	movs	r3, #5
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4811      	ldr	r0, [pc, #68]	@ (8002614 <HAL_SPI_MspInit+0xbc>)
 80025ce:	f004 f96d 	bl	80068ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025e4:	2306      	movs	r3, #6
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	4809      	ldr	r0, [pc, #36]	@ (8002614 <HAL_SPI_MspInit+0xbc>)
 80025f0:	f004 f95c 	bl	80068ac <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	2033      	movs	r0, #51	@ 0x33
 80025fa:	f003 fd1e 	bl	800603a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80025fe:	2033      	movs	r0, #51	@ 0x33
 8002600:	f003 fd37 	bl	8006072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002604:	bf00      	nop
 8002606:	3728      	adds	r7, #40	@ 0x28
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40003c00 	.word	0x40003c00
 8002610:	40023800 	.word	0x40023800
 8002614:	40020800 	.word	0x40020800

08002618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_MspInit+0x4c>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <HAL_MspInit+0x4c>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_MspInit+0x4c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_MspInit+0x4c>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <HAL_MspInit+0x4c>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	@ 0x40
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_MspInit+0x4c>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002656:	2007      	movs	r0, #7
 8002658:	f003 fce4 	bl	8006024 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800

08002668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <NMI_Handler+0x4>

08002670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <MemManage_Handler+0x4>

08002680 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <BusFault_Handler+0x4>

08002688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <UsageFault_Handler+0x4>

08002690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026be:	f002 fd35 	bl	800512c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80026cc:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <DMA1_Stream5_IRQHandler+0x10>)
 80026ce:	f003 fe83 	bl	80063d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000580 	.word	0x20000580

080026dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80026e0:	4802      	ldr	r0, [pc, #8]	@ (80026ec <DMA1_Stream6_IRQHandler+0x10>)
 80026e2:	f003 fe79 	bl	80063d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200005e0 	.word	0x200005e0

080026f0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026f4:	4802      	ldr	r0, [pc, #8]	@ (8002700 <CAN1_RX0_IRQHandler+0x10>)
 80026f6:	f003 f995 	bl	8005a24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000248 	.word	0x20000248

08002704 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <USART2_IRQHandler+0x10>)
 800270a:	f008 fd87 	bl	800b21c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000538 	.word	0x20000538

08002718 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <SPI3_IRQHandler+0x10>)
 800271e:	f008 f87d 	bl	800a81c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000494 	.word	0x20000494

0800272c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return 1;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_kill>:

int _kill(int pid, int sig)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002746:	f00f f80f 	bl	8011768 <__errno>
 800274a:	4603      	mov	r3, r0
 800274c:	2216      	movs	r2, #22
 800274e:	601a      	str	r2, [r3, #0]
  return -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_exit>:

void _exit (int status)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002764:	f04f 31ff 	mov.w	r1, #4294967295
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ffe7 	bl	800273c <_kill>
  while (1) {}    /* Make sure we hang here */
 800276e:	bf00      	nop
 8002770:	e7fd      	b.n	800276e <_exit+0x12>

08002772 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e00a      	b.n	800279a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002784:	f3af 8000 	nop.w
 8002788:	4601      	mov	r1, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	60ba      	str	r2, [r7, #8]
 8002790:	b2ca      	uxtb	r2, r1
 8002792:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3301      	adds	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	429a      	cmp	r2, r3
 80027a0:	dbf0      	blt.n	8002784 <_read+0x12>
  }

  return len;
 80027a2:	687b      	ldr	r3, [r7, #4]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	e009      	b.n	80027d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	60ba      	str	r2, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3301      	adds	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	dbf1      	blt.n	80027be <_write+0x12>
  }
  return len;
 80027da:	687b      	ldr	r3, [r7, #4]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_close>:

int _close(int file)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800280c:	605a      	str	r2, [r3, #4]
  return 0;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <_isatty>:

int _isatty(int file)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002824:	2301      	movs	r3, #1
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002832:	b480      	push	{r7}
 8002834:	b085      	sub	sp, #20
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002854:	4a14      	ldr	r2, [pc, #80]	@ (80028a8 <_sbrk+0x5c>)
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <_sbrk+0x60>)
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002860:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <_sbrk+0x64>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <_sbrk+0x64>)
 800286a:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <_sbrk+0x68>)
 800286c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <_sbrk+0x64>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	429a      	cmp	r2, r3
 800287a:	d207      	bcs.n	800288c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800287c:	f00e ff74 	bl	8011768 <__errno>
 8002880:	4603      	mov	r3, r0
 8002882:	220c      	movs	r2, #12
 8002884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	e009      	b.n	80028a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800288c:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <_sbrk+0x64>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002892:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <_sbrk+0x64>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	4a05      	ldr	r2, [pc, #20]	@ (80028b0 <_sbrk+0x64>)
 800289c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800289e:	68fb      	ldr	r3, [r7, #12]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20020000 	.word	0x20020000
 80028ac:	00000400 	.word	0x00000400
 80028b0:	200004ec 	.word	0x200004ec
 80028b4:	20002a70 	.word	0x20002a70

080028b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028bc:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <SystemInit+0x20>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c2:	4a05      	ldr	r2, [pc, #20]	@ (80028d8 <SystemInit+0x20>)
 80028c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80028e0:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <MX_UART4_Init+0x48>)
 80028e2:	4a11      	ldr	r2, [pc, #68]	@ (8002928 <MX_UART4_Init+0x4c>)
 80028e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1000000;
 80028e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <MX_UART4_Init+0x48>)
 80028e8:	4a10      	ldr	r2, [pc, #64]	@ (800292c <MX_UART4_Init+0x50>)
 80028ea:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80028ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <MX_UART4_Init+0x48>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80028f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <MX_UART4_Init+0x48>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <MX_UART4_Init+0x48>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80028fe:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <MX_UART4_Init+0x48>)
 8002900:	220c      	movs	r2, #12
 8002902:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002904:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <MX_UART4_Init+0x48>)
 8002906:	2200      	movs	r2, #0
 8002908:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <MX_UART4_Init+0x48>)
 800290c:	2200      	movs	r2, #0
 800290e:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8002910:	4804      	ldr	r0, [pc, #16]	@ (8002924 <MX_UART4_Init+0x48>)
 8002912:	f008 fa73 	bl	800adfc <HAL_HalfDuplex_Init>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 800291c:	f7ff fc60 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200004f0 	.word	0x200004f0
 8002928:	40004c00 	.word	0x40004c00
 800292c:	000f4240 	.word	0x000f4240

08002930 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <MX_USART2_UART_Init+0x4c>)
 8002936:	4a12      	ldr	r2, [pc, #72]	@ (8002980 <MX_USART2_UART_Init+0x50>)
 8002938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800293a:	4b10      	ldr	r3, [pc, #64]	@ (800297c <MX_USART2_UART_Init+0x4c>)
 800293c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <MX_USART2_UART_Init+0x4c>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <MX_USART2_UART_Init+0x4c>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800294e:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <MX_USART2_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <MX_USART2_UART_Init+0x4c>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b08      	ldr	r3, [pc, #32]	@ (800297c <MX_USART2_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <MX_USART2_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <MX_USART2_UART_Init+0x4c>)
 8002968:	f008 f9f8 	bl	800ad5c <HAL_UART_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002972:	f7ff fc35 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000538 	.word	0x20000538
 8002980:	40004400 	.word	0x40004400

08002984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08c      	sub	sp, #48	@ 0x30
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a64      	ldr	r2, [pc, #400]	@ (8002b34 <HAL_UART_MspInit+0x1b0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d12c      	bne.n	8002a00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	4b63      	ldr	r3, [pc, #396]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a62      	ldr	r2, [pc, #392]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 80029b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b60      	ldr	r3, [pc, #384]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d2:	4b59      	ldr	r3, [pc, #356]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029de:	2301      	movs	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e2:	2312      	movs	r3, #18
 80029e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e6:	2301      	movs	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029ee:	2308      	movs	r3, #8
 80029f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	4619      	mov	r1, r3
 80029f8:	4850      	ldr	r0, [pc, #320]	@ (8002b3c <HAL_UART_MspInit+0x1b8>)
 80029fa:	f003 ff57 	bl	80068ac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029fe:	e095      	b.n	8002b2c <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a4e      	ldr	r2, [pc, #312]	@ (8002b40 <HAL_UART_MspInit+0x1bc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	f040 8090 	bne.w	8002b2c <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	4b49      	ldr	r3, [pc, #292]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	4a48      	ldr	r2, [pc, #288]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 8002a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1c:	4b46      	ldr	r3, [pc, #280]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	4b42      	ldr	r3, [pc, #264]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	4a41      	ldr	r2, [pc, #260]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a38:	4b3f      	ldr	r3, [pc, #252]	@ (8002b38 <HAL_UART_MspInit+0x1b4>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a44:	230c      	movs	r3, #12
 8002a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a54:	2307      	movs	r3, #7
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	f107 031c 	add.w	r3, r7, #28
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4837      	ldr	r0, [pc, #220]	@ (8002b3c <HAL_UART_MspInit+0x1b8>)
 8002a60:	f003 ff24 	bl	80068ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002a64:	4b37      	ldr	r3, [pc, #220]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002a66:	4a38      	ldr	r2, [pc, #224]	@ (8002b48 <HAL_UART_MspInit+0x1c4>)
 8002a68:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002a6a:	4b36      	ldr	r3, [pc, #216]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002a6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a70:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a72:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a78:	4b32      	ldr	r3, [pc, #200]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7e:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a84:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a86:	4b2f      	ldr	r3, [pc, #188]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a92:	4b2c      	ldr	r3, [pc, #176]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a98:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9e:	4b29      	ldr	r3, [pc, #164]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002aa4:	4827      	ldr	r0, [pc, #156]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002aa6:	f003 faff 	bl	80060a8 <HAL_DMA_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002ab0:	f7ff fb96 	bl	80021e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a23      	ldr	r2, [pc, #140]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002aba:	4a22      	ldr	r2, [pc, #136]	@ (8002b44 <HAL_UART_MspInit+0x1c0>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002ac0:	4b22      	ldr	r3, [pc, #136]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002ac2:	4a23      	ldr	r2, [pc, #140]	@ (8002b50 <HAL_UART_MspInit+0x1cc>)
 8002ac4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002ac6:	4b21      	ldr	r3, [pc, #132]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002ac8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002acc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ace:	4b1f      	ldr	r3, [pc, #124]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002ad0:	2240      	movs	r2, #64	@ 0x40
 8002ad2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ada:	4b1c      	ldr	r3, [pc, #112]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002adc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ae0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae8:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002aee:	4b17      	ldr	r3, [pc, #92]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002af4:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b00:	4812      	ldr	r0, [pc, #72]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002b02:	f003 fad1 	bl	80060a8 <HAL_DMA_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002b0c:	f7ff fb68 	bl	80021e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002b14:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b16:	4a0d      	ldr	r2, [pc, #52]	@ (8002b4c <HAL_UART_MspInit+0x1c8>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	2026      	movs	r0, #38	@ 0x26
 8002b22:	f003 fa8a 	bl	800603a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b26:	2026      	movs	r0, #38	@ 0x26
 8002b28:	f003 faa3 	bl	8006072 <HAL_NVIC_EnableIRQ>
}
 8002b2c:	bf00      	nop
 8002b2e:	3730      	adds	r7, #48	@ 0x30
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40004c00 	.word	0x40004c00
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40004400 	.word	0x40004400
 8002b44:	20000580 	.word	0x20000580
 8002b48:	40026088 	.word	0x40026088
 8002b4c:	200005e0 	.word	0x200005e0
 8002b50:	400260a0 	.word	0x400260a0

08002b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b58:	f7ff feae 	bl	80028b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b5c:	480c      	ldr	r0, [pc, #48]	@ (8002b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b5e:	490d      	ldr	r1, [pc, #52]	@ (8002b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b60:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b64:	e002      	b.n	8002b6c <LoopCopyDataInit>

08002b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6a:	3304      	adds	r3, #4

08002b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b70:	d3f9      	bcc.n	8002b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b72:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b74:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b78:	e001      	b.n	8002b7e <LoopFillZerobss>

08002b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b7c:	3204      	adds	r2, #4

08002b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b80:	d3fb      	bcc.n	8002b7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b82:	f00e fdf7 	bl	8011774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b86:	f7fe fc79 	bl	800147c <main>
  bx  lr    
 8002b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b94:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002b98:	08018c60 	.word	0x08018c60
  ldr r2, =_sbss
 8002b9c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002ba0:	20002a6c 	.word	0x20002a6c

08002ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC_IRQHandler>
	...

08002ba8 <Acc_AddController>:
I2C_HandleTypeDef *acc1_i2c;
int16_t read_buff[3];
uint8_t data_buffer[6];

ReturnCode Acc_AddController(I2C_HandleTypeDef* handler, uint8_t line)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
	switch(line)
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <Acc_AddController+0x18>
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d004      	beq.n	8002bc8 <Acc_AddController+0x20>
 8002bbe:	e007      	b.n	8002bd0 <Acc_AddController+0x28>
	{
		case ACC0_LINE:
			acc0_i2c = handler;
 8002bc0:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <Acc_AddController+0x3c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
			break;
 8002bc6:	e005      	b.n	8002bd4 <Acc_AddController+0x2c>
		case ACC1_LINE:
			acc1_i2c = handler;
 8002bc8:	4a07      	ldr	r2, [pc, #28]	@ (8002be8 <Acc_AddController+0x40>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
			break;
 8002bce:	e001      	b.n	8002bd4 <Acc_AddController+0x2c>
		default:
			return C_ACC_HANDLE;
 8002bd0:	230e      	movs	r3, #14
 8002bd2:	e000      	b.n	8002bd6 <Acc_AddController+0x2e>
	}

	return G_SUCCESS;
 8002bd4:	2301      	movs	r3, #1
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000640 	.word	0x20000640
 8002be8:	20000644 	.word	0x20000644

08002bec <Acc_Cmd>:

static ReturnCode Acc_Cmd(I2C_HandleTypeDef* handler, uint8_t reg, uint8_t value)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	70fb      	strb	r3, [r7, #3]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buffer[] = {reg, value};
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	733b      	strb	r3, [r7, #12]
 8002c00:	78bb      	ldrb	r3, [r7, #2]
 8002c02:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(handler, ACC_ALT_ADDRESS, tx_buffer, 2, 200);
 8002c04:	f107 020c 	add.w	r2, r7, #12
 8002c08:	23c8      	movs	r3, #200	@ 0xc8
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	21a6      	movs	r1, #166	@ 0xa6
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f004 f955 	bl	8006ec0 <HAL_I2C_Master_Transmit>
 8002c16:	4603      	mov	r3, r0
 8002c18:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <Acc_Cmd+0x38>
		return C_I2C_TRANSMIT;
 8002c20:	230f      	movs	r3, #15
 8002c22:	e000      	b.n	8002c26 <Acc_Cmd+0x3a>

	return G_SUCCESS;
 8002c24:	2301      	movs	r3, #1
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <Acc_Read>:

// Perform single or sequential blocking read
static ReturnCode Acc_Read(I2C_HandleTypeDef* handler, uint8_t* buffer, uint8_t address, uint8_t bytes_number)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b08a      	sub	sp, #40	@ 0x28
 8002c32:	af04      	add	r7, sp, #16
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	71fb      	strb	r3, [r7, #7]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71bb      	strb	r3, [r7, #6]
	// HAL doc 524
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handler, ACC_ALT_ADDRESS, address, 1, buffer, bytes_number, ACC_I2C_TIMEOUT);
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	79bb      	ldrb	r3, [r7, #6]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2164      	movs	r1, #100	@ 0x64
 8002c4e:	9102      	str	r1, [sp, #8]
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	2301      	movs	r3, #1
 8002c58:	21a6      	movs	r1, #166	@ 0xa6
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f004 fa2e 	bl	80070bc <HAL_I2C_Mem_Read>
 8002c60:	4603      	mov	r3, r0
 8002c62:	75fb      	strb	r3, [r7, #23]

	if(status != HAL_OK)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <Acc_Read+0x40>
		return C_I2C_RECEIVE;
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	e000      	b.n	8002c70 <Acc_Read+0x42>

	return G_SUCCESS;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <Acc_RawMeasurment>:

// Perform read of XYZ entry
ReturnCode Acc_RawMeasurment(int16_t* xyz_buffer, uint8_t line)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
	if(line > ACC1_LINE)
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d901      	bls.n	8002c8e <Acc_RawMeasurment+0x16>
		return C_ACC_HANDLE;
 8002c8a:	230e      	movs	r3, #14
 8002c8c:	e037      	b.n	8002cfe <Acc_RawMeasurment+0x86>

	ReturnCode status = Acc_Read( (line == ACC0_LINE ? acc0_i2c : acc1_i2c), data_buffer, ACC_X0_REG, 6);
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <Acc_RawMeasurment+0x22>
 8002c94:	4b1c      	ldr	r3, [pc, #112]	@ (8002d08 <Acc_RawMeasurment+0x90>)
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	e001      	b.n	8002c9e <Acc_RawMeasurment+0x26>
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d0c <Acc_RawMeasurment+0x94>)
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	2306      	movs	r3, #6
 8002ca0:	2232      	movs	r2, #50	@ 0x32
 8002ca2:	491b      	ldr	r1, [pc, #108]	@ (8002d10 <Acc_RawMeasurment+0x98>)
 8002ca4:	f7ff ffc3 	bl	8002c2e <Acc_Read>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	73fb      	strb	r3, [r7, #15]

	if(status != G_SUCCESS)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <Acc_RawMeasurment+0x3e>
		return status;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	e023      	b.n	8002cfe <Acc_RawMeasurment+0x86>

	// Combine readings
	*(xyz_buffer) = ((data_buffer[1] << 8) | data_buffer[0]);
 8002cb6:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <Acc_RawMeasurment+0x98>)
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	b21a      	sxth	r2, r3
 8002cbe:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <Acc_RawMeasurment+0x98>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	b21a      	sxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 1) = ((data_buffer[3] << 8) | data_buffer[2]);
 8002ccc:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <Acc_RawMeasurment+0x98>)
 8002cce:	78db      	ldrb	r3, [r3, #3]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	b219      	sxth	r1, r3
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <Acc_RawMeasurment+0x98>)
 8002cd6:	789b      	ldrb	r3, [r3, #2]
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	b212      	sxth	r2, r2
 8002ce2:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 2) = ((data_buffer[5] << 8) | data_buffer[4]);
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <Acc_RawMeasurment+0x98>)
 8002ce6:	795b      	ldrb	r3, [r3, #5]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	b219      	sxth	r1, r3
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <Acc_RawMeasurment+0x98>)
 8002cee:	791b      	ldrb	r3, [r3, #4]
 8002cf0:	b21a      	sxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	b212      	sxth	r2, r2
 8002cfa:	801a      	strh	r2, [r3, #0]

	return G_SUCCESS;
 8002cfc:	2301      	movs	r3, #1
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000640 	.word	0x20000640
 8002d0c:	20000644 	.word	0x20000644
 8002d10:	20000650 	.word	0x20000650

08002d14 <Acc_AvgMeasurment>:

ReturnCode Acc_AvgMeasurment(int16_t *xyz_buffer, uint32_t samples, uint8_t line)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	71fb      	strb	r3, [r7, #7]
	int32_t avg_x = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
	int32_t avg_y = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
	int32_t avg_z = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]

	// Get sum
	for(uint16_t i = 1; i <= samples; i++)
 8002d2e:	2301      	movs	r3, #1
 8002d30:	827b      	strh	r3, [r7, #18]
 8002d32:	e026      	b.n	8002d82 <Acc_AvgMeasurment+0x6e>
	{
		ReturnCode status = Acc_RawMeasurment(read_buff, line);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4619      	mov	r1, r3
 8002d38:	4822      	ldr	r0, [pc, #136]	@ (8002dc4 <Acc_AvgMeasurment+0xb0>)
 8002d3a:	f7ff ff9d 	bl	8002c78 <Acc_RawMeasurment>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	747b      	strb	r3, [r7, #17]

		if(status != G_SUCCESS)
 8002d42:	7c7b      	ldrb	r3, [r7, #17]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <Acc_AvgMeasurment+0x38>
			return status;
 8002d48:	7c7b      	ldrb	r3, [r7, #17]
 8002d4a:	e036      	b.n	8002dba <Acc_AvgMeasurment+0xa6>

		avg_x += read_buff[0];
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <Acc_AvgMeasurment+0xb0>)
 8002d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d52:	461a      	mov	r2, r3
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	4413      	add	r3, r2
 8002d58:	61fb      	str	r3, [r7, #28]
		avg_y += read_buff[1];
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <Acc_AvgMeasurment+0xb0>)
 8002d5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d60:	461a      	mov	r2, r3
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	4413      	add	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
		avg_z += read_buff[2];
 8002d68:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <Acc_AvgMeasurment+0xb0>)
 8002d6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4413      	add	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

		// Feedback from accelometer - wait to collect data
		HAL_Delay(100);
 8002d76:	2064      	movs	r0, #100	@ 0x64
 8002d78:	f002 f9f8 	bl	800516c <HAL_Delay>
	for(uint16_t i = 1; i <= samples; i++)
 8002d7c:	8a7b      	ldrh	r3, [r7, #18]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	827b      	strh	r3, [r7, #18]
 8002d82:	8a7b      	ldrh	r3, [r7, #18]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d2d4      	bcs.n	8002d34 <Acc_AvgMeasurment+0x20>
	}

	// Get average
	*(xyz_buffer) = avg_x / samples;
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	b21a      	sxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 1) = avg_y / samples;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3302      	adds	r3, #2
 8002da4:	b212      	sxth	r2, r2
 8002da6:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 2) = avg_z / samples;
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3304      	adds	r3, #4
 8002db4:	b212      	sxth	r2, r2
 8002db6:	801a      	strh	r2, [r3, #0]

	return G_SUCCESS;
 8002db8:	2301      	movs	r3, #1
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000648 	.word	0x20000648

08002dc8 <Acc_SelfTest>:


ReturnCode Acc_SelfTest(int16_t* result_buffer, uint8_t line)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
	if(line > ACC1_LINE)
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d901      	bls.n	8002dde <Acc_SelfTest+0x16>
			return C_ACC_HANDLE;
 8002dda:	230e      	movs	r3, #14
 8002ddc:	e0f1      	b.n	8002fc2 <Acc_SelfTest+0x1fa>

	I2C_HandleTypeDef* acc_i2c = (line == ACC0_LINE ? acc0_i2c : acc1_i2c);
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <Acc_SelfTest+0x22>
 8002de4:	4b79      	ldr	r3, [pc, #484]	@ (8002fcc <Acc_SelfTest+0x204>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	e001      	b.n	8002dee <Acc_SelfTest+0x26>
 8002dea:	4b79      	ldr	r3, [pc, #484]	@ (8002fd0 <Acc_SelfTest+0x208>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	617b      	str	r3, [r7, #20]


	// Turn on power
	ReturnCode status = Acc_Cmd(acc_i2c, ACC_PWR_CTRL_REG, 0x00);
 8002df0:	2200      	movs	r2, #0
 8002df2:	212d      	movs	r1, #45	@ 0x2d
 8002df4:	6978      	ldr	r0, [r7, #20]
 8002df6:	f7ff fef9 	bl	8002bec <Acc_Cmd>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	74fb      	strb	r3, [r7, #19]
	if(status != G_SUCCESS)
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d001      	beq.n	8002e08 <Acc_SelfTest+0x40>
		return status;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	e0dc      	b.n	8002fc2 <Acc_SelfTest+0x1fa>
	HAL_Delay(5);
 8002e08:	2005      	movs	r0, #5
 8002e0a:	f002 f9af 	bl	800516c <HAL_Delay>

	// Change data format to 16g, full res (13bit)
	status = Acc_Cmd(acc_i2c, ACC_DATA_FORMAT_REG, 0x0B);
 8002e0e:	220b      	movs	r2, #11
 8002e10:	2131      	movs	r1, #49	@ 0x31
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff feea 	bl	8002bec <Acc_Cmd>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	74fb      	strb	r3, [r7, #19]
	if(status != G_SUCCESS)
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <Acc_SelfTest+0x5e>
		return status;
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	e0cd      	b.n	8002fc2 <Acc_SelfTest+0x1fa>
	// Back to measurment mode
	status = Acc_Cmd(acc_i2c, ACC_PWR_CTRL_REG, 0x08);
 8002e26:	2208      	movs	r2, #8
 8002e28:	212d      	movs	r1, #45	@ 0x2d
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff fede 	bl	8002bec <Acc_Cmd>
 8002e30:	4603      	mov	r3, r0
 8002e32:	74fb      	strb	r3, [r7, #19]
	if(status != G_SUCCESS)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d001      	beq.n	8002e3e <Acc_SelfTest+0x76>
		return status;
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	e0c1      	b.n	8002fc2 <Acc_SelfTest+0x1fa>

	// Begin self test
	status = Acc_AvgMeasurment(read_buff, 64, line);
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	461a      	mov	r2, r3
 8002e42:	2140      	movs	r1, #64	@ 0x40
 8002e44:	4863      	ldr	r0, [pc, #396]	@ (8002fd4 <Acc_SelfTest+0x20c>)
 8002e46:	f7ff ff65 	bl	8002d14 <Acc_AvgMeasurment>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	74fb      	strb	r3, [r7, #19]
	if(status != G_SUCCESS)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d001      	beq.n	8002e58 <Acc_SelfTest+0x90>
		return status;
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	e0b4      	b.n	8002fc2 <Acc_SelfTest+0x1fa>

	*(result_buffer) = (-read_buff[0]);
 8002e58:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd4 <Acc_SelfTest+0x20c>)
 8002e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	425b      	negs	r3, r3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	801a      	strh	r2, [r3, #0]
	*(result_buffer + 1) = (-read_buff[1]);
 8002e6a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd4 <Acc_SelfTest+0x20c>)
 8002e6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	425b      	negs	r3, r3
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3302      	adds	r3, #2
 8002e7a:	b212      	sxth	r2, r2
 8002e7c:	801a      	strh	r2, [r3, #0]
	*(result_buffer + 2) = (-read_buff[2]);
 8002e7e:	4b55      	ldr	r3, [pc, #340]	@ (8002fd4 <Acc_SelfTest+0x20c>)
 8002e80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	425b      	negs	r3, r3
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	b212      	sxth	r2, r2
 8002e90:	801a      	strh	r2, [r3, #0]

	// Turn on self-test
	status = Acc_Cmd(acc_i2c, ACC_DATA_FORMAT_REG, 0x8B);
 8002e92:	228b      	movs	r2, #139	@ 0x8b
 8002e94:	2131      	movs	r1, #49	@ 0x31
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff fea8 	bl	8002bec <Acc_Cmd>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]
	if(status != G_SUCCESS)
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <Acc_SelfTest+0xe2>
		return status;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	e08b      	b.n	8002fc2 <Acc_SelfTest+0x1fa>
	HAL_Delay(5);
 8002eaa:	2005      	movs	r0, #5
 8002eac:	f002 f95e 	bl	800516c <HAL_Delay>

	status = Acc_AvgMeasurment(read_buff, 64, line);
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2140      	movs	r1, #64	@ 0x40
 8002eb6:	4847      	ldr	r0, [pc, #284]	@ (8002fd4 <Acc_SelfTest+0x20c>)
 8002eb8:	f7ff ff2c 	bl	8002d14 <Acc_AvgMeasurment>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	74fb      	strb	r3, [r7, #19]
	if(status != G_SUCCESS)
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <Acc_SelfTest+0x102>
		return status;
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	e07b      	b.n	8002fc2 <Acc_SelfTest+0x1fa>
	*(result_buffer) += read_buff[0];
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	4b40      	ldr	r3, [pc, #256]	@ (8002fd4 <Acc_SelfTest+0x20c>)
 8002ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	801a      	strh	r2, [r3, #0]
	*(result_buffer + 1) += read_buff[1];
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <Acc_SelfTest+0x20c>)
 8002ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3302      	adds	r3, #2
 8002efe:	b212      	sxth	r2, r2
 8002f00:	801a      	strh	r2, [r3, #0]
	*(result_buffer + 2) += read_buff[2];
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	4b31      	ldr	r3, [pc, #196]	@ (8002fd4 <Acc_SelfTest+0x20c>)
 8002f0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	b212      	sxth	r2, r2
 8002f1e:	801a      	strh	r2, [r3, #0]


	// Turn of self-test
	status = Acc_Cmd(acc_i2c, ACC_DATA_FORMAT_REG, 0x01);
 8002f20:	2201      	movs	r2, #1
 8002f22:	2131      	movs	r1, #49	@ 0x31
 8002f24:	6978      	ldr	r0, [r7, #20]
 8002f26:	f7ff fe61 	bl	8002bec <Acc_Cmd>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	74fb      	strb	r3, [r7, #19]
	if(status != G_SUCCESS)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d001      	beq.n	8002f38 <Acc_SelfTest+0x170>
		return status;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	e044      	b.n	8002fc2 <Acc_SelfTest+0x1fa>

	// Check results of the test

	// First check if signs are correct
	if((*(result_buffer) < 0) || (*(result_buffer + 1) > 0) || (*(result_buffer + 2) < 0))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	db0b      	blt.n	8002f5a <Acc_SelfTest+0x192>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3302      	adds	r3, #2
 8002f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	dc05      	bgt.n	8002f5a <Acc_SelfTest+0x192>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da01      	bge.n	8002f5e <Acc_SelfTest+0x196>
		return G_ACC_READ;
 8002f5a:	2311      	movs	r3, #17
 8002f5c:	e031      	b.n	8002fc2 <Acc_SelfTest+0x1fa>

	uint16_t x, y, z;

	x = (*(result_buffer) & 0x00FF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	823b      	strh	r3, [r7, #16]
	y = ~(*(result_buffer + 1));	// Taking absolute value of y
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	81fb      	strh	r3, [r7, #14]
	y = (y & 0x00FF) + 0x01;
 8002f78:	89fb      	ldrh	r3, [r7, #14]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	81fb      	strh	r3, [r7, #14]
	z = (*(result_buffer + 2) & 0x00FF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	81bb      	strh	r3, [r7, #12]

	// OX condition
	if( (x < 6) || (x > 67) )
 8002f90:	8a3b      	ldrh	r3, [r7, #16]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d902      	bls.n	8002f9c <Acc_SelfTest+0x1d4>
 8002f96:	8a3b      	ldrh	r3, [r7, #16]
 8002f98:	2b43      	cmp	r3, #67	@ 0x43
 8002f9a:	d901      	bls.n	8002fa0 <Acc_SelfTest+0x1d8>
		return G_ACC_READ;
 8002f9c:	2311      	movs	r3, #17
 8002f9e:	e010      	b.n	8002fc2 <Acc_SelfTest+0x1fa>

	// OY condition
	if( (y < 6) || (y > 67) )
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d902      	bls.n	8002fac <Acc_SelfTest+0x1e4>
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	2b43      	cmp	r3, #67	@ 0x43
 8002faa:	d901      	bls.n	8002fb0 <Acc_SelfTest+0x1e8>
			return G_ACC_READ;
 8002fac:	2311      	movs	r3, #17
 8002fae:	e008      	b.n	8002fc2 <Acc_SelfTest+0x1fa>
	// OZ condition
	if( (z < 10) || (z > 110) )
 8002fb0:	89bb      	ldrh	r3, [r7, #12]
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d902      	bls.n	8002fbc <Acc_SelfTest+0x1f4>
 8002fb6:	89bb      	ldrh	r3, [r7, #12]
 8002fb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8002fba:	d901      	bls.n	8002fc0 <Acc_SelfTest+0x1f8>
			return G_ACC_READ;
 8002fbc:	2311      	movs	r3, #17
 8002fbe:	e000      	b.n	8002fc2 <Acc_SelfTest+0x1fa>

	return G_SUCCESS;
 8002fc0:	2301      	movs	r3, #1
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000640 	.word	0x20000640
 8002fd0:	20000644 	.word	0x20000644
 8002fd4:	20000648 	.word	0x20000648

08002fd8 <Screen_Init>:
const uint16_t d_grey_px_LUT[] = { 88, 49, 89, 49, 90, 49, 91, 49, 92, 49, 93, 49, 94, 49, 95, 49, 86, 50, 87, 50, 88, 50, 89, 50, 90, 50, 91, 50, 92, 50, 93, 50, 95, 50, 84, 51, 85, 51, 86, 51, 87, 51, 88, 51, 89, 51, 90, 51, 91, 51, 92, 51, 93, 51, 83, 52, 84, 52, 85, 52, 86, 52, 87, 52, 88, 52, 89, 52, 90, 52, 91, 52, 92, 52, 93, 52, 82, 53, 83, 53, 84, 53, 85, 53, 86, 53, 87, 53, 88, 53, 89, 53, 90, 53, 91, 53, 92, 53, 93, 53, 82, 54, 83, 54, 84, 54, 85, 54, 86, 54, 87, 54, 88, 54, 89, 54, 90, 54, 91, 54, 92, 54, 93, 54, 81, 55, 82, 55, 83, 55, 84, 55, 85, 55, 86, 55, 87, 55, 88, 55, 89, 55, 90, 55, 91, 55, 78, 56, 80, 56, 81, 56, 82, 56, 83, 56, 84, 56, 85, 56, 86, 56, 87, 56, 90, 56, 92, 56, 93, 56, 76, 57, 77, 57, 78, 57, 79, 57, 80, 57, 81, 57, 82, 57, 83, 57, 84, 57, 85, 57, 75, 58, 76, 58, 77, 58, 78, 58, 79, 58, 80, 58, 81, 58, 82, 58, 83, 58, 85, 58, 92, 58, 93, 58, 74, 59, 75, 59, 76, 59, 77, 59, 78, 59, 79, 59, 82, 59, 83, 59, 84, 59, 92, 59, 93, 59, 38, 60, 39, 60, 40, 60, 41, 60, 42, 60, 43, 60, 44, 60, 71, 60, 72, 60, 73, 60, 74, 60, 75, 60, 76, 60, 77, 60, 78, 60, 79, 60, 80, 60, 83, 60, 84, 60, 36, 61, 37, 61, 38, 61, 39, 61, 40, 61, 41, 61, 42, 61, 43, 61, 44, 61, 45, 61, 46, 61, 49, 61, 50, 61, 51, 61, 52, 61, 69, 61, 70, 61, 71, 61, 72, 61, 73, 61, 74, 61, 75, 61, 76, 61, 77, 61, 78, 61, 79, 61, 80, 61, 83, 61, 84, 61, 92, 61, 93, 61, 33, 62, 34, 62, 35, 62, 36, 62, 37, 62, 38, 62, 39, 62, 40, 62, 41, 62, 42, 62, 43, 62, 44, 62, 45, 62, 46, 62, 47, 62, 48, 62, 49, 62, 50, 62, 51, 62, 52, 62, 53, 62, 54, 62, 65, 62, 66, 62, 67, 62, 68, 62, 69, 62, 70, 62, 71, 62, 72, 62, 73, 62, 74, 62, 75, 62, 76, 62, 77, 62, 78, 62, 79, 62, 80, 62, 81, 62, 84, 62, 92, 62, 33, 63, 34, 63, 35, 63, 36, 63, 37, 63, 38, 63, 39, 63, 40, 63, 41, 63, 42, 63, 43, 63, 44, 63, 45, 63, 46, 63, 47, 63, 48, 63, 49, 63, 50, 63, 51, 63, 52, 63, 53, 63, 54, 63, 67, 63, 68, 63, 69, 63, 70, 63, 71, 63, 72, 63, 73, 63, 74, 63, 75, 63, 76, 63, 77, 63, 78, 63, 79, 63, 80, 63, 81, 63, 84, 63, 91, 63, 34, 64, 35, 64, 36, 64, 37, 64, 38, 64, 39, 64, 40, 64, 41, 64, 42, 64, 43, 64, 44, 64, 45, 64, 46, 64, 47, 64, 49, 64, 50, 64, 51, 64, 52, 64, 53, 64, 54, 64, 67, 64, 68, 64, 69, 64, 70, 64, 71, 64, 72, 64, 76, 64, 77, 64, 78, 64, 80, 64, 81, 64, 83, 64, 84, 64, 34, 65, 35, 65, 36, 65, 37, 65, 38, 65, 39, 65, 40, 65, 41, 65, 42, 65, 43, 65, 44, 65, 45, 65, 46, 65, 49, 65, 52, 65, 53, 65, 60, 65, 61, 65, 62, 65, 68, 65, 69, 65, 70, 65, 71, 65, 72, 65, 74, 65, 75, 65, 76, 65, 77, 65, 78, 65, 79, 65, 80, 65, 81, 65, 83, 65, 84, 65, 35, 66, 36, 66, 37, 66, 38, 66, 39, 66, 40, 66, 44, 66, 45, 66, 46, 66, 49, 66, 51, 66, 52, 66, 53, 66, 68, 66, 69, 66, 73, 66, 74, 66, 77, 66, 79, 66, 80, 66, 81, 66, 83, 66, 35, 67, 36, 67, 37, 67, 38, 67, 39, 67, 40, 67, 43, 67, 44, 67, 45, 67, 46, 67, 49, 67, 50, 67, 52, 67, 53, 67, 58, 67, 59, 67, 60, 67, 61, 67, 65, 67, 68, 67, 69, 67, 70, 67, 73, 67, 74, 67, 77, 67, 78, 67, 79, 67, 80, 67, 81, 67, 82, 67, 36, 68, 37, 68, 38, 68, 39, 68, 42, 68, 43, 68, 44, 68, 45, 68, 46, 68, 49, 68, 50, 68, 51, 68, 52, 68, 53, 68, 57, 68, 60, 68, 61, 68, 62, 68, 69, 68, 70, 68, 71, 68, 72, 68, 73, 68, 74, 68, 75, 68, 76, 68, 77, 68, 78, 68, 79, 68, 80, 68, 81, 68, 82, 68, 37, 69, 38, 69, 39, 69, 41, 69, 42, 69, 44, 69, 45, 69, 46, 69, 47, 69, 50, 69, 51, 69, 52, 69, 53, 69, 58, 69, 61, 69, 62, 69, 67, 69, 71, 69, 72, 69, 73, 69, 74, 69, 75, 69, 76, 69, 77, 69, 78, 69, 79, 69, 80, 69, 81, 69, 37, 70, 38, 70, 40, 70, 41, 70, 46, 70, 47, 70, 50, 70, 51, 70, 52, 70, 53, 70, 60, 70, 61, 70, 69, 70, 70, 70, 73, 70, 74, 70, 75, 70, 76, 70, 77, 70, 78, 70, 79, 70, 80, 70, 38, 71, 41, 71, 45, 71, 46, 71, 47, 71, 51, 71, 52, 71, 53, 71, 67, 71, 70, 71, 72, 71, 73, 71, 75, 71, 76, 71, 77, 71, 78, 71, 40, 72, 41, 72, 47, 72, 48, 72, 49, 72, 52, 72, 53, 72, 62, 72, 63, 72, 64, 72, 65, 72, 67, 72, 71, 72, 72, 72, 73, 72, 74, 72, 75, 72, 76, 72, 77, 72, 78, 72, 79, 72, 87, 72, 88, 72, 41, 73, 49, 73, 50, 73, 53, 73, 54, 73, 59, 73, 60, 73, 61, 73, 62, 73, 63, 73, 64, 73, 70, 73, 74, 73, 75, 73, 76, 73, 77, 73, 78, 73, 86, 73, 88, 73, 91, 73, 92, 73, 50, 74, 51, 74, 52, 74, 53, 74, 54, 74, 55, 74, 56, 74, 57, 74, 58, 74, 59, 74, 60, 74, 62, 74, 66, 74, 67, 74, 68, 74, 69, 74, 70, 74, 73, 74, 74, 74, 76, 74, 77, 74, 86, 74, 87, 74, 91, 74, 49, 75, 50, 75, 51, 75, 54, 75, 55, 75, 56, 75, 57, 75, 58, 75, 59, 75, 60, 75, 86, 75, 87, 75, 55, 76, 56, 76, 57, 76, 59, 76, 63, 76, 64, 76, 71, 76, 72, 76, 73, 76, 74, 76, 86, 76, 87, 76, 92, 76, 93, 76, 56, 77, 57, 77, 59, 77, 63, 77, 64, 77, 71, 77, 72, 77, 73, 77, 74, 77, 76, 77, 77, 77, 78, 77, 79, 77, 81, 77, 82, 77, 86, 77, 87, 77, 92, 77, 75, 78, 76, 78, 77, 78, 78, 78, 80, 78, 81, 78, 87, 78, 90, 78, 91, 78, 67, 79, 68, 79, 69, 79, 70, 79, 77, 79, 78, 79, 79, 79, 80, 79, 81, 79, 88, 79, 89, 79, 90, 79, 91, 79, 58, 80, 59, 80, 60, 80, 61, 80, 62, 80, 66, 80, 67, 80, 68, 80, 69, 80, 70, 80, 71, 80, 78, 80, 79, 80, 80, 80, 81, 80, 57, 81, 58, 81, 59, 81, 60, 81, 61, 81, 62, 81, 63, 81, 64, 81, 65, 81, 66, 81, 67, 81, 68, 81, 69, 81, 70, 81, 71, 81, 78, 81, 79, 81, 80, 81, 81, 81, 56, 82, 57, 82, 58, 82, 59, 82, 60, 82, 61, 82, 62, 82, 63, 82, 64, 82, 66, 82, 67, 82, 68, 82, 69, 82, 70, 82, 71, 82, 79, 82, 80, 82, 81, 82, 82, 82, 56, 83, 57, 83, 58, 83, 59, 83, 60, 83, 61, 83, 62, 83, 63, 83, 64, 83, 65, 83, 66, 83, 67, 83, 68, 83, 69, 83, 70, 83, 71, 83, 79, 83, 80, 83, 81, 83, 82, 83, 55, 84, 56, 84, 57, 84, 58, 84, 59, 84, 60, 84, 61, 84, 62, 84, 63, 84, 64, 84, 65, 84, 66, 84, 67, 84, 68, 84, 69, 84, 70, 84, 71, 84, 80, 84, 81, 84, 83, 84, 55, 85, 56, 85, 57, 85, 58, 85, 59, 85, 60, 85, 61, 85, 62, 85, 63, 85, 64, 85, 66, 85, 67, 85, 68, 85, 69, 85, 70, 85, 71, 85, 72, 85, 80, 85, 81, 85, 84, 85, 55, 86, 62, 86, 66, 86, 67, 86, 68, 86, 69, 86, 70, 86, 71, 86, 72, 86, 81, 86, 82, 86, 83, 86, 54, 87, 66, 87, 67, 87, 68, 87, 69, 87, 70, 87, 71, 87, 72, 87, 81, 87, 82, 87, 66, 88, 67, 88, 68, 88, 69, 88, 70, 88, 71, 88, 72, 88, 82, 88, 65, 89, 66, 89, 67, 89, 68, 89, 69, 89, 70, 89, 71, 89, 82, 89, 65, 90, 66, 90, 67, 90, 68, 90, 69, 90, 70, 90, 71, 90, 65, 91, 67, 91, 68, 91, 69, 91, 70, 91, 65, 92, 67, 92, 68, 92, 69, 92, 70, 92, 62, 93, 65, 93, 67, 93, 68, 93, 69, 93, 60, 94, 61, 94, 62, 94, 66, 94, 67, 94, 58, 95, 59, 95, 60, 95, 61, 95, 63, 95, 64, 95, 58, 96, 59, 96, 60, 96, 65, 96, 59, 97, 60, 97, 60, 98, 61, 98, 61, 99, 62, 99, 63, 99, 64, 99, 65, 99, 66, 99, 61, 100, 62, 100, 63, 100, 64, 100, 62, 101, 72, 101, 73, 101, 74, 101, 75, 101, 72, 102, 73, 102, 74, 102, 75, 102, 73, 103, 73, 104, 73, 105, 73, 106, 73, 107, 72, 108, 73, 108, 80, 108, 81, 108, 72, 109, 73, 109, 74, 109, 78, 109, 79, 109, 81, 109, 82, 109, 61, 110, 71, 110, 76, 110, 77, 110, 78, 110, 79, 110, 80, 110, 81, 110, 62, 111, 63, 111, 64, 111, 66, 111, 67, 111, 68, 111, 69, 111, 71, 111, 78, 111, 65, 112, 66, 112, 69, 112, 70, 112, 71, 112, 72, 112, 73, 112, 66, 113, 67, 113, 68, 113, 69, 113, 70, 113, 71, 113, 72, 113 };



void Screen_Init()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;//SCAN_DIR_DFT = D2U_L2R
 8002fde:	2300      	movs	r3, #0
 8002fe0:	71fb      	strb	r3, [r7, #7]
	LCD_Init( Lcd_ScanDir );
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 fcaf 	bl	8004948 <LCD_Init>
	LCD_Clear(BLACK);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f001 fda6 	bl	8004b3c <LCD_Clear>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <Screen_Draw_HeaderJustified>:


static void Screen_Draw_HeaderJustified(uint16_t y, const char* string, uint16_t length, sFONT* Font, uint16_t color)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	4603      	mov	r3, r0
 8003004:	81fb      	strh	r3, [r7, #14]
 8003006:	4613      	mov	r3, r2
 8003008:	81bb      	strh	r3, [r7, #12]
	uint16_t x_offset = (128 - length*(Font->Width)) / 2;
 800300a:	89bb      	ldrh	r3, [r7, #12]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	8892      	ldrh	r2, [r2, #4]
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003018:	0fda      	lsrs	r2, r3, #31
 800301a:	4413      	add	r3, r2
 800301c:	105b      	asrs	r3, r3, #1
 800301e:	82fb      	strh	r3, [r7, #22]
	LCD_DisplayString(x_offset, y, string, Font, LCD_BACKGROUND, color);
 8003020:	89f9      	ldrh	r1, [r7, #14]
 8003022:	8af8      	ldrh	r0, [r7, #22]
 8003024:	8c3b      	ldrh	r3, [r7, #32]
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	2300      	movs	r3, #0
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f001 ffd8 	bl	8004fe4 <LCD_DisplayString>
}
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <Screen_DrawInitScreen>:

void Screen_DrawInitScreen()
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
	// Clear screen
	LCD_Clear(BLACK);
 8003042:	2000      	movs	r0, #0
 8003044:	f001 fd7a 	bl	8004b3c <LCD_Clear>

	// ====================================
	// Draw header
	// ====================================
	Screen_Draw_HeaderJustified(10, "Gizmo Robot", 11, &Font16, WHITE);
 8003048:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	4b3d      	ldr	r3, [pc, #244]	@ (8003144 <Screen_DrawInitScreen+0x108>)
 8003050:	220b      	movs	r2, #11
 8003052:	493d      	ldr	r1, [pc, #244]	@ (8003148 <Screen_DrawInitScreen+0x10c>)
 8003054:	200a      	movs	r0, #10
 8003056:	f7ff ffcf 	bl	8002ff8 <Screen_Draw_HeaderJustified>

	// ====================================
	// Draw Gizmo
	// ====================================
	int px_number = (sizeof(white_px_LUT) / sizeof(uint16_t)) / 2;
 800305a:	23c8      	movs	r3, #200	@ 0xc8
 800305c:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < px_number; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	e014      	b.n	800308e <Screen_DrawInitScreen+0x52>
	{
		LCD_DrawPoint(white_px_LUT[i*2], white_px_LUT[i*2 + 1], WHITE, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4a38      	ldr	r2, [pc, #224]	@ (800314c <Screen_DrawInitScreen+0x110>)
 800306a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	3301      	adds	r3, #1
 8003074:	4a35      	ldr	r2, [pc, #212]	@ (800314c <Screen_DrawInitScreen+0x110>)
 8003076:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800307a:	2301      	movs	r3, #1
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2301      	movs	r3, #1
 8003080:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003084:	f001 fd70 	bl	8004b68 <LCD_DrawPoint>
	for(int i = 0; i < px_number; i++)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	dbe6      	blt.n	8003064 <Screen_DrawInitScreen+0x28>
	}

	px_number = (sizeof(l_grey_px_LUT) / sizeof(uint16_t)) / 2;
 8003096:	f240 332a 	movw	r3, #810	@ 0x32a
 800309a:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < px_number; i++)
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	e014      	b.n	80030cc <Screen_DrawInitScreen+0x90>
	{
		LCD_DrawPoint(l_grey_px_LUT[i*2], l_grey_px_LUT[i*2 + 1], GRAY, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003150 <Screen_DrawInitScreen+0x114>)
 80030a8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	3301      	adds	r3, #1
 80030b2:	4a27      	ldr	r2, [pc, #156]	@ (8003150 <Screen_DrawInitScreen+0x114>)
 80030b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80030b8:	2301      	movs	r3, #1
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2301      	movs	r3, #1
 80030be:	f248 4230 	movw	r2, #33840	@ 0x8430
 80030c2:	f001 fd51 	bl	8004b68 <LCD_DrawPoint>
	for(int i = 0; i < px_number; i++)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3301      	adds	r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	dbe6      	blt.n	80030a2 <Screen_DrawInitScreen+0x66>
	}

	px_number = (sizeof(d_grey_px_LUT) / sizeof(uint16_t)) / 2;
 80030d4:	f240 3359 	movw	r3, #857	@ 0x359
 80030d8:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < px_number; i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	e014      	b.n	800310a <Screen_DrawInitScreen+0xce>
	{
		LCD_DrawPoint(d_grey_px_LUT[i*2], d_grey_px_LUT[i*2 + 1], DARK_GREY, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003154 <Screen_DrawInitScreen+0x118>)
 80030e6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	3301      	adds	r3, #1
 80030f0:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <Screen_DrawInitScreen+0x118>)
 80030f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80030f6:	2301      	movs	r3, #1
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2301      	movs	r3, #1
 80030fc:	f644 2269 	movw	r2, #19049	@ 0x4a69
 8003100:	f001 fd32 	bl	8004b68 <LCD_DrawPoint>
	for(int i = 0; i < px_number; i++)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3301      	adds	r3, #1
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	dbe6      	blt.n	80030e0 <Screen_DrawInitScreen+0xa4>
	}

	// ====================================
	// Display init panel
	// ====================================
	Screen_Draw_HeaderJustified(135, "Initializing", 12, &Font12, WHITE);
 8003112:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4b0f      	ldr	r3, [pc, #60]	@ (8003158 <Screen_DrawInitScreen+0x11c>)
 800311a:	220c      	movs	r2, #12
 800311c:	490f      	ldr	r1, [pc, #60]	@ (800315c <Screen_DrawInitScreen+0x120>)
 800311e:	2087      	movs	r0, #135	@ 0x87
 8003120:	f7ff ff6a 	bl	8002ff8 <Screen_Draw_HeaderJustified>
	Screen_Draw_HeaderJustified(150, "Please wait", 11, &Font8, GRAY);
 8003124:	f248 4330 	movw	r3, #33840	@ 0x8430
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <Screen_DrawInitScreen+0x124>)
 800312c:	220b      	movs	r2, #11
 800312e:	490d      	ldr	r1, [pc, #52]	@ (8003164 <Screen_DrawInitScreen+0x128>)
 8003130:	2096      	movs	r0, #150	@ 0x96
 8003132:	f7ff ff61 	bl	8002ff8 <Screen_Draw_HeaderJustified>

	current_screen = INIT_SCREEN;
 8003136:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <Screen_DrawInitScreen+0x12c>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000024 	.word	0x20000024
 8003148:	08014f40 	.word	0x08014f40
 800314c:	080151e4 	.word	0x080151e4
 8003150:	08015504 	.word	0x08015504
 8003154:	080161ac 	.word	0x080161ac
 8003158:	2000001c 	.word	0x2000001c
 800315c:	08014f4c 	.word	0x08014f4c
 8003160:	2000002c 	.word	0x2000002c
 8003164:	08014f5c 	.word	0x08014f5c
 8003168:	20000656 	.word	0x20000656

0800316c <Screen_DrawInfoScreen>:
	return G_SUCCESS;
}


void Screen_DrawInfoScreen()
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af04      	add	r7, sp, #16
	//LCD clear
	LCD_Clear(BLACK);
 8003172:	2000      	movs	r0, #0
 8003174:	f001 fce2 	bl	8004b3c <LCD_Clear>

	// ====================================
	// Header
	// ====================================
	Screen_Draw_HeaderJustified(5, "Information panel", 17, &Font12, WHITE);
 8003178:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	4b99      	ldr	r3, [pc, #612]	@ (80033e4 <Screen_DrawInfoScreen+0x278>)
 8003180:	2211      	movs	r2, #17
 8003182:	4999      	ldr	r1, [pc, #612]	@ (80033e8 <Screen_DrawInfoScreen+0x27c>)
 8003184:	2005      	movs	r0, #5
 8003186:	f7ff ff37 	bl	8002ff8 <Screen_Draw_HeaderJustified>

	// Separator lines
	LCD_DrawLine(0, 25, 128, 25, PURPLE, LINE_DOTTED, DOT_PIXEL_1X1);
 800318a:	2301      	movs	r3, #1
 800318c:	9302      	str	r3, [sp, #8]
 800318e:	2301      	movs	r3, #1
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	f246 03cf 	movw	r3, #24783	@ 0x60cf
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2319      	movs	r3, #25
 800319a:	2280      	movs	r2, #128	@ 0x80
 800319c:	2119      	movs	r1, #25
 800319e:	2000      	movs	r0, #0
 80031a0:	f001 fd5a 	bl	8004c58 <LCD_DrawLine>
	LCD_DrawLine(0, 30, 128, 30, PURPLE, LINE_SOLID, DOT_PIXEL_2X2);
 80031a4:	2302      	movs	r3, #2
 80031a6:	9302      	str	r3, [sp, #8]
 80031a8:	2300      	movs	r3, #0
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	f246 03cf 	movw	r3, #24783	@ 0x60cf
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	231e      	movs	r3, #30
 80031b4:	2280      	movs	r2, #128	@ 0x80
 80031b6:	211e      	movs	r1, #30
 80031b8:	2000      	movs	r0, #0
 80031ba:	f001 fd4d 	bl	8004c58 <LCD_DrawLine>

	// ====================================
	// Servo panel
	// ====================================
	Screen_Draw_HeaderJustified(SERVO_INFO_BLOCK_OFF_Y, "Servo angles [deg]", 18, &Font8, WHITE);
 80031be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4b89      	ldr	r3, [pc, #548]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 80031c6:	2212      	movs	r2, #18
 80031c8:	4989      	ldr	r1, [pc, #548]	@ (80033f0 <Screen_DrawInfoScreen+0x284>)
 80031ca:	2028      	movs	r0, #40	@ 0x28
 80031cc:	f7ff ff14 	bl	8002ff8 <Screen_Draw_HeaderJustified>

	for (int i = 0; i < 2; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	e02a      	b.n	800322c <Screen_DrawInfoScreen+0xc0>
	{
		LCD_DisplayString(5 + i*69, SERVO_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET, "Ref: ", &Font8, BLACK, WHITE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	441a      	add	r2, r3
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3305      	adds	r3, #5
 80031e8:	b298      	uxth	r0, r3
 80031ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	2300      	movs	r3, #0
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	4b7d      	ldr	r3, [pc, #500]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 80031f6:	4a7f      	ldr	r2, [pc, #508]	@ (80033f4 <Screen_DrawInfoScreen+0x288>)
 80031f8:	2137      	movs	r1, #55	@ 0x37
 80031fa:	f001 fef3 	bl	8004fe4 <LCD_DisplayString>
		LCD_DisplayString(5 + i*69, SERVO_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET + INFO_OFFSET, "Act: ", &Font8, BLACK, WHITE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	b29b      	uxth	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	441a      	add	r2, r3
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	4413      	add	r3, r2
 800320c:	b29b      	uxth	r3, r3
 800320e:	3305      	adds	r3, #5
 8003210:	b298      	uxth	r0, r3
 8003212:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	2300      	movs	r3, #0
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4b73      	ldr	r3, [pc, #460]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 800321e:	4a76      	ldr	r2, [pc, #472]	@ (80033f8 <Screen_DrawInfoScreen+0x28c>)
 8003220:	2141      	movs	r1, #65	@ 0x41
 8003222:	f001 fedf 	bl	8004fe4 <LCD_DisplayString>
	for (int i = 0; i < 2; i++)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3301      	adds	r3, #1
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	ddd1      	ble.n	80031d6 <Screen_DrawInfoScreen+0x6a>
	}

	// Column separator
	LCD_DrawLine(64, SERVO_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET, 64, SERVO_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET + INFO_OFFSET + 8, PURPLE, LINE_DOTTED, DOT_PIXEL_1X1);
 8003232:	2301      	movs	r3, #1
 8003234:	9302      	str	r3, [sp, #8]
 8003236:	2301      	movs	r3, #1
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	f246 03cf 	movw	r3, #24783	@ 0x60cf
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2349      	movs	r3, #73	@ 0x49
 8003242:	2240      	movs	r2, #64	@ 0x40
 8003244:	2137      	movs	r1, #55	@ 0x37
 8003246:	2040      	movs	r0, #64	@ 0x40
 8003248:	f001 fd06 	bl	8004c58 <LCD_DrawLine>

	// Panel separator
	LCD_DrawLine(0, SERVO_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET + INFO_OFFSET + 15, 128, SERVO_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET + INFO_OFFSET + 15, PURPLE, LINE_DOTTED, DOT_PIXEL_1X1);
 800324c:	2301      	movs	r3, #1
 800324e:	9302      	str	r3, [sp, #8]
 8003250:	2301      	movs	r3, #1
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	f246 03cf 	movw	r3, #24783	@ 0x60cf
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	2350      	movs	r3, #80	@ 0x50
 800325c:	2280      	movs	r2, #128	@ 0x80
 800325e:	2150      	movs	r1, #80	@ 0x50
 8003260:	2000      	movs	r0, #0
 8003262:	f001 fcf9 	bl	8004c58 <LCD_DrawLine>

	// ====================================
	// Module orientation panel
	// ====================================
	Screen_Draw_HeaderJustified(ACC_INFO_BLOCK_OFF_Y, "Module orientation [deg]", 24, &Font8, WHITE);
 8003266:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	4b5f      	ldr	r3, [pc, #380]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 800326e:	2218      	movs	r2, #24
 8003270:	4962      	ldr	r1, [pc, #392]	@ (80033fc <Screen_DrawInfoScreen+0x290>)
 8003272:	2055      	movs	r0, #85	@ 0x55
 8003274:	f7ff fec0 	bl	8002ff8 <Screen_Draw_HeaderJustified>

	for (int i = 0; i < 2; i++)
 8003278:	2300      	movs	r3, #0
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	e03e      	b.n	80032fc <Screen_DrawInfoScreen+0x190>
	{
		LCD_DisplayString(5 + i*69, ACC_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET, "A: ", &Font8, BLACK, WHITE);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	441a      	add	r2, r3
 8003288:	0092      	lsls	r2, r2, #2
 800328a:	4413      	add	r3, r2
 800328c:	b29b      	uxth	r3, r3
 800328e:	3305      	adds	r3, #5
 8003290:	b298      	uxth	r0, r3
 8003292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	2300      	movs	r3, #0
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4b53      	ldr	r3, [pc, #332]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 800329e:	4a58      	ldr	r2, [pc, #352]	@ (8003400 <Screen_DrawInfoScreen+0x294>)
 80032a0:	2164      	movs	r1, #100	@ 0x64
 80032a2:	f001 fe9f 	bl	8004fe4 <LCD_DisplayString>
		LCD_DisplayString(5 + i*69, ACC_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET + INFO_OFFSET, "B: ", &Font8, BLACK, WHITE);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	441a      	add	r2, r3
 80032b0:	0092      	lsls	r2, r2, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3305      	adds	r3, #5
 80032b8:	b298      	uxth	r0, r3
 80032ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	4b49      	ldr	r3, [pc, #292]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 80032c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003404 <Screen_DrawInfoScreen+0x298>)
 80032c8:	216e      	movs	r1, #110	@ 0x6e
 80032ca:	f001 fe8b 	bl	8004fe4 <LCD_DisplayString>
		LCD_DisplayString(5 + i*69, ACC_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET + 2 * INFO_OFFSET, "C: ", &Font8, BLACK, WHITE);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	441a      	add	r2, r3
 80032d8:	0092      	lsls	r2, r2, #2
 80032da:	4413      	add	r3, r2
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3305      	adds	r3, #5
 80032e0:	b298      	uxth	r0, r3
 80032e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2300      	movs	r3, #0
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4b3f      	ldr	r3, [pc, #252]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 80032ee:	4a46      	ldr	r2, [pc, #280]	@ (8003408 <Screen_DrawInfoScreen+0x29c>)
 80032f0:	2178      	movs	r1, #120	@ 0x78
 80032f2:	f001 fe77 	bl	8004fe4 <LCD_DisplayString>
	for (int i = 0; i < 2; i++)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	3301      	adds	r3, #1
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	ddbd      	ble.n	800327e <Screen_DrawInfoScreen+0x112>
	}
	// Column separator
	LCD_DrawLine(64, ACC_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET, 64, ACC_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET + 2*INFO_OFFSET + 8, PURPLE, LINE_DOTTED, DOT_PIXEL_1X1);
 8003302:	2301      	movs	r3, #1
 8003304:	9302      	str	r3, [sp, #8]
 8003306:	2301      	movs	r3, #1
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	f246 03cf 	movw	r3, #24783	@ 0x60cf
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	2240      	movs	r2, #64	@ 0x40
 8003314:	2164      	movs	r1, #100	@ 0x64
 8003316:	2040      	movs	r0, #64	@ 0x40
 8003318:	f001 fc9e 	bl	8004c58 <LCD_DrawLine>

	// Status panel
	LCD_DrawLine(0, 140, 128, 140, PURPLE, LINE_SOLID, DOT_PIXEL_1X1);
 800331c:	2301      	movs	r3, #1
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	2300      	movs	r3, #0
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	f246 03cf 	movw	r3, #24783	@ 0x60cf
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	238c      	movs	r3, #140	@ 0x8c
 800332c:	2280      	movs	r2, #128	@ 0x80
 800332e:	218c      	movs	r1, #140	@ 0x8c
 8003330:	2000      	movs	r0, #0
 8003332:	f001 fc91 	bl	8004c58 <LCD_DrawLine>
		LCD_DrawLine(0, 143, 128, 143, PURPLE, LINE_DOTTED, DOT_PIXEL_1X1);
 8003336:	2301      	movs	r3, #1
 8003338:	9302      	str	r3, [sp, #8]
 800333a:	2301      	movs	r3, #1
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	f246 03cf 	movw	r3, #24783	@ 0x60cf
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	238f      	movs	r3, #143	@ 0x8f
 8003346:	2280      	movs	r2, #128	@ 0x80
 8003348:	218f      	movs	r1, #143	@ 0x8f
 800334a:	2000      	movs	r0, #0
 800334c:	f001 fc84 	bl	8004c58 <LCD_DrawLine>

	// ====================================
	// Status panel
	// ====================================
	LCD_DisplayString(5, STATUS_INFO_OFF_Y, "S1", &Font8, BLACK, DARK_GREEN);
 8003350:	f642 6369 	movw	r3, #11881	@ 0x2e69
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2300      	movs	r3, #0
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	4b24      	ldr	r3, [pc, #144]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 800335c:	4a2b      	ldr	r2, [pc, #172]	@ (800340c <Screen_DrawInfoScreen+0x2a0>)
 800335e:	2196      	movs	r1, #150	@ 0x96
 8003360:	2005      	movs	r0, #5
 8003362:	f001 fe3f 	bl	8004fe4 <LCD_DisplayString>
	LCD_DisplayString(25, STATUS_INFO_OFF_Y, "S2", &Font8, BLACK, DARK_GREEN);
 8003366:	f642 6369 	movw	r3, #11881	@ 0x2e69
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2300      	movs	r3, #0
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 8003372:	4a27      	ldr	r2, [pc, #156]	@ (8003410 <Screen_DrawInfoScreen+0x2a4>)
 8003374:	2196      	movs	r1, #150	@ 0x96
 8003376:	2019      	movs	r0, #25
 8003378:	f001 fe34 	bl	8004fe4 <LCD_DisplayString>
	LCD_DisplayString(45, STATUS_INFO_OFF_Y, "A1", &Font8, BLACK, DARK_GREEN);
 800337c:	f642 6369 	movw	r3, #11881	@ 0x2e69
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	2300      	movs	r3, #0
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 8003388:	4a22      	ldr	r2, [pc, #136]	@ (8003414 <Screen_DrawInfoScreen+0x2a8>)
 800338a:	2196      	movs	r1, #150	@ 0x96
 800338c:	202d      	movs	r0, #45	@ 0x2d
 800338e:	f001 fe29 	bl	8004fe4 <LCD_DisplayString>
	LCD_DisplayString(65, STATUS_INFO_OFF_Y, "A2", &Font8, BLACK, DARK_GREEN);
 8003392:	f642 6369 	movw	r3, #11881	@ 0x2e69
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	2300      	movs	r3, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4b13      	ldr	r3, [pc, #76]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 800339e:	4a1e      	ldr	r2, [pc, #120]	@ (8003418 <Screen_DrawInfoScreen+0x2ac>)
 80033a0:	2196      	movs	r1, #150	@ 0x96
 80033a2:	2041      	movs	r0, #65	@ 0x41
 80033a4:	f001 fe1e 	bl	8004fe4 <LCD_DisplayString>
	LCD_DisplayString(85, STATUS_INFO_OFF_Y, "SD", &Font8, BLACK, DARK_GREEN);
 80033a8:	f642 6369 	movw	r3, #11881	@ 0x2e69
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	2300      	movs	r3, #0
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 80033b4:	4a19      	ldr	r2, [pc, #100]	@ (800341c <Screen_DrawInfoScreen+0x2b0>)
 80033b6:	2196      	movs	r1, #150	@ 0x96
 80033b8:	2055      	movs	r0, #85	@ 0x55
 80033ba:	f001 fe13 	bl	8004fe4 <LCD_DisplayString>
	LCD_DisplayString(105, STATUS_INFO_OFF_Y, "CAN", &Font8, BLACK, DARK_GREEN);
 80033be:	f642 6369 	movw	r3, #11881	@ 0x2e69
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	2300      	movs	r3, #0
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <Screen_DrawInfoScreen+0x280>)
 80033ca:	4a15      	ldr	r2, [pc, #84]	@ (8003420 <Screen_DrawInfoScreen+0x2b4>)
 80033cc:	2196      	movs	r1, #150	@ 0x96
 80033ce:	2069      	movs	r0, #105	@ 0x69
 80033d0:	f001 fe08 	bl	8004fe4 <LCD_DisplayString>

	current_screen = INFO_SCREEN;
 80033d4:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <Screen_DrawInfoScreen+0x2b8>)
 80033d6:	2202      	movs	r2, #2
 80033d8:	701a      	strb	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000001c 	.word	0x2000001c
 80033e8:	08014fb4 	.word	0x08014fb4
 80033ec:	2000002c 	.word	0x2000002c
 80033f0:	08014fc8 	.word	0x08014fc8
 80033f4:	08014fdc 	.word	0x08014fdc
 80033f8:	08014fe4 	.word	0x08014fe4
 80033fc:	08014fec 	.word	0x08014fec
 8003400:	08015008 	.word	0x08015008
 8003404:	0801500c 	.word	0x0801500c
 8003408:	08015010 	.word	0x08015010
 800340c:	08015014 	.word	0x08015014
 8003410:	08015018 	.word	0x08015018
 8003414:	0801501c 	.word	0x0801501c
 8003418:	08015020 	.word	0x08015020
 800341c:	08015024 	.word	0x08015024
 8003420:	08015028 	.word	0x08015028
 8003424:	20000656 	.word	0x20000656

08003428 <Screen_UpdateStatus>:

ReturnCode Screen_UpdateStatus(PERIPHERAL per, uint8_t is_ok)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af02      	add	r7, sp, #8
 800342e:	4603      	mov	r3, r0
 8003430:	460a      	mov	r2, r1
 8003432:	71fb      	strb	r3, [r7, #7]
 8003434:	4613      	mov	r3, r2
 8003436:	71bb      	strb	r3, [r7, #6]
	// Check if displayed panel is correct
	if (current_screen != INFO_SCREEN)
 8003438:	4b35      	ldr	r3, [pc, #212]	@ (8003510 <Screen_UpdateStatus+0xe8>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d001      	beq.n	8003444 <Screen_UpdateStatus+0x1c>
		return G_ERROR;
 8003440:	2300      	movs	r3, #0
 8003442:	e060      	b.n	8003506 <Screen_UpdateStatus+0xde>

	uint16_t color = is_ok == 0x01 ? DARK_GREEN : DARK_RED;
 8003444:	79bb      	ldrb	r3, [r7, #6]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <Screen_UpdateStatus+0x28>
 800344a:	f642 6369 	movw	r3, #11881	@ 0x2e69
 800344e:	e001      	b.n	8003454 <Screen_UpdateStatus+0x2c>
 8003450:	f24c 1386 	movw	r3, #49542	@ 0xc186
 8003454:	81fb      	strh	r3, [r7, #14]
	switch(per)
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d851      	bhi.n	8003500 <Screen_UpdateStatus+0xd8>
 800345c:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <Screen_UpdateStatus+0x3c>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	080034eb 	.word	0x080034eb
 8003468:	0800347d 	.word	0x0800347d
 800346c:	08003493 	.word	0x08003493
 8003470:	080034a9 	.word	0x080034a9
 8003474:	080034bf 	.word	0x080034bf
 8003478:	080034d5 	.word	0x080034d5
	{
		case SERVO_0:
			LCD_DisplayString(5, STATUS_INFO_OFF_Y, "S1", &Font8, BLACK, color);
 800347c:	89fb      	ldrh	r3, [r7, #14]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	2300      	movs	r3, #0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4b23      	ldr	r3, [pc, #140]	@ (8003514 <Screen_UpdateStatus+0xec>)
 8003486:	4a24      	ldr	r2, [pc, #144]	@ (8003518 <Screen_UpdateStatus+0xf0>)
 8003488:	2196      	movs	r1, #150	@ 0x96
 800348a:	2005      	movs	r0, #5
 800348c:	f001 fdaa 	bl	8004fe4 <LCD_DisplayString>
			break;
 8003490:	e038      	b.n	8003504 <Screen_UpdateStatus+0xdc>
		case SERVO_1:
			LCD_DisplayString(25, STATUS_INFO_OFF_Y, "S2", &Font8, BLACK, color);
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	2300      	movs	r3, #0
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4b1e      	ldr	r3, [pc, #120]	@ (8003514 <Screen_UpdateStatus+0xec>)
 800349c:	4a1f      	ldr	r2, [pc, #124]	@ (800351c <Screen_UpdateStatus+0xf4>)
 800349e:	2196      	movs	r1, #150	@ 0x96
 80034a0:	2019      	movs	r0, #25
 80034a2:	f001 fd9f 	bl	8004fe4 <LCD_DisplayString>
			break;
 80034a6:	e02d      	b.n	8003504 <Screen_UpdateStatus+0xdc>
		case ACC_0:
			LCD_DisplayString(45, STATUS_INFO_OFF_Y, "A1", &Font8, BLACK, color);
 80034a8:	89fb      	ldrh	r3, [r7, #14]
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	2300      	movs	r3, #0
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4b18      	ldr	r3, [pc, #96]	@ (8003514 <Screen_UpdateStatus+0xec>)
 80034b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <Screen_UpdateStatus+0xf8>)
 80034b4:	2196      	movs	r1, #150	@ 0x96
 80034b6:	202d      	movs	r0, #45	@ 0x2d
 80034b8:	f001 fd94 	bl	8004fe4 <LCD_DisplayString>
			break;
 80034bc:	e022      	b.n	8003504 <Screen_UpdateStatus+0xdc>
		case ACC_1:
			LCD_DisplayString(65, STATUS_INFO_OFF_Y, "A2", &Font8, BLACK, color);
 80034be:	89fb      	ldrh	r3, [r7, #14]
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	2300      	movs	r3, #0
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	4b13      	ldr	r3, [pc, #76]	@ (8003514 <Screen_UpdateStatus+0xec>)
 80034c8:	4a16      	ldr	r2, [pc, #88]	@ (8003524 <Screen_UpdateStatus+0xfc>)
 80034ca:	2196      	movs	r1, #150	@ 0x96
 80034cc:	2041      	movs	r0, #65	@ 0x41
 80034ce:	f001 fd89 	bl	8004fe4 <LCD_DisplayString>
			break;
 80034d2:	e017      	b.n	8003504 <Screen_UpdateStatus+0xdc>
		case SD:
			LCD_DisplayString(85, STATUS_INFO_OFF_Y, "SD", &Font8, BLACK, color);
 80034d4:	89fb      	ldrh	r3, [r7, #14]
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <Screen_UpdateStatus+0xec>)
 80034de:	4a12      	ldr	r2, [pc, #72]	@ (8003528 <Screen_UpdateStatus+0x100>)
 80034e0:	2196      	movs	r1, #150	@ 0x96
 80034e2:	2055      	movs	r0, #85	@ 0x55
 80034e4:	f001 fd7e 	bl	8004fe4 <LCD_DisplayString>
			break;
 80034e8:	e00c      	b.n	8003504 <Screen_UpdateStatus+0xdc>
		case CAN:
			LCD_DisplayString(105, STATUS_INFO_OFF_Y, "CAN", &Font8, BLACK, color);
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	4b08      	ldr	r3, [pc, #32]	@ (8003514 <Screen_UpdateStatus+0xec>)
 80034f4:	4a0d      	ldr	r2, [pc, #52]	@ (800352c <Screen_UpdateStatus+0x104>)
 80034f6:	2196      	movs	r1, #150	@ 0x96
 80034f8:	2069      	movs	r0, #105	@ 0x69
 80034fa:	f001 fd73 	bl	8004fe4 <LCD_DisplayString>
			break;
 80034fe:	e001      	b.n	8003504 <Screen_UpdateStatus+0xdc>
		default:
			return G_ERROR;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <Screen_UpdateStatus+0xde>
	}

	return G_SUCCESS;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000656 	.word	0x20000656
 8003514:	2000002c 	.word	0x2000002c
 8003518:	08015014 	.word	0x08015014
 800351c:	08015018 	.word	0x08015018
 8003520:	0801501c 	.word	0x0801501c
 8003524:	08015020 	.word	0x08015020
 8003528:	08015024 	.word	0x08015024
 800352c:	08015028 	.word	0x08015028

08003530 <Screen_UpdateData>:

ReturnCode Screen_UpdateData(PERIPHERAL per, float* data, uint8_t length)
{
 8003530:	b5b0      	push	{r4, r5, r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af04      	add	r7, sp, #16
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
 800353c:	4613      	mov	r3, r2
 800353e:	71bb      	strb	r3, [r7, #6]
	// Check if displayed panel is correct
	if (current_screen != INFO_SCREEN)
 8003540:	4b52      	ldr	r3, [pc, #328]	@ (800368c <Screen_UpdateData+0x15c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d001      	beq.n	800354c <Screen_UpdateData+0x1c>
		return G_ERROR;
 8003548:	2300      	movs	r3, #0
 800354a:	e09b      	b.n	8003684 <Screen_UpdateData+0x154>

	// Get position to which data should be written to
	uint8_t x, y;
	switch(per)
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	3b01      	subs	r3, #1
 8003550:	2b03      	cmp	r3, #3
 8003552:	d81f      	bhi.n	8003594 <Screen_UpdateData+0x64>
 8003554:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <Screen_UpdateData+0x2c>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	0800356d 	.word	0x0800356d
 8003560:	08003577 	.word	0x08003577
 8003564:	08003581 	.word	0x08003581
 8003568:	0800358b 	.word	0x0800358b
	{
		case SERVO_0:
			x = SERVO_INFO_DATA_OFF;
 800356c:	231e      	movs	r3, #30
 800356e:	75fb      	strb	r3, [r7, #23]
			y = SERVO_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET;
 8003570:	2337      	movs	r3, #55	@ 0x37
 8003572:	75bb      	strb	r3, [r7, #22]
			break;
 8003574:	e010      	b.n	8003598 <Screen_UpdateData+0x68>
		case SERVO_1:
			x = SERVO_INFO_DATA_OFF + 69;
 8003576:	2363      	movs	r3, #99	@ 0x63
 8003578:	75fb      	strb	r3, [r7, #23]
			y = SERVO_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET;
 800357a:	2337      	movs	r3, #55	@ 0x37
 800357c:	75bb      	strb	r3, [r7, #22]
			break;
 800357e:	e00b      	b.n	8003598 <Screen_UpdateData+0x68>
		case ACC_0:
			x = ACC_INFO_DATA_OFF;
 8003580:	2319      	movs	r3, #25
 8003582:	75fb      	strb	r3, [r7, #23]
			y = ACC_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET;
 8003584:	2364      	movs	r3, #100	@ 0x64
 8003586:	75bb      	strb	r3, [r7, #22]
			break;
 8003588:	e006      	b.n	8003598 <Screen_UpdateData+0x68>
		case ACC_1:
			x = ACC_INFO_DATA_OFF + 69;
 800358a:	235e      	movs	r3, #94	@ 0x5e
 800358c:	75fb      	strb	r3, [r7, #23]
			y = ACC_INFO_BLOCK_OFF_Y + INFO_BIG_OFFSET;
 800358e:	2364      	movs	r3, #100	@ 0x64
 8003590:	75bb      	strb	r3, [r7, #22]
			break;
 8003592:	e001      	b.n	8003598 <Screen_UpdateData+0x68>
		default:
			return G_ERROR;
 8003594:	2300      	movs	r3, #0
 8003596:	e075      	b.n	8003684 <Screen_UpdateData+0x154>
	}
	// Clear space
	LCD_DrawRectangle(x-5, y, x + 25, y + 9 * length, BLACK, DRAW_FULL, DOT_PIXEL_1X1);
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b05      	subs	r3, #5
 800359e:	b298      	uxth	r0, r3
 80035a0:	7dbb      	ldrb	r3, [r7, #22]
 80035a2:	b299      	uxth	r1, r3
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3319      	adds	r3, #25
 80035aa:	b29c      	uxth	r4, r3
 80035ac:	7dbb      	ldrb	r3, [r7, #22]
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	79bb      	ldrb	r3, [r7, #6]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	461d      	mov	r5, r3
 80035b6:	00ed      	lsls	r5, r5, #3
 80035b8:	442b      	add	r3, r5
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4413      	add	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2201      	movs	r2, #1
 80035c2:	9202      	str	r2, [sp, #8]
 80035c4:	2201      	movs	r2, #1
 80035c6:	9201      	str	r2, [sp, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	9200      	str	r2, [sp, #0]
 80035cc:	4622      	mov	r2, r4
 80035ce:	f001 fbf3 	bl	8004db8 <LCD_DrawRectangle>

	// Display value
	char buff[7];
	for(int i = 0; i < length; i++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e050      	b.n	800367a <Screen_UpdateData+0x14a>
	{
		snprintf(buff, sizeof(buff), "%2.2f", *(data + i));
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ffd0 	bl	8000588 <__aeabi_f2d>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	f107 0008 	add.w	r0, r7, #8
 80035f0:	e9cd 2300 	strd	r2, r3, [sp]
 80035f4:	4a26      	ldr	r2, [pc, #152]	@ (8003690 <Screen_UpdateData+0x160>)
 80035f6:	2107      	movs	r1, #7
 80035f8:	f00d ffcc 	bl	8011594 <sniprintf>

		// Offset if there is '-' sign additionally
		if( *(data + i) < 0)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	4413      	add	r3, r2
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003610:	d519      	bpl.n	8003646 <Screen_UpdateData+0x116>
			LCD_DisplayString(x - 5, y + i * INFO_OFFSET, buff, &Font8, BLACK, WHITE);
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b05      	subs	r3, #5
 8003618:	b298      	uxth	r0, r3
 800361a:	7dbb      	ldrb	r3, [r7, #22]
 800361c:	b29a      	uxth	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	b29b      	uxth	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	0089      	lsls	r1, r1, #2
 8003626:	440b      	add	r3, r1
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	b29b      	uxth	r3, r3
 800362c:	4413      	add	r3, r2
 800362e:	b299      	uxth	r1, r3
 8003630:	f107 0208 	add.w	r2, r7, #8
 8003634:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	2300      	movs	r3, #0
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	4b15      	ldr	r3, [pc, #84]	@ (8003694 <Screen_UpdateData+0x164>)
 8003640:	f001 fcd0 	bl	8004fe4 <LCD_DisplayString>
 8003644:	e016      	b.n	8003674 <Screen_UpdateData+0x144>
		else
			LCD_DisplayString(x, y + i * INFO_OFFSET, buff, &Font8, BLACK, WHITE);
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	b298      	uxth	r0, r3
 800364a:	7dbb      	ldrb	r3, [r7, #22]
 800364c:	b29a      	uxth	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	b29b      	uxth	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	0089      	lsls	r1, r1, #2
 8003656:	440b      	add	r3, r1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	b29b      	uxth	r3, r3
 800365c:	4413      	add	r3, r2
 800365e:	b299      	uxth	r1, r3
 8003660:	f107 0208 	add.w	r2, r7, #8
 8003664:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	2300      	movs	r3, #0
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <Screen_UpdateData+0x164>)
 8003670:	f001 fcb8 	bl	8004fe4 <LCD_DisplayString>
	for(int i = 0; i < length; i++)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	3301      	adds	r3, #1
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	79bb      	ldrb	r3, [r7, #6]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	429a      	cmp	r2, r3
 8003680:	dbaa      	blt.n	80035d8 <Screen_UpdateData+0xa8>
	}

	return G_SUCCESS;
 8003682:	2301      	movs	r3, #1
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bdb0      	pop	{r4, r5, r7, pc}
 800368c:	20000656 	.word	0x20000656
 8003690:	0801502c 	.word	0x0801502c
 8003694:	2000002c 	.word	0x2000002c

08003698 <Servo_AddControler>:
UART_HandleTypeDef* uart_s2;

uint8_t tx_buffer[8];

ReturnCode Servo_AddControler(uint8_t servo_line, UART_HandleTypeDef* handler)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	71fb      	strb	r3, [r7, #7]
	switch(servo_line)
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <Servo_AddControler+0x18>
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d004      	beq.n	80036b8 <Servo_AddControler+0x20>
 80036ae:	e007      	b.n	80036c0 <Servo_AddControler+0x28>
	{
		case 0x00:
			uart_s1 = handler;
 80036b0:	4a08      	ldr	r2, [pc, #32]	@ (80036d4 <Servo_AddControler+0x3c>)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6013      	str	r3, [r2, #0]
			break;
 80036b6:	e005      	b.n	80036c4 <Servo_AddControler+0x2c>
		case 0x01:
			uart_s2 = handler;
 80036b8:	4a07      	ldr	r2, [pc, #28]	@ (80036d8 <Servo_AddControler+0x40>)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6013      	str	r3, [r2, #0]
			break;
 80036be:	e001      	b.n	80036c4 <Servo_AddControler+0x2c>
		default:
			return C_UART_HANDLE;
 80036c0:	230b      	movs	r3, #11
 80036c2:	e000      	b.n	80036c6 <Servo_AddControler+0x2e>
	}

	return G_SUCCESS;
 80036c4:	2301      	movs	r3, #1
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000658 	.word	0x20000658
 80036d8:	2000065c 	.word	0x2000065c

080036dc <ServoWrite>:

static ReturnCode ServoWrite(UART_HandleTypeDef* uart, uint8_t cmd, uint8_t reg, uint8_t *data_buffer, uint8_t len)
{
 80036dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036e0:	b089      	sub	sp, #36	@ 0x24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	72fb      	strb	r3, [r7, #11]
 80036ec:	4613      	mov	r3, r2
 80036ee:	72bb      	strb	r3, [r7, #10]
 80036f0:	466b      	mov	r3, sp
 80036f2:	461e      	mov	r6, r3
	// Enable transmission mode
	HAL_StatusTypeDef status = HAL_HalfDuplex_EnableTransmitter(uart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f008 f84d 	bl	800b794 <HAL_HalfDuplex_EnableTransmitter>
 80036fa:	4603      	mov	r3, r0
 80036fc:	76fb      	strb	r3, [r7, #27]
	if (status != HAL_OK)
 80036fe:	7efb      	ldrb	r3, [r7, #27]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <ServoWrite+0x2c>
	{
		return C_UART_TRANSMIT;
 8003704:	2309      	movs	r3, #9
 8003706:	e09d      	b.n	8003844 <ServoWrite+0x168>
	}

	// Create helper buffer
	const uint8_t buffer_size = (len > 5) ? len + 1 : 6;
 8003708:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800370c:	2b05      	cmp	r3, #5
 800370e:	bf38      	it	cc
 8003710:	2305      	movcc	r3, #5
 8003712:	b2db      	uxtb	r3, r3
 8003714:	3301      	adds	r3, #1
 8003716:	76bb      	strb	r3, [r7, #26]
	uint8_t tx_buffer[buffer_size];
 8003718:	7ebb      	ldrb	r3, [r7, #26]
 800371a:	3b01      	subs	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	7ebb      	ldrb	r3, [r7, #26]
 8003720:	2200      	movs	r2, #0
 8003722:	4698      	mov	r8, r3
 8003724:	4691      	mov	r9, r2
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800373a:	7ebb      	ldrb	r3, [r7, #26]
 800373c:	2200      	movs	r2, #0
 800373e:	461c      	mov	r4, r3
 8003740:	4615      	mov	r5, r2
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	00eb      	lsls	r3, r5, #3
 800374c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003750:	00e2      	lsls	r2, r4, #3
 8003752:	7ebb      	ldrb	r3, [r7, #26]
 8003754:	3307      	adds	r3, #7
 8003756:	08db      	lsrs	r3, r3, #3
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	ebad 0d03 	sub.w	sp, sp, r3
 800375e:	466b      	mov	r3, sp
 8003760:	3300      	adds	r3, #0
 8003762:	613b      	str	r3, [r7, #16]

	// Stabilize line
	tx_buffer[0] = 0xFF;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	22ff      	movs	r2, #255	@ 0xff
 8003768:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = 0xFF;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	22ff      	movs	r2, #255	@ 0xff
 800376e:	705a      	strb	r2, [r3, #1]

	// Transmission details
	//!!!!!!!!!!!!!!!!!!!!!!!!!
	//	TBI changing IDS
	//!!!!!!!!!!!!!!!!!!!!!!!!!
	tx_buffer[2] = 0x01;		// ID
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2201      	movs	r2, #1
 8003774:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = len + 0x03;	// Transmission length
 8003776:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800377a:	3303      	adds	r3, #3
 800377c:	b2da      	uxtb	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = cmd;		// Instruction code - write = 0x03
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	7afa      	ldrb	r2, [r7, #11]
 8003786:	711a      	strb	r2, [r3, #4]
	tx_buffer[5] = reg;			// Servo memory address
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	7aba      	ldrb	r2, [r7, #10]
 800378c:	715a      	strb	r2, [r3, #5]

	uint8_t checksum = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	77fb      	strb	r3, [r7, #31]
	// Calculate checksum from tx_buffer
	for (uint8_t i = 0; i < len; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	77bb      	strb	r3, [r7, #30]
 8003796:	e009      	b.n	80037ac <ServoWrite+0xd0>
	{
		checksum += *(data_buffer + i);
 8003798:	7fbb      	ldrb	r3, [r7, #30]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	4413      	add	r3, r2
 80037a4:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i < len; i++)
 80037a6:	7fbb      	ldrb	r3, [r7, #30]
 80037a8:	3301      	adds	r3, #1
 80037aa:	77bb      	strb	r3, [r7, #30]
 80037ac:	7fba      	ldrb	r2, [r7, #30]
 80037ae:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d3f0      	bcc.n	8003798 <ServoWrite+0xbc>
	}

	// Update checksum - skip buffering 0xFF bytes
	for ( uint8_t i = 2; i < 6; i++)
 80037b6:	2302      	movs	r3, #2
 80037b8:	777b      	strb	r3, [r7, #29]
 80037ba:	e008      	b.n	80037ce <ServoWrite+0xf2>
	{
		checksum += tx_buffer[i];
 80037bc:	7f7b      	ldrb	r3, [r7, #29]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	5cd2      	ldrb	r2, [r2, r3]
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	4413      	add	r3, r2
 80037c6:	77fb      	strb	r3, [r7, #31]
	for ( uint8_t i = 2; i < 6; i++)
 80037c8:	7f7b      	ldrb	r3, [r7, #29]
 80037ca:	3301      	adds	r3, #1
 80037cc:	777b      	strb	r3, [r7, #29]
 80037ce:	7f7b      	ldrb	r3, [r7, #29]
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	d9f3      	bls.n	80037bc <ServoWrite+0xe0>
	}

	status = HAL_UART_Transmit(uart, tx_buffer, 6, SERVO_TIMEOUT);
 80037d4:	23c8      	movs	r3, #200	@ 0xc8
 80037d6:	2206      	movs	r2, #6
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f007 fb66 	bl	800aeac <HAL_UART_Transmit>
 80037e0:	4603      	mov	r3, r0
 80037e2:	76fb      	strb	r3, [r7, #27]
	if (status != HAL_OK)
 80037e4:	7efb      	ldrb	r3, [r7, #27]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <ServoWrite+0x112>
		return C_UART_TRANSMIT;
 80037ea:	2309      	movs	r3, #9
 80037ec:	e02a      	b.n	8003844 <ServoWrite+0x168>

	// Load data to tx_buff
	for (uint8_t i = 0; i < len; i++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	773b      	strb	r3, [r7, #28]
 80037f2:	e009      	b.n	8003808 <ServoWrite+0x12c>
	{
		tx_buffer[i] = *(data_buffer + i);
 80037f4:	7f3b      	ldrb	r3, [r7, #28]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	441a      	add	r2, r3
 80037fa:	7f3b      	ldrb	r3, [r7, #28]
 80037fc:	7811      	ldrb	r1, [r2, #0]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len; i++)
 8003802:	7f3b      	ldrb	r3, [r7, #28]
 8003804:	3301      	adds	r3, #1
 8003806:	773b      	strb	r3, [r7, #28]
 8003808:	7f3a      	ldrb	r2, [r7, #28]
 800380a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800380e:	429a      	cmp	r2, r3
 8003810:	d3f0      	bcc.n	80037f4 <ServoWrite+0x118>
	}
	tx_buffer[len] = (~checksum);
 8003812:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003816:	7ffa      	ldrb	r2, [r7, #31]
 8003818:	43d2      	mvns	r2, r2
 800381a:	b2d1      	uxtb	r1, r2
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	54d1      	strb	r1, [r2, r3]

	status = HAL_UART_Transmit(uart, tx_buffer, len + 1, SERVO_TIMEOUT);
 8003820:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003824:	b29b      	uxth	r3, r3
 8003826:	3301      	adds	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	23c8      	movs	r3, #200	@ 0xc8
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f007 fb3c 	bl	800aeac <HAL_UART_Transmit>
 8003834:	4603      	mov	r3, r0
 8003836:	76fb      	strb	r3, [r7, #27]
	if( status != HAL_OK)
 8003838:	7efb      	ldrb	r3, [r7, #27]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <ServoWrite+0x166>
		return C_UART_TRANSMIT;
 800383e:	2309      	movs	r3, #9
 8003840:	e000      	b.n	8003844 <ServoWrite+0x168>

	return G_SUCCESS;
 8003842:	2301      	movs	r3, #1
 8003844:	46b5      	mov	sp, r6
}
 8003846:	4618      	mov	r0, r3
 8003848:	3724      	adds	r7, #36	@ 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003850 <ServoSetPos>:

ReturnCode ServoSetPos(uint8_t servo_line, uint16_t pos, uint16_t speed, uint8_t acc)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af02      	add	r7, sp, #8
 8003856:	4604      	mov	r4, r0
 8003858:	4608      	mov	r0, r1
 800385a:	4611      	mov	r1, r2
 800385c:	461a      	mov	r2, r3
 800385e:	4623      	mov	r3, r4
 8003860:	71fb      	strb	r3, [r7, #7]
 8003862:	4603      	mov	r3, r0
 8003864:	80bb      	strh	r3, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	807b      	strh	r3, [r7, #2]
 800386a:	4613      	mov	r3, r2
 800386c:	71bb      	strb	r3, [r7, #6]
	UART_HandleTypeDef* uart;
	switch(servo_line)
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <ServoSetPos+0x2a>
 8003874:	2b01      	cmp	r3, #1
 8003876:	d004      	beq.n	8003882 <ServoSetPos+0x32>
 8003878:	e007      	b.n	800388a <ServoSetPos+0x3a>
	{
		case 0x00:
			uart = uart_s1;
 800387a:	4b17      	ldr	r3, [pc, #92]	@ (80038d8 <ServoSetPos+0x88>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	617b      	str	r3, [r7, #20]
			break;
 8003880:	e005      	b.n	800388e <ServoSetPos+0x3e>
		case 0x01:
			uart = uart_s2;
 8003882:	4b16      	ldr	r3, [pc, #88]	@ (80038dc <ServoSetPos+0x8c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	617b      	str	r3, [r7, #20]
			break;
 8003888:	e001      	b.n	800388e <ServoSetPos+0x3e>
		default:
			return C_UART_HANDLE;
 800388a:	230b      	movs	r3, #11
 800388c:	e01f      	b.n	80038ce <ServoSetPos+0x7e>
	}

	uint8_t buff[7];

	// Acceleration data
	buff[0] = acc;
 800388e:	79bb      	ldrb	r3, [r7, #6]
 8003890:	733b      	strb	r3, [r7, #12]
	// Position data
	buff[1] = (uint8_t) (pos & 0x00FF); 			// Lower byte
 8003892:	88bb      	ldrh	r3, [r7, #4]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	737b      	strb	r3, [r7, #13]
	buff[2] = (uint8_t) ((pos & 0xFF00) >> 8);		// Higher byte
 8003898:	88bb      	ldrh	r3, [r7, #4]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	b29b      	uxth	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	73bb      	strb	r3, [r7, #14]
	// Time data
	buff[3] = 0x00; 	// Lower byte
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
	buff[4] = 0x00;		// Higher byte
 80038a6:	2300      	movs	r3, #0
 80038a8:	743b      	strb	r3, [r7, #16]
	// Speed data
	buff[5] = (uint8_t) (speed & 0x00FF);			// Lower byte
 80038aa:	887b      	ldrh	r3, [r7, #2]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	747b      	strb	r3, [r7, #17]
	buff[6] = (uint8_t) ((speed & 0xFF00) >> 8);	// Higher byte
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	74bb      	strb	r3, [r7, #18]

	return ServoWrite(uart, SERVO_WRITE_INS, SERVO_ACC_REG, buff, 7);
 80038ba:	f107 030c 	add.w	r3, r7, #12
 80038be:	2207      	movs	r2, #7
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	2229      	movs	r2, #41	@ 0x29
 80038c4:	2103      	movs	r1, #3
 80038c6:	6978      	ldr	r0, [r7, #20]
 80038c8:	f7ff ff08 	bl	80036dc <ServoWrite>
 80038cc:	4603      	mov	r3, r0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000658 	.word	0x20000658
 80038dc:	2000065c 	.word	0x2000065c

080038e0 <ServoRead>:

ReturnCode ServoRead(uint8_t servo_line, uint8_t reg, uint8_t* data_buffer, uint8_t bytes)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	603a      	str	r2, [r7, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
 80038ee:	460b      	mov	r3, r1
 80038f0:	71bb      	strb	r3, [r7, #6]
 80038f2:	4613      	mov	r3, r2
 80038f4:	717b      	strb	r3, [r7, #5]
	UART_HandleTypeDef* uart;
	switch(servo_line)
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <ServoRead+0x22>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d004      	beq.n	800390a <ServoRead+0x2a>
 8003900:	e007      	b.n	8003912 <ServoRead+0x32>
	{
		case 0x00:
			uart = uart_s1;
 8003902:	4b2c      	ldr	r3, [pc, #176]	@ (80039b4 <ServoRead+0xd4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]
			break;
 8003908:	e005      	b.n	8003916 <ServoRead+0x36>
		case 0x01:
			uart = uart_s2;
 800390a:	4b2b      	ldr	r3, [pc, #172]	@ (80039b8 <ServoRead+0xd8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	617b      	str	r3, [r7, #20]
			break;
 8003910:	e001      	b.n	8003916 <ServoRead+0x36>
		default:
			return C_UART_HANDLE;
 8003912:	230b      	movs	r3, #11
 8003914:	e04a      	b.n	80039ac <ServoRead+0xcc>
	}

	// Send data receive request
	if (ServoWrite(uart, SERVO_READ_INS, reg, &bytes, 1) != G_SUCCESS)
 8003916:	1d7b      	adds	r3, r7, #5
 8003918:	79ba      	ldrb	r2, [r7, #6]
 800391a:	2101      	movs	r1, #1
 800391c:	9100      	str	r1, [sp, #0]
 800391e:	2102      	movs	r1, #2
 8003920:	6978      	ldr	r0, [r7, #20]
 8003922:	f7ff fedb 	bl	80036dc <ServoWrite>
 8003926:	4603      	mov	r3, r0
 8003928:	2b01      	cmp	r3, #1
 800392a:	d001      	beq.n	8003930 <ServoRead+0x50>
		return G_SERVO_WRTIE;
 800392c:	230c      	movs	r3, #12
 800392e:	e03d      	b.n	80039ac <ServoRead+0xcc>

	// Change mode into Receiver
	HAL_StatusTypeDef status = HAL_HalfDuplex_EnableReceiver(uart);
 8003930:	6978      	ldr	r0, [r7, #20]
 8003932:	f007 ff63 	bl	800b7fc <HAL_HalfDuplex_EnableReceiver>
 8003936:	4603      	mov	r3, r0
 8003938:	74fb      	strb	r3, [r7, #19]
	if (status != HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <ServoRead+0x64>
		return C_UART_RECEIVE;
 8003940:	230a      	movs	r3, #10
 8003942:	e033      	b.n	80039ac <ServoRead+0xcc>

	// Servo sends additional header message
	uint8_t header_buffer[5];
	// All transmissions start with 0xFF if read byte is different discard it
	HAL_UART_Receive(uart, header_buffer, 1, SERVO_TIMEOUT);
 8003944:	f107 010c 	add.w	r1, r7, #12
 8003948:	23c8      	movs	r3, #200	@ 0xc8
 800394a:	2201      	movs	r2, #1
 800394c:	6978      	ldr	r0, [r7, #20]
 800394e:	f007 fb38 	bl	800afc2 <HAL_UART_Receive>
	if( header_buffer[0] != 0xFF)
 8003952:	7b3b      	ldrb	r3, [r7, #12]
 8003954:	2bff      	cmp	r3, #255	@ 0xff
 8003956:	d007      	beq.n	8003968 <ServoRead+0x88>
		HAL_UART_Receive(uart, header_buffer, 5, SERVO_TIMEOUT);
 8003958:	f107 010c 	add.w	r1, r7, #12
 800395c:	23c8      	movs	r3, #200	@ 0xc8
 800395e:	2205      	movs	r2, #5
 8003960:	6978      	ldr	r0, [r7, #20]
 8003962:	f007 fb2e 	bl	800afc2 <HAL_UART_Receive>
 8003966:	e007      	b.n	8003978 <ServoRead+0x98>
	else
		HAL_UART_Receive(uart, header_buffer + 1, 4, SERVO_TIMEOUT);
 8003968:	f107 010c 	add.w	r1, r7, #12
 800396c:	3101      	adds	r1, #1
 800396e:	23c8      	movs	r3, #200	@ 0xc8
 8003970:	2204      	movs	r2, #4
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f007 fb25 	bl	800afc2 <HAL_UART_Receive>

	status = HAL_UART_Receive(uart, data_buffer, bytes, SERVO_TIMEOUT);
 8003978:	797b      	ldrb	r3, [r7, #5]
 800397a:	461a      	mov	r2, r3
 800397c:	23c8      	movs	r3, #200	@ 0xc8
 800397e:	6839      	ldr	r1, [r7, #0]
 8003980:	6978      	ldr	r0, [r7, #20]
 8003982:	f007 fb1e 	bl	800afc2 <HAL_UART_Receive>
 8003986:	4603      	mov	r3, r0
 8003988:	74fb      	strb	r3, [r7, #19]
	if (status != HAL_OK)
 800398a:	7cfb      	ldrb	r3, [r7, #19]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <ServoRead+0xb4>
		return C_UART_RECEIVE;
 8003990:	230a      	movs	r3, #10
 8003992:	e00b      	b.n	80039ac <ServoRead+0xcc>

	// Verify ID and transmission length
	if ( (header_buffer[2] != 0x01) || (header_buffer[3] != bytes + 0x02) )
 8003994:	7bbb      	ldrb	r3, [r7, #14]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <ServoRead+0xc6>
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	461a      	mov	r2, r3
 800399e:	797b      	ldrb	r3, [r7, #5]
 80039a0:	3302      	adds	r3, #2
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <ServoRead+0xca>
		return C_UART_RECEIVE;
 80039a6:	230a      	movs	r3, #10
 80039a8:	e000      	b.n	80039ac <ServoRead+0xcc>

	return G_SUCCESS;
 80039aa:	2301      	movs	r3, #1
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000658 	.word	0x20000658
 80039b8:	2000065c 	.word	0x2000065c

080039bc <ServoPing>:

ReturnCode ServoPing(uint8_t servo_line, uint8_t id)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	460a      	mov	r2, r1
 80039c6:	71fb      	strb	r3, [r7, #7]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71bb      	strb	r3, [r7, #6]
	UART_HandleTypeDef* uart;
	switch(servo_line)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <ServoPing+0x1c>
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d004      	beq.n	80039e0 <ServoPing+0x24>
 80039d6:	e007      	b.n	80039e8 <ServoPing+0x2c>
	{
		case 0x00:
			uart = uart_s1;
 80039d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003b08 <ServoPing+0x14c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	617b      	str	r3, [r7, #20]
			break;
 80039de:	e005      	b.n	80039ec <ServoPing+0x30>
		case 0x01:
			uart = uart_s2;
 80039e0:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <ServoPing+0x150>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	617b      	str	r3, [r7, #20]
			break;
 80039e6:	e001      	b.n	80039ec <ServoPing+0x30>
		default:
			return C_UART_HANDLE;
 80039e8:	230b      	movs	r3, #11
 80039ea:	e089      	b.n	8003b00 <ServoPing+0x144>
	}

	HAL_StatusTypeDef status = HAL_HalfDuplex_EnableTransmitter(uart);
 80039ec:	6978      	ldr	r0, [r7, #20]
 80039ee:	f007 fed1 	bl	800b794 <HAL_HalfDuplex_EnableTransmitter>
 80039f2:	4603      	mov	r3, r0
 80039f4:	74fb      	strb	r3, [r7, #19]
	if (status != HAL_OK)
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <ServoPing+0x44>
	{
		return C_UART_TRANSMIT;
 80039fc:	2309      	movs	r3, #9
 80039fe:	e07f      	b.n	8003b00 <ServoPing+0x144>
	}

	// Ping buffer
	uint8_t buffer[6];
	uint8_t checksum = ~(id + 0x02 + 0x01);
 8003a00:	79bb      	ldrb	r3, [r7, #6]
 8003a02:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8003a06:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8003a0a:	33fc      	adds	r3, #252	@ 0xfc
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	72fb      	strb	r3, [r7, #11]

	// Buffering
	buffer[0] = 0xFF;
 8003a10:	23ff      	movs	r3, #255	@ 0xff
 8003a12:	733b      	strb	r3, [r7, #12]
	buffer[1] = 0xFF;
 8003a14:	23ff      	movs	r3, #255	@ 0xff
 8003a16:	737b      	strb	r3, [r7, #13]
	// Sending transmission details
	buffer[2] = id;		// ID
 8003a18:	79bb      	ldrb	r3, [r7, #6]
 8003a1a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = 0x02;	// Transmission length
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	73fb      	strb	r3, [r7, #15]
	buffer[4] = 0x01;	// Instruction code - ping = 0x01
 8003a20:	2301      	movs	r3, #1
 8003a22:	743b      	strb	r3, [r7, #16]

	// Send details
	status = HAL_UART_Transmit(uart, buffer, 5, SERVO_TIMEOUT);
 8003a24:	f107 010c 	add.w	r1, r7, #12
 8003a28:	23c8      	movs	r3, #200	@ 0xc8
 8003a2a:	2205      	movs	r2, #5
 8003a2c:	6978      	ldr	r0, [r7, #20]
 8003a2e:	f007 fa3d 	bl	800aeac <HAL_UART_Transmit>
 8003a32:	4603      	mov	r3, r0
 8003a34:	74fb      	strb	r3, [r7, #19]
	if (status != HAL_OK)
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <ServoPing+0x84>
		return C_UART_TRANSMIT;
 8003a3c:	2309      	movs	r3, #9
 8003a3e:	e05f      	b.n	8003b00 <ServoPing+0x144>

	// Send checksum
	status = HAL_UART_Transmit(uart, &checksum, 1, SERVO_TIMEOUT);
 8003a40:	f107 010b 	add.w	r1, r7, #11
 8003a44:	23c8      	movs	r3, #200	@ 0xc8
 8003a46:	2201      	movs	r2, #1
 8003a48:	6978      	ldr	r0, [r7, #20]
 8003a4a:	f007 fa2f 	bl	800aeac <HAL_UART_Transmit>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	74fb      	strb	r3, [r7, #19]
		if (status != HAL_OK)
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <ServoPing+0xa0>
			return C_UART_TRANSMIT;
 8003a58:	2309      	movs	r3, #9
 8003a5a:	e051      	b.n	8003b00 <ServoPing+0x144>

	// Change mode into receiver and get ping response
	status = HAL_HalfDuplex_EnableReceiver(uart);
 8003a5c:	6978      	ldr	r0, [r7, #20]
 8003a5e:	f007 fecd 	bl	800b7fc <HAL_HalfDuplex_EnableReceiver>
 8003a62:	4603      	mov	r3, r0
 8003a64:	74fb      	strb	r3, [r7, #19]
	if (status != HAL_OK)
 8003a66:	7cfb      	ldrb	r3, [r7, #19]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <ServoPing+0xb4>
		return C_UART_RECEIVE;
 8003a6c:	230a      	movs	r3, #10
 8003a6e:	e047      	b.n	8003b00 <ServoPing+0x144>

	status = HAL_UART_Receive(uart, buffer, 1, SERVO_TIMEOUT);
 8003a70:	f107 010c 	add.w	r1, r7, #12
 8003a74:	23c8      	movs	r3, #200	@ 0xc8
 8003a76:	2201      	movs	r2, #1
 8003a78:	6978      	ldr	r0, [r7, #20]
 8003a7a:	f007 faa2 	bl	800afc2 <HAL_UART_Receive>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	74fb      	strb	r3, [r7, #19]
	if (status != HAL_OK)
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <ServoPing+0xd0>
		return C_UART_RECEIVE;
 8003a88:	230a      	movs	r3, #10
 8003a8a:	e039      	b.n	8003b00 <ServoPing+0x144>

	if(buffer[0] != 0xFF)
 8003a8c:	7b3b      	ldrb	r3, [r7, #12]
 8003a8e:	2bff      	cmp	r3, #255	@ 0xff
 8003a90:	d009      	beq.n	8003aa6 <ServoPing+0xea>
		status = HAL_UART_Receive(uart, buffer, 6, SERVO_TIMEOUT);
 8003a92:	f107 010c 	add.w	r1, r7, #12
 8003a96:	23c8      	movs	r3, #200	@ 0xc8
 8003a98:	2206      	movs	r2, #6
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f007 fa91 	bl	800afc2 <HAL_UART_Receive>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	74fb      	strb	r3, [r7, #19]
 8003aa4:	e009      	b.n	8003aba <ServoPing+0xfe>
	else
		status = HAL_UART_Receive(uart, buffer + 1, 5, SERVO_TIMEOUT);
 8003aa6:	f107 010c 	add.w	r1, r7, #12
 8003aaa:	3101      	adds	r1, #1
 8003aac:	23c8      	movs	r3, #200	@ 0xc8
 8003aae:	2205      	movs	r2, #5
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f007 fa86 	bl	800afc2 <HAL_UART_Receive>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	74fb      	strb	r3, [r7, #19]

	if (status != HAL_OK)
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <ServoPing+0x108>
		return C_UART_RECEIVE;
 8003ac0:	230a      	movs	r3, #10
 8003ac2:	e01d      	b.n	8003b00 <ServoPing+0x144>

	// First two bytes are buffer so they are skipped

	if ( buffer[2] != id )
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	79ba      	ldrb	r2, [r7, #6]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <ServoPing+0x114>
		return G_SERVO_READ;
 8003acc:	230d      	movs	r3, #13
 8003ace:	e017      	b.n	8003b00 <ServoPing+0x144>

	if ( buffer[3] != 0x02)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d001      	beq.n	8003ada <ServoPing+0x11e>
		return G_SERVO_READ;
 8003ad6:	230d      	movs	r3, #13
 8003ad8:	e012      	b.n	8003b00 <ServoPing+0x144>

	checksum = buffer[2] + buffer[3] + buffer[4];
 8003ada:	7bba      	ldrb	r2, [r7, #14]
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	4413      	add	r3, r2
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	7c3b      	ldrb	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	72fb      	strb	r3, [r7, #11]
	checksum = ~checksum;
 8003aea:	7afb      	ldrb	r3, [r7, #11]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	72fb      	strb	r3, [r7, #11]
	if ( checksum != buffer[5] )
 8003af2:	7c7a      	ldrb	r2, [r7, #17]
 8003af4:	7afb      	ldrb	r3, [r7, #11]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d001      	beq.n	8003afe <ServoPing+0x142>
		return G_SERVO_READ;
 8003afa:	230d      	movs	r3, #13
 8003afc:	e000      	b.n	8003b00 <ServoPing+0x144>

	return G_SUCCESS;
 8003afe:	2301      	movs	r3, #1
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000658 	.word	0x20000658
 8003b0c:	2000065c 	.word	0x2000065c

08003b10 <ServoTemp>:


ReturnCode ServoTemp(uint8_t servo_line, uint8_t* temp)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	6039      	str	r1, [r7, #0]
 8003b1a:	71fb      	strb	r3, [r7, #7]
	ReturnCode status = ServoRead(servo_line, SERVO_TEMP_REG, temp, 1);
 8003b1c:	79f8      	ldrb	r0, [r7, #7]
 8003b1e:	2301      	movs	r3, #1
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	213f      	movs	r1, #63	@ 0x3f
 8003b24:	f7ff fedc 	bl	80038e0 <ServoRead>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]

	return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <ServoCurrentPosition>:

ReturnCode ServoCurrentPosition(uint8_t servo_line, uint16_t* result)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	6039      	str	r1, [r7, #0]
 8003b40:	71fb      	strb	r3, [r7, #7]
	uint8_t pos_bytes[2];
	ReturnCode status = ServoRead(servo_line, SERVO_POS_REG, pos_bytes, 2);
 8003b42:	f107 020c 	add.w	r2, r7, #12
 8003b46:	79f8      	ldrb	r0, [r7, #7]
 8003b48:	2302      	movs	r3, #2
 8003b4a:	2138      	movs	r1, #56	@ 0x38
 8003b4c:	f7ff fec8 	bl	80038e0 <ServoRead>
 8003b50:	4603      	mov	r3, r0
 8003b52:	73fb      	strb	r3, [r7, #15]

	*(result) = (( (uint16_t) pos_bytes[1] << 8) | pos_bytes[0] );
 8003b54:	7b7b      	ldrb	r3, [r7, #13]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	b21a      	sxth	r2, r3
 8003b5a:	7b3b      	ldrb	r3, [r7, #12]
 8003b5c:	b21b      	sxth	r3, r3
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	b21b      	sxth	r3, r3
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	801a      	strh	r2, [r3, #0]
	return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <InitLogging>:
}SD_STATE;

static SD_STATE state = SD_NOT_INIT;

ReturnCode InitLogging(RTC_HandleTypeDef *handler)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	@ 0x30
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	6078      	str	r0, [r7, #4]
	// Add RTC handler
	rtc = handler;
 8003b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c38 <InitLogging+0xc4>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6013      	str	r3, [r2, #0]

	// Mount SD card
	if (f_mount(&fatfs, path, 0) != FR_OK)
 8003b82:	2200      	movs	r2, #0
 8003b84:	492d      	ldr	r1, [pc, #180]	@ (8003c3c <InitLogging+0xc8>)
 8003b86:	482e      	ldr	r0, [pc, #184]	@ (8003c40 <InitLogging+0xcc>)
 8003b88:	f00b fd94 	bl	800f6b4 <f_mount>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <InitLogging+0x22>
		return C_MOUNT_ERROR;
 8003b92:	2302      	movs	r3, #2
 8003b94:	e04c      	b.n	8003c30 <InitLogging+0xbc>

	// Get current date and time
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;
    HAL_StatusTypeDef HAL_status = HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003b96:	f107 0310 	add.w	r3, r7, #16
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4829      	ldr	r0, [pc, #164]	@ (8003c44 <InitLogging+0xd0>)
 8003ba0:	f005 fa8d 	bl	80090be <HAL_RTC_GetTime>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( HAL_status != HAL_OK)
 8003baa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <InitLogging+0x42>
    	return C_RTC_ERROR;
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	e03c      	b.n	8003c30 <InitLogging+0xbc>

    HAL_status = HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003bb6:	f107 030c 	add.w	r3, r7, #12
 8003bba:	2200      	movs	r2, #0
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4821      	ldr	r0, [pc, #132]	@ (8003c44 <InitLogging+0xd0>)
 8003bc0:	f005 fb5f 	bl	8009282 <HAL_RTC_GetDate>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( HAL_status != HAL_OK)
 8003bca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <InitLogging+0x62>
		return C_RTC_ERROR;
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	e02c      	b.n	8003c30 <InitLogging+0xbc>

    // Create/Open file for logging current day
    snprintf(file_name, sizeof(file_name), "log_%02d_%02d_%02d.txt", date.Date, date.Month, date.Year);
 8003bd6:	7bbb      	ldrb	r3, [r7, #14]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	7b7b      	ldrb	r3, [r7, #13]
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	9201      	str	r2, [sp, #4]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	460b      	mov	r3, r1
 8003be4:	4a18      	ldr	r2, [pc, #96]	@ (8003c48 <InitLogging+0xd4>)
 8003be6:	2111      	movs	r1, #17
 8003be8:	4818      	ldr	r0, [pc, #96]	@ (8003c4c <InitLogging+0xd8>)
 8003bea:	f00d fcd3 	bl	8011594 <sniprintf>

    FRESULT res = f_open(&file, file_name, FA_OPEN_EXISTING);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4916      	ldr	r1, [pc, #88]	@ (8003c4c <InitLogging+0xd8>)
 8003bf2:	4817      	ldr	r0, [pc, #92]	@ (8003c50 <InitLogging+0xdc>)
 8003bf4:	f00b fda4 	bl	800f740 <f_open>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if ( res != FR_OK )
 8003bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00d      	beq.n	8003c22 <InitLogging+0xae>
    {
    	res = f_open(&file, file_name, FA_CREATE_NEW );
 8003c06:	2204      	movs	r2, #4
 8003c08:	4910      	ldr	r1, [pc, #64]	@ (8003c4c <InitLogging+0xd8>)
 8003c0a:	4811      	ldr	r0, [pc, #68]	@ (8003c50 <InitLogging+0xdc>)
 8003c0c:	f00b fd98 	bl	800f740 <f_open>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    	if ( res != FR_OK )
 8003c16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <InitLogging+0xae>
    		return G_FILE_READ;
 8003c1e:	2304      	movs	r3, #4
 8003c20:	e006      	b.n	8003c30 <InitLogging+0xbc>
    }


    f_close(&file);
 8003c22:	480b      	ldr	r0, [pc, #44]	@ (8003c50 <InitLogging+0xdc>)
 8003c24:	f00c f966 	bl	800fef4 <f_close>

    state = SD_READY;
 8003c28:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <InitLogging+0xe0>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
    return G_SUCCESS;
 8003c2e:	2301      	movs	r3, #1
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	@ 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000660 	.word	0x20000660
 8003c3c:	200026cc 	.word	0x200026cc
 8003c40:	20000664 	.word	0x20000664
 8003c44:	200003f0 	.word	0x200003f0
 8003c48:	08015034 	.word	0x08015034
 8003c4c:	20000008 	.word	0x20000008
 8003c50:	2000169c 	.word	0x2000169c
 8003c54:	200026d0 	.word	0x200026d0

08003c58 <SD_WriteTimestamp>:
	state = SD_NOT_INIT;
	return G_SUCCESS;
}

static ReturnCode SD_WriteTimestamp()
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	@ 0x28
 8003c5c:	af02      	add	r7, sp, #8
	if(state == SD_NOT_INIT)
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d10 <SD_WriteTimestamp+0xb8>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <SD_WriteTimestamp+0x12>
			return G_ERROR;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e04e      	b.n	8003d08 <SD_WriteTimestamp+0xb0>

	// Get current date and time
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	HAL_StatusTypeDef HAL_status = HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003c6a:	f107 0308 	add.w	r3, r7, #8
 8003c6e:	2200      	movs	r2, #0
 8003c70:	4619      	mov	r1, r3
 8003c72:	4828      	ldr	r0, [pc, #160]	@ (8003d14 <SD_WriteTimestamp+0xbc>)
 8003c74:	f005 fa23 	bl	80090be <HAL_RTC_GetTime>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	77fb      	strb	r3, [r7, #31]
	if( HAL_status != HAL_OK)
 8003c7c:	7ffb      	ldrb	r3, [r7, #31]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <SD_WriteTimestamp+0x2e>
		return C_RTC_ERROR;
 8003c82:	2308      	movs	r3, #8
 8003c84:	e040      	b.n	8003d08 <SD_WriteTimestamp+0xb0>

	HAL_status = HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003c86:	1d3b      	adds	r3, r7, #4
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4821      	ldr	r0, [pc, #132]	@ (8003d14 <SD_WriteTimestamp+0xbc>)
 8003c8e:	f005 faf8 	bl	8009282 <HAL_RTC_GetDate>
 8003c92:	4603      	mov	r3, r0
 8003c94:	77fb      	strb	r3, [r7, #31]
	if( HAL_status != HAL_OK)
 8003c96:	7ffb      	ldrb	r3, [r7, #31]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <SD_WriteTimestamp+0x48>
		return C_RTC_ERROR;
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	e033      	b.n	8003d08 <SD_WriteTimestamp+0xb0>

	if (state == SD_UPDATE)
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <SD_WriteTimestamp+0xb8>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d10e      	bne.n	8003cc6 <SD_WriteTimestamp+0x6e>
	{
		// Create/Open file for logging current day
		snprintf(file_name, sizeof(file_name), "log_%02d_%02d_%02d.txt", date.Date, date.Month, date.Year);
 8003ca8:	79bb      	ldrb	r3, [r7, #6]
 8003caa:	4619      	mov	r1, r3
 8003cac:	797b      	ldrb	r3, [r7, #5]
 8003cae:	79fa      	ldrb	r2, [r7, #7]
 8003cb0:	9201      	str	r2, [sp, #4]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4a18      	ldr	r2, [pc, #96]	@ (8003d18 <SD_WriteTimestamp+0xc0>)
 8003cb8:	2111      	movs	r1, #17
 8003cba:	4818      	ldr	r0, [pc, #96]	@ (8003d1c <SD_WriteTimestamp+0xc4>)
 8003cbc:	f00d fc6a 	bl	8011594 <sniprintf>

		state = SD_READY;
 8003cc0:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <SD_WriteTimestamp+0xb8>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	701a      	strb	r2, [r3, #0]
	}

	// Open file
	if ( f_open(&file, file_name,FA_OPEN_APPEND | FA_WRITE) != FR_OK )
 8003cc6:	2232      	movs	r2, #50	@ 0x32
 8003cc8:	4914      	ldr	r1, [pc, #80]	@ (8003d1c <SD_WriteTimestamp+0xc4>)
 8003cca:	4815      	ldr	r0, [pc, #84]	@ (8003d20 <SD_WriteTimestamp+0xc8>)
 8003ccc:	f00b fd38 	bl	800f740 <f_open>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <SD_WriteTimestamp+0x82>
		return G_FILE_WRITE;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e016      	b.n	8003d08 <SD_WriteTimestamp+0xb0>

	// Write timestamp
	f_printf(&file, "%02d.%02d.%02d", date.Date, date.Month, date.Year);
 8003cda:	79bb      	ldrb	r3, [r7, #6]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	797b      	ldrb	r3, [r7, #5]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	490e      	ldr	r1, [pc, #56]	@ (8003d24 <SD_WriteTimestamp+0xcc>)
 8003cea:	480d      	ldr	r0, [pc, #52]	@ (8003d20 <SD_WriteTimestamp+0xc8>)
 8003cec:	f00c f9e4 	bl	80100b8 <f_printf>
	f_printf(&file, " %02d:%02d:%02d   ", time.Hours, time.Minutes, time.Seconds);
 8003cf0:	7a3b      	ldrb	r3, [r7, #8]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	7a7b      	ldrb	r3, [r7, #9]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	7abb      	ldrb	r3, [r7, #10]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	490a      	ldr	r1, [pc, #40]	@ (8003d28 <SD_WriteTimestamp+0xd0>)
 8003d00:	4807      	ldr	r0, [pc, #28]	@ (8003d20 <SD_WriteTimestamp+0xc8>)
 8003d02:	f00c f9d9 	bl	80100b8 <f_printf>

	return G_SUCCESS;
 8003d06:	2301      	movs	r3, #1
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	200026d0 	.word	0x200026d0
 8003d14:	200003f0 	.word	0x200003f0
 8003d18:	08015034 	.word	0x08015034
 8003d1c:	20000008 	.word	0x20000008
 8003d20:	2000169c 	.word	0x2000169c
 8003d24:	0801504c 	.word	0x0801504c
 8003d28:	0801505c 	.word	0x0801505c

08003d2c <SD_LogStatus>:


ReturnCode SD_LogStatus(ReturnCode error)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
	ReturnCode retcode = SD_WriteTimestamp();
 8003d36:	f7ff ff8f 	bl	8003c58 <SD_WriteTimestamp>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	73fb      	strb	r3, [r7, #15]
	if (retcode != G_SUCCESS)
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d007      	beq.n	8003d54 <SD_LogStatus+0x28>
	{
		if (retcode == G_FILE_WRITE)
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d102      	bne.n	8003d50 <SD_LogStatus+0x24>
			f_close(&file);
 8003d4a:	4833      	ldr	r0, [pc, #204]	@ (8003e18 <SD_LogStatus+0xec>)
 8003d4c:	f00c f8d2 	bl	800fef4 <f_close>

		return retcode;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	e05c      	b.n	8003e0e <SD_LogStatus+0xe2>
	}

	// Write error message
	switch(error)
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	2b0d      	cmp	r3, #13
 8003d58:	d850      	bhi.n	8003dfc <SD_LogStatus+0xd0>
 8003d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d60 <SD_LogStatus+0x34>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d99 	.word	0x08003d99
 8003d64:	08003dfd 	.word	0x08003dfd
 8003d68:	08003dfd 	.word	0x08003dfd
 8003d6c:	08003dfd 	.word	0x08003dfd
 8003d70:	08003dfd 	.word	0x08003dfd
 8003d74:	08003da3 	.word	0x08003da3
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003db7 	.word	0x08003db7
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dcb 	.word	0x08003dcb
 8003d88:	08003dd5 	.word	0x08003dd5
 8003d8c:	08003ddf 	.word	0x08003ddf
 8003d90:	08003de9 	.word	0x08003de9
 8003d94:	08003df3 	.word	0x08003df3
	{
		case G_ERROR:
			f_puts("General error!\n", &file);
 8003d98:	491f      	ldr	r1, [pc, #124]	@ (8003e18 <SD_LogStatus+0xec>)
 8003d9a:	4820      	ldr	r0, [pc, #128]	@ (8003e1c <SD_LogStatus+0xf0>)
 8003d9c:	f00c f968 	bl	8010070 <f_puts>
			break;
 8003da0:	e031      	b.n	8003e06 <SD_LogStatus+0xda>
		case G_COM_OVERFLOW:
			f_puts("COM: Too much data over!\n", &file);
 8003da2:	491d      	ldr	r1, [pc, #116]	@ (8003e18 <SD_LogStatus+0xec>)
 8003da4:	481e      	ldr	r0, [pc, #120]	@ (8003e20 <SD_LogStatus+0xf4>)
 8003da6:	f00c f963 	bl	8010070 <f_puts>
			break;
 8003daa:	e02c      	b.n	8003e06 <SD_LogStatus+0xda>
		case G_COM_TRANSMIT:
			f_puts("COM: Bad transmit data!\n", &file);
 8003dac:	491a      	ldr	r1, [pc, #104]	@ (8003e18 <SD_LogStatus+0xec>)
 8003dae:	481d      	ldr	r0, [pc, #116]	@ (8003e24 <SD_LogStatus+0xf8>)
 8003db0:	f00c f95e 	bl	8010070 <f_puts>
			break;
 8003db4:	e027      	b.n	8003e06 <SD_LogStatus+0xda>
		case G_COM_RECEIVE:
			f_puts("COM: Error during receive op!\n", &file);
 8003db6:	4918      	ldr	r1, [pc, #96]	@ (8003e18 <SD_LogStatus+0xec>)
 8003db8:	481b      	ldr	r0, [pc, #108]	@ (8003e28 <SD_LogStatus+0xfc>)
 8003dba:	f00c f959 	bl	8010070 <f_puts>
			break;
 8003dbe:	e022      	b.n	8003e06 <SD_LogStatus+0xda>
		case C_RTC_ERROR:
			f_puts("RTC: Can't read data!\n", &file);
 8003dc0:	4915      	ldr	r1, [pc, #84]	@ (8003e18 <SD_LogStatus+0xec>)
 8003dc2:	481a      	ldr	r0, [pc, #104]	@ (8003e2c <SD_LogStatus+0x100>)
 8003dc4:	f00c f954 	bl	8010070 <f_puts>
			break;
 8003dc8:	e01d      	b.n	8003e06 <SD_LogStatus+0xda>
		case C_UART_TRANSMIT:
			f_puts("UART: Can't transmit data!\n", &file);
 8003dca:	4913      	ldr	r1, [pc, #76]	@ (8003e18 <SD_LogStatus+0xec>)
 8003dcc:	4818      	ldr	r0, [pc, #96]	@ (8003e30 <SD_LogStatus+0x104>)
 8003dce:	f00c f94f 	bl	8010070 <f_puts>
			break;
 8003dd2:	e018      	b.n	8003e06 <SD_LogStatus+0xda>
		case C_UART_RECEIVE:
			f_puts("UART: Can't read data!\n", &file);
 8003dd4:	4910      	ldr	r1, [pc, #64]	@ (8003e18 <SD_LogStatus+0xec>)
 8003dd6:	4817      	ldr	r0, [pc, #92]	@ (8003e34 <SD_LogStatus+0x108>)
 8003dd8:	f00c f94a 	bl	8010070 <f_puts>
			break;
 8003ddc:	e013      	b.n	8003e06 <SD_LogStatus+0xda>
		case C_UART_HANDLE:
			f_puts("UART: Wrong handle!\n", &file);
 8003dde:	490e      	ldr	r1, [pc, #56]	@ (8003e18 <SD_LogStatus+0xec>)
 8003de0:	4815      	ldr	r0, [pc, #84]	@ (8003e38 <SD_LogStatus+0x10c>)
 8003de2:	f00c f945 	bl	8010070 <f_puts>
			break;
 8003de6:	e00e      	b.n	8003e06 <SD_LogStatus+0xda>
		case G_SERVO_WRTIE:
			f_puts("Servo: Can't write data!\n", &file);
 8003de8:	490b      	ldr	r1, [pc, #44]	@ (8003e18 <SD_LogStatus+0xec>)
 8003dea:	4814      	ldr	r0, [pc, #80]	@ (8003e3c <SD_LogStatus+0x110>)
 8003dec:	f00c f940 	bl	8010070 <f_puts>
			break;
 8003df0:	e009      	b.n	8003e06 <SD_LogStatus+0xda>
		case G_SERVO_READ:
			f_puts("Servo: Can't read data!\n", &file);
 8003df2:	4909      	ldr	r1, [pc, #36]	@ (8003e18 <SD_LogStatus+0xec>)
 8003df4:	4812      	ldr	r0, [pc, #72]	@ (8003e40 <SD_LogStatus+0x114>)
 8003df6:	f00c f93b 	bl	8010070 <f_puts>
			break;
 8003dfa:	e004      	b.n	8003e06 <SD_LogStatus+0xda>
		default:
			f_puts("Unknown error!\n", &file);
 8003dfc:	4906      	ldr	r1, [pc, #24]	@ (8003e18 <SD_LogStatus+0xec>)
 8003dfe:	4811      	ldr	r0, [pc, #68]	@ (8003e44 <SD_LogStatus+0x118>)
 8003e00:	f00c f936 	bl	8010070 <f_puts>
			break;
 8003e04:	bf00      	nop
	}

	f_close(&file);
 8003e06:	4804      	ldr	r0, [pc, #16]	@ (8003e18 <SD_LogStatus+0xec>)
 8003e08:	f00c f874 	bl	800fef4 <f_close>
	return G_SUCCESS;
 8003e0c:	2301      	movs	r3, #1
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	2000169c 	.word	0x2000169c
 8003e1c:	08015070 	.word	0x08015070
 8003e20:	08015080 	.word	0x08015080
 8003e24:	0801509c 	.word	0x0801509c
 8003e28:	080150b8 	.word	0x080150b8
 8003e2c:	080150d8 	.word	0x080150d8
 8003e30:	080150f0 	.word	0x080150f0
 8003e34:	0801510c 	.word	0x0801510c
 8003e38:	08015124 	.word	0x08015124
 8003e3c:	0801513c 	.word	0x0801513c
 8003e40:	08015158 	.word	0x08015158
 8003e44:	08015174 	.word	0x08015174

08003e48 <SD_LogMsg>:

ReturnCode SD_LogMsg(const char* string)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	ReturnCode retcode = SD_WriteTimestamp();
 8003e50:	f7ff ff02 	bl	8003c58 <SD_WriteTimestamp>
 8003e54:	4603      	mov	r3, r0
 8003e56:	737b      	strb	r3, [r7, #13]
	if (retcode != G_SUCCESS)
 8003e58:	7b7b      	ldrb	r3, [r7, #13]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d007      	beq.n	8003e6e <SD_LogMsg+0x26>
	{
		if (retcode == G_FILE_WRITE)
 8003e5e:	7b7b      	ldrb	r3, [r7, #13]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d102      	bne.n	8003e6a <SD_LogMsg+0x22>
			f_close(&file);
 8003e64:	4810      	ldr	r0, [pc, #64]	@ (8003ea8 <SD_LogMsg+0x60>)
 8003e66:	f00c f845 	bl	800fef4 <f_close>

		return retcode;
 8003e6a:	7b7b      	ldrb	r3, [r7, #13]
 8003e6c:	e017      	b.n	8003e9e <SD_LogMsg+0x56>
	}

	for(uint16_t i = 0; *(string + i) != 0; i++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	81fb      	strh	r3, [r7, #14]
 8003e72:	e00a      	b.n	8003e8a <SD_LogMsg+0x42>
	{
		f_putc(*(string + i), &file);
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	490a      	ldr	r1, [pc, #40]	@ (8003ea8 <SD_LogMsg+0x60>)
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f00c f8d9 	bl	8010036 <f_putc>
	for(uint16_t i = 0; *(string + i) != 0; i++)
 8003e84:	89fb      	ldrh	r3, [r7, #14]
 8003e86:	3301      	adds	r3, #1
 8003e88:	81fb      	strh	r3, [r7, #14]
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4413      	add	r3, r2
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ee      	bne.n	8003e74 <SD_LogMsg+0x2c>
	}

	f_close(&file);
 8003e96:	4804      	ldr	r0, [pc, #16]	@ (8003ea8 <SD_LogMsg+0x60>)
 8003e98:	f00c f82c 	bl	800fef4 <f_close>

	return G_SUCCESS;
 8003e9c:	2301      	movs	r3, #1
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	2000169c 	.word	0x2000169c

08003eac <Local_AddCMD>:
#include "system_logic.h"

static TRANS_STATUS Local_AddCMD(peripheral_state* per, COM_COMMAND new_cmd)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	70fb      	strb	r3, [r7, #3]
	// If there is something wrong with peripheral ignore cmd
	if( (per->state) == PER_FAIL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	d101      	bne.n	8003ec4 <Local_AddCMD+0x18>
		return TRANS_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e00c      	b.n	8003ede <Local_AddCMD+0x32>

	if( per->cmd != COM_IDLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <Local_AddCMD+0x24>
		return TRANS_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e006      	b.n	8003ede <Local_AddCMD+0x32>

	per->cmd = new_cmd;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	701a      	strb	r2, [r3, #0]
	per->state = PER_WORKING;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	705a      	strb	r2, [r3, #1]

	return TRANS_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <CAN_AddCMD>:

static TRANS_STATUS CAN_AddCMD(COM_COMMAND new_cmd, uint8_t id)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	71fb      	strb	r3, [r7, #7]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71bb      	strb	r3, [r7, #6]
	// Add details about transmission
	can0_struct->receiver_id = id;
 8003efc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <CAN_AddCMD+0x44>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	79ba      	ldrb	r2, [r7, #6]
 8003f02:	705a      	strb	r2, [r3, #1]
	can0_struct->weight = CAN_WRITE;
 8003f04:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <CAN_AddCMD+0x44>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2205      	movs	r2, #5
 8003f0a:	701a      	strb	r2, [r3, #0]
	*(can0_struct->tx_buffer) = new_cmd;
 8003f0c:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <CAN_AddCMD+0x44>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	79fa      	ldrb	r2, [r7, #7]
 8003f14:	701a      	strb	r2, [r3, #0]

	// Add command to CAN
	return Local_AddCMD(can0_struct->state, new_cmd);
 8003f16:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <CAN_AddCMD+0x44>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	79fa      	ldrb	r2, [r7, #7]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ffc3 	bl	8003eac <Local_AddCMD>
 8003f26:	4603      	mov	r3, r0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000310 	.word	0x20000310

08003f34 <DecodeOpCode>:

static TRANS_STATUS DecodeOpCode(uint8_t* msg, uint8_t cmd, uint8_t bytes, uint8_t received_id)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	70fb      	strb	r3, [r7, #3]
 8003f46:	460b      	mov	r3, r1
 8003f48:	70bb      	strb	r3, [r7, #2]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	707b      	strb	r3, [r7, #1]
	// If ID different than this module it needs to be transmitted further into the net via CAN
	uint8_t write_can = 0x00;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]
	if( received_id != module_id)
 8003f52:	4b81      	ldr	r3, [pc, #516]	@ (8004158 <DecodeOpCode+0x224>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	787a      	ldrb	r2, [r7, #1]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d012      	beq.n	8003f82 <DecodeOpCode+0x4e>
	{
		if (module_role == MODULE_TARGET)
 8003f5c:	4b7f      	ldr	r3, [pc, #508]	@ (800415c <DecodeOpCode+0x228>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <DecodeOpCode+0x34>
			return TRANS_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0f2      	b.n	800414e <DecodeOpCode+0x21a>

		write_can = 0x01;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	75fb      	strb	r3, [r7, #23]
		if (CAN_AddCMD(cmd, received_id) != TRANS_OK)
 8003f6c:	787a      	ldrb	r2, [r7, #1]
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ffba 	bl	8003eec <CAN_AddCMD>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <DecodeOpCode+0x4e>
			return TRANS_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0e5      	b.n	800414e <DecodeOpCode+0x21a>
	}

	switch( cmd )
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	f200 80e0 	bhi.w	800414c <DecodeOpCode+0x218>
 8003f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f94 <DecodeOpCode+0x60>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08004089 	.word	0x08004089
 8003f98:	08003fad 	.word	0x08003fad
 8003f9c:	08004089 	.word	0x08004089
 8003fa0:	08004089 	.word	0x08004089
 8003fa4:	080040eb 	.word	0x080040eb
 8003fa8:	080040eb 	.word	0x080040eb
	{
		case COM_SERVO_POS_SET:
		{
			// Check if there is enough data
			if(bytes != 7)
 8003fac:	78bb      	ldrb	r3, [r7, #2]
 8003fae:	2b07      	cmp	r3, #7
 8003fb0:	d001      	beq.n	8003fb6 <DecodeOpCode+0x82>
				return TRANS_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0cb      	b.n	800414e <DecodeOpCode+0x21a>

			uint8_t servo_line = *(msg);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	74fb      	strb	r3, [r7, #19]

			// Add command to CAN or local perihperal
			if(write_can == 0x00)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d145      	bne.n	800404e <DecodeOpCode+0x11a>
			{
				// Servo line id
				if( servo_line == 0x00)
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <DecodeOpCode+0xaa>
				{
					if ( Local_AddCMD(servo0, COM_SERVO_POS_SET) != TRANS_OK )
 8003fc8:	4b65      	ldr	r3, [pc, #404]	@ (8004160 <DecodeOpCode+0x22c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2102      	movs	r1, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff6c 	bl	8003eac <Local_AddCMD>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d011      	beq.n	8003ffe <DecodeOpCode+0xca>
						return TRANS_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0b7      	b.n	800414e <DecodeOpCode+0x21a>
				}
				else if ( servo_line == 0x01 )
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d10a      	bne.n	8003ffa <DecodeOpCode+0xc6>
				{
					if ( Local_AddCMD(servo1, COM_SERVO_POS_SET) != TRANS_OK )
 8003fe4:	4b5f      	ldr	r3, [pc, #380]	@ (8004164 <DecodeOpCode+0x230>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ff5e 	bl	8003eac <Local_AddCMD>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <DecodeOpCode+0xca>
						return TRANS_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e0a9      	b.n	800414e <DecodeOpCode+0x21a>
				}
				else
					return TRANS_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e0a7      	b.n	800414e <DecodeOpCode+0x21a>

				// Get transmit data
				uint16_t *buffer = servo_line == 0x00 ? servo0_tx_buff: servo1_tx_buff;
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <DecodeOpCode+0xd4>
 8004004:	4b58      	ldr	r3, [pc, #352]	@ (8004168 <DecodeOpCode+0x234>)
 8004006:	e000      	b.n	800400a <DecodeOpCode+0xd6>
 8004008:	4b58      	ldr	r3, [pc, #352]	@ (800416c <DecodeOpCode+0x238>)
 800400a:	60fb      	str	r3, [r7, #12]
				for(uint8_t i = 0; i < 3; i++)
 800400c:	2300      	movs	r3, #0
 800400e:	75bb      	strb	r3, [r7, #22]
 8004010:	e019      	b.n	8004046 <DecodeOpCode+0x112>
				{
					*(buffer + i) =  ((uint16_t) *(msg + i*2 + 1) << 8) | ((uint16_t) *(msg + i*2 + 2) );
 8004012:	7dbb      	ldrb	r3, [r7, #22]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	3301      	adds	r3, #1
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4413      	add	r3, r2
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	b21a      	sxth	r2, r3
 8004022:	7dbb      	ldrb	r3, [r7, #22]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	3302      	adds	r3, #2
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	440b      	add	r3, r1
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	b21b      	sxth	r3, r3
 8004030:	4313      	orrs	r3, r2
 8004032:	b219      	sxth	r1, r3
 8004034:	7dbb      	ldrb	r3, [r7, #22]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	b28a      	uxth	r2, r1
 800403e:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 0; i < 3; i++)
 8004040:	7dbb      	ldrb	r3, [r7, #22]
 8004042:	3301      	adds	r3, #1
 8004044:	75bb      	strb	r3, [r7, #22]
 8004046:	7dbb      	ldrb	r3, [r7, #22]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d9e2      	bls.n	8004012 <DecodeOpCode+0xde>
 800404c:	e01a      	b.n	8004084 <DecodeOpCode+0x150>
				}
			}
			else
			{
				*(can0_struct->tx_buffer + 1) = servo_line;
 800404e:	4b48      	ldr	r3, [pc, #288]	@ (8004170 <DecodeOpCode+0x23c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	3301      	adds	r3, #1
 8004056:	7cfa      	ldrb	r2, [r7, #19]
 8004058:	701a      	strb	r2, [r3, #0]
				// Get data to transmit through CAN
				for(uint8_t i = 0; i < 6; i++)
 800405a:	2300      	movs	r3, #0
 800405c:	757b      	strb	r3, [r7, #21]
 800405e:	e00e      	b.n	800407e <DecodeOpCode+0x14a>
				{
					*(can0_struct->tx_buffer + i + 2) =  *(msg + i + 1);
 8004060:	7d7b      	ldrb	r3, [r7, #21]
 8004062:	3301      	adds	r3, #1
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	441a      	add	r2, r3
 8004068:	4b41      	ldr	r3, [pc, #260]	@ (8004170 <DecodeOpCode+0x23c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	7d7b      	ldrb	r3, [r7, #21]
 8004070:	3302      	adds	r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	7812      	ldrb	r2, [r2, #0]
 8004076:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < 6; i++)
 8004078:	7d7b      	ldrb	r3, [r7, #21]
 800407a:	3301      	adds	r3, #1
 800407c:	757b      	strb	r3, [r7, #21]
 800407e:	7d7b      	ldrb	r3, [r7, #21]
 8004080:	2b05      	cmp	r3, #5
 8004082:	d9ed      	bls.n	8004060 <DecodeOpCode+0x12c>
				}
			}


			return TRANS_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e062      	b.n	800414e <DecodeOpCode+0x21a>
		case COM_SERVO_POS_READ:
		case COM_SERVO_PING:
		case COM_SERVO_READ_TEMP:
		{
			// Check if there is enough data
			if(bytes != 1)
 8004088:	78bb      	ldrb	r3, [r7, #2]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d001      	beq.n	8004092 <DecodeOpCode+0x15e>
				return TRANS_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e05d      	b.n	800414e <DecodeOpCode+0x21a>

			uint8_t servo_line = *(msg);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	72fb      	strb	r3, [r7, #11]

			if (write_can == 0x00)
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d11d      	bne.n	80040da <DecodeOpCode+0x1a6>
			{
				// Servo line id
				if( servo_line == 0x00)
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <DecodeOpCode+0x188>
				{
					if ( Local_AddCMD(servo0, cmd) != TRANS_OK )
 80040a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004160 <DecodeOpCode+0x22c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fefd 	bl	8003eac <Local_AddCMD>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d016      	beq.n	80040e6 <DecodeOpCode+0x1b2>
						return TRANS_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e048      	b.n	800414e <DecodeOpCode+0x21a>
				}
				else if ( servo_line == 0x01 )
 80040bc:	7afb      	ldrb	r3, [r7, #11]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d111      	bne.n	80040e6 <DecodeOpCode+0x1b2>
				{
					if ( Local_AddCMD(servo1, cmd) != TRANS_OK )
 80040c2:	4b28      	ldr	r3, [pc, #160]	@ (8004164 <DecodeOpCode+0x230>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff feee 	bl	8003eac <Local_AddCMD>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <DecodeOpCode+0x1b2>
						return TRANS_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e039      	b.n	800414e <DecodeOpCode+0x21a>
				}
			}
			else
			{
				*(can0_struct->tx_buffer + 1) = servo_line;
 80040da:	4b25      	ldr	r3, [pc, #148]	@ (8004170 <DecodeOpCode+0x23c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	3301      	adds	r3, #1
 80040e2:	7afa      	ldrb	r2, [r7, #11]
 80040e4:	701a      	strb	r2, [r3, #0]
			}

			return TRANS_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e031      	b.n	800414e <DecodeOpCode+0x21a>

		case COM_ACC_STATUS:
		case COM_ACC_ANGLES_READ:
		{
			// Check if there is enough data
			if(bytes != 1)
 80040ea:	78bb      	ldrb	r3, [r7, #2]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d001      	beq.n	80040f4 <DecodeOpCode+0x1c0>
				return TRANS_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e02c      	b.n	800414e <DecodeOpCode+0x21a>

			// Acc line id
			uint8_t acc_line = *(msg);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	753b      	strb	r3, [r7, #20]
			if (write_can == 0x00)
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d11d      	bne.n	800413c <DecodeOpCode+0x208>
			{
				if( acc_line == 0x00)
 8004100:	7d3b      	ldrb	r3, [r7, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <DecodeOpCode+0x1ea>
				{
					if ( Local_AddCMD(acc0, cmd) != TRANS_OK )
 8004106:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <DecodeOpCode+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fecc 	bl	8003eac <Local_AddCMD>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d016      	beq.n	8004148 <DecodeOpCode+0x214>
						return TRANS_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e017      	b.n	800414e <DecodeOpCode+0x21a>
				}
				else if ( acc_line == 0x01 )
 800411e:	7d3b      	ldrb	r3, [r7, #20]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d111      	bne.n	8004148 <DecodeOpCode+0x214>
				{
					if ( Local_AddCMD(acc1, cmd) != TRANS_OK )
 8004124:	4b14      	ldr	r3, [pc, #80]	@ (8004178 <DecodeOpCode+0x244>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff febd 	bl	8003eac <Local_AddCMD>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <DecodeOpCode+0x214>
						return TRANS_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e008      	b.n	800414e <DecodeOpCode+0x21a>
				}
			}
			else
			{
				*(can0_struct->tx_buffer + 1) = acc_line;
 800413c:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <DecodeOpCode+0x23c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	3301      	adds	r3, #1
 8004144:	7d3a      	ldrb	r2, [r7, #20]
 8004146:	701a      	strb	r2, [r3, #0]
			}

			return TRANS_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <DecodeOpCode+0x21a>

		}

		default:
			return TRANS_ERROR;
 800414c:	2301      	movs	r3, #1
	}
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000000 	.word	0x20000000
 800415c:	200002c4 	.word	0x200002c4
 8004160:	20000388 	.word	0x20000388
 8004164:	2000038c 	.word	0x2000038c
 8004168:	200003a8 	.word	0x200003a8
 800416c:	200003b0 	.word	0x200003b0
 8004170:	20000310 	.word	0x20000310
 8004174:	20000390 	.word	0x20000390
 8004178:	20000394 	.word	0x20000394

0800417c <UART_Decode>:

ReturnCode UART_Decode(uint8_t* msg_buffer)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	uint8_t data_bytes = *(msg_buffer);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	72fb      	strb	r3, [r7, #11]
	uint8_t checksum = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]

	// Check checksum
	for(uint16_t i = 0; i < data_bytes - 1; i++)
 800418e:	2300      	movs	r3, #0
 8004190:	81bb      	strh	r3, [r7, #12]
 8004192:	e009      	b.n	80041a8 <UART_Decode+0x2c>
	{
		checksum += *(msg_buffer + i);
 8004194:	89bb      	ldrh	r3, [r7, #12]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	4413      	add	r3, r2
 80041a0:	73fb      	strb	r3, [r7, #15]
	for(uint16_t i = 0; i < data_bytes - 1; i++)
 80041a2:	89bb      	ldrh	r3, [r7, #12]
 80041a4:	3301      	adds	r3, #1
 80041a6:	81bb      	strh	r3, [r7, #12]
 80041a8:	89ba      	ldrh	r2, [r7, #12]
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	429a      	cmp	r2, r3
 80041b0:	dbf0      	blt.n	8004194 <UART_Decode+0x18>
	}

	checksum = ~checksum;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	73fb      	strb	r3, [r7, #15]

	if ( checksum != *(msg_buffer + data_bytes - 1) )
 80041b8:	7afb      	ldrb	r3, [r7, #11]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4413      	add	r3, r2
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <UART_Decode+0x50>
		return G_COM_RECEIVE;
 80041c8:	2307      	movs	r3, #7
 80041ca:	e014      	b.n	80041f6 <UART_Decode+0x7a>

	uint8_t received_id = *(msg_buffer + ID_POS_BYTE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	72bb      	strb	r3, [r7, #10]
	uint8_t received_cmd = *(msg_buffer + CMD_POS_BYTE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	789b      	ldrb	r3, [r3, #2]
 80041d6:	727b      	strb	r3, [r7, #9]

	if (DecodeOpCode(msg_buffer + PER_LINE_BYTE, received_cmd, data_bytes - 3, received_id) != TRANS_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	1cd8      	adds	r0, r3, #3
 80041dc:	7afb      	ldrb	r3, [r7, #11]
 80041de:	3b03      	subs	r3, #3
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	7abb      	ldrb	r3, [r7, #10]
 80041e4:	7a79      	ldrb	r1, [r7, #9]
 80041e6:	f7ff fea5 	bl	8003f34 <DecodeOpCode>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <UART_Decode+0x78>
		return C_COM_DECODE;
 80041f0:	2316      	movs	r3, #22
 80041f2:	e000      	b.n	80041f6 <UART_Decode+0x7a>

	return G_SUCCESS;
 80041f4:	2301      	movs	r3, #1
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <CAN_Decode>:

ReturnCode CAN_Decode(uint8_t *rx_buffer, uint8_t bytes)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
	if (DecodeOpCode(rx_buffer + 1, *(rx_buffer), bytes, module_id) != TRANS_OK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	1c58      	adds	r0, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	7819      	ldrb	r1, [r3, #0]
 8004214:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <CAN_Decode+0x34>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	f7ff fe8b 	bl	8003f34 <DecodeOpCode>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <CAN_Decode+0x28>
		return C_COM_DECODE;
 8004224:	2316      	movs	r3, #22
 8004226:	e000      	b.n	800422a <CAN_Decode+0x2a>

	return G_SUCCESS;
 8004228:	2301      	movs	r3, #1
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000000 	.word	0x20000000

08004238 <PeripheralUpdateState>:

void PeripheralUpdateState(peripheral_state* per, ReturnCode status)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
	if( status != G_SUCCESS)
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d011      	beq.n	800426e <PeripheralUpdateState+0x36>
	{
		if ( per->error_count >= MAX_ERROR_COUNT)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	2b04      	cmp	r3, #4
 8004250:	d903      	bls.n	800425a <PeripheralUpdateState+0x22>
		{
			per->state = PER_FAIL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2205      	movs	r2, #5
 8004256:	705a      	strb	r2, [r3, #1]
 8004258:	e00f      	b.n	800427a <PeripheralUpdateState+0x42>
		}
		else
		{
			per->error_count += 1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	78db      	ldrb	r3, [r3, #3]
 800425e:	3301      	adds	r3, #1
 8004260:	b2da      	uxtb	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	70da      	strb	r2, [r3, #3]
			per->state = PER_ERROR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2204      	movs	r2, #4
 800426a:	705a      	strb	r2, [r3, #1]
 800426c:	e005      	b.n	800427a <PeripheralUpdateState+0x42>
		}

	}
	else
	{
		per->error_count = 0;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	70da      	strb	r2, [r3, #3]
		per->state = PER_DONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	705a      	strb	r2, [r3, #1]
	}

	per->last_code = status;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	709a      	strb	r2, [r3, #2]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <interpolate_x>:
const float LUT_tan[] = {  0.0000,  0.0175,  0.0349,  0.0524,  0.0699,  0.0875,  0.1051,  0.1228,  0.1405,  0.1584,  0.1763,  0.1944,  0.2126,  0.2309,  0.2493,  0.2679,  0.2867,  0.3057,  0.3249,  0.3443,  0.3640,  0.3839,  0.4040,  0.4245,  0.4452,  0.4663,  0.4877,  0.5095,  0.5317,  0.5543,  0.5774,  0.6009,  0.6249,  0.6494,  0.6745,  0.7002,  0.7265,  0.7536,  0.7813,  0.8098,  0.8391,  0.8693,  0.9004,  0.9325,  0.9657,  1.0000,  1.0355,  1.0724,  1.1106,  1.1504,  1.1918,  1.2349,  1.2799,  1.3270,  1.3764,  1.4281,  1.4826,  1.5399,  1.6003,  1.6643,  1.7321,  1.8040,  1.8807,  1.9626,  2.0503,  2.1445,  2.2460,  2.3559,  2.4751,  2.6051,  2.7475,  2.9042,  3.0777,  3.2709,  3.4874,  3.7321,  4.0108,  4.3315,  4.7046,  5.1446,  5.6713,  6.3138,  7.1154,  8.1443,  9.5144,  11.4301,  14.3007,  19.0811,  28.6363,  57.2900,  10000};


// Find x that satisfies f(x) = value
static float interpolate_x(float high_val, float low_val, float value, int higher_index)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	ed87 0a03 	vstr	s0, [r7, #12]
 8004296:	edc7 0a02 	vstr	s1, [r7, #8]
 800429a:	ed87 1a01 	vstr	s2, [r7, #4]
 800429e:	6038      	str	r0, [r7, #0]
	float a = high_val - low_val;
 80042a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80042a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80042a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ac:	edc7 7a05 	vstr	s15, [r7, #20]
	float b = high_val - higher_index * a;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80042be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80042c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ca:	edc7 7a04 	vstr	s15, [r7, #16]

	if( a == 0)
 80042ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80042d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042da:	d102      	bne.n	80042e2 <interpolate_x+0x56>
		return high_val;
 80042dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80042e0:	e009      	b.n	80042f6 <interpolate_x+0x6a>

	return ((value - b) / a);
 80042e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80042e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80042f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80042f6:	eeb0 0a67 	vmov.f32	s0, s15
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LUT_ATan>:
	return value;
}

// Find x such that tan(x) = val
float LUT_ATan(float val)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(val > LUT_tan[89])
 800430e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80043f4 <LUT_ATan+0xf0>
 8004312:	edd7 7a01 	vldr	s15, [r7, #4]
 8004316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431e:	dd02      	ble.n	8004326 <LUT_ATan+0x22>
			return 100;
 8004320:	eddf 7a35 	vldr	s15, [pc, #212]	@ 80043f8 <LUT_ATan+0xf4>
 8004324:	e060      	b.n	80043e8 <LUT_ATan+0xe4>

	float sign = 1.0;
 8004326:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800432a:	61fb      	str	r3, [r7, #28]

	// Return for val that's out of bounds
	if(val < 0)
 800432c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004330:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004338:	d507      	bpl.n	800434a <LUT_ATan+0x46>
	{
		val = -val;
 800433a:	edd7 7a01 	vldr	s15, [r7, #4]
 800433e:	eef1 7a67 	vneg.f32	s15, s15
 8004342:	edc7 7a01 	vstr	s15, [r7, #4]
		sign = -1.0;
 8004346:	4b2d      	ldr	r3, [pc, #180]	@ (80043fc <LUT_ATan+0xf8>)
 8004348:	61fb      	str	r3, [r7, #28]
	}

	// Find sine and interpolate
	for(uint16_t i = 0; i < LUT_SIZE; i++)
 800434a:	2300      	movs	r3, #0
 800434c:	837b      	strh	r3, [r7, #26]
 800434e:	e046      	b.n	80043de <LUT_ATan+0xda>
	{
		if(val == LUT_tan[i])
 8004350:	8b7b      	ldrh	r3, [r7, #26]
 8004352:	4a2b      	ldr	r2, [pc, #172]	@ (8004400 <LUT_ATan+0xfc>)
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	edd3 7a00 	vldr	s15, [r3]
 800435c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004360:	eeb4 7a67 	vcmp.f32	s14, s15
 8004364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004368:	d105      	bne.n	8004376 <LUT_ATan+0x72>
			return (float) i;
 800436a:	8b7b      	ldrh	r3, [r7, #26]
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004374:	e038      	b.n	80043e8 <LUT_ATan+0xe4>

		else if( val < LUT_tan[i])
 8004376:	8b7b      	ldrh	r3, [r7, #26]
 8004378:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <LUT_ATan+0xfc>)
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	edd3 7a00 	vldr	s15, [r3]
 8004382:	ed97 7a01 	vldr	s14, [r7, #4]
 8004386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	d523      	bpl.n	80043d8 <LUT_ATan+0xd4>
		{
			// Interpolate between two points
			float big_angle = LUT_tan[i];
 8004390:	8b7b      	ldrh	r3, [r7, #26]
 8004392:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <LUT_ATan+0xfc>)
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	617b      	str	r3, [r7, #20]
			float small_angle = LUT_tan[i - 1];  // Dont have to check for index because of first two conditions
 800439c:	8b7b      	ldrh	r3, [r7, #26]
 800439e:	3b01      	subs	r3, #1
 80043a0:	4a17      	ldr	r2, [pc, #92]	@ (8004400 <LUT_ATan+0xfc>)
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	613b      	str	r3, [r7, #16]

			float res = interpolate_x(big_angle, small_angle, val, i);
 80043aa:	8b7b      	ldrh	r3, [r7, #26]
 80043ac:	4618      	mov	r0, r3
 80043ae:	ed97 1a01 	vldr	s2, [r7, #4]
 80043b2:	edd7 0a04 	vldr	s1, [r7, #16]
 80043b6:	ed97 0a05 	vldr	s0, [r7, #20]
 80043ba:	f7ff ff67 	bl	800428c <interpolate_x>
 80043be:	ed87 0a03 	vstr	s0, [r7, #12]
			res = res * sign;
 80043c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80043c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a03 	vstr	s15, [r7, #12]

			return res;
 80043d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80043d6:	e007      	b.n	80043e8 <LUT_ATan+0xe4>
	for(uint16_t i = 0; i < LUT_SIZE; i++)
 80043d8:	8b7b      	ldrh	r3, [r7, #26]
 80043da:	3301      	adds	r3, #1
 80043dc:	837b      	strh	r3, [r7, #26]
 80043de:	8b7b      	ldrh	r3, [r7, #26]
 80043e0:	2b59      	cmp	r3, #89	@ 0x59
 80043e2:	d9b5      	bls.n	8004350 <LUT_ATan+0x4c>
		}
	}

	return LUT_tan[LUT_SIZE -1];
 80043e4:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80043f4 <LUT_ATan+0xf0>
}
 80043e8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	426528f6 	.word	0x426528f6
 80043f8:	42c80000 	.word	0x42c80000
 80043fc:	bf800000 	.word	0xbf800000
 8004400:	08016f10 	.word	0x08016f10

08004404 <GetTiltAngles>:

void GetTiltAngles(float *abc_buffer, int16_t *xyz_acc)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b089      	sub	sp, #36	@ 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
	float a_yz, a_xy, a_xz;
	float x_2, y_2, z_2;

	// Helper variables
	x_2 = (*(xyz_acc)) * (*(xyz_acc));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004414:	461a      	mov	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004428:	edc7 7a07 	vstr	s15, [r7, #28]
	y_2 = (*(xyz_acc + 1)) * (*(xyz_acc + 1));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	3302      	adds	r3, #2
 8004430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004434:	461a      	mov	r2, r3
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	3302      	adds	r3, #2
 800443a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800444a:	edc7 7a06 	vstr	s15, [r7, #24]
	z_2 = (*(xyz_acc + 2)) * (*(xyz_acc + 2));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	3304      	adds	r3, #4
 8004452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004456:	461a      	mov	r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	3304      	adds	r3, #4
 800445c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800446c:	edc7 7a05 	vstr	s15, [r7, #20]

	a_yz = sqrtf(y_2 + z_2);
 8004470:	ed97 7a06 	vldr	s14, [r7, #24]
 8004474:	edd7 7a05 	vldr	s15, [r7, #20]
 8004478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800447c:	eeb0 0a67 	vmov.f32	s0, s15
 8004480:	f010 fcf4 	bl	8014e6c <sqrtf>
 8004484:	ed87 0a04 	vstr	s0, [r7, #16]
	a_xy = sqrtf(x_2 + y_2);
 8004488:	ed97 7a07 	vldr	s14, [r7, #28]
 800448c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004494:	eeb0 0a67 	vmov.f32	s0, s15
 8004498:	f010 fce8 	bl	8014e6c <sqrtf>
 800449c:	ed87 0a03 	vstr	s0, [r7, #12]
	a_xz = sqrtf(x_2 + z_2);
 80044a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80044a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80044a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ac:	eeb0 0a67 	vmov.f32	s0, s15
 80044b0:	f010 fcdc 	bl	8014e6c <sqrtf>
 80044b4:	ed87 0a02 	vstr	s0, [r7, #8]

	*(abc_buffer) = LUT_ATan( ((*(xyz_acc)) / a_yz ) );
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80044ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044ce:	eeb0 0a66 	vmov.f32	s0, s13
 80044d2:	f7ff ff17 	bl	8004304 <LUT_ATan>
 80044d6:	eef0 7a40 	vmov.f32	s15, s0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	edc3 7a00 	vstr	s15, [r3]
	*(abc_buffer + 1) = LUT_ATan( ((*(xyz_acc + 1)) / a_xz ) );
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	3302      	adds	r3, #2
 80044e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e8:	ee07 3a90 	vmov	s15, r3
 80044ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80044f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	1d1c      	adds	r4, r3, #4
 80044fc:	eeb0 0a66 	vmov.f32	s0, s13
 8004500:	f7ff ff00 	bl	8004304 <LUT_ATan>
 8004504:	eef0 7a40 	vmov.f32	s15, s0
 8004508:	edc4 7a00 	vstr	s15, [r4]
	*(abc_buffer + 2) = LUT_ATan( (a_xy / (*(xyz_acc + 2))) );
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	3304      	adds	r3, #4
 8004510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004514:	ee07 3a90 	vmov	s15, r3
 8004518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800451c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004520:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f103 0408 	add.w	r4, r3, #8
 800452a:	eeb0 0a66 	vmov.f32	s0, s13
 800452e:	f7ff fee9 	bl	8004304 <LUT_ATan>
 8004532:	eef0 7a40 	vmov.f32	s15, s0
 8004536:	edc4 7a00 	vstr	s15, [r4]
}
 800453a:	bf00      	nop
 800453c:	3724      	adds	r7, #36	@ 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd90      	pop	{r4, r7, pc}
	...

08004544 <SPI_Write_Byte>:
/*********************************************


*********************************************/	
 uint8_t SPI_Write_Byte(uint8_t value)                                    
{    
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
#if 1
	HAL_SPI_Transmit_IT(&hspi3, &value, 1);
 800454e:	1dfb      	adds	r3, r7, #7
 8004550:	2201      	movs	r2, #1
 8004552:	4619      	mov	r1, r3
 8004554:	4803      	ldr	r0, [pc, #12]	@ (8004564 <SPI_Write_Byte+0x20>)
 8004556:	f006 f8dd 	bl	800a714 <HAL_SPI_Transmit_IT>
        while((SPI3->SR & (1<<0)) == 0) ; // Wait for the receiving area to be empty
        
        return *((__IO uint8_t *)(&SPI3->DR));

#endif
}
 800455a:	bf00      	nop
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000494 	.word	0x20000494

08004568 <Driver_Delay_ms>:
/*********************************************


*********************************************/	
void Driver_Delay_ms(uint32_t xms)	
{	
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fdfb 	bl	800516c <HAL_Delay>
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <LCD_Reset>:
***********************************************************************************************************************/
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_Reset(void){
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
	LCD_RST_1;
 8004584:	2201      	movs	r2, #1
 8004586:	2104      	movs	r1, #4
 8004588:	480b      	ldr	r0, [pc, #44]	@ (80045b8 <LCD_Reset+0x38>)
 800458a:	f002 fb3b 	bl	8006c04 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 800458e:	2064      	movs	r0, #100	@ 0x64
 8004590:	f7ff ffea 	bl	8004568 <Driver_Delay_ms>
	LCD_RST_0;
 8004594:	2200      	movs	r2, #0
 8004596:	2104      	movs	r1, #4
 8004598:	4807      	ldr	r0, [pc, #28]	@ (80045b8 <LCD_Reset+0x38>)
 800459a:	f002 fb33 	bl	8006c04 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 800459e:	2064      	movs	r0, #100	@ 0x64
 80045a0:	f7ff ffe2 	bl	8004568 <Driver_Delay_ms>
	LCD_RST_1;
 80045a4:	2201      	movs	r2, #1
 80045a6:	2104      	movs	r1, #4
 80045a8:	4803      	ldr	r0, [pc, #12]	@ (80045b8 <LCD_Reset+0x38>)
 80045aa:	f002 fb2b 	bl	8006c04 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80045ae:	2064      	movs	r0, #100	@ 0x64
 80045b0:	f7ff ffda 	bl	8004568 <Driver_Delay_ms>
}
 80045b4:	bf00      	nop
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40020800 	.word	0x40020800

080045bc <LCD_WriteReg>:

/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_WriteReg(uint8_t Reg){
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
	LCD_DC_0;
 80045c6:	2200      	movs	r2, #0
 80045c8:	2101      	movs	r1, #1
 80045ca:	480a      	ldr	r0, [pc, #40]	@ (80045f4 <LCD_WriteReg+0x38>)
 80045cc:	f002 fb1a 	bl	8006c04 <HAL_GPIO_WritePin>
	LCD_CS_0;
 80045d0:	2200      	movs	r2, #0
 80045d2:	2101      	movs	r1, #1
 80045d4:	4808      	ldr	r0, [pc, #32]	@ (80045f8 <LCD_WriteReg+0x3c>)
 80045d6:	f002 fb15 	bl	8006c04 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Reg);
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ffb1 	bl	8004544 <SPI_Write_Byte>
	LCD_CS_1;
 80045e2:	2201      	movs	r2, #1
 80045e4:	2101      	movs	r1, #1
 80045e6:	4804      	ldr	r0, [pc, #16]	@ (80045f8 <LCD_WriteReg+0x3c>)
 80045e8:	f002 fb0c 	bl	8006c04 <HAL_GPIO_WritePin>
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40020400 	.word	0x40020400
 80045f8:	40020800 	.word	0x40020800

080045fc <LCD_WriteData_8Bit>:

static void LCD_WriteData_8Bit(uint8_t Data){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
	LCD_DC_1;
 8004606:	2201      	movs	r2, #1
 8004608:	2101      	movs	r1, #1
 800460a:	480a      	ldr	r0, [pc, #40]	@ (8004634 <LCD_WriteData_8Bit+0x38>)
 800460c:	f002 fafa 	bl	8006c04 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8004610:	2200      	movs	r2, #0
 8004612:	2101      	movs	r1, #1
 8004614:	4808      	ldr	r0, [pc, #32]	@ (8004638 <LCD_WriteData_8Bit+0x3c>)
 8004616:	f002 faf5 	bl	8006c04 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Data);
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff91 	bl	8004544 <SPI_Write_Byte>
	LCD_CS_1;
 8004622:	2201      	movs	r2, #1
 8004624:	2101      	movs	r1, #1
 8004626:	4804      	ldr	r0, [pc, #16]	@ (8004638 <LCD_WriteData_8Bit+0x3c>)
 8004628:	f002 faec 	bl	8006c04 <HAL_GPIO_WritePin>
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40020400 	.word	0x40020400
 8004638:	40020800 	.word	0x40020800

0800463c <LCD_WriteData_NLen16Bit>:
	SPI_Write_Byte(Data >> 8);
	SPI_Write_Byte(Data & 0XFF);
	LCD_CS_1;
}

static void LCD_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen){
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	6039      	str	r1, [r7, #0]
 8004646:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	LCD_DC_1;
 8004648:	2201      	movs	r2, #1
 800464a:	2101      	movs	r1, #1
 800464c:	4813      	ldr	r0, [pc, #76]	@ (800469c <LCD_WriteData_NLen16Bit+0x60>)
 800464e:	f002 fad9 	bl	8006c04 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8004652:	2200      	movs	r2, #0
 8004654:	2101      	movs	r1, #1
 8004656:	4812      	ldr	r0, [pc, #72]	@ (80046a0 <LCD_WriteData_NLen16Bit+0x64>)
 8004658:	f002 fad4 	bl	8006c04 <HAL_GPIO_WritePin>
	for(i = 0; i < DataLen; i++){
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e00e      	b.n	8004680 <LCD_WriteData_NLen16Bit+0x44>
		SPI_Write_Byte( (uint8_t)(Data >> 8) );
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	b29b      	uxth	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ff6a 	bl	8004544 <SPI_Write_Byte>
		SPI_Write_Byte( (uint8_t)(Data & 0XFF) );
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff65 	bl	8004544 <SPI_Write_Byte>
	for(i = 0; i < DataLen; i++){
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d3ec      	bcc.n	8004662 <LCD_WriteData_NLen16Bit+0x26>
	}	
	LCD_CS_1;
 8004688:	2201      	movs	r2, #1
 800468a:	2101      	movs	r1, #1
 800468c:	4804      	ldr	r0, [pc, #16]	@ (80046a0 <LCD_WriteData_NLen16Bit+0x64>)
 800468e:	f002 fab9 	bl	8006c04 <HAL_GPIO_WritePin>
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40020400 	.word	0x40020400
 80046a0:	40020800 	.word	0x40020800

080046a4 <LCD_InitReg>:

/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void){	
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
	//ST7735R Frame Rate
	LCD_WriteReg(0xB1); 
 80046a8:	20b1      	movs	r0, #177	@ 0xb1
 80046aa:	f7ff ff87 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80046ae:	2001      	movs	r0, #1
 80046b0:	f7ff ffa4 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80046b4:	202c      	movs	r0, #44	@ 0x2c
 80046b6:	f7ff ffa1 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80046ba:	202d      	movs	r0, #45	@ 0x2d
 80046bc:	f7ff ff9e 	bl	80045fc <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB2); 
 80046c0:	20b2      	movs	r0, #178	@ 0xb2
 80046c2:	f7ff ff7b 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80046c6:	2001      	movs	r0, #1
 80046c8:	f7ff ff98 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80046cc:	202c      	movs	r0, #44	@ 0x2c
 80046ce:	f7ff ff95 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80046d2:	202d      	movs	r0, #45	@ 0x2d
 80046d4:	f7ff ff92 	bl	80045fc <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB3); 
 80046d8:	20b3      	movs	r0, #179	@ 0xb3
 80046da:	f7ff ff6f 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80046de:	2001      	movs	r0, #1
 80046e0:	f7ff ff8c 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80046e4:	202c      	movs	r0, #44	@ 0x2c
 80046e6:	f7ff ff89 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80046ea:	202d      	movs	r0, #45	@ 0x2d
 80046ec:	f7ff ff86 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x01); 
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7ff ff83 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80046f6:	202c      	movs	r0, #44	@ 0x2c
 80046f8:	f7ff ff80 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80046fc:	202d      	movs	r0, #45	@ 0x2d
 80046fe:	f7ff ff7d 	bl	80045fc <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xB4); //Column inversion 
 8004702:	20b4      	movs	r0, #180	@ 0xb4
 8004704:	f7ff ff5a 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x07); 
 8004708:	2007      	movs	r0, #7
 800470a:	f7ff ff77 	bl	80045fc <LCD_WriteData_8Bit>
	
	//ST7735R Power Sequence
	LCD_WriteReg(0xC0); 
 800470e:	20c0      	movs	r0, #192	@ 0xc0
 8004710:	f7ff ff54 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0xA2); 
 8004714:	20a2      	movs	r0, #162	@ 0xa2
 8004716:	f7ff ff71 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 800471a:	2002      	movs	r0, #2
 800471c:	f7ff ff6e 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x84); 
 8004720:	2084      	movs	r0, #132	@ 0x84
 8004722:	f7ff ff6b 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC1); 
 8004726:	20c1      	movs	r0, #193	@ 0xc1
 8004728:	f7ff ff48 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0xC5); 
 800472c:	20c5      	movs	r0, #197	@ 0xc5
 800472e:	f7ff ff65 	bl	80045fc <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC2); 
 8004732:	20c2      	movs	r0, #194	@ 0xc2
 8004734:	f7ff ff42 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0A); 
 8004738:	200a      	movs	r0, #10
 800473a:	f7ff ff5f 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 800473e:	2000      	movs	r0, #0
 8004740:	f7ff ff5c 	bl	80045fc <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC3); 
 8004744:	20c3      	movs	r0, #195	@ 0xc3
 8004746:	f7ff ff39 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 800474a:	208a      	movs	r0, #138	@ 0x8a
 800474c:	f7ff ff56 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2A); 
 8004750:	202a      	movs	r0, #42	@ 0x2a
 8004752:	f7ff ff53 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC4); 
 8004756:	20c4      	movs	r0, #196	@ 0xc4
 8004758:	f7ff ff30 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 800475c:	208a      	movs	r0, #138	@ 0x8a
 800475e:	f7ff ff4d 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0xEE); 
 8004762:	20ee      	movs	r0, #238	@ 0xee
 8004764:	f7ff ff4a 	bl	80045fc <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xC5); //VCOM 
 8004768:	20c5      	movs	r0, #197	@ 0xc5
 800476a:	f7ff ff27 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0E); 
 800476e:	200e      	movs	r0, #14
 8004770:	f7ff ff44 	bl	80045fc <LCD_WriteData_8Bit>
	
	//ST7735R Gamma Sequence
	LCD_WriteReg(0xe0); 
 8004774:	20e0      	movs	r0, #224	@ 0xe0
 8004776:	f7ff ff21 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 800477a:	200f      	movs	r0, #15
 800477c:	f7ff ff3e 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1a); 
 8004780:	201a      	movs	r0, #26
 8004782:	f7ff ff3b 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8004786:	200f      	movs	r0, #15
 8004788:	f7ff ff38 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x18); 
 800478c:	2018      	movs	r0, #24
 800478e:	f7ff ff35 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2f); 
 8004792:	202f      	movs	r0, #47	@ 0x2f
 8004794:	f7ff ff32 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x28); 
 8004798:	2028      	movs	r0, #40	@ 0x28
 800479a:	f7ff ff2f 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x20); 
 800479e:	2020      	movs	r0, #32
 80047a0:	f7ff ff2c 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x22); 
 80047a4:	2022      	movs	r0, #34	@ 0x22
 80047a6:	f7ff ff29 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1f); 
 80047aa:	201f      	movs	r0, #31
 80047ac:	f7ff ff26 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 80047b0:	201b      	movs	r0, #27
 80047b2:	f7ff ff23 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x23); 
 80047b6:	2023      	movs	r0, #35	@ 0x23
 80047b8:	f7ff ff20 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x37); 
 80047bc:	2037      	movs	r0, #55	@ 0x37
 80047be:	f7ff ff1d 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 	
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7ff ff1a 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 80047c8:	2007      	movs	r0, #7
 80047ca:	f7ff ff17 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 80047ce:	2002      	movs	r0, #2
 80047d0:	f7ff ff14 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10); 
 80047d4:	2010      	movs	r0, #16
 80047d6:	f7ff ff11 	bl	80045fc <LCD_WriteData_8Bit>

	LCD_WriteReg(0xe1); 
 80047da:	20e1      	movs	r0, #225	@ 0xe1
 80047dc:	f7ff feee 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 80047e0:	200f      	movs	r0, #15
 80047e2:	f7ff ff0b 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 80047e6:	201b      	movs	r0, #27
 80047e8:	f7ff ff08 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 80047ec:	200f      	movs	r0, #15
 80047ee:	f7ff ff05 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x17); 
 80047f2:	2017      	movs	r0, #23
 80047f4:	f7ff ff02 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x33); 
 80047f8:	2033      	movs	r0, #51	@ 0x33
 80047fa:	f7ff feff 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2c); 
 80047fe:	202c      	movs	r0, #44	@ 0x2c
 8004800:	f7ff fefc 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x29); 
 8004804:	2029      	movs	r0, #41	@ 0x29
 8004806:	f7ff fef9 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2e); 
 800480a:	202e      	movs	r0, #46	@ 0x2e
 800480c:	f7ff fef6 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 8004810:	2030      	movs	r0, #48	@ 0x30
 8004812:	f7ff fef3 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 8004816:	2030      	movs	r0, #48	@ 0x30
 8004818:	f7ff fef0 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x39); 
 800481c:	2039      	movs	r0, #57	@ 0x39
 800481e:	f7ff feed 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x3f); 
 8004822:	203f      	movs	r0, #63	@ 0x3f
 8004824:	f7ff feea 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8004828:	2000      	movs	r0, #0
 800482a:	f7ff fee7 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 800482e:	2007      	movs	r0, #7
 8004830:	f7ff fee4 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x03); 
 8004834:	2003      	movs	r0, #3
 8004836:	f7ff fee1 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10);  
 800483a:	2010      	movs	r0, #16
 800483c:	f7ff fede 	bl	80045fc <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0xF0); //Enable test command  
 8004840:	20f0      	movs	r0, #240	@ 0xf0
 8004842:	f7ff febb 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8004846:	2001      	movs	r0, #1
 8004848:	f7ff fed8 	bl	80045fc <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xF6); //Disable ram power save mode 
 800484c:	20f6      	movs	r0, #246	@ 0xf6
 800484e:	f7ff feb5 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x00); 
 8004852:	2000      	movs	r0, #0
 8004854:	f7ff fed2 	bl	80045fc <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0x3A); //65k mode 
 8004858:	203a      	movs	r0, #58	@ 0x3a
 800485a:	f7ff feaf 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x05); 
 800485e:	2005      	movs	r0, #5
 8004860:	f7ff fecc 	bl	80045fc <LCD_WriteData_8Bit>
		
}
 8004864:	bf00      	nop
 8004866:	bd80      	pop	{r7, pc}

08004868 <LCD_SetGramScanWay>:
function:	Set the display scan and color transfer modes
parameter: 
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir){		
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8004872:	4a34      	ldr	r2, [pc, #208]	@ (8004944 <LCD_SetGramScanWay+0xdc>)
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	7113      	strb	r3, [r2, #4]
	
	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <LCD_SetGramScanWay+0x28>
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d005      	beq.n	8004890 <LCD_SetGramScanWay+0x28>
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d002      	beq.n	8004890 <LCD_SetGramScanWay+0x28>
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d10c      	bne.n	80048aa <LCD_SetGramScanWay+0x42>
		sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8004890:	4b2c      	ldr	r3, [pc, #176]	@ (8004944 <LCD_SetGramScanWay+0xdc>)
 8004892:	2280      	movs	r2, #128	@ 0x80
 8004894:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;		
 8004896:	4b2b      	ldr	r3, [pc, #172]	@ (8004944 <LCD_SetGramScanWay+0xdc>)
 8004898:	22a0      	movs	r2, #160	@ 0xa0
 800489a:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_X;
 800489c:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <LCD_SetGramScanWay+0xdc>)
 800489e:	2202      	movs	r2, #2
 80048a0:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_Y;
 80048a2:	4b28      	ldr	r3, [pc, #160]	@ (8004944 <LCD_SetGramScanWay+0xdc>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	811a      	strh	r2, [r3, #8]
 80048a8:	e00b      	b.n	80048c2 <LCD_SetGramScanWay+0x5a>
	}else{
		sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 80048aa:	4b26      	ldr	r3, [pc, #152]	@ (8004944 <LCD_SetGramScanWay+0xdc>)
 80048ac:	22a0      	movs	r2, #160	@ 0xa0
 80048ae:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;	
 80048b0:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <LCD_SetGramScanWay+0xdc>)
 80048b2:	2280      	movs	r2, #128	@ 0x80
 80048b4:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_Y;
 80048b6:	4b23      	ldr	r3, [pc, #140]	@ (8004944 <LCD_SetGramScanWay+0xdc>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_X;
 80048bc:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <LCD_SetGramScanWay+0xdc>)
 80048be:	2202      	movs	r2, #2
 80048c0:	811a      	strh	r2, [r3, #8]
	}
	
	// Gets the scan direction of GRAM
	uint16_t MemoryAccessReg_Data=0;  //0x36	
 80048c2:	2300      	movs	r3, #0
 80048c4:	81fb      	strh	r3, [r7, #14]
	switch (Scan_dir){				
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	2b07      	cmp	r3, #7
 80048ca:	d82b      	bhi.n	8004924 <LCD_SetGramScanWay+0xbc>
 80048cc:	a201      	add	r2, pc, #4	@ (adr r2, 80048d4 <LCD_SetGramScanWay+0x6c>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048f5 	.word	0x080048f5
 80048d8:	080048fb 	.word	0x080048fb
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004907 	.word	0x08004907
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004913 	.word	0x08004913
 80048ec:	08004919 	.word	0x08004919
 80048f0:	0800491f 	.word	0x0800491f
		case L2R_U2D:
			MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 80048f4:	2300      	movs	r3, #0
 80048f6:	81fb      	strh	r3, [r7, #14]
			break;
 80048f8:	e014      	b.n	8004924 <LCD_SetGramScanWay+0xbc>
		case L2R_D2U:
			MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 80048fa:	2380      	movs	r3, #128	@ 0x80
 80048fc:	81fb      	strh	r3, [r7, #14]
			break;
 80048fe:	e011      	b.n	8004924 <LCD_SetGramScanWay+0xbc>
		case R2L_U2D://	0X4
			MemoryAccessReg_Data = 0x40 | 0x00;
 8004900:	2340      	movs	r3, #64	@ 0x40
 8004902:	81fb      	strh	r3, [r7, #14]
			break;
 8004904:	e00e      	b.n	8004924 <LCD_SetGramScanWay+0xbc>
		case R2L_D2U://	0XC
			MemoryAccessReg_Data = 0x40 | 0x80;
 8004906:	23c0      	movs	r3, #192	@ 0xc0
 8004908:	81fb      	strh	r3, [r7, #14]
			break;
 800490a:	e00b      	b.n	8004924 <LCD_SetGramScanWay+0xbc>
		case U2D_L2R://0X2
			MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 800490c:	2320      	movs	r3, #32
 800490e:	81fb      	strh	r3, [r7, #14]
			break;
 8004910:	e008      	b.n	8004924 <LCD_SetGramScanWay+0xbc>
		case U2D_R2L://0X6
			MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 8004912:	2360      	movs	r3, #96	@ 0x60
 8004914:	81fb      	strh	r3, [r7, #14]
			break;
 8004916:	e005      	b.n	8004924 <LCD_SetGramScanWay+0xbc>
		case D2U_L2R://0XA
			MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8004918:	23a0      	movs	r3, #160	@ 0xa0
 800491a:	81fb      	strh	r3, [r7, #14]
			break;
 800491c:	e002      	b.n	8004924 <LCD_SetGramScanWay+0xbc>
		case D2U_R2L://0XE
			MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 800491e:	23e0      	movs	r3, #224	@ 0xe0
 8004920:	81fb      	strh	r3, [r7, #14]
			break;
 8004922:	bf00      	nop
	}
	

	// Set the read / write scan direction of the frame memory
	LCD_WriteReg(0x36); //MX, MY, RGB mode 	
 8004924:	2036      	movs	r0, #54	@ 0x36
 8004926:	f7ff fe49 	bl	80045bc <LCD_WriteReg>
#if defined(LCD_1IN44)
	LCD_WriteData_8Bit( MemoryAccessReg_Data | 0x08);	//0x08 set RGB
#elif defined(LCD_1IN8)
	LCD_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f023 0308 	bic.w	r3, r3, #8
 8004932:	b2db      	uxtb	r3, r3
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fe61 	bl	80045fc <LCD_WriteData_8Bit>
#endif
	
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200026d4 	.word	0x200026d4

08004948 <LCD_Init>:

/********************************************************************************
function:	
			initialization
********************************************************************************/
void LCD_Init( LCD_SCAN_DIR Lcd_ScanDir ){	
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
	//Turn on the backlight
	LCD_BL_1;
 8004952:	2201      	movs	r2, #1
 8004954:	2108      	movs	r1, #8
 8004956:	480f      	ldr	r0, [pc, #60]	@ (8004994 <LCD_Init+0x4c>)
 8004958:	f002 f954 	bl	8006c04 <HAL_GPIO_WritePin>
	
	//Hardware reset
	LCD_Reset(); 
 800495c:	f7ff fe10 	bl	8004580 <LCD_Reset>
	
	//Set the initialization register
	LCD_InitReg();
 8004960:	f7ff fea0 	bl	80046a4 <LCD_InitReg>
	
	//Set the display scan and color transfer modes	
	LCD_SetGramScanWay( Lcd_ScanDir );
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ff7e 	bl	8004868 <LCD_SetGramScanWay>
	Driver_Delay_ms(200); 
 800496c:	20c8      	movs	r0, #200	@ 0xc8
 800496e:	f7ff fdfb 	bl	8004568 <Driver_Delay_ms>
	
	//sleep out
	LCD_WriteReg(0x11);
 8004972:	2011      	movs	r0, #17
 8004974:	f7ff fe22 	bl	80045bc <LCD_WriteReg>
	Driver_Delay_ms(120);
 8004978:	2078      	movs	r0, #120	@ 0x78
 800497a:	f7ff fdf5 	bl	8004568 <Driver_Delay_ms>
	
	//Turn on the LCD display
	LCD_WriteReg(0x29);	
 800497e:	2029      	movs	r0, #41	@ 0x29
 8004980:	f7ff fe1c 	bl	80045bc <LCD_WriteReg>

	//clear
	LCD_Clear(WHITE);	
 8004984:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004988:	f000 f8d8 	bl	8004b3c <LCD_Clear>
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40020800 	.word	0x40020800

08004998 <LCD_SetWindows>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend ){
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4604      	mov	r4, r0
 80049a0:	4608      	mov	r0, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	461a      	mov	r2, r3
 80049a6:	4623      	mov	r3, r4
 80049a8:	80fb      	strh	r3, [r7, #6]
 80049aa:	4603      	mov	r3, r0
 80049ac:	80bb      	strh	r3, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	807b      	strh	r3, [r7, #2]
 80049b2:	4613      	mov	r3, r2
 80049b4:	803b      	strh	r3, [r7, #0]

	//set the X coordinates
	LCD_WriteReg ( 0x2A ); 				
 80049b6:	202a      	movs	r0, #42	@ 0x2a
 80049b8:	f7ff fe00 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 80049bc:	2000      	movs	r0, #0
 80049be:	f7ff fe1d 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Xstart & 0xff) + sLCD_DIS.LCD_X_Adjust);			//Set the horizontal starting point to the low octet
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a40 <LCD_SetWindows+0xa8>)
 80049c8:	88db      	ldrh	r3, [r3, #6]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	4413      	add	r3, r2
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fe13 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 80049d6:	2000      	movs	r0, #0
 80049d8:	f7ff fe10 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_DIS.LCD_X_Adjust);	//Set the horizontal end to the low octet
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	4b17      	ldr	r3, [pc, #92]	@ (8004a40 <LCD_SetWindows+0xa8>)
 80049e2:	88db      	ldrh	r3, [r3, #6]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fe04 	bl	80045fc <LCD_WriteData_8Bit>

	//set the Y coordinates
	LCD_WriteReg ( 0x2B );
 80049f4:	202b      	movs	r0, #43	@ 0x2b
 80049f6:	f7ff fde1 	bl	80045bc <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );
 80049fa:	2000      	movs	r0, #0
 80049fc:	f7ff fdfe 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Ystart & 0xff) + sLCD_DIS.LCD_Y_Adjust);
 8004a00:	88bb      	ldrh	r3, [r7, #4]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	4b0e      	ldr	r3, [pc, #56]	@ (8004a40 <LCD_SetWindows+0xa8>)
 8004a06:	891b      	ldrh	r3, [r3, #8]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fdf4 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );
 8004a14:	2000      	movs	r0, #0
 8004a16:	f7ff fdf1 	bl	80045fc <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_DIS.LCD_Y_Adjust);
 8004a1a:	883b      	ldrh	r3, [r7, #0]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <LCD_SetWindows+0xa8>)
 8004a20:	891b      	ldrh	r3, [r3, #8]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fde5 	bl	80045fc <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0x2C);	
 8004a32:	202c      	movs	r0, #44	@ 0x2c
 8004a34:	f7ff fdc2 	bl	80045bc <LCD_WriteReg>
	
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd90      	pop	{r4, r7, pc}
 8004a40:	200026d4 	.word	0x200026d4

08004a44 <LCD_SetCursor>:
function:	Set the display point (Xpoint, Ypoint)
parameter: 
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor ( POINT Xpoint, POINT Ypoint ){
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	460a      	mov	r2, r1
 8004a4e:	80fb      	strh	r3, [r7, #6]
 8004a50:	4613      	mov	r3, r2
 8004a52:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8004a54:	88bb      	ldrh	r3, [r7, #4]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	88b9      	ldrh	r1, [r7, #4]
 8004a5a:	88f8      	ldrh	r0, [r7, #6]
 8004a5c:	f7ff ff9c 	bl	8004998 <LCD_SetWindows>
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <LCD_SetColor>:
function:	Set show color
parameter: 
		Color  :   Set show color
********************************************************************************/
//static void LCD_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint){		
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	80fb      	strh	r3, [r7, #6]
 8004a72:	460b      	mov	r3, r1
 8004a74:	80bb      	strh	r3, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	807b      	strh	r3, [r7, #2]
	LCD_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint); 
 8004a7a:	88bb      	ldrh	r3, [r7, #4]
 8004a7c:	887a      	ldrh	r2, [r7, #2]
 8004a7e:	fb03 f202 	mul.w	r2, r3, r2
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff fdd8 	bl	800463c <LCD_WriteData_NLen16Bit>
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <LCD_SetPointlColor>:
parameter: 
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor ( POINT Xpoint, POINT Ypoint, COLOR Color ){	
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	80fb      	strh	r3, [r7, #6]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	80bb      	strh	r3, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	807b      	strh	r3, [r7, #2]
	if ( ( Xpoint <= sLCD_DIS.LCD_Dis_Column ) && ( Ypoint <= sLCD_DIS.LCD_Dis_Page ) ){		
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <LCD_SetPointlColor+0x48>)
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d810      	bhi.n	8004ad2 <LCD_SetPointlColor+0x3e>
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <LCD_SetPointlColor+0x48>)
 8004ab2:	885b      	ldrh	r3, [r3, #2]
 8004ab4:	88ba      	ldrh	r2, [r7, #4]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d80b      	bhi.n	8004ad2 <LCD_SetPointlColor+0x3e>
		LCD_SetCursor (Xpoint, Ypoint);		
 8004aba:	88ba      	ldrh	r2, [r7, #4]
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff ffbf 	bl	8004a44 <LCD_SetCursor>
		LCD_SetColor ( Color , 1 , 1);
 8004ac6:	887b      	ldrh	r3, [r7, #2]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	2101      	movs	r1, #1
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ffcb 	bl	8004a68 <LCD_SetColor>
	}
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	200026d4 	.word	0x200026d4

08004ae0 <LCD_SetArealColor>:
		Ystart :   Start point y coordinate
		Xend   :   End point coordinates
		Yend   :   End point coordinates
		Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor (POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR  Color){	
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	4611      	mov	r1, r2
 8004aec:	461a      	mov	r2, r3
 8004aee:	4623      	mov	r3, r4
 8004af0:	80fb      	strh	r3, [r7, #6]
 8004af2:	4603      	mov	r3, r0
 8004af4:	80bb      	strh	r3, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	807b      	strh	r3, [r7, #2]
 8004afa:	4613      	mov	r3, r2
 8004afc:	803b      	strh	r3, [r7, #0]
	if((Xend > Xstart) && (Yend > Ystart)){			
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d915      	bls.n	8004b32 <LCD_SetArealColor+0x52>
 8004b06:	883a      	ldrh	r2, [r7, #0]
 8004b08:	88bb      	ldrh	r3, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d911      	bls.n	8004b32 <LCD_SetArealColor+0x52>
		LCD_SetWindows( Xstart , Ystart , Xend , Yend  );
 8004b0e:	883b      	ldrh	r3, [r7, #0]
 8004b10:	887a      	ldrh	r2, [r7, #2]
 8004b12:	88b9      	ldrh	r1, [r7, #4]
 8004b14:	88f8      	ldrh	r0, [r7, #6]
 8004b16:	f7ff ff3f 	bl	8004998 <LCD_SetWindows>
		LCD_SetColor ( Color ,Xend - Xstart , Yend - Ystart );
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	b299      	uxth	r1, r3
 8004b22:	883a      	ldrh	r2, [r7, #0]
 8004b24:	88bb      	ldrh	r3, [r7, #4]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	8b3b      	ldrh	r3, [r7, #24]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ff9b 	bl	8004a68 <LCD_SetColor>
	}
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd90      	pop	{r4, r7, pc}
	...

08004b3c <LCD_Clear>:

/********************************************************************************
function:	
			Clear screen 
********************************************************************************/
void LCD_Clear(COLOR  Color){
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	4603      	mov	r3, r0
 8004b44:	80fb      	strh	r3, [r7, #6]

	LCD_SetArealColor(0,0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page  , Color);	
 8004b46:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <LCD_Clear+0x28>)
 8004b48:	881a      	ldrh	r2, [r3, #0]
 8004b4a:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <LCD_Clear+0x28>)
 8004b4c:	8859      	ldrh	r1, [r3, #2]
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	460b      	mov	r3, r1
 8004b54:	2100      	movs	r1, #0
 8004b56:	2000      	movs	r0, #0
 8004b58:	f7ff ffc2 	bl	8004ae0 <LCD_SetArealColor>

}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	200026d4 	.word	0x200026d4

08004b68 <LCD_DrawPoint>:
			Dot_Pixel	:	point size
********************************************************************************/
void LCD_DrawPoint(	POINT Xpoint, POINT Ypoint, 
					COLOR Color, 
					DOT_PIXEL Dot_Pixel,
					DOT_STYLE DOT_STYLE){		
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4623      	mov	r3, r4
 8004b78:	80fb      	strh	r3, [r7, #6]
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	80bb      	strh	r3, [r7, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	807b      	strh	r3, [r7, #2]
 8004b82:	4613      	mov	r3, r2
 8004b84:	707b      	strb	r3, [r7, #1]
						
	if ( Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page ) {
 8004b86:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <LCD_DrawPoint+0xec>)
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d85c      	bhi.n	8004c4a <LCD_DrawPoint+0xe2>
 8004b90:	4b30      	ldr	r3, [pc, #192]	@ (8004c54 <LCD_DrawPoint+0xec>)
 8004b92:	885b      	ldrh	r3, [r3, #2]
 8004b94:	88ba      	ldrh	r2, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d857      	bhi.n	8004c4a <LCD_DrawPoint+0xe2>
		return;
	}
	
	uint16_t XDir_Num ,YDir_Num;
	if(DOT_STYLE == DOT_FILL_AROUND){
 8004b9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d12c      	bne.n	8004bfc <LCD_DrawPoint+0x94>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	81fb      	strh	r3, [r7, #14]
 8004ba6:	e022      	b.n	8004bee <LCD_DrawPoint+0x86>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 8004ba8:	2300      	movs	r3, #0
 8004baa:	81bb      	strh	r3, [r7, #12]
 8004bac:	e016      	b.n	8004bdc <LCD_DrawPoint+0x74>
				LCD_SetPointlColor( Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	89fb      	ldrh	r3, [r7, #14]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	787b      	ldrb	r3, [r7, #1]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	b298      	uxth	r0, r3
 8004bbe:	88ba      	ldrh	r2, [r7, #4]
 8004bc0:	89bb      	ldrh	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	787b      	ldrb	r3, [r7, #1]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	887a      	ldrh	r2, [r7, #2]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f7ff ff5f 	bl	8004a94 <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 8004bd6:	89bb      	ldrh	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	81bb      	strh	r3, [r7, #12]
 8004bdc:	89ba      	ldrh	r2, [r7, #12]
 8004bde:	787b      	ldrb	r3, [r7, #1]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	3b01      	subs	r3, #1
 8004be4:	429a      	cmp	r2, r3
 8004be6:	dbe2      	blt.n	8004bae <LCD_DrawPoint+0x46>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8004be8:	89fb      	ldrh	r3, [r7, #14]
 8004bea:	3301      	adds	r3, #1
 8004bec:	81fb      	strh	r3, [r7, #14]
 8004bee:	89fa      	ldrh	r2, [r7, #14]
 8004bf0:	787b      	ldrb	r3, [r7, #1]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	dbd6      	blt.n	8004ba8 <LCD_DrawPoint+0x40>
 8004bfa:	e027      	b.n	8004c4c <LCD_DrawPoint+0xe4>
			}
		}
	}else{
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	81fb      	strh	r3, [r7, #14]
 8004c00:	e01d      	b.n	8004c3e <LCD_DrawPoint+0xd6>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8004c02:	2300      	movs	r3, #0
 8004c04:	81bb      	strh	r3, [r7, #12]
 8004c06:	e012      	b.n	8004c2e <LCD_DrawPoint+0xc6>
				LCD_SetPointlColor( Xpoint + XDir_Num - 1 , Ypoint + YDir_Num -1 , Color);
 8004c08:	88fa      	ldrh	r2, [r7, #6]
 8004c0a:	89fb      	ldrh	r3, [r7, #14]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b298      	uxth	r0, r3
 8004c14:	88ba      	ldrh	r2, [r7, #4]
 8004c16:	89bb      	ldrh	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	887a      	ldrh	r2, [r7, #2]
 8004c22:	4619      	mov	r1, r3
 8004c24:	f7ff ff36 	bl	8004a94 <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8004c28:	89bb      	ldrh	r3, [r7, #12]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	81bb      	strh	r3, [r7, #12]
 8004c2e:	787b      	ldrb	r3, [r7, #1]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	89ba      	ldrh	r2, [r7, #12]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d3e7      	bcc.n	8004c08 <LCD_DrawPoint+0xa0>
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8004c38:	89fb      	ldrh	r3, [r7, #14]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	81fb      	strh	r3, [r7, #14]
 8004c3e:	787b      	ldrb	r3, [r7, #1]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	89fa      	ldrh	r2, [r7, #14]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3dc      	bcc.n	8004c02 <LCD_DrawPoint+0x9a>
 8004c48:	e000      	b.n	8004c4c <LCD_DrawPoint+0xe4>
		return;
 8004c4a:	bf00      	nop
			}
		}
	}	
}
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	200026d4 	.word	0x200026d4

08004c58 <LCD_DrawLine>:
********************************************************************************/
void LCD_DrawLine ( POINT Xstart, POINT Ystart, 
					POINT Xend, POINT Yend, 
					COLOR Color,
					LINE_STYLE Line_Style,
					DOT_PIXEL Dot_Pixel){
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b08d      	sub	sp, #52	@ 0x34
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	80fb      	strh	r3, [r7, #6]
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	80bb      	strh	r3, [r7, #4]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	807b      	strh	r3, [r7, #2]
 8004c72:	4613      	mov	r3, r2
 8004c74:	803b      	strh	r3, [r7, #0]
						
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8004c76:	4b4e      	ldr	r3, [pc, #312]	@ (8004db0 <LCD_DrawLine+0x158>)
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	f200 808e 	bhi.w	8004d9e <LCD_DrawLine+0x146>
 8004c82:	4b4b      	ldr	r3, [pc, #300]	@ (8004db0 <LCD_DrawLine+0x158>)
 8004c84:	885b      	ldrh	r3, [r3, #2]
 8004c86:	88ba      	ldrh	r2, [r7, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	f200 8088 	bhi.w	8004d9e <LCD_DrawLine+0x146>
 8004c8e:	4b48      	ldr	r3, [pc, #288]	@ (8004db0 <LCD_DrawLine+0x158>)
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	887a      	ldrh	r2, [r7, #2]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	f200 8082 	bhi.w	8004d9e <LCD_DrawLine+0x146>
 8004c9a:	4b45      	ldr	r3, [pc, #276]	@ (8004db0 <LCD_DrawLine+0x158>)
 8004c9c:	885b      	ldrh	r3, [r3, #2]
 8004c9e:	883a      	ldrh	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d87c      	bhi.n	8004d9e <LCD_DrawLine+0x146>
		return;
	}	
	
	POINT Xpoint = Xstart; 
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	POINT Ypoint = Ystart; 
 8004ca8:	88bb      	ldrh	r3, [r7, #4]
 8004caa:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8004cac:	887a      	ldrh	r2, [r7, #2]
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bfb8      	it	lt
 8004cb6:	425b      	neglt	r3, r3
 8004cb8:	61bb      	str	r3, [r7, #24]
	int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8004cba:	883a      	ldrh	r2, [r7, #0]
 8004cbc:	88bb      	ldrh	r3, [r7, #4]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bfb8      	it	lt
 8004cc4:	425b      	neglt	r3, r3
 8004cc6:	425b      	negs	r3, r3
 8004cc8:	617b      	str	r3, [r7, #20]
	
	// Increment direction, 1 is positive, -1 is counter;
	int32_t XAddway = Xstart < Xend ? 1 : -1;
 8004cca:	88fa      	ldrh	r2, [r7, #6]
 8004ccc:	887b      	ldrh	r3, [r7, #2]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d201      	bcs.n	8004cd6 <LCD_DrawLine+0x7e>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e001      	b.n	8004cda <LCD_DrawLine+0x82>
 8004cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cda:	613b      	str	r3, [r7, #16]
	int32_t YAddway = Ystart < Yend ? 1 : -1;
 8004cdc:	88ba      	ldrh	r2, [r7, #4]
 8004cde:	883b      	ldrh	r3, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d201      	bcs.n	8004ce8 <LCD_DrawLine+0x90>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e001      	b.n	8004cec <LCD_DrawLine+0x94>
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cec:	60fb      	str	r3, [r7, #12]
	
	//Cumulative error
	int32_t Esp = dx + dy;
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	623b      	str	r3, [r7, #32]
	int8_t Line_Style_Temp = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	77fb      	strb	r3, [r7, #31]

	for (;;){
		Line_Style_Temp++;
 8004cfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	77fb      	strb	r3, [r7, #31]
		//Painted dotted line, 2 point is really virtual
		if(Line_Style == LINE_DOTTED && Line_Style_Temp %3 == 0){
 8004d06:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d119      	bne.n	8004d42 <LCD_DrawLine+0xea>
 8004d0e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8004d12:	4b28      	ldr	r3, [pc, #160]	@ (8004db4 <LCD_DrawLine+0x15c>)
 8004d14:	fb83 3102 	smull	r3, r1, r3, r2
 8004d18:	17d3      	asrs	r3, r2, #31
 8004d1a:	1ac9      	subs	r1, r1, r3
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	440b      	add	r3, r1
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	b25b      	sxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <LCD_DrawLine+0xea>
			LCD_DrawPoint( Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 8004d2a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004d2e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8004d30:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8004d32:	2201      	movs	r2, #1
 8004d34:	9200      	str	r2, [sp, #0]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f7ff ff16 	bl	8004b68 <LCD_DrawPoint>
			Line_Style_Temp = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e008      	b.n	8004d54 <LCD_DrawLine+0xfc>
		}else{
			LCD_DrawPoint( Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 8004d42:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004d46:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8004d48:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8004d4a:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8004d4c:	2401      	movs	r4, #1
 8004d4e:	9400      	str	r4, [sp, #0]
 8004d50:	f7ff ff0a 	bl	8004b68 <LCD_DrawPoint>
		}	
        if (2 * Esp >= dy) {
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	dc0c      	bgt.n	8004d78 <LCD_DrawLine+0x120>
			if (Xpoint == Xend) break;			
 8004d5e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004d60:	887b      	ldrh	r3, [r7, #2]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d01d      	beq.n	8004da2 <LCD_DrawLine+0x14a>
            Esp += dy; 
 8004d66:	6a3a      	ldr	r2, [r7, #32]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004d74:	4413      	add	r3, r2
 8004d76:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if (2 * Esp <= dx) {
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	dbbb      	blt.n	8004cfa <LCD_DrawLine+0xa2>
			if (Ypoint == Yend) break;	
 8004d82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d84:	883b      	ldrh	r3, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d00d      	beq.n	8004da6 <LCD_DrawLine+0x14e>
            Esp += dx; 
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	4413      	add	r3, r2
 8004d90:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d98:	4413      	add	r3, r2
 8004d9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		Line_Style_Temp++;
 8004d9c:	e7ad      	b.n	8004cfa <LCD_DrawLine+0xa2>
		return;
 8004d9e:	bf00      	nop
 8004da0:	e002      	b.n	8004da8 <LCD_DrawLine+0x150>
			if (Xpoint == Xend) break;			
 8004da2:	bf00      	nop
 8004da4:	e000      	b.n	8004da8 <LCD_DrawLine+0x150>
			if (Ypoint == Yend) break;	
 8004da6:	bf00      	nop
        }
	}
}   
 8004da8:	372c      	adds	r7, #44	@ 0x2c
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd90      	pop	{r4, r7, pc}
 8004dae:	bf00      	nop
 8004db0:	200026d4 	.word	0x200026d4
 8004db4:	55555556 	.word	0x55555556

08004db8 <LCD_DrawRectangle>:
********************************************************************************/
void LCD_DrawRectangle ( 	POINT Xstart, POINT Ystart, 
							POINT Xend, POINT Yend, 
							COLOR Color, 
							DRAW_FILL Filled,
							DOT_PIXEL Dot_Pixel ){
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af04      	add	r7, sp, #16
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	4608      	mov	r0, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4623      	mov	r3, r4
 8004dc8:	80fb      	strh	r3, [r7, #6]
 8004dca:	4603      	mov	r3, r0
 8004dcc:	80bb      	strh	r3, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	807b      	strh	r3, [r7, #2]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	803b      	strh	r3, [r7, #0]
					
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004e94 <LCD_DrawRectangle+0xdc>)
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d854      	bhi.n	8004e8a <LCD_DrawRectangle+0xd2>
 8004de0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e94 <LCD_DrawRectangle+0xdc>)
 8004de2:	885b      	ldrh	r3, [r3, #2]
 8004de4:	88ba      	ldrh	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d84f      	bhi.n	8004e8a <LCD_DrawRectangle+0xd2>
 8004dea:	4b2a      	ldr	r3, [pc, #168]	@ (8004e94 <LCD_DrawRectangle+0xdc>)
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d84a      	bhi.n	8004e8a <LCD_DrawRectangle+0xd2>
 8004df4:	4b27      	ldr	r3, [pc, #156]	@ (8004e94 <LCD_DrawRectangle+0xdc>)
 8004df6:	885b      	ldrh	r3, [r3, #2]
 8004df8:	883a      	ldrh	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d845      	bhi.n	8004e8a <LCD_DrawRectangle+0xd2>
		return;
	}	
	
	if ( Filled ){
 8004dfe:	7f3b      	ldrb	r3, [r7, #28]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <LCD_DrawRectangle+0x60>
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 8004e04:	883c      	ldrh	r4, [r7, #0]
 8004e06:	887a      	ldrh	r2, [r7, #2]
 8004e08:	88b9      	ldrh	r1, [r7, #4]
 8004e0a:	88f8      	ldrh	r0, [r7, #6]
 8004e0c:	8b3b      	ldrh	r3, [r7, #24]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4623      	mov	r3, r4
 8004e12:	f7ff fe65 	bl	8004ae0 <LCD_SetArealColor>
 8004e16:	e039      	b.n	8004e8c <LCD_DrawRectangle+0xd4>
	}else{
		LCD_DrawLine ( Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8004e18:	88bc      	ldrh	r4, [r7, #4]
 8004e1a:	887a      	ldrh	r2, [r7, #2]
 8004e1c:	88b9      	ldrh	r1, [r7, #4]
 8004e1e:	88f8      	ldrh	r0, [r7, #6]
 8004e20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e24:	9302      	str	r3, [sp, #8]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	8b3b      	ldrh	r3, [r7, #24]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	4623      	mov	r3, r4
 8004e30:	f7ff ff12 	bl	8004c58 <LCD_DrawLine>
		LCD_DrawLine ( Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8004e34:	883c      	ldrh	r4, [r7, #0]
 8004e36:	88fa      	ldrh	r2, [r7, #6]
 8004e38:	88b9      	ldrh	r1, [r7, #4]
 8004e3a:	88f8      	ldrh	r0, [r7, #6]
 8004e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e40:	9302      	str	r3, [sp, #8]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	8b3b      	ldrh	r3, [r7, #24]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	f7ff ff04 	bl	8004c58 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8004e50:	88bc      	ldrh	r4, [r7, #4]
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	8839      	ldrh	r1, [r7, #0]
 8004e56:	8878      	ldrh	r0, [r7, #2]
 8004e58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e5c:	9302      	str	r3, [sp, #8]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	8b3b      	ldrh	r3, [r7, #24]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4623      	mov	r3, r4
 8004e68:	f7ff fef6 	bl	8004c58 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);		
 8004e6c:	883c      	ldrh	r4, [r7, #0]
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	8839      	ldrh	r1, [r7, #0]
 8004e72:	8878      	ldrh	r0, [r7, #2]
 8004e74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e78:	9302      	str	r3, [sp, #8]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	8b3b      	ldrh	r3, [r7, #24]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4623      	mov	r3, r4
 8004e84:	f7ff fee8 	bl	8004c58 <LCD_DrawLine>
 8004e88:	e000      	b.n	8004e8c <LCD_DrawRectangle+0xd4>
		return;
 8004e8a:	bf00      	nop
	}
}
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd90      	pop	{r4, r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200026d4 	.word	0x200026d4

08004e98 <LCD_DisplayChar>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayChar( 	POINT Xpoint, POINT Ypoint, const char Acsii_Char,
						sFONT* Font, COLOR Color_Background,	COLOR Color_Foreground ){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	81fb      	strh	r3, [r7, #14]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	81bb      	strh	r3, [r7, #12]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	72fb      	strb	r3, [r7, #11]
	POINT Page, Column;
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8004eac:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe0 <LCD_DisplayChar+0x148>)
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	89fa      	ldrh	r2, [r7, #14]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	f080 808f 	bcs.w	8004fd6 <LCD_DisplayChar+0x13e>
 8004eb8:	4b49      	ldr	r3, [pc, #292]	@ (8004fe0 <LCD_DisplayChar+0x148>)
 8004eba:	885b      	ldrh	r3, [r3, #2]
 8004ebc:	89ba      	ldrh	r2, [r7, #12]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	f080 8089 	bcs.w	8004fd6 <LCD_DisplayChar+0x13e>
		return;
	}
	
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8004ec4:	7afb      	ldrb	r3, [r7, #11]
 8004ec6:	3b20      	subs	r3, #32
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	88d2      	ldrh	r2, [r2, #6]
 8004ecc:	fb02 f303 	mul.w	r3, r2, r3
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	8892      	ldrh	r2, [r2, #4]
 8004ed4:	08d2      	lsrs	r2, r2, #3
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	4611      	mov	r1, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	8892      	ldrh	r2, [r2, #4]
 8004ede:	f002 0207 	and.w	r2, r2, #7
 8004ee2:	b292      	uxth	r2, r2
 8004ee4:	2a00      	cmp	r2, #0
 8004ee6:	bf14      	ite	ne
 8004ee8:	2201      	movne	r2, #1
 8004eea:	2200      	moveq	r2, #0
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	440a      	add	r2, r1
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
	const unsigned char* ptr = &Font->table[Char_Offset];
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	4413      	add	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]

	for ( Page = 0; Page < Font->Height; Page ++ ){
 8004f00:	2300      	movs	r3, #0
 8004f02:	83fb      	strh	r3, [r7, #30]
 8004f04:	e061      	b.n	8004fca <LCD_DisplayChar+0x132>
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8004f06:	2300      	movs	r3, #0
 8004f08:	83bb      	strh	r3, [r7, #28]
 8004f0a:	e04c      	b.n	8004fa6 <LCD_DisplayChar+0x10e>
			
			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background){//this process is to speed up the scan
 8004f0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d118      	bne.n	8004f44 <LCD_DisplayChar+0xac>
				if (*ptr & (0x80 >> (Column % 8)))
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	4619      	mov	r1, r3
 8004f18:	8bbb      	ldrh	r3, [r7, #28]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	2280      	movs	r2, #128	@ 0x80
 8004f20:	fa42 f303 	asr.w	r3, r2, r3
 8004f24:	400b      	ands	r3, r1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d031      	beq.n	8004f8e <LCD_DisplayChar+0xf6>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8004f2a:	89fa      	ldrh	r2, [r7, #14]
 8004f2c:	8bbb      	ldrh	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	b298      	uxth	r0, r3
 8004f32:	89ba      	ldrh	r2, [r7, #12]
 8004f34:	8bfb      	ldrh	r3, [r7, #30]
 8004f36:	4413      	add	r3, r2
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f7ff fda9 	bl	8004a94 <LCD_SetPointlColor>
 8004f42:	e024      	b.n	8004f8e <LCD_DisplayChar+0xf6>
			}else{
				if (*ptr & (0x80 >> (Column % 8))){
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	8bbb      	ldrh	r3, [r7, #28]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	2280      	movs	r2, #128	@ 0x80
 8004f52:	fa42 f303 	asr.w	r3, r2, r3
 8004f56:	400b      	ands	r3, r1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <LCD_DisplayChar+0xde>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8004f5c:	89fa      	ldrh	r2, [r7, #14]
 8004f5e:	8bbb      	ldrh	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	b298      	uxth	r0, r3
 8004f64:	89ba      	ldrh	r2, [r7, #12]
 8004f66:	8bfb      	ldrh	r3, [r7, #30]
 8004f68:	4413      	add	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f7ff fd90 	bl	8004a94 <LCD_SetPointlColor>
 8004f74:	e00b      	b.n	8004f8e <LCD_DisplayChar+0xf6>
				}else{
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Background );
 8004f76:	89fa      	ldrh	r2, [r7, #14]
 8004f78:	8bbb      	ldrh	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	b298      	uxth	r0, r3
 8004f7e:	89ba      	ldrh	r2, [r7, #12]
 8004f80:	8bfb      	ldrh	r3, [r7, #30]
 8004f82:	4413      	add	r3, r2
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f7ff fd83 	bl	8004a94 <LCD_SetPointlColor>
				}
			}
			//One pixel is 8 bits
            if (Column % 8 == 7) {
 8004f8e:	8bbb      	ldrh	r3, [r7, #28]
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b07      	cmp	r3, #7
 8004f98:	d102      	bne.n	8004fa0 <LCD_DisplayChar+0x108>
                ptr++;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	61bb      	str	r3, [r7, #24]
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8004fa0:	8bbb      	ldrh	r3, [r7, #28]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	83bb      	strh	r3, [r7, #28]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	889b      	ldrh	r3, [r3, #4]
 8004faa:	8bba      	ldrh	r2, [r7, #28]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d3ad      	bcc.n	8004f0c <LCD_DisplayChar+0x74>
            }	
		}/* Write a line */
		if (Font->Width % 8 != 0) {
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	889b      	ldrh	r3, [r3, #4]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <LCD_DisplayChar+0x12c>
				ptr++;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61bb      	str	r3, [r7, #24]
	for ( Page = 0; Page < Font->Height; Page ++ ){
 8004fc4:	8bfb      	ldrh	r3, [r7, #30]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	83fb      	strh	r3, [r7, #30]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	88db      	ldrh	r3, [r3, #6]
 8004fce:	8bfa      	ldrh	r2, [r7, #30]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d398      	bcc.n	8004f06 <LCD_DisplayChar+0x6e>
 8004fd4:	e000      	b.n	8004fd8 <LCD_DisplayChar+0x140>
		return;
 8004fd6:	bf00      	nop
		}
	}/* Write all */
}
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200026d4 	.word	0x200026d4

08004fe4 <LCD_DisplayString>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayString (	POINT Xstart, POINT Ystart, const char * pString, 
							sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60ba      	str	r2, [r7, #8]
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	4603      	mov	r3, r0
 8004ff0:	81fb      	strh	r3, [r7, #14]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	81bb      	strh	r3, [r7, #12]
	POINT Xpoint = Xstart;
 8004ff6:	89fb      	ldrh	r3, [r7, #14]
 8004ff8:	82fb      	strh	r3, [r7, #22]
	POINT Ypoint = Ystart;
 8004ffa:	89bb      	ldrh	r3, [r7, #12]
 8004ffc:	82bb      	strh	r3, [r7, #20]

	if (Xstart >= sLCD_DIS.LCD_Dis_Column || Ystart >= sLCD_DIS.LCD_Dis_Page) {
 8004ffe:	4b21      	ldr	r3, [pc, #132]	@ (8005084 <LCD_DisplayString+0xa0>)
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	89fa      	ldrh	r2, [r7, #14]
 8005004:	429a      	cmp	r2, r3
 8005006:	d238      	bcs.n	800507a <LCD_DisplayString+0x96>
 8005008:	4b1e      	ldr	r3, [pc, #120]	@ (8005084 <LCD_DisplayString+0xa0>)
 800500a:	885b      	ldrh	r3, [r3, #2]
 800500c:	89ba      	ldrh	r2, [r7, #12]
 800500e:	429a      	cmp	r2, r3
 8005010:	d233      	bcs.n	800507a <LCD_DisplayString+0x96>
		return;
	}
		
	while ( * pString != '\0')
 8005012:	e02d      	b.n	8005070 <LCD_DisplayString+0x8c>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
		if ( ( Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ){
 8005014:	8afb      	ldrh	r3, [r7, #22]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	8892      	ldrh	r2, [r2, #4]
 800501a:	4413      	add	r3, r2
 800501c:	4a19      	ldr	r2, [pc, #100]	@ (8005084 <LCD_DisplayString+0xa0>)
 800501e:	8812      	ldrh	r2, [r2, #0]
 8005020:	4293      	cmp	r3, r2
 8005022:	dd06      	ble.n	8005032 <LCD_DisplayString+0x4e>
			Xpoint = Xstart;
 8005024:	89fb      	ldrh	r3, [r7, #14]
 8005026:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	88da      	ldrh	r2, [r3, #6]
 800502c:	8abb      	ldrh	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	82bb      	strh	r3, [r7, #20]
		}
		
		// If the Y direction is full, reposition to (Xstart, Ystart)
		if ( ( Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ){
 8005032:	8abb      	ldrh	r3, [r7, #20]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	88d2      	ldrh	r2, [r2, #6]
 8005038:	4413      	add	r3, r2
 800503a:	4a12      	ldr	r2, [pc, #72]	@ (8005084 <LCD_DisplayString+0xa0>)
 800503c:	8852      	ldrh	r2, [r2, #2]
 800503e:	4293      	cmp	r3, r2
 8005040:	dd03      	ble.n	800504a <LCD_DisplayString+0x66>
			Xpoint = Xstart;
 8005042:	89fb      	ldrh	r3, [r7, #14]
 8005044:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 8005046:	89bb      	ldrh	r3, [r7, #12]
 8005048:	82bb      	strh	r3, [r7, #20]
		}		
		LCD_DisplayChar ( Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground );
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781a      	ldrb	r2, [r3, #0]
 800504e:	8ab9      	ldrh	r1, [r7, #20]
 8005050:	8af8      	ldrh	r0, [r7, #22]
 8005052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	8c3b      	ldrh	r3, [r7, #32]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f7ff ff1c 	bl	8004e98 <LCD_DisplayChar>
		
		//The next character of the address
		pString ++;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	3301      	adds	r3, #1
 8005064:	60bb      	str	r3, [r7, #8]
		
		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;	
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	889a      	ldrh	r2, [r3, #4]
 800506a:	8afb      	ldrh	r3, [r7, #22]
 800506c:	4413      	add	r3, r2
 800506e:	82fb      	strh	r3, [r7, #22]
	while ( * pString != '\0')
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1cd      	bne.n	8005014 <LCD_DisplayString+0x30>
 8005078:	e000      	b.n	800507c <LCD_DisplayString+0x98>
		return;
 800507a:	bf00      	nop
	}
}
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	200026d4 	.word	0x200026d4

08005088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800508c:	4b0e      	ldr	r3, [pc, #56]	@ (80050c8 <HAL_Init+0x40>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0d      	ldr	r2, [pc, #52]	@ (80050c8 <HAL_Init+0x40>)
 8005092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005098:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <HAL_Init+0x40>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a0a      	ldr	r2, [pc, #40]	@ (80050c8 <HAL_Init+0x40>)
 800509e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050a4:	4b08      	ldr	r3, [pc, #32]	@ (80050c8 <HAL_Init+0x40>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a07      	ldr	r2, [pc, #28]	@ (80050c8 <HAL_Init+0x40>)
 80050aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050b0:	2003      	movs	r0, #3
 80050b2:	f000 ffb7 	bl	8006024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050b6:	2000      	movs	r0, #0
 80050b8:	f000 f808 	bl	80050cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050bc:	f7fd faac 	bl	8002618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40023c00 	.word	0x40023c00

080050cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050d4:	4b12      	ldr	r3, [pc, #72]	@ (8005120 <HAL_InitTick+0x54>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <HAL_InitTick+0x58>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	4619      	mov	r1, r3
 80050de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 ffcf 	bl	800608e <HAL_SYSTICK_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e00e      	b.n	8005118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b0f      	cmp	r3, #15
 80050fe:	d80a      	bhi.n	8005116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005100:	2200      	movs	r2, #0
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	f000 ff97 	bl	800603a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800510c:	4a06      	ldr	r2, [pc, #24]	@ (8005128 <HAL_InitTick+0x5c>)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000004 	.word	0x20000004
 8005124:	20000038 	.word	0x20000038
 8005128:	20000034 	.word	0x20000034

0800512c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005130:	4b06      	ldr	r3, [pc, #24]	@ (800514c <HAL_IncTick+0x20>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_IncTick+0x24>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4413      	add	r3, r2
 800513c:	4a04      	ldr	r2, [pc, #16]	@ (8005150 <HAL_IncTick+0x24>)
 800513e:	6013      	str	r3, [r2, #0]
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000038 	.word	0x20000038
 8005150:	200026e0 	.word	0x200026e0

08005154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return uwTick;
 8005158:	4b03      	ldr	r3, [pc, #12]	@ (8005168 <HAL_GetTick+0x14>)
 800515a:	681b      	ldr	r3, [r3, #0]
}
 800515c:	4618      	mov	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	200026e0 	.word	0x200026e0

0800516c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005174:	f7ff ffee 	bl	8005154 <HAL_GetTick>
 8005178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d005      	beq.n	8005192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005186:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <HAL_Delay+0x44>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005192:	bf00      	nop
 8005194:	f7ff ffde 	bl	8005154 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d8f7      	bhi.n	8005194 <HAL_Delay+0x28>
  {
  }
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000038 	.word	0x20000038

080051b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0ed      	b.n	80053a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fb ff8c 	bl	80010f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051e8:	f7ff ffb4 	bl	8005154 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051ee:	e012      	b.n	8005216 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051f0:	f7ff ffb0 	bl	8005154 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b0a      	cmp	r3, #10
 80051fc:	d90b      	bls.n	8005216 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2205      	movs	r2, #5
 800520e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0c5      	b.n	80053a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0e5      	beq.n	80051f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0202 	bic.w	r2, r2, #2
 8005232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005234:	f7ff ff8e 	bl	8005154 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800523a:	e012      	b.n	8005262 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800523c:	f7ff ff8a 	bl	8005154 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b0a      	cmp	r3, #10
 8005248:	d90b      	bls.n	8005262 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2205      	movs	r2, #5
 800525a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e09f      	b.n	80053a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	7e1b      	ldrb	r3, [r3, #24]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d108      	bne.n	800528a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e007      	b.n	800529a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005298:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7e5b      	ldrb	r3, [r3, #25]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d108      	bne.n	80052b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e007      	b.n	80052c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7e9b      	ldrb	r3, [r3, #26]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d108      	bne.n	80052de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0220 	orr.w	r2, r2, #32
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e007      	b.n	80052ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0220 	bic.w	r2, r2, #32
 80052ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	7edb      	ldrb	r3, [r3, #27]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d108      	bne.n	8005308 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0210 	bic.w	r2, r2, #16
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e007      	b.n	8005318 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0210 	orr.w	r2, r2, #16
 8005316:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	7f1b      	ldrb	r3, [r3, #28]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d108      	bne.n	8005332 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0208 	orr.w	r2, r2, #8
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	e007      	b.n	8005342 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0208 	bic.w	r2, r2, #8
 8005340:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	7f5b      	ldrb	r3, [r3, #29]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d108      	bne.n	800535c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0204 	orr.w	r2, r2, #4
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e007      	b.n	800536c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0204 	bic.w	r2, r2, #4
 800536a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	ea42 0103 	orr.w	r1, r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	1e5a      	subs	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80053c4:	7cfb      	ldrb	r3, [r7, #19]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d003      	beq.n	80053d2 <HAL_CAN_ConfigFilter+0x26>
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	f040 80be 	bne.w	800554e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80053d2:	4b65      	ldr	r3, [pc, #404]	@ (8005568 <HAL_CAN_ConfigFilter+0x1bc>)
 80053d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053dc:	f043 0201 	orr.w	r2, r3, #1
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053ec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	431a      	orrs	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	2201      	movs	r2, #1
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	43db      	mvns	r3, r3
 8005424:	401a      	ands	r2, r3
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d123      	bne.n	800547c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	43db      	mvns	r3, r3
 800543e:	401a      	ands	r2, r3
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005456:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	3248      	adds	r2, #72	@ 0x48
 800545c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005470:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005472:	6979      	ldr	r1, [r7, #20]
 8005474:	3348      	adds	r3, #72	@ 0x48
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	440b      	add	r3, r1
 800547a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d122      	bne.n	80054ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	431a      	orrs	r2, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80054a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	3248      	adds	r2, #72	@ 0x48
 80054aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054c0:	6979      	ldr	r1, [r7, #20]
 80054c2:	3348      	adds	r3, #72	@ 0x48
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	440b      	add	r3, r1
 80054c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	43db      	mvns	r3, r3
 80054dc:	401a      	ands	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80054e4:	e007      	b.n	80054f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	43db      	mvns	r3, r3
 8005508:	401a      	ands	r2, r3
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005510:	e007      	b.n	8005522 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	431a      	orrs	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d107      	bne.n	800553a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	431a      	orrs	r2, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005540:	f023 0201 	bic.w	r2, r3, #1
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e006      	b.n	800555c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	40006400 	.word	0x40006400

0800556c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d12e      	bne.n	80055de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005598:	f7ff fddc 	bl	8005154 <HAL_GetTick>
 800559c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800559e:	e012      	b.n	80055c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80055a0:	f7ff fdd8 	bl	8005154 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b0a      	cmp	r3, #10
 80055ac:	d90b      	bls.n	80055c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2205      	movs	r2, #5
 80055be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e012      	b.n	80055ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e006      	b.n	80055ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
  }
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b089      	sub	sp, #36	@ 0x24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005608:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005612:	7ffb      	ldrb	r3, [r7, #31]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d003      	beq.n	8005620 <HAL_CAN_AddTxMessage+0x2c>
 8005618:	7ffb      	ldrb	r3, [r7, #31]
 800561a:	2b02      	cmp	r3, #2
 800561c:	f040 80ad 	bne.w	800577a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8095 	beq.w	800576a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	0e1b      	lsrs	r3, r3, #24
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800564a:	2201      	movs	r2, #1
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	409a      	lsls	r2, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10d      	bne.n	8005678 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	6809      	ldr	r1, [r1, #0]
 800566a:	431a      	orrs	r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3318      	adds	r3, #24
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	440b      	add	r3, r1
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e00f      	b.n	8005698 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005682:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005688:	68f9      	ldr	r1, [r7, #12]
 800568a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800568c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	3318      	adds	r3, #24
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	440b      	add	r3, r1
 8005696:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6819      	ldr	r1, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3318      	adds	r3, #24
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	440b      	add	r3, r1
 80056a8:	3304      	adds	r3, #4
 80056aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	7d1b      	ldrb	r3, [r3, #20]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d111      	bne.n	80056d8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	3318      	adds	r3, #24
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	4413      	add	r3, r2
 80056c0:	3304      	adds	r3, #4
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	6811      	ldr	r1, [r2, #0]
 80056c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3318      	adds	r3, #24
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	440b      	add	r3, r1
 80056d4:	3304      	adds	r3, #4
 80056d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3307      	adds	r3, #7
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	061a      	lsls	r2, r3, #24
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3306      	adds	r3, #6
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	041b      	lsls	r3, r3, #16
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3305      	adds	r3, #5
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	4313      	orrs	r3, r2
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	3204      	adds	r2, #4
 80056f8:	7812      	ldrb	r2, [r2, #0]
 80056fa:	4610      	mov	r0, r2
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	6811      	ldr	r1, [r2, #0]
 8005700:	ea43 0200 	orr.w	r2, r3, r0
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	440b      	add	r3, r1
 800570a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800570e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3303      	adds	r3, #3
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	061a      	lsls	r2, r3, #24
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3302      	adds	r3, #2
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	041b      	lsls	r3, r3, #16
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3301      	adds	r3, #1
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	4313      	orrs	r3, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	7812      	ldrb	r2, [r2, #0]
 8005730:	4610      	mov	r0, r2
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	6811      	ldr	r1, [r2, #0]
 8005736:	ea43 0200 	orr.w	r2, r3, r0
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	440b      	add	r3, r1
 8005740:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005744:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	3318      	adds	r3, #24
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	4413      	add	r3, r2
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	6811      	ldr	r1, [r2, #0]
 8005758:	f043 0201 	orr.w	r2, r3, #1
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3318      	adds	r3, #24
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	440b      	add	r3, r1
 8005764:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	e00e      	b.n	8005788 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e006      	b.n	8005788 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
  }
}
 8005788:	4618      	mov	r0, r3
 800578a:	3724      	adds	r7, #36	@ 0x24
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d003      	beq.n	80057b8 <HAL_CAN_GetRxMessage+0x24>
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	f040 8103 	bne.w	80059be <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10e      	bne.n	80057dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0303 	and.w	r3, r3, #3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d116      	bne.n	80057fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0f7      	b.n	80059cc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d107      	bne.n	80057fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e0e8      	b.n	80059cc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	331b      	adds	r3, #27
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	4413      	add	r3, r2
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0204 	and.w	r2, r3, #4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10c      	bne.n	8005832 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	331b      	adds	r3, #27
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	4413      	add	r3, r2
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	0d5b      	lsrs	r3, r3, #21
 8005828:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e00b      	b.n	800584a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	331b      	adds	r3, #27
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	4413      	add	r3, r2
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	08db      	lsrs	r3, r3, #3
 8005842:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	331b      	adds	r3, #27
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	4413      	add	r3, r2
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0202 	and.w	r2, r3, #2
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	331b      	adds	r3, #27
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	4413      	add	r3, r2
 800586c:	3304      	adds	r3, #4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2208      	movs	r2, #8
 800587c:	611a      	str	r2, [r3, #16]
 800587e:	e00b      	b.n	8005898 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	331b      	adds	r3, #27
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	4413      	add	r3, r2
 800588c:	3304      	adds	r3, #4
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 020f 	and.w	r2, r3, #15
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	331b      	adds	r3, #27
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	4413      	add	r3, r2
 80058a4:	3304      	adds	r3, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	331b      	adds	r3, #27
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	4413      	add	r3, r2
 80058bc:	3304      	adds	r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	0c1b      	lsrs	r3, r3, #16
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	0a1a      	lsrs	r2, r3, #8
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	4413      	add	r3, r2
 8005902:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	0c1a      	lsrs	r2, r3, #16
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	3302      	adds	r3, #2
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	4413      	add	r3, r2
 800591c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	0e1a      	lsrs	r2, r3, #24
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	3303      	adds	r3, #3
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	4413      	add	r3, r2
 8005936:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	3304      	adds	r3, #4
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	4413      	add	r3, r2
 800594e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	0a1a      	lsrs	r2, r3, #8
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	3305      	adds	r3, #5
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	4413      	add	r3, r2
 8005968:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	0c1a      	lsrs	r2, r3, #16
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	3306      	adds	r3, #6
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	4413      	add	r3, r2
 8005982:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	0e1a      	lsrs	r2, r3, #24
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	3307      	adds	r3, #7
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d108      	bne.n	80059aa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0220 	orr.w	r2, r2, #32
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e007      	b.n	80059ba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0220 	orr.w	r2, r2, #32
 80059b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e006      	b.n	80059cc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d002      	beq.n	80059f6 <HAL_CAN_ActivateNotification+0x1e>
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d109      	bne.n	8005a0a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6959      	ldr	r1, [r3, #20]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e006      	b.n	8005a18 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
  }
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	@ 0x28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d07c      	beq.n	8005b64 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d023      	beq.n	8005abc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f983 	bl	8005d92 <HAL_CAN_TxMailbox0CompleteCallback>
 8005a8c:	e016      	b.n	8005abc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa0:	e00c      	b.n	8005abc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab4:	e002      	b.n	8005abc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f989 	bl	8005dce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d024      	beq.n	8005b10 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ace:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f963 	bl	8005da6 <HAL_CAN_TxMailbox1CompleteCallback>
 8005ae0:	e016      	b.n	8005b10 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af4:	e00c      	b.n	8005b10 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b08:	e002      	b.n	8005b10 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f969 	bl	8005de2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d024      	beq.n	8005b64 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005b22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f943 	bl	8005dba <HAL_CAN_TxMailbox2CompleteCallback>
 8005b34:	e016      	b.n	8005b64 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b48:	e00c      	b.n	8005b64 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b5c:	e002      	b.n	8005b64 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f949 	bl	8005df6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00c      	beq.n	8005b88 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2210      	movs	r2, #16
 8005b86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d006      	beq.n	8005baa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f930 	bl	8005e0a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fc fa98 	bl	80020f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2210      	movs	r2, #16
 8005bea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2208      	movs	r2, #8
 8005c06:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f912 	bl	8005e32 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8f9 	bl	8005e1e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d006      	beq.n	8005c4e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2210      	movs	r2, #16
 8005c46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f8fc 	bl	8005e46 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d006      	beq.n	8005c70 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2208      	movs	r2, #8
 8005c68:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f8f5 	bl	8005e5a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d07b      	beq.n	8005d72 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d072      	beq.n	8005d6a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	f043 0302 	orr.w	r3, r3, #2
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	f043 0304 	orr.w	r3, r3, #4
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d043      	beq.n	8005d6a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d03e      	beq.n	8005d6a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cf2:	2b60      	cmp	r3, #96	@ 0x60
 8005cf4:	d02b      	beq.n	8005d4e <HAL_CAN_IRQHandler+0x32a>
 8005cf6:	2b60      	cmp	r3, #96	@ 0x60
 8005cf8:	d82e      	bhi.n	8005d58 <HAL_CAN_IRQHandler+0x334>
 8005cfa:	2b50      	cmp	r3, #80	@ 0x50
 8005cfc:	d022      	beq.n	8005d44 <HAL_CAN_IRQHandler+0x320>
 8005cfe:	2b50      	cmp	r3, #80	@ 0x50
 8005d00:	d82a      	bhi.n	8005d58 <HAL_CAN_IRQHandler+0x334>
 8005d02:	2b40      	cmp	r3, #64	@ 0x40
 8005d04:	d019      	beq.n	8005d3a <HAL_CAN_IRQHandler+0x316>
 8005d06:	2b40      	cmp	r3, #64	@ 0x40
 8005d08:	d826      	bhi.n	8005d58 <HAL_CAN_IRQHandler+0x334>
 8005d0a:	2b30      	cmp	r3, #48	@ 0x30
 8005d0c:	d010      	beq.n	8005d30 <HAL_CAN_IRQHandler+0x30c>
 8005d0e:	2b30      	cmp	r3, #48	@ 0x30
 8005d10:	d822      	bhi.n	8005d58 <HAL_CAN_IRQHandler+0x334>
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d002      	beq.n	8005d1c <HAL_CAN_IRQHandler+0x2f8>
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d005      	beq.n	8005d26 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005d1a:	e01d      	b.n	8005d58 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	f043 0308 	orr.w	r3, r3, #8
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d24:	e019      	b.n	8005d5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	f043 0310 	orr.w	r3, r3, #16
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d2e:	e014      	b.n	8005d5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d32:	f043 0320 	orr.w	r3, r3, #32
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d38:	e00f      	b.n	8005d5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d42:	e00a      	b.n	8005d5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d4c:	e005      	b.n	8005d5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d56:	e000      	b.n	8005d5a <HAL_CAN_IRQHandler+0x336>
            break;
 8005d58:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005d68:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2204      	movs	r2, #4
 8005d70:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f872 	bl	8005e6e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	3728      	adds	r7, #40	@ 0x28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eb6:	4a04      	ldr	r2, [pc, #16]	@ (8005ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	60d3      	str	r3, [r2, #12]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ed0:	4b04      	ldr	r3, [pc, #16]	@ (8005ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	f003 0307 	and.w	r3, r3, #7
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	e000ed00 	.word	0xe000ed00

08005ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	db0b      	blt.n	8005f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	f003 021f 	and.w	r2, r3, #31
 8005f00:	4907      	ldr	r1, [pc, #28]	@ (8005f20 <__NVIC_EnableIRQ+0x38>)
 8005f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	2001      	movs	r0, #1
 8005f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	e000e100 	.word	0xe000e100

08005f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	6039      	str	r1, [r7, #0]
 8005f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	db0a      	blt.n	8005f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	490c      	ldr	r1, [pc, #48]	@ (8005f70 <__NVIC_SetPriority+0x4c>)
 8005f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f42:	0112      	lsls	r2, r2, #4
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	440b      	add	r3, r1
 8005f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f4c:	e00a      	b.n	8005f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	4908      	ldr	r1, [pc, #32]	@ (8005f74 <__NVIC_SetPriority+0x50>)
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	3b04      	subs	r3, #4
 8005f5c:	0112      	lsls	r2, r2, #4
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	440b      	add	r3, r1
 8005f62:	761a      	strb	r2, [r3, #24]
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	e000e100 	.word	0xe000e100
 8005f74:	e000ed00 	.word	0xe000ed00

08005f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b089      	sub	sp, #36	@ 0x24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f1c3 0307 	rsb	r3, r3, #7
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	bf28      	it	cs
 8005f96:	2304      	movcs	r3, #4
 8005f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	2b06      	cmp	r3, #6
 8005fa0:	d902      	bls.n	8005fa8 <NVIC_EncodePriority+0x30>
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3b03      	subs	r3, #3
 8005fa6:	e000      	b.n	8005faa <NVIC_EncodePriority+0x32>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fac:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	43da      	mvns	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	401a      	ands	r2, r3
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fca:	43d9      	mvns	r1, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fd0:	4313      	orrs	r3, r2
         );
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3724      	adds	r7, #36	@ 0x24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ff0:	d301      	bcc.n	8005ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e00f      	b.n	8006016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8006020 <SysTick_Config+0x40>)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ffe:	210f      	movs	r1, #15
 8006000:	f04f 30ff 	mov.w	r0, #4294967295
 8006004:	f7ff ff8e 	bl	8005f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <SysTick_Config+0x40>)
 800600a:	2200      	movs	r2, #0
 800600c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800600e:	4b04      	ldr	r3, [pc, #16]	@ (8006020 <SysTick_Config+0x40>)
 8006010:	2207      	movs	r2, #7
 8006012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	e000e010 	.word	0xe000e010

08006024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff ff29 	bl	8005e84 <__NVIC_SetPriorityGrouping>
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af00      	add	r7, sp, #0
 8006040:	4603      	mov	r3, r0
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
 8006046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800604c:	f7ff ff3e 	bl	8005ecc <__NVIC_GetPriorityGrouping>
 8006050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	6978      	ldr	r0, [r7, #20]
 8006058:	f7ff ff8e 	bl	8005f78 <NVIC_EncodePriority>
 800605c:	4602      	mov	r2, r0
 800605e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff5d 	bl	8005f24 <__NVIC_SetPriority>
}
 800606a:	bf00      	nop
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	4603      	mov	r3, r0
 800607a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800607c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff ff31 	bl	8005ee8 <__NVIC_EnableIRQ>
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff ffa2 	bl	8005fe0 <SysTick_Config>
 800609c:	4603      	mov	r3, r0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060b4:	f7ff f84e 	bl	8005154 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e099      	b.n	80061f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060e4:	e00f      	b.n	8006106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060e6:	f7ff f835 	bl	8005154 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	d908      	bls.n	8006106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2203      	movs	r2, #3
 80060fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e078      	b.n	80061f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e8      	bne.n	80060e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4b38      	ldr	r3, [pc, #224]	@ (8006200 <HAL_DMA_Init+0x158>)
 8006120:	4013      	ands	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800613e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800614a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	2b04      	cmp	r3, #4
 800615e:	d107      	bne.n	8006170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006168:	4313      	orrs	r3, r2
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f023 0307 	bic.w	r3, r3, #7
 8006186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006196:	2b04      	cmp	r3, #4
 8006198:	d117      	bne.n	80061ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fb01 	bl	80067b4 <DMA_CheckFifoParam>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2240      	movs	r2, #64	@ 0x40
 80061bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80061c6:	2301      	movs	r3, #1
 80061c8:	e016      	b.n	80061f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fab8 	bl	8006748 <DMA_CalcBaseAndBitshift>
 80061d8:	4603      	mov	r3, r0
 80061da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e0:	223f      	movs	r2, #63	@ 0x3f
 80061e2:	409a      	lsls	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	f010803f 	.word	0xf010803f

08006204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_DMA_Start_IT+0x26>
 8006226:	2302      	movs	r3, #2
 8006228:	e040      	b.n	80062ac <HAL_DMA_Start_IT+0xa8>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b01      	cmp	r3, #1
 800623c:	d12f      	bne.n	800629e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fa4a 	bl	80066ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625c:	223f      	movs	r2, #63	@ 0x3f
 800625e:	409a      	lsls	r2, r3
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0216 	orr.w	r2, r2, #22
 8006272:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0208 	orr.w	r2, r2, #8
 800628a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e005      	b.n	80062aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
 80062a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80062c2:	f7fe ff47 	bl	8005154 <HAL_GetTick>
 80062c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d008      	beq.n	80062e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2280      	movs	r2, #128	@ 0x80
 80062d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e052      	b.n	800638c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0216 	bic.w	r2, r2, #22
 80062f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006304:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <HAL_DMA_Abort+0x62>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0208 	bic.w	r2, r2, #8
 8006324:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006336:	e013      	b.n	8006360 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006338:	f7fe ff0c 	bl	8005154 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b05      	cmp	r3, #5
 8006344:	d90c      	bls.n	8006360 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2203      	movs	r2, #3
 8006350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e015      	b.n	800638c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e4      	bne.n	8006338 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006372:	223f      	movs	r2, #63	@ 0x3f
 8006374:	409a      	lsls	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d004      	beq.n	80063b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2280      	movs	r2, #128	@ 0x80
 80063ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e00c      	b.n	80063cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2205      	movs	r2, #5
 80063b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063e4:	4b8e      	ldr	r3, [pc, #568]	@ (8006620 <HAL_DMA_IRQHandler+0x248>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a8e      	ldr	r2, [pc, #568]	@ (8006624 <HAL_DMA_IRQHandler+0x24c>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	0a9b      	lsrs	r3, r3, #10
 80063f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006402:	2208      	movs	r2, #8
 8006404:	409a      	lsls	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01a      	beq.n	8006444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d013      	beq.n	8006444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0204 	bic.w	r2, r2, #4
 800642a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006430:	2208      	movs	r2, #8
 8006432:	409a      	lsls	r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006448:	2201      	movs	r2, #1
 800644a:	409a      	lsls	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4013      	ands	r3, r2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d012      	beq.n	800647a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006466:	2201      	movs	r2, #1
 8006468:	409a      	lsls	r2, r3
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006472:	f043 0202 	orr.w	r2, r3, #2
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800647e:	2204      	movs	r2, #4
 8006480:	409a      	lsls	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d012      	beq.n	80064b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649c:	2204      	movs	r2, #4
 800649e:	409a      	lsls	r2, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a8:	f043 0204 	orr.w	r2, r3, #4
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b4:	2210      	movs	r2, #16
 80064b6:	409a      	lsls	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d043      	beq.n	8006548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d03c      	beq.n	8006548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d2:	2210      	movs	r2, #16
 80064d4:	409a      	lsls	r2, r3
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d018      	beq.n	800651a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d108      	bne.n	8006508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d024      	beq.n	8006548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	4798      	blx	r3
 8006506:	e01f      	b.n	8006548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01b      	beq.n	8006548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
 8006518:	e016      	b.n	8006548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d107      	bne.n	8006538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0208 	bic.w	r2, r2, #8
 8006536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654c:	2220      	movs	r2, #32
 800654e:	409a      	lsls	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4013      	ands	r3, r2
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 808f 	beq.w	8006678 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8087 	beq.w	8006678 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656e:	2220      	movs	r2, #32
 8006570:	409a      	lsls	r2, r3
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b05      	cmp	r3, #5
 8006580:	d136      	bne.n	80065f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0216 	bic.w	r2, r2, #22
 8006590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <HAL_DMA_IRQHandler+0x1da>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0208 	bic.w	r2, r2, #8
 80065c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c6:	223f      	movs	r2, #63	@ 0x3f
 80065c8:	409a      	lsls	r2, r3
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d07e      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4798      	blx	r3
        }
        return;
 80065ee:	e079      	b.n	80066e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01d      	beq.n	800663a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10d      	bne.n	8006628 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006610:	2b00      	cmp	r3, #0
 8006612:	d031      	beq.n	8006678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
 800661c:	e02c      	b.n	8006678 <HAL_DMA_IRQHandler+0x2a0>
 800661e:	bf00      	nop
 8006620:	20000004 	.word	0x20000004
 8006624:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d023      	beq.n	8006678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
 8006638:	e01e      	b.n	8006678 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10f      	bne.n	8006668 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0210 	bic.w	r2, r2, #16
 8006656:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800667c:	2b00      	cmp	r3, #0
 800667e:	d032      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d022      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2205      	movs	r2, #5
 8006690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0201 	bic.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d307      	bcc.n	80066c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1f2      	bne.n	80066a4 <HAL_DMA_IRQHandler+0x2cc>
 80066be:	e000      	b.n	80066c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80066c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	4798      	blx	r3
 80066e2:	e000      	b.n	80066e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80066e4:	bf00      	nop
    }
  }
}
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b40      	cmp	r3, #64	@ 0x40
 8006718:	d108      	bne.n	800672c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800672a:	e007      	b.n	800673c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	60da      	str	r2, [r3, #12]
}
 800673c:	bf00      	nop
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	3b10      	subs	r3, #16
 8006758:	4a14      	ldr	r2, [pc, #80]	@ (80067ac <DMA_CalcBaseAndBitshift+0x64>)
 800675a:	fba2 2303 	umull	r2, r3, r2, r3
 800675e:	091b      	lsrs	r3, r3, #4
 8006760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006762:	4a13      	ldr	r2, [pc, #76]	@ (80067b0 <DMA_CalcBaseAndBitshift+0x68>)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b03      	cmp	r3, #3
 8006774:	d909      	bls.n	800678a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	1d1a      	adds	r2, r3, #4
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	659a      	str	r2, [r3, #88]	@ 0x58
 8006788:	e007      	b.n	800679a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006792:	f023 0303 	bic.w	r3, r3, #3
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	aaaaaaab 	.word	0xaaaaaaab
 80067b0:	080183c8 	.word	0x080183c8

080067b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d11f      	bne.n	800680e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d856      	bhi.n	8006882 <DMA_CheckFifoParam+0xce>
 80067d4:	a201      	add	r2, pc, #4	@ (adr r2, 80067dc <DMA_CheckFifoParam+0x28>)
 80067d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067da:	bf00      	nop
 80067dc:	080067ed 	.word	0x080067ed
 80067e0:	080067ff 	.word	0x080067ff
 80067e4:	080067ed 	.word	0x080067ed
 80067e8:	08006883 	.word	0x08006883
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d046      	beq.n	8006886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067fc:	e043      	b.n	8006886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006802:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006806:	d140      	bne.n	800688a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800680c:	e03d      	b.n	800688a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006816:	d121      	bne.n	800685c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b03      	cmp	r3, #3
 800681c:	d837      	bhi.n	800688e <DMA_CheckFifoParam+0xda>
 800681e:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <DMA_CheckFifoParam+0x70>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006835 	.word	0x08006835
 8006828:	0800683b 	.word	0x0800683b
 800682c:	08006835 	.word	0x08006835
 8006830:	0800684d 	.word	0x0800684d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
      break;
 8006838:	e030      	b.n	800689c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d025      	beq.n	8006892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800684a:	e022      	b.n	8006892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006854:	d11f      	bne.n	8006896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800685a:	e01c      	b.n	8006896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d903      	bls.n	800686a <DMA_CheckFifoParam+0xb6>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b03      	cmp	r3, #3
 8006866:	d003      	beq.n	8006870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006868:	e018      	b.n	800689c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	73fb      	strb	r3, [r7, #15]
      break;
 800686e:	e015      	b.n	800689c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00e      	beq.n	800689a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
      break;
 8006880:	e00b      	b.n	800689a <DMA_CheckFifoParam+0xe6>
      break;
 8006882:	bf00      	nop
 8006884:	e00a      	b.n	800689c <DMA_CheckFifoParam+0xe8>
      break;
 8006886:	bf00      	nop
 8006888:	e008      	b.n	800689c <DMA_CheckFifoParam+0xe8>
      break;
 800688a:	bf00      	nop
 800688c:	e006      	b.n	800689c <DMA_CheckFifoParam+0xe8>
      break;
 800688e:	bf00      	nop
 8006890:	e004      	b.n	800689c <DMA_CheckFifoParam+0xe8>
      break;
 8006892:	bf00      	nop
 8006894:	e002      	b.n	800689c <DMA_CheckFifoParam+0xe8>
      break;   
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <DMA_CheckFifoParam+0xe8>
      break;
 800689a:	bf00      	nop
    }
  } 
  
  return status; 
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop

080068ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b089      	sub	sp, #36	@ 0x24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	e165      	b.n	8006b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068c8:	2201      	movs	r2, #1
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	fa02 f303 	lsl.w	r3, r2, r3
 80068d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4013      	ands	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	f040 8154 	bne.w	8006b8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d005      	beq.n	80068fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d130      	bne.n	8006960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	2203      	movs	r2, #3
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	43db      	mvns	r3, r3
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4013      	ands	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4313      	orrs	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006934:	2201      	movs	r2, #1
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	43db      	mvns	r3, r3
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	4013      	ands	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	091b      	lsrs	r3, r3, #4
 800694a:	f003 0201 	and.w	r2, r3, #1
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	4313      	orrs	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f003 0303 	and.w	r3, r3, #3
 8006968:	2b03      	cmp	r3, #3
 800696a:	d017      	beq.n	800699c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	2203      	movs	r2, #3
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	43db      	mvns	r3, r3
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	4013      	ands	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	fa02 f303 	lsl.w	r3, r2, r3
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	4313      	orrs	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d123      	bne.n	80069f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	08da      	lsrs	r2, r3, #3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3208      	adds	r2, #8
 80069b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	220f      	movs	r2, #15
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	43db      	mvns	r3, r3
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	4013      	ands	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4313      	orrs	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	08da      	lsrs	r2, r3, #3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3208      	adds	r2, #8
 80069ea:	69b9      	ldr	r1, [r7, #24]
 80069ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	2203      	movs	r2, #3
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	43db      	mvns	r3, r3
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	4013      	ands	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f003 0203 	and.w	r2, r3, #3
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80ae 	beq.w	8006b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	4b5d      	ldr	r3, [pc, #372]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a42:	4b5a      	ldr	r3, [pc, #360]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a4e:	4a58      	ldr	r2, [pc, #352]	@ (8006bb0 <HAL_GPIO_Init+0x304>)
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	089b      	lsrs	r3, r3, #2
 8006a54:	3302      	adds	r3, #2
 8006a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	220f      	movs	r2, #15
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a4f      	ldr	r2, [pc, #316]	@ (8006bb4 <HAL_GPIO_Init+0x308>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d025      	beq.n	8006ac6 <HAL_GPIO_Init+0x21a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8006bb8 <HAL_GPIO_Init+0x30c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01f      	beq.n	8006ac2 <HAL_GPIO_Init+0x216>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a4d      	ldr	r2, [pc, #308]	@ (8006bbc <HAL_GPIO_Init+0x310>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d019      	beq.n	8006abe <HAL_GPIO_Init+0x212>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8006bc0 <HAL_GPIO_Init+0x314>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_GPIO_Init+0x20e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a4b      	ldr	r2, [pc, #300]	@ (8006bc4 <HAL_GPIO_Init+0x318>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00d      	beq.n	8006ab6 <HAL_GPIO_Init+0x20a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8006bc8 <HAL_GPIO_Init+0x31c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d007      	beq.n	8006ab2 <HAL_GPIO_Init+0x206>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a49      	ldr	r2, [pc, #292]	@ (8006bcc <HAL_GPIO_Init+0x320>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d101      	bne.n	8006aae <HAL_GPIO_Init+0x202>
 8006aaa:	2306      	movs	r3, #6
 8006aac:	e00c      	b.n	8006ac8 <HAL_GPIO_Init+0x21c>
 8006aae:	2307      	movs	r3, #7
 8006ab0:	e00a      	b.n	8006ac8 <HAL_GPIO_Init+0x21c>
 8006ab2:	2305      	movs	r3, #5
 8006ab4:	e008      	b.n	8006ac8 <HAL_GPIO_Init+0x21c>
 8006ab6:	2304      	movs	r3, #4
 8006ab8:	e006      	b.n	8006ac8 <HAL_GPIO_Init+0x21c>
 8006aba:	2303      	movs	r3, #3
 8006abc:	e004      	b.n	8006ac8 <HAL_GPIO_Init+0x21c>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e002      	b.n	8006ac8 <HAL_GPIO_Init+0x21c>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <HAL_GPIO_Init+0x21c>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	f002 0203 	and.w	r2, r2, #3
 8006ace:	0092      	lsls	r2, r2, #2
 8006ad0:	4093      	lsls	r3, r2
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ad8:	4935      	ldr	r1, [pc, #212]	@ (8006bb0 <HAL_GPIO_Init+0x304>)
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	089b      	lsrs	r3, r3, #2
 8006ade:	3302      	adds	r3, #2
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8006bd0 <HAL_GPIO_Init+0x324>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	43db      	mvns	r3, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4013      	ands	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b0a:	4a31      	ldr	r2, [pc, #196]	@ (8006bd0 <HAL_GPIO_Init+0x324>)
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b10:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd0 <HAL_GPIO_Init+0x324>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b34:	4a26      	ldr	r2, [pc, #152]	@ (8006bd0 <HAL_GPIO_Init+0x324>)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b3a:	4b25      	ldr	r3, [pc, #148]	@ (8006bd0 <HAL_GPIO_Init+0x324>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	43db      	mvns	r3, r3
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	4013      	ands	r3, r2
 8006b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd0 <HAL_GPIO_Init+0x324>)
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b64:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd0 <HAL_GPIO_Init+0x324>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4013      	ands	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b88:	4a11      	ldr	r2, [pc, #68]	@ (8006bd0 <HAL_GPIO_Init+0x324>)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	3301      	adds	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	f67f ae96 	bls.w	80068c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	3724      	adds	r7, #36	@ 0x24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	40013800 	.word	0x40013800
 8006bb4:	40020000 	.word	0x40020000
 8006bb8:	40020400 	.word	0x40020400
 8006bbc:	40020800 	.word	0x40020800
 8006bc0:	40020c00 	.word	0x40020c00
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	40021400 	.word	0x40021400
 8006bcc:	40021800 	.word	0x40021800
 8006bd0:	40013c00 	.word	0x40013c00

08006bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	887b      	ldrh	r3, [r7, #2]
 8006be6:	4013      	ands	r3, r2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006bec:	2301      	movs	r3, #1
 8006bee:	73fb      	strb	r3, [r7, #15]
 8006bf0:	e001      	b.n	8006bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	807b      	strh	r3, [r7, #2]
 8006c10:	4613      	mov	r3, r2
 8006c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c14:	787b      	ldrb	r3, [r7, #1]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c1a:	887a      	ldrh	r2, [r7, #2]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c20:	e003      	b.n	8006c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c22:	887b      	ldrh	r3, [r7, #2]
 8006c24:	041a      	lsls	r2, r3, #16
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	619a      	str	r2, [r3, #24]
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e12b      	b.n	8006ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fa fbc4 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2224      	movs	r2, #36	@ 0x24
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0201 	bic.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c9c:	f001 f8d2 	bl	8007e44 <HAL_RCC_GetPCLK1Freq>
 8006ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	4a81      	ldr	r2, [pc, #516]	@ (8006eac <HAL_I2C_Init+0x274>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d807      	bhi.n	8006cbc <HAL_I2C_Init+0x84>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4a80      	ldr	r2, [pc, #512]	@ (8006eb0 <HAL_I2C_Init+0x278>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	bf94      	ite	ls
 8006cb4:	2301      	movls	r3, #1
 8006cb6:	2300      	movhi	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	e006      	b.n	8006cca <HAL_I2C_Init+0x92>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8006eb4 <HAL_I2C_Init+0x27c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	bf94      	ite	ls
 8006cc4:	2301      	movls	r3, #1
 8006cc6:	2300      	movhi	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e0e7      	b.n	8006ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4a78      	ldr	r2, [pc, #480]	@ (8006eb8 <HAL_I2C_Init+0x280>)
 8006cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cda:	0c9b      	lsrs	r3, r3, #18
 8006cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	4a6a      	ldr	r2, [pc, #424]	@ (8006eac <HAL_I2C_Init+0x274>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d802      	bhi.n	8006d0c <HAL_I2C_Init+0xd4>
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	e009      	b.n	8006d20 <HAL_I2C_Init+0xe8>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006d12:	fb02 f303 	mul.w	r3, r2, r3
 8006d16:	4a69      	ldr	r2, [pc, #420]	@ (8006ebc <HAL_I2C_Init+0x284>)
 8006d18:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1c:	099b      	lsrs	r3, r3, #6
 8006d1e:	3301      	adds	r3, #1
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	430b      	orrs	r3, r1
 8006d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006d32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	495c      	ldr	r1, [pc, #368]	@ (8006eac <HAL_I2C_Init+0x274>)
 8006d3c:	428b      	cmp	r3, r1
 8006d3e:	d819      	bhi.n	8006d74 <HAL_I2C_Init+0x13c>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	1e59      	subs	r1, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d4e:	1c59      	adds	r1, r3, #1
 8006d50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006d54:	400b      	ands	r3, r1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_I2C_Init+0x138>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1e59      	subs	r1, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d68:	3301      	adds	r3, #1
 8006d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d6e:	e051      	b.n	8006e14 <HAL_I2C_Init+0x1dc>
 8006d70:	2304      	movs	r3, #4
 8006d72:	e04f      	b.n	8006e14 <HAL_I2C_Init+0x1dc>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d111      	bne.n	8006da0 <HAL_I2C_Init+0x168>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	1e58      	subs	r0, r3, #1
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6859      	ldr	r1, [r3, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	440b      	add	r3, r1
 8006d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	bf0c      	ite	eq
 8006d98:	2301      	moveq	r3, #1
 8006d9a:	2300      	movne	r3, #0
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	e012      	b.n	8006dc6 <HAL_I2C_Init+0x18e>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	1e58      	subs	r0, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6859      	ldr	r1, [r3, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	0099      	lsls	r1, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006db6:	3301      	adds	r3, #1
 8006db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bf0c      	ite	eq
 8006dc0:	2301      	moveq	r3, #1
 8006dc2:	2300      	movne	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_I2C_Init+0x196>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e022      	b.n	8006e14 <HAL_I2C_Init+0x1dc>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10e      	bne.n	8006df4 <HAL_I2C_Init+0x1bc>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	1e58      	subs	r0, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6859      	ldr	r1, [r3, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	440b      	add	r3, r1
 8006de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006de8:	3301      	adds	r3, #1
 8006dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006df2:	e00f      	b.n	8006e14 <HAL_I2C_Init+0x1dc>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1e58      	subs	r0, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6859      	ldr	r1, [r3, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	440b      	add	r3, r1
 8006e02:	0099      	lsls	r1, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	6809      	ldr	r1, [r1, #0]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69da      	ldr	r2, [r3, #28]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006e42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6911      	ldr	r1, [r2, #16]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	68d2      	ldr	r2, [r2, #12]
 8006e4e:	4311      	orrs	r1, r2
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	000186a0 	.word	0x000186a0
 8006eb0:	001e847f 	.word	0x001e847f
 8006eb4:	003d08ff 	.word	0x003d08ff
 8006eb8:	431bde83 	.word	0x431bde83
 8006ebc:	10624dd3 	.word	0x10624dd3

08006ec0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	460b      	mov	r3, r1
 8006ece:	817b      	strh	r3, [r7, #10]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ed4:	f7fe f93e 	bl	8005154 <HAL_GetTick>
 8006ed8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	f040 80e0 	bne.w	80070a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	2319      	movs	r3, #25
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4970      	ldr	r1, [pc, #448]	@ (80070b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fc7e 	bl	80077f4 <I2C_WaitOnFlagUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006efe:	2302      	movs	r3, #2
 8006f00:	e0d3      	b.n	80070aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_I2C_Master_Transmit+0x50>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e0cc      	b.n	80070aa <HAL_I2C_Master_Transmit+0x1ea>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d007      	beq.n	8006f36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0201 	orr.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2221      	movs	r2, #33	@ 0x21
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2210      	movs	r2, #16
 8006f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	893a      	ldrh	r2, [r7, #8]
 8006f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4a50      	ldr	r2, [pc, #320]	@ (80070b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006f76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006f78:	8979      	ldrh	r1, [r7, #10]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6a3a      	ldr	r2, [r7, #32]
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 face 	bl	8007520 <I2C_MasterRequestWrite>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e08d      	b.n	80070aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006fa4:	e066      	b.n	8007074 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	6a39      	ldr	r1, [r7, #32]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fd3c 	bl	8007a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d107      	bne.n	8006fce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e06b      	b.n	80070aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	781a      	ldrb	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b04      	cmp	r3, #4
 800700e:	d11b      	bne.n	8007048 <HAL_I2C_Master_Transmit+0x188>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d017      	beq.n	8007048 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701c:	781a      	ldrb	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	6a39      	ldr	r1, [r7, #32]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fd33 	bl	8007ab8 <I2C_WaitOnBTFFlagUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00d      	beq.n	8007074 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705c:	2b04      	cmp	r3, #4
 800705e:	d107      	bne.n	8007070 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800706e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e01a      	b.n	80070aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007078:	2b00      	cmp	r3, #0
 800707a:	d194      	bne.n	8006fa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800708a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e000      	b.n	80070aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	00100002 	.word	0x00100002
 80070b8:	ffff0000 	.word	0xffff0000

080070bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08c      	sub	sp, #48	@ 0x30
 80070c0:	af02      	add	r7, sp, #8
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	4608      	mov	r0, r1
 80070c6:	4611      	mov	r1, r2
 80070c8:	461a      	mov	r2, r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	817b      	strh	r3, [r7, #10]
 80070ce:	460b      	mov	r3, r1
 80070d0:	813b      	strh	r3, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070d6:	f7fe f83d 	bl	8005154 <HAL_GetTick>
 80070da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	f040 8214 	bne.w	8007512 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2319      	movs	r3, #25
 80070f0:	2201      	movs	r2, #1
 80070f2:	497b      	ldr	r1, [pc, #492]	@ (80072e0 <HAL_I2C_Mem_Read+0x224>)
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fb7d 	bl	80077f4 <I2C_WaitOnFlagUntilTimeout>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007100:	2302      	movs	r3, #2
 8007102:	e207      	b.n	8007514 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_I2C_Mem_Read+0x56>
 800710e:	2302      	movs	r3, #2
 8007110:	e200      	b.n	8007514 <HAL_I2C_Mem_Read+0x458>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b01      	cmp	r3, #1
 8007126:	d007      	beq.n	8007138 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2222      	movs	r2, #34	@ 0x22
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2240      	movs	r2, #64	@ 0x40
 8007154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007162:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a5b      	ldr	r2, [pc, #364]	@ (80072e4 <HAL_I2C_Mem_Read+0x228>)
 8007178:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800717a:	88f8      	ldrh	r0, [r7, #6]
 800717c:	893a      	ldrh	r2, [r7, #8]
 800717e:	8979      	ldrh	r1, [r7, #10]
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4603      	mov	r3, r0
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fa4a 	bl	8007624 <I2C_RequestMemoryRead>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e1bc      	b.n	8007514 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d113      	bne.n	80071ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a2:	2300      	movs	r3, #0
 80071a4:	623b      	str	r3, [r7, #32]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	623b      	str	r3, [r7, #32]
 80071b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	e190      	b.n	80074ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d11b      	bne.n	800720a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e2:	2300      	movs	r3, #0
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	e170      	b.n	80074ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800720e:	2b02      	cmp	r3, #2
 8007210:	d11b      	bne.n	800724a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007220:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007232:	2300      	movs	r3, #0
 8007234:	61bb      	str	r3, [r7, #24]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	e150      	b.n	80074ec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800724a:	2300      	movs	r3, #0
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007260:	e144      	b.n	80074ec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007266:	2b03      	cmp	r3, #3
 8007268:	f200 80f1 	bhi.w	800744e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007270:	2b01      	cmp	r3, #1
 8007272:	d123      	bne.n	80072bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007276:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 fc65 	bl	8007b48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e145      	b.n	8007514 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691a      	ldr	r2, [r3, #16]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072a4:	3b01      	subs	r3, #1
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80072ba:	e117      	b.n	80074ec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d14e      	bne.n	8007362 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ca:	2200      	movs	r2, #0
 80072cc:	4906      	ldr	r1, [pc, #24]	@ (80072e8 <HAL_I2C_Mem_Read+0x22c>)
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 fa90 	bl	80077f4 <I2C_WaitOnFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e11a      	b.n	8007514 <HAL_I2C_Mem_Read+0x458>
 80072de:	bf00      	nop
 80072e0:	00100002 	.word	0x00100002
 80072e4:	ffff0000 	.word	0xffff0000
 80072e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	691a      	ldr	r2, [r3, #16]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	b2d2      	uxtb	r2, r2
 800733a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007360:	e0c4      	b.n	80074ec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007368:	2200      	movs	r2, #0
 800736a:	496c      	ldr	r1, [pc, #432]	@ (800751c <HAL_I2C_Mem_Read+0x460>)
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fa41 	bl	80077f4 <I2C_WaitOnFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e0cb      	b.n	8007514 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800738a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691a      	ldr	r2, [r3, #16]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073a8:	3b01      	subs	r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c4:	2200      	movs	r2, #0
 80073c6:	4955      	ldr	r1, [pc, #340]	@ (800751c <HAL_I2C_Mem_Read+0x460>)
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 fa13 	bl	80077f4 <I2C_WaitOnFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e09d      	b.n	8007514 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007404:	3b01      	subs	r3, #1
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007410:	b29b      	uxth	r3, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691a      	ldr	r2, [r3, #16]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007436:	3b01      	subs	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800744c:	e04e      	b.n	80074ec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800744e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007450:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fb78 	bl	8007b48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e058      	b.n	8007514 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d124      	bne.n	80074ec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d107      	bne.n	80074ba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c4:	b2d2      	uxtb	r2, r2
 80074c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f47f aeb6 	bne.w	8007262 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	e000      	b.n	8007514 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007512:	2302      	movs	r3, #2
  }
}
 8007514:	4618      	mov	r0, r3
 8007516:	3728      	adds	r7, #40	@ 0x28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	00010004 	.word	0x00010004

08007520 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	607a      	str	r2, [r7, #4]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	460b      	mov	r3, r1
 800752e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b08      	cmp	r3, #8
 800753a:	d006      	beq.n	800754a <I2C_MasterRequestWrite+0x2a>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d003      	beq.n	800754a <I2C_MasterRequestWrite+0x2a>
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007548:	d108      	bne.n	800755c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	e00b      	b.n	8007574 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007560:	2b12      	cmp	r3, #18
 8007562:	d107      	bne.n	8007574 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007572:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f937 	bl	80077f4 <I2C_WaitOnFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00d      	beq.n	80075a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800759a:	d103      	bne.n	80075a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e035      	b.n	8007614 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075b0:	d108      	bne.n	80075c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075b2:	897b      	ldrh	r3, [r7, #10]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80075c0:	611a      	str	r2, [r3, #16]
 80075c2:	e01b      	b.n	80075fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80075c4:	897b      	ldrh	r3, [r7, #10]
 80075c6:	11db      	asrs	r3, r3, #7
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	f003 0306 	and.w	r3, r3, #6
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f063 030f 	orn	r3, r3, #15
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	490e      	ldr	r1, [pc, #56]	@ (800761c <I2C_MasterRequestWrite+0xfc>)
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 f980 	bl	80078e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e010      	b.n	8007614 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075f2:	897b      	ldrh	r3, [r7, #10]
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	4907      	ldr	r1, [pc, #28]	@ (8007620 <I2C_MasterRequestWrite+0x100>)
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 f970 	bl	80078e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	00010008 	.word	0x00010008
 8007620:	00010002 	.word	0x00010002

08007624 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af02      	add	r7, sp, #8
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	4608      	mov	r0, r1
 800762e:	4611      	mov	r1, r2
 8007630:	461a      	mov	r2, r3
 8007632:	4603      	mov	r3, r0
 8007634:	817b      	strh	r3, [r7, #10]
 8007636:	460b      	mov	r3, r1
 8007638:	813b      	strh	r3, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800764c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800765c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	2200      	movs	r2, #0
 8007666:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 f8c2 	bl	80077f4 <I2C_WaitOnFlagUntilTimeout>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00d      	beq.n	8007692 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007684:	d103      	bne.n	800768e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800768c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e0aa      	b.n	80077e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007692:	897b      	ldrh	r3, [r7, #10]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80076a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	6a3a      	ldr	r2, [r7, #32]
 80076a6:	4952      	ldr	r1, [pc, #328]	@ (80077f0 <I2C_RequestMemoryRead+0x1cc>)
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f91d 	bl	80078e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e097      	b.n	80077e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d0:	6a39      	ldr	r1, [r7, #32]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 f9a8 	bl	8007a28 <I2C_WaitOnTXEFlagUntilTimeout>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00d      	beq.n	80076fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d107      	bne.n	80076f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e076      	b.n	80077e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d105      	bne.n	800770c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007700:	893b      	ldrh	r3, [r7, #8]
 8007702:	b2da      	uxtb	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	611a      	str	r2, [r3, #16]
 800770a:	e021      	b.n	8007750 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800770c:	893b      	ldrh	r3, [r7, #8]
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	b29b      	uxth	r3, r3
 8007712:	b2da      	uxtb	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800771a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800771c:	6a39      	ldr	r1, [r7, #32]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f982 	bl	8007a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00d      	beq.n	8007746 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772e:	2b04      	cmp	r3, #4
 8007730:	d107      	bne.n	8007742 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007740:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e050      	b.n	80077e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007746:	893b      	ldrh	r3, [r7, #8]
 8007748:	b2da      	uxtb	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007752:	6a39      	ldr	r1, [r7, #32]
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 f967 	bl	8007a28 <I2C_WaitOnTXEFlagUntilTimeout>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00d      	beq.n	800777c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007764:	2b04      	cmp	r3, #4
 8007766:	d107      	bne.n	8007778 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007776:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e035      	b.n	80077e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800778a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	2200      	movs	r2, #0
 8007794:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f82b 	bl	80077f4 <I2C_WaitOnFlagUntilTimeout>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00d      	beq.n	80077c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077b2:	d103      	bne.n	80077bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e013      	b.n	80077e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077c0:	897b      	ldrh	r3, [r7, #10]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f043 0301 	orr.w	r3, r3, #1
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	6a3a      	ldr	r2, [r7, #32]
 80077d4:	4906      	ldr	r1, [pc, #24]	@ (80077f0 <I2C_RequestMemoryRead+0x1cc>)
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f886 	bl	80078e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	00010002 	.word	0x00010002

080077f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007804:	e048      	b.n	8007898 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780c:	d044      	beq.n	8007898 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780e:	f7fd fca1 	bl	8005154 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d302      	bcc.n	8007824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d139      	bne.n	8007898 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	0c1b      	lsrs	r3, r3, #16
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b01      	cmp	r3, #1
 800782c:	d10d      	bne.n	800784a <I2C_WaitOnFlagUntilTimeout+0x56>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	43da      	mvns	r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	4013      	ands	r3, r2
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	bf0c      	ite	eq
 8007840:	2301      	moveq	r3, #1
 8007842:	2300      	movne	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	e00c      	b.n	8007864 <I2C_WaitOnFlagUntilTimeout+0x70>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	43da      	mvns	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4013      	ands	r3, r2
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	461a      	mov	r2, r3
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	429a      	cmp	r2, r3
 8007868:	d116      	bne.n	8007898 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007884:	f043 0220 	orr.w	r2, r3, #32
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e023      	b.n	80078e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	0c1b      	lsrs	r3, r3, #16
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d10d      	bne.n	80078be <I2C_WaitOnFlagUntilTimeout+0xca>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	43da      	mvns	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	4013      	ands	r3, r2
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	bf0c      	ite	eq
 80078b4:	2301      	moveq	r3, #1
 80078b6:	2300      	movne	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	e00c      	b.n	80078d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	43da      	mvns	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4013      	ands	r3, r2
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf0c      	ite	eq
 80078d0:	2301      	moveq	r3, #1
 80078d2:	2300      	movne	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d093      	beq.n	8007806 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078f6:	e071      	b.n	80079dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007906:	d123      	bne.n	8007950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007916:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007920:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2220      	movs	r2, #32
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793c:	f043 0204 	orr.w	r2, r3, #4
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e067      	b.n	8007a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007956:	d041      	beq.n	80079dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007958:	f7fd fbfc 	bl	8005154 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	429a      	cmp	r2, r3
 8007966:	d302      	bcc.n	800796e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d136      	bne.n	80079dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	0c1b      	lsrs	r3, r3, #16
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b01      	cmp	r3, #1
 8007976:	d10c      	bne.n	8007992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	43da      	mvns	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4013      	ands	r3, r2
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	bf14      	ite	ne
 800798a:	2301      	movne	r3, #1
 800798c:	2300      	moveq	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	e00b      	b.n	80079aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	43da      	mvns	r2, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	4013      	ands	r3, r2
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	bf14      	ite	ne
 80079a4:	2301      	movne	r3, #1
 80079a6:	2300      	moveq	r3, #0
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d016      	beq.n	80079dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c8:	f043 0220 	orr.w	r2, r3, #32
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e021      	b.n	8007a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	0c1b      	lsrs	r3, r3, #16
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d10c      	bne.n	8007a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	43da      	mvns	r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	4013      	ands	r3, r2
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bf14      	ite	ne
 80079f8:	2301      	movne	r3, #1
 80079fa:	2300      	moveq	r3, #0
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	e00b      	b.n	8007a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	43da      	mvns	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bf14      	ite	ne
 8007a12:	2301      	movne	r3, #1
 8007a14:	2300      	moveq	r3, #0
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f47f af6d 	bne.w	80078f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a34:	e034      	b.n	8007aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f8e3 	bl	8007c02 <I2C_IsAcknowledgeFailed>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e034      	b.n	8007ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4c:	d028      	beq.n	8007aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a4e:	f7fd fb81 	bl	8005154 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d302      	bcc.n	8007a64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d11d      	bne.n	8007aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a6e:	2b80      	cmp	r3, #128	@ 0x80
 8007a70:	d016      	beq.n	8007aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8c:	f043 0220 	orr.w	r2, r3, #32
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e007      	b.n	8007ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aaa:	2b80      	cmp	r3, #128	@ 0x80
 8007aac:	d1c3      	bne.n	8007a36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ac4:	e034      	b.n	8007b30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 f89b 	bl	8007c02 <I2C_IsAcknowledgeFailed>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e034      	b.n	8007b40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007adc:	d028      	beq.n	8007b30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ade:	f7fd fb39 	bl	8005154 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d302      	bcc.n	8007af4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d11d      	bne.n	8007b30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d016      	beq.n	8007b30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	f043 0220 	orr.w	r2, r3, #32
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e007      	b.n	8007b40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d1c3      	bne.n	8007ac6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b54:	e049      	b.n	8007bea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	d119      	bne.n	8007b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0210 	mvn.w	r2, #16
 8007b6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e030      	b.n	8007bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b98:	f7fd fadc 	bl	8005154 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d302      	bcc.n	8007bae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d11d      	bne.n	8007bea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb8:	2b40      	cmp	r3, #64	@ 0x40
 8007bba:	d016      	beq.n	8007bea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd6:	f043 0220 	orr.w	r2, r3, #32
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e007      	b.n	8007bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf4:	2b40      	cmp	r3, #64	@ 0x40
 8007bf6:	d1ae      	bne.n	8007b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c18:	d11b      	bne.n	8007c52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3e:	f043 0204 	orr.w	r2, r3, #4
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e0cc      	b.n	8007e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c74:	4b68      	ldr	r3, [pc, #416]	@ (8007e18 <HAL_RCC_ClockConfig+0x1b8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d90c      	bls.n	8007c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c82:	4b65      	ldr	r3, [pc, #404]	@ (8007e18 <HAL_RCC_ClockConfig+0x1b8>)
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8a:	4b63      	ldr	r3, [pc, #396]	@ (8007e18 <HAL_RCC_ClockConfig+0x1b8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d001      	beq.n	8007c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e0b8      	b.n	8007e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d020      	beq.n	8007cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cb4:	4b59      	ldr	r3, [pc, #356]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	4a58      	ldr	r2, [pc, #352]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ccc:	4b53      	ldr	r3, [pc, #332]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	4a52      	ldr	r2, [pc, #328]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cd8:	4b50      	ldr	r3, [pc, #320]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	494d      	ldr	r1, [pc, #308]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d044      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d107      	bne.n	8007d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cfe:	4b47      	ldr	r3, [pc, #284]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d119      	bne.n	8007d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e07f      	b.n	8007e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d003      	beq.n	8007d1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e06f      	b.n	8007e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e067      	b.n	8007e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d3e:	4b37      	ldr	r3, [pc, #220]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f023 0203 	bic.w	r2, r3, #3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	4934      	ldr	r1, [pc, #208]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d50:	f7fd fa00 	bl	8005154 <HAL_GetTick>
 8007d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d56:	e00a      	b.n	8007d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d58:	f7fd f9fc 	bl	8005154 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e04f      	b.n	8007e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 020c 	and.w	r2, r3, #12
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d1eb      	bne.n	8007d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d80:	4b25      	ldr	r3, [pc, #148]	@ (8007e18 <HAL_RCC_ClockConfig+0x1b8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d20c      	bcs.n	8007da8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d8e:	4b22      	ldr	r3, [pc, #136]	@ (8007e18 <HAL_RCC_ClockConfig+0x1b8>)
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d96:	4b20      	ldr	r3, [pc, #128]	@ (8007e18 <HAL_RCC_ClockConfig+0x1b8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d001      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e032      	b.n	8007e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007db4:	4b19      	ldr	r3, [pc, #100]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	4916      	ldr	r1, [pc, #88]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0308 	and.w	r3, r3, #8
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d009      	beq.n	8007de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dd2:	4b12      	ldr	r3, [pc, #72]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	490e      	ldr	r1, [pc, #56]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007de6:	f000 fb7f 	bl	80084e8 <HAL_RCC_GetSysClockFreq>
 8007dea:	4602      	mov	r2, r0
 8007dec:	4b0b      	ldr	r3, [pc, #44]	@ (8007e1c <HAL_RCC_ClockConfig+0x1bc>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	091b      	lsrs	r3, r3, #4
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	490a      	ldr	r1, [pc, #40]	@ (8007e20 <HAL_RCC_ClockConfig+0x1c0>)
 8007df8:	5ccb      	ldrb	r3, [r1, r3]
 8007dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfe:	4a09      	ldr	r2, [pc, #36]	@ (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007e02:	4b09      	ldr	r3, [pc, #36]	@ (8007e28 <HAL_RCC_ClockConfig+0x1c8>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fd f960 	bl	80050cc <HAL_InitTick>

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	40023c00 	.word	0x40023c00
 8007e1c:	40023800 	.word	0x40023800
 8007e20:	080151cc 	.word	0x080151cc
 8007e24:	20000004 	.word	0x20000004
 8007e28:	20000034 	.word	0x20000034

08007e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e30:	4b03      	ldr	r3, [pc, #12]	@ (8007e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e32:	681b      	ldr	r3, [r3, #0]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20000004 	.word	0x20000004

08007e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e48:	f7ff fff0 	bl	8007e2c <HAL_RCC_GetHCLKFreq>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	4b05      	ldr	r3, [pc, #20]	@ (8007e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	0a9b      	lsrs	r3, r3, #10
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	4903      	ldr	r1, [pc, #12]	@ (8007e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e5a:	5ccb      	ldrb	r3, [r1, r3]
 8007e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	40023800 	.word	0x40023800
 8007e68:	080151dc 	.word	0x080151dc

08007e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e70:	f7ff ffdc 	bl	8007e2c <HAL_RCC_GetHCLKFreq>
 8007e74:	4602      	mov	r2, r0
 8007e76:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	0b5b      	lsrs	r3, r3, #13
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	4903      	ldr	r1, [pc, #12]	@ (8007e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e82:	5ccb      	ldrb	r3, [r1, r3]
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	40023800 	.word	0x40023800
 8007e90:	080151dc 	.word	0x080151dc

08007e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08c      	sub	sp, #48	@ 0x30
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d010      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ed2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eda:	496c      	ldr	r1, [pc, #432]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007eea:	2301      	movs	r3, #1
 8007eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d010      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007efa:	4b64      	ldr	r3, [pc, #400]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f00:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f08:	4960      	ldr	r1, [pc, #384]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d017      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f28:	4b58      	ldr	r3, [pc, #352]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f36:	4955      	ldr	r1, [pc, #340]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f46:	d101      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007f54:	2301      	movs	r3, #1
 8007f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0308 	and.w	r3, r3, #8
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d017      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f64:	4b49      	ldr	r3, [pc, #292]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f72:	4946      	ldr	r1, [pc, #280]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f82:	d101      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007f84:	2301      	movs	r3, #1
 8007f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007f90:	2301      	movs	r3, #1
 8007f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 808a 	beq.w	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	4b39      	ldr	r3, [pc, #228]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007faa:	4a38      	ldr	r2, [pc, #224]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fb2:	4b36      	ldr	r3, [pc, #216]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fba:	60bb      	str	r3, [r7, #8]
 8007fbc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007fbe:	4b34      	ldr	r3, [pc, #208]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a33      	ldr	r2, [pc, #204]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fca:	f7fd f8c3 	bl	8005154 <HAL_GetTick>
 8007fce:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007fd0:	e008      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fd2:	f7fd f8bf 	bl	8005154 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e278      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0f0      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ff0:	4b26      	ldr	r3, [pc, #152]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ff8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d02f      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008008:	6a3a      	ldr	r2, [r7, #32]
 800800a:	429a      	cmp	r2, r3
 800800c:	d028      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800800e:	4b1f      	ldr	r3, [pc, #124]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008016:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008018:	4b1e      	ldr	r3, [pc, #120]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800801a:	2201      	movs	r2, #1
 800801c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800801e:	4b1d      	ldr	r3, [pc, #116]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008024:	4a19      	ldr	r2, [pc, #100]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800802a:	4b18      	ldr	r3, [pc, #96]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800802c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b01      	cmp	r3, #1
 8008034:	d114      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008036:	f7fd f88d 	bl	8005154 <HAL_GetTick>
 800803a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800803c:	e00a      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800803e:	f7fd f889 	bl	8005154 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800804c:	4293      	cmp	r3, r2
 800804e:	d901      	bls.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e240      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008054:	4b0d      	ldr	r3, [pc, #52]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0ee      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008068:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800806c:	d114      	bne.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800806e:	4b07      	ldr	r3, [pc, #28]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800807e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008082:	4902      	ldr	r1, [pc, #8]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008084:	4313      	orrs	r3, r2
 8008086:	608b      	str	r3, [r1, #8]
 8008088:	e00c      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800808a:	bf00      	nop
 800808c:	40023800 	.word	0x40023800
 8008090:	40007000 	.word	0x40007000
 8008094:	42470e40 	.word	0x42470e40
 8008098:	4b4a      	ldr	r3, [pc, #296]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	4a49      	ldr	r2, [pc, #292]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800809e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80080a2:	6093      	str	r3, [r2, #8]
 80080a4:	4b47      	ldr	r3, [pc, #284]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80080a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080b0:	4944      	ldr	r1, [pc, #272]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0310 	and.w	r3, r3, #16
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d004      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80080c8:	4b3f      	ldr	r3, [pc, #252]	@ (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80080ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80080d8:	4b3a      	ldr	r3, [pc, #232]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80080da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080e6:	4937      	ldr	r1, [pc, #220]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80080fa:	4b32      	ldr	r3, [pc, #200]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80080fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008100:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008108:	492e      	ldr	r1, [pc, #184]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008118:	2b00      	cmp	r3, #0
 800811a:	d011      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800811c:	4b29      	ldr	r3, [pc, #164]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800811e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008122:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800812a:	4926      	ldr	r1, [pc, #152]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800813a:	d101      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800813c:	2301      	movs	r3, #1
 800813e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800814c:	4b1d      	ldr	r3, [pc, #116]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800814e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008152:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815a:	491a      	ldr	r1, [pc, #104]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800815c:	4313      	orrs	r3, r2
 800815e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800816a:	2b00      	cmp	r3, #0
 800816c:	d011      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800816e:	4b15      	ldr	r3, [pc, #84]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008174:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800817c:	4911      	ldr	r1, [pc, #68]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818c:	d101      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800818e:	2301      	movs	r3, #1
 8008190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008194:	2b01      	cmp	r3, #1
 8008196:	d005      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081a0:	f040 80ff 	bne.w	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80081a4:	4b09      	ldr	r3, [pc, #36]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081aa:	f7fc ffd3 	bl	8005154 <HAL_GetTick>
 80081ae:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081b0:	e00e      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081b2:	f7fc ffcf 	bl	8005154 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d907      	bls.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e188      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80081c4:	40023800 	.word	0x40023800
 80081c8:	424711e0 	.word	0x424711e0
 80081cc:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081d0:	4b7e      	ldr	r3, [pc, #504]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1ea      	bne.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d009      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d028      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d124      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008204:	4b71      	ldr	r3, [pc, #452]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800820a:	0c1b      	lsrs	r3, r3, #16
 800820c:	f003 0303 	and.w	r3, r3, #3
 8008210:	3301      	adds	r3, #1
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008216:	4b6d      	ldr	r3, [pc, #436]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800821c:	0e1b      	lsrs	r3, r3, #24
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	019b      	lsls	r3, r3, #6
 800822e:	431a      	orrs	r2, r3
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	3b01      	subs	r3, #1
 8008236:	041b      	lsls	r3, r3, #16
 8008238:	431a      	orrs	r2, r3
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	061b      	lsls	r3, r3, #24
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	071b      	lsls	r3, r3, #28
 8008246:	4961      	ldr	r1, [pc, #388]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008248:	4313      	orrs	r3, r2
 800824a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008262:	d00a      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800826c:	2b00      	cmp	r3, #0
 800826e:	d035      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008278:	d130      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800827a:	4b54      	ldr	r3, [pc, #336]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800827c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008280:	0c1b      	lsrs	r3, r3, #16
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	3301      	adds	r3, #1
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800828c:	4b4f      	ldr	r3, [pc, #316]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800828e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008292:	0f1b      	lsrs	r3, r3, #28
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	019b      	lsls	r3, r3, #6
 80082a4:	431a      	orrs	r2, r3
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	085b      	lsrs	r3, r3, #1
 80082aa:	3b01      	subs	r3, #1
 80082ac:	041b      	lsls	r3, r3, #16
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	061b      	lsls	r3, r3, #24
 80082b6:	431a      	orrs	r2, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	071b      	lsls	r3, r3, #28
 80082bc:	4943      	ldr	r1, [pc, #268]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80082c4:	4b41      	ldr	r3, [pc, #260]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80082c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ca:	f023 021f 	bic.w	r2, r3, #31
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d2:	3b01      	subs	r3, #1
 80082d4:	493d      	ldr	r1, [pc, #244]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d029      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082f0:	d124      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80082f2:	4b36      	ldr	r3, [pc, #216]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80082f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082f8:	0c1b      	lsrs	r3, r3, #16
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	3301      	adds	r3, #1
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008304:	4b31      	ldr	r3, [pc, #196]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800830a:	0f1b      	lsrs	r3, r3, #28
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	019b      	lsls	r3, r3, #6
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	085b      	lsrs	r3, r3, #1
 8008324:	3b01      	subs	r3, #1
 8008326:	041b      	lsls	r3, r3, #16
 8008328:	431a      	orrs	r2, r3
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	061b      	lsls	r3, r3, #24
 800832e:	431a      	orrs	r2, r3
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	071b      	lsls	r3, r3, #28
 8008334:	4925      	ldr	r1, [pc, #148]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008336:	4313      	orrs	r3, r2
 8008338:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008344:	2b00      	cmp	r3, #0
 8008346:	d016      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	019b      	lsls	r3, r3, #6
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	085b      	lsrs	r3, r3, #1
 800835a:	3b01      	subs	r3, #1
 800835c:	041b      	lsls	r3, r3, #16
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	061b      	lsls	r3, r3, #24
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	071b      	lsls	r3, r3, #28
 800836e:	4917      	ldr	r1, [pc, #92]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008370:	4313      	orrs	r3, r2
 8008372:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008376:	4b16      	ldr	r3, [pc, #88]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008378:	2201      	movs	r2, #1
 800837a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800837c:	f7fc feea 	bl	8005154 <HAL_GetTick>
 8008380:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008382:	e008      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008384:	f7fc fee6 	bl	8005154 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d901      	bls.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e09f      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008396:	4b0d      	ldr	r3, [pc, #52]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0f0      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	f040 8095 	bne.w	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80083aa:	4b0a      	ldr	r3, [pc, #40]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083b0:	f7fc fed0 	bl	8005154 <HAL_GetTick>
 80083b4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083b6:	e00f      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80083b8:	f7fc fecc 	bl	8005154 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d908      	bls.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e085      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80083ca:	bf00      	nop
 80083cc:	40023800 	.word	0x40023800
 80083d0:	42470068 	.word	0x42470068
 80083d4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083d8:	4b41      	ldr	r3, [pc, #260]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083e4:	d0e8      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d009      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008402:	2b00      	cmp	r3, #0
 8008404:	d02b      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840a:	2b00      	cmp	r3, #0
 800840c:	d127      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800840e:	4b34      	ldr	r3, [pc, #208]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008414:	0c1b      	lsrs	r3, r3, #16
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	3301      	adds	r3, #1
 800841c:	005b      	lsls	r3, r3, #1
 800841e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699a      	ldr	r2, [r3, #24]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	019b      	lsls	r3, r3, #6
 800842a:	431a      	orrs	r2, r3
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	085b      	lsrs	r3, r3, #1
 8008430:	3b01      	subs	r3, #1
 8008432:	041b      	lsls	r3, r3, #16
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843a:	061b      	lsls	r3, r3, #24
 800843c:	4928      	ldr	r1, [pc, #160]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008444:	4b26      	ldr	r3, [pc, #152]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800844a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008452:	3b01      	subs	r3, #1
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	4922      	ldr	r1, [pc, #136]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008458:	4313      	orrs	r3, r2
 800845a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01d      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008472:	d118      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008474:	4b1a      	ldr	r3, [pc, #104]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800847a:	0e1b      	lsrs	r3, r3, #24
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699a      	ldr	r2, [r3, #24]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	019b      	lsls	r3, r3, #6
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	085b      	lsrs	r3, r3, #1
 8008494:	3b01      	subs	r3, #1
 8008496:	041b      	lsls	r3, r3, #16
 8008498:	431a      	orrs	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	061b      	lsls	r3, r3, #24
 800849e:	4910      	ldr	r1, [pc, #64]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80084a6:	4b0f      	ldr	r3, [pc, #60]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084ac:	f7fc fe52 	bl	8005154 <HAL_GetTick>
 80084b0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084b2:	e008      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084b4:	f7fc fe4e 	bl	8005154 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e007      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084c6:	4b06      	ldr	r3, [pc, #24]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084d2:	d1ef      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3730      	adds	r7, #48	@ 0x30
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	40023800 	.word	0x40023800
 80084e4:	42470070 	.word	0x42470070

080084e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084ec:	b0ae      	sub	sp, #184	@ 0xb8
 80084ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800850e:	4bcb      	ldr	r3, [pc, #812]	@ (800883c <HAL_RCC_GetSysClockFreq+0x354>)
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f003 030c 	and.w	r3, r3, #12
 8008516:	2b0c      	cmp	r3, #12
 8008518:	f200 8206 	bhi.w	8008928 <HAL_RCC_GetSysClockFreq+0x440>
 800851c:	a201      	add	r2, pc, #4	@ (adr r2, 8008524 <HAL_RCC_GetSysClockFreq+0x3c>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008559 	.word	0x08008559
 8008528:	08008929 	.word	0x08008929
 800852c:	08008929 	.word	0x08008929
 8008530:	08008929 	.word	0x08008929
 8008534:	08008561 	.word	0x08008561
 8008538:	08008929 	.word	0x08008929
 800853c:	08008929 	.word	0x08008929
 8008540:	08008929 	.word	0x08008929
 8008544:	08008569 	.word	0x08008569
 8008548:	08008929 	.word	0x08008929
 800854c:	08008929 	.word	0x08008929
 8008550:	08008929 	.word	0x08008929
 8008554:	08008759 	.word	0x08008759
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008558:	4bb9      	ldr	r3, [pc, #740]	@ (8008840 <HAL_RCC_GetSysClockFreq+0x358>)
 800855a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800855e:	e1e7      	b.n	8008930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008560:	4bb8      	ldr	r3, [pc, #736]	@ (8008844 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008562:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008566:	e1e3      	b.n	8008930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008568:	4bb4      	ldr	r3, [pc, #720]	@ (800883c <HAL_RCC_GetSysClockFreq+0x354>)
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008574:	4bb1      	ldr	r3, [pc, #708]	@ (800883c <HAL_RCC_GetSysClockFreq+0x354>)
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d071      	beq.n	8008664 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008580:	4bae      	ldr	r3, [pc, #696]	@ (800883c <HAL_RCC_GetSysClockFreq+0x354>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	099b      	lsrs	r3, r3, #6
 8008586:	2200      	movs	r2, #0
 8008588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800858c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008598:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800859c:	2300      	movs	r3, #0
 800859e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80085a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80085a6:	4622      	mov	r2, r4
 80085a8:	462b      	mov	r3, r5
 80085aa:	f04f 0000 	mov.w	r0, #0
 80085ae:	f04f 0100 	mov.w	r1, #0
 80085b2:	0159      	lsls	r1, r3, #5
 80085b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085b8:	0150      	lsls	r0, r2, #5
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4621      	mov	r1, r4
 80085c0:	1a51      	subs	r1, r2, r1
 80085c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80085c4:	4629      	mov	r1, r5
 80085c6:	eb63 0301 	sbc.w	r3, r3, r1
 80085ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80085cc:	f04f 0200 	mov.w	r2, #0
 80085d0:	f04f 0300 	mov.w	r3, #0
 80085d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80085d8:	4649      	mov	r1, r9
 80085da:	018b      	lsls	r3, r1, #6
 80085dc:	4641      	mov	r1, r8
 80085de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80085e2:	4641      	mov	r1, r8
 80085e4:	018a      	lsls	r2, r1, #6
 80085e6:	4641      	mov	r1, r8
 80085e8:	1a51      	subs	r1, r2, r1
 80085ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80085ec:	4649      	mov	r1, r9
 80085ee:	eb63 0301 	sbc.w	r3, r3, r1
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	f04f 0300 	mov.w	r3, #0
 80085fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008600:	4649      	mov	r1, r9
 8008602:	00cb      	lsls	r3, r1, #3
 8008604:	4641      	mov	r1, r8
 8008606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800860a:	4641      	mov	r1, r8
 800860c:	00ca      	lsls	r2, r1, #3
 800860e:	4610      	mov	r0, r2
 8008610:	4619      	mov	r1, r3
 8008612:	4603      	mov	r3, r0
 8008614:	4622      	mov	r2, r4
 8008616:	189b      	adds	r3, r3, r2
 8008618:	633b      	str	r3, [r7, #48]	@ 0x30
 800861a:	462b      	mov	r3, r5
 800861c:	460a      	mov	r2, r1
 800861e:	eb42 0303 	adc.w	r3, r2, r3
 8008622:	637b      	str	r3, [r7, #52]	@ 0x34
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008630:	4629      	mov	r1, r5
 8008632:	024b      	lsls	r3, r1, #9
 8008634:	4621      	mov	r1, r4
 8008636:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800863a:	4621      	mov	r1, r4
 800863c:	024a      	lsls	r2, r1, #9
 800863e:	4610      	mov	r0, r2
 8008640:	4619      	mov	r1, r3
 8008642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008646:	2200      	movs	r2, #0
 8008648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800864c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008650:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008654:	f7f8 fb38 	bl	8000cc8 <__aeabi_uldivmod>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4613      	mov	r3, r2
 800865e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008662:	e067      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008664:	4b75      	ldr	r3, [pc, #468]	@ (800883c <HAL_RCC_GetSysClockFreq+0x354>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	099b      	lsrs	r3, r3, #6
 800866a:	2200      	movs	r2, #0
 800866c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008670:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008674:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800867e:	2300      	movs	r3, #0
 8008680:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008682:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008686:	4622      	mov	r2, r4
 8008688:	462b      	mov	r3, r5
 800868a:	f04f 0000 	mov.w	r0, #0
 800868e:	f04f 0100 	mov.w	r1, #0
 8008692:	0159      	lsls	r1, r3, #5
 8008694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008698:	0150      	lsls	r0, r2, #5
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4621      	mov	r1, r4
 80086a0:	1a51      	subs	r1, r2, r1
 80086a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80086a4:	4629      	mov	r1, r5
 80086a6:	eb63 0301 	sbc.w	r3, r3, r1
 80086aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80086b8:	4649      	mov	r1, r9
 80086ba:	018b      	lsls	r3, r1, #6
 80086bc:	4641      	mov	r1, r8
 80086be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086c2:	4641      	mov	r1, r8
 80086c4:	018a      	lsls	r2, r1, #6
 80086c6:	4641      	mov	r1, r8
 80086c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80086cc:	4649      	mov	r1, r9
 80086ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	f04f 0300 	mov.w	r3, #0
 80086da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086e6:	4692      	mov	sl, r2
 80086e8:	469b      	mov	fp, r3
 80086ea:	4623      	mov	r3, r4
 80086ec:	eb1a 0303 	adds.w	r3, sl, r3
 80086f0:	623b      	str	r3, [r7, #32]
 80086f2:	462b      	mov	r3, r5
 80086f4:	eb4b 0303 	adc.w	r3, fp, r3
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086fa:	f04f 0200 	mov.w	r2, #0
 80086fe:	f04f 0300 	mov.w	r3, #0
 8008702:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008706:	4629      	mov	r1, r5
 8008708:	028b      	lsls	r3, r1, #10
 800870a:	4621      	mov	r1, r4
 800870c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008710:	4621      	mov	r1, r4
 8008712:	028a      	lsls	r2, r1, #10
 8008714:	4610      	mov	r0, r2
 8008716:	4619      	mov	r1, r3
 8008718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800871c:	2200      	movs	r2, #0
 800871e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008720:	677a      	str	r2, [r7, #116]	@ 0x74
 8008722:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008726:	f7f8 facf 	bl	8000cc8 <__aeabi_uldivmod>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4613      	mov	r3, r2
 8008730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008734:	4b41      	ldr	r3, [pc, #260]	@ (800883c <HAL_RCC_GetSysClockFreq+0x354>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	0c1b      	lsrs	r3, r3, #16
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	3301      	adds	r3, #1
 8008740:	005b      	lsls	r3, r3, #1
 8008742:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8008746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800874a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800874e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008756:	e0eb      	b.n	8008930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008758:	4b38      	ldr	r3, [pc, #224]	@ (800883c <HAL_RCC_GetSysClockFreq+0x354>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008764:	4b35      	ldr	r3, [pc, #212]	@ (800883c <HAL_RCC_GetSysClockFreq+0x354>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d06b      	beq.n	8008848 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008770:	4b32      	ldr	r3, [pc, #200]	@ (800883c <HAL_RCC_GetSysClockFreq+0x354>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	099b      	lsrs	r3, r3, #6
 8008776:	2200      	movs	r2, #0
 8008778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800877a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800877c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800877e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008782:	663b      	str	r3, [r7, #96]	@ 0x60
 8008784:	2300      	movs	r3, #0
 8008786:	667b      	str	r3, [r7, #100]	@ 0x64
 8008788:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800878c:	4622      	mov	r2, r4
 800878e:	462b      	mov	r3, r5
 8008790:	f04f 0000 	mov.w	r0, #0
 8008794:	f04f 0100 	mov.w	r1, #0
 8008798:	0159      	lsls	r1, r3, #5
 800879a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800879e:	0150      	lsls	r0, r2, #5
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4621      	mov	r1, r4
 80087a6:	1a51      	subs	r1, r2, r1
 80087a8:	61b9      	str	r1, [r7, #24]
 80087aa:	4629      	mov	r1, r5
 80087ac:	eb63 0301 	sbc.w	r3, r3, r1
 80087b0:	61fb      	str	r3, [r7, #28]
 80087b2:	f04f 0200 	mov.w	r2, #0
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80087be:	4659      	mov	r1, fp
 80087c0:	018b      	lsls	r3, r1, #6
 80087c2:	4651      	mov	r1, sl
 80087c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087c8:	4651      	mov	r1, sl
 80087ca:	018a      	lsls	r2, r1, #6
 80087cc:	4651      	mov	r1, sl
 80087ce:	ebb2 0801 	subs.w	r8, r2, r1
 80087d2:	4659      	mov	r1, fp
 80087d4:	eb63 0901 	sbc.w	r9, r3, r1
 80087d8:	f04f 0200 	mov.w	r2, #0
 80087dc:	f04f 0300 	mov.w	r3, #0
 80087e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087ec:	4690      	mov	r8, r2
 80087ee:	4699      	mov	r9, r3
 80087f0:	4623      	mov	r3, r4
 80087f2:	eb18 0303 	adds.w	r3, r8, r3
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	462b      	mov	r3, r5
 80087fa:	eb49 0303 	adc.w	r3, r9, r3
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800880c:	4629      	mov	r1, r5
 800880e:	024b      	lsls	r3, r1, #9
 8008810:	4621      	mov	r1, r4
 8008812:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008816:	4621      	mov	r1, r4
 8008818:	024a      	lsls	r2, r1, #9
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008822:	2200      	movs	r2, #0
 8008824:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008826:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008828:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800882c:	f7f8 fa4c 	bl	8000cc8 <__aeabi_uldivmod>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4613      	mov	r3, r2
 8008836:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800883a:	e065      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x420>
 800883c:	40023800 	.word	0x40023800
 8008840:	00f42400 	.word	0x00f42400
 8008844:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008848:	4b3d      	ldr	r3, [pc, #244]	@ (8008940 <HAL_RCC_GetSysClockFreq+0x458>)
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	099b      	lsrs	r3, r3, #6
 800884e:	2200      	movs	r2, #0
 8008850:	4618      	mov	r0, r3
 8008852:	4611      	mov	r1, r2
 8008854:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008858:	653b      	str	r3, [r7, #80]	@ 0x50
 800885a:	2300      	movs	r3, #0
 800885c:	657b      	str	r3, [r7, #84]	@ 0x54
 800885e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008862:	4642      	mov	r2, r8
 8008864:	464b      	mov	r3, r9
 8008866:	f04f 0000 	mov.w	r0, #0
 800886a:	f04f 0100 	mov.w	r1, #0
 800886e:	0159      	lsls	r1, r3, #5
 8008870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008874:	0150      	lsls	r0, r2, #5
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4641      	mov	r1, r8
 800887c:	1a51      	subs	r1, r2, r1
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	4649      	mov	r1, r9
 8008882:	eb63 0301 	sbc.w	r3, r3, r1
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	f04f 0200 	mov.w	r2, #0
 800888c:	f04f 0300 	mov.w	r3, #0
 8008890:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008894:	4659      	mov	r1, fp
 8008896:	018b      	lsls	r3, r1, #6
 8008898:	4651      	mov	r1, sl
 800889a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800889e:	4651      	mov	r1, sl
 80088a0:	018a      	lsls	r2, r1, #6
 80088a2:	4651      	mov	r1, sl
 80088a4:	1a54      	subs	r4, r2, r1
 80088a6:	4659      	mov	r1, fp
 80088a8:	eb63 0501 	sbc.w	r5, r3, r1
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	f04f 0300 	mov.w	r3, #0
 80088b4:	00eb      	lsls	r3, r5, #3
 80088b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088ba:	00e2      	lsls	r2, r4, #3
 80088bc:	4614      	mov	r4, r2
 80088be:	461d      	mov	r5, r3
 80088c0:	4643      	mov	r3, r8
 80088c2:	18e3      	adds	r3, r4, r3
 80088c4:	603b      	str	r3, [r7, #0]
 80088c6:	464b      	mov	r3, r9
 80088c8:	eb45 0303 	adc.w	r3, r5, r3
 80088cc:	607b      	str	r3, [r7, #4]
 80088ce:	f04f 0200 	mov.w	r2, #0
 80088d2:	f04f 0300 	mov.w	r3, #0
 80088d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088da:	4629      	mov	r1, r5
 80088dc:	028b      	lsls	r3, r1, #10
 80088de:	4621      	mov	r1, r4
 80088e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088e4:	4621      	mov	r1, r4
 80088e6:	028a      	lsls	r2, r1, #10
 80088e8:	4610      	mov	r0, r2
 80088ea:	4619      	mov	r1, r3
 80088ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088f0:	2200      	movs	r2, #0
 80088f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80088f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80088fa:	f7f8 f9e5 	bl	8000cc8 <__aeabi_uldivmod>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4613      	mov	r3, r2
 8008904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008908:	4b0d      	ldr	r3, [pc, #52]	@ (8008940 <HAL_RCC_GetSysClockFreq+0x458>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	0f1b      	lsrs	r3, r3, #28
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800891a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800891e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008926:	e003      	b.n	8008930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008928:	4b06      	ldr	r3, [pc, #24]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x45c>)
 800892a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800892e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008934:	4618      	mov	r0, r3
 8008936:	37b8      	adds	r7, #184	@ 0xb8
 8008938:	46bd      	mov	sp, r7
 800893a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800893e:	bf00      	nop
 8008940:	40023800 	.word	0x40023800
 8008944:	00f42400 	.word	0x00f42400

08008948 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e28d      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 8083 	beq.w	8008a6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008968:	4b94      	ldr	r3, [pc, #592]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f003 030c 	and.w	r3, r3, #12
 8008970:	2b04      	cmp	r3, #4
 8008972:	d019      	beq.n	80089a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008974:	4b91      	ldr	r3, [pc, #580]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f003 030c 	and.w	r3, r3, #12
        || \
 800897c:	2b08      	cmp	r3, #8
 800897e:	d106      	bne.n	800898e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008980:	4b8e      	ldr	r3, [pc, #568]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800898c:	d00c      	beq.n	80089a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800898e:	4b8b      	ldr	r3, [pc, #556]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008996:	2b0c      	cmp	r3, #12
 8008998:	d112      	bne.n	80089c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800899a:	4b88      	ldr	r3, [pc, #544]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089a6:	d10b      	bne.n	80089c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089a8:	4b84      	ldr	r3, [pc, #528]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05b      	beq.n	8008a6c <HAL_RCC_OscConfig+0x124>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d157      	bne.n	8008a6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e25a      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089c8:	d106      	bne.n	80089d8 <HAL_RCC_OscConfig+0x90>
 80089ca:	4b7c      	ldr	r3, [pc, #496]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a7b      	ldr	r2, [pc, #492]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 80089d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	e01d      	b.n	8008a14 <HAL_RCC_OscConfig+0xcc>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089e0:	d10c      	bne.n	80089fc <HAL_RCC_OscConfig+0xb4>
 80089e2:	4b76      	ldr	r3, [pc, #472]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a75      	ldr	r2, [pc, #468]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 80089e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	4b73      	ldr	r3, [pc, #460]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a72      	ldr	r2, [pc, #456]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 80089f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	e00b      	b.n	8008a14 <HAL_RCC_OscConfig+0xcc>
 80089fc:	4b6f      	ldr	r3, [pc, #444]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a6e      	ldr	r2, [pc, #440]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	4b6c      	ldr	r3, [pc, #432]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a6b      	ldr	r2, [pc, #428]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d013      	beq.n	8008a44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1c:	f7fc fb9a 	bl	8005154 <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a24:	f7fc fb96 	bl	8005154 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b64      	cmp	r3, #100	@ 0x64
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e21f      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a36:	4b61      	ldr	r3, [pc, #388]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f0      	beq.n	8008a24 <HAL_RCC_OscConfig+0xdc>
 8008a42:	e014      	b.n	8008a6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a44:	f7fc fb86 	bl	8005154 <HAL_GetTick>
 8008a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a4a:	e008      	b.n	8008a5e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a4c:	f7fc fb82 	bl	8005154 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b64      	cmp	r3, #100	@ 0x64
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e20b      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a5e:	4b57      	ldr	r3, [pc, #348]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1f0      	bne.n	8008a4c <HAL_RCC_OscConfig+0x104>
 8008a6a:	e000      	b.n	8008a6e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d06f      	beq.n	8008b5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008a7a:	4b50      	ldr	r3, [pc, #320]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d017      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008a86:	4b4d      	ldr	r3, [pc, #308]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 030c 	and.w	r3, r3, #12
        || \
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	d105      	bne.n	8008a9e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008a92:	4b4a      	ldr	r3, [pc, #296]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a9e:	4b47      	ldr	r3, [pc, #284]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008aa6:	2b0c      	cmp	r3, #12
 8008aa8:	d11c      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aaa:	4b44      	ldr	r3, [pc, #272]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d116      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ab6:	4b41      	ldr	r3, [pc, #260]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <HAL_RCC_OscConfig+0x186>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d001      	beq.n	8008ace <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e1d3      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ace:	4b3b      	ldr	r3, [pc, #236]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	4937      	ldr	r1, [pc, #220]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ae2:	e03a      	b.n	8008b5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d020      	beq.n	8008b2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008aec:	4b34      	ldr	r3, [pc, #208]	@ (8008bc0 <HAL_RCC_OscConfig+0x278>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af2:	f7fc fb2f 	bl	8005154 <HAL_GetTick>
 8008af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008af8:	e008      	b.n	8008b0c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008afa:	f7fc fb2b 	bl	8005154 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e1b4      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0f0      	beq.n	8008afa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b18:	4b28      	ldr	r3, [pc, #160]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	4925      	ldr	r1, [pc, #148]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	600b      	str	r3, [r1, #0]
 8008b2c:	e015      	b.n	8008b5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b2e:	4b24      	ldr	r3, [pc, #144]	@ (8008bc0 <HAL_RCC_OscConfig+0x278>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b34:	f7fc fb0e 	bl	8005154 <HAL_GetTick>
 8008b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b3a:	e008      	b.n	8008b4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b3c:	f7fc fb0a 	bl	8005154 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d901      	bls.n	8008b4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e193      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1f0      	bne.n	8008b3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0308 	and.w	r3, r3, #8
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d036      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d016      	beq.n	8008b9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b6e:	4b15      	ldr	r3, [pc, #84]	@ (8008bc4 <HAL_RCC_OscConfig+0x27c>)
 8008b70:	2201      	movs	r2, #1
 8008b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b74:	f7fc faee 	bl	8005154 <HAL_GetTick>
 8008b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b7a:	e008      	b.n	8008b8e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b7c:	f7fc faea 	bl	8005154 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e173      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8008bbc <HAL_RCC_OscConfig+0x274>)
 8008b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f0      	beq.n	8008b7c <HAL_RCC_OscConfig+0x234>
 8008b9a:	e01b      	b.n	8008bd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b9c:	4b09      	ldr	r3, [pc, #36]	@ (8008bc4 <HAL_RCC_OscConfig+0x27c>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba2:	f7fc fad7 	bl	8005154 <HAL_GetTick>
 8008ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ba8:	e00e      	b.n	8008bc8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008baa:	f7fc fad3 	bl	8005154 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d907      	bls.n	8008bc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e15c      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
 8008bbc:	40023800 	.word	0x40023800
 8008bc0:	42470000 	.word	0x42470000
 8008bc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bc8:	4b8a      	ldr	r3, [pc, #552]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1ea      	bne.n	8008baa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 8097 	beq.w	8008d10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008be6:	4b83      	ldr	r3, [pc, #524]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10f      	bne.n	8008c12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60bb      	str	r3, [r7, #8]
 8008bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c02:	4b7c      	ldr	r3, [pc, #496]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c0a:	60bb      	str	r3, [r7, #8]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c12:	4b79      	ldr	r3, [pc, #484]	@ (8008df8 <HAL_RCC_OscConfig+0x4b0>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d118      	bne.n	8008c50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c1e:	4b76      	ldr	r3, [pc, #472]	@ (8008df8 <HAL_RCC_OscConfig+0x4b0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a75      	ldr	r2, [pc, #468]	@ (8008df8 <HAL_RCC_OscConfig+0x4b0>)
 8008c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c2a:	f7fc fa93 	bl	8005154 <HAL_GetTick>
 8008c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c30:	e008      	b.n	8008c44 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c32:	f7fc fa8f 	bl	8005154 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d901      	bls.n	8008c44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e118      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c44:	4b6c      	ldr	r3, [pc, #432]	@ (8008df8 <HAL_RCC_OscConfig+0x4b0>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0f0      	beq.n	8008c32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d106      	bne.n	8008c66 <HAL_RCC_OscConfig+0x31e>
 8008c58:	4b66      	ldr	r3, [pc, #408]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c5c:	4a65      	ldr	r2, [pc, #404]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c64:	e01c      	b.n	8008ca0 <HAL_RCC_OscConfig+0x358>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	d10c      	bne.n	8008c88 <HAL_RCC_OscConfig+0x340>
 8008c6e:	4b61      	ldr	r3, [pc, #388]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c72:	4a60      	ldr	r2, [pc, #384]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c74:	f043 0304 	orr.w	r3, r3, #4
 8008c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c7a:	4b5e      	ldr	r3, [pc, #376]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c7e:	4a5d      	ldr	r2, [pc, #372]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c80:	f043 0301 	orr.w	r3, r3, #1
 8008c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c86:	e00b      	b.n	8008ca0 <HAL_RCC_OscConfig+0x358>
 8008c88:	4b5a      	ldr	r3, [pc, #360]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c8c:	4a59      	ldr	r2, [pc, #356]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c8e:	f023 0301 	bic.w	r3, r3, #1
 8008c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c94:	4b57      	ldr	r3, [pc, #348]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c98:	4a56      	ldr	r2, [pc, #344]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008c9a:	f023 0304 	bic.w	r3, r3, #4
 8008c9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d015      	beq.n	8008cd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca8:	f7fc fa54 	bl	8005154 <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cae:	e00a      	b.n	8008cc6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cb0:	f7fc fa50 	bl	8005154 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e0d7      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0ee      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x368>
 8008cd2:	e014      	b.n	8008cfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd4:	f7fc fa3e 	bl	8005154 <HAL_GetTick>
 8008cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cda:	e00a      	b.n	8008cf2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cdc:	f7fc fa3a 	bl	8005154 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e0c1      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cf2:	4b40      	ldr	r3, [pc, #256]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1ee      	bne.n	8008cdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d105      	bne.n	8008d10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d04:	4b3b      	ldr	r3, [pc, #236]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d08:	4a3a      	ldr	r2, [pc, #232]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 80ad 	beq.w	8008e74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d1a:	4b36      	ldr	r3, [pc, #216]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 030c 	and.w	r3, r3, #12
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d060      	beq.n	8008de8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d145      	bne.n	8008dba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d2e:	4b33      	ldr	r3, [pc, #204]	@ (8008dfc <HAL_RCC_OscConfig+0x4b4>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d34:	f7fc fa0e 	bl	8005154 <HAL_GetTick>
 8008d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d3a:	e008      	b.n	8008d4e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d3c:	f7fc fa0a 	bl	8005154 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d901      	bls.n	8008d4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e093      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d4e:	4b29      	ldr	r3, [pc, #164]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1f0      	bne.n	8008d3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	69da      	ldr	r2, [r3, #28]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d68:	019b      	lsls	r3, r3, #6
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d70:	085b      	lsrs	r3, r3, #1
 8008d72:	3b01      	subs	r3, #1
 8008d74:	041b      	lsls	r3, r3, #16
 8008d76:	431a      	orrs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7c:	061b      	lsls	r3, r3, #24
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d84:	071b      	lsls	r3, r3, #28
 8008d86:	491b      	ldr	r1, [pc, #108]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8008dfc <HAL_RCC_OscConfig+0x4b4>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d92:	f7fc f9df 	bl	8005154 <HAL_GetTick>
 8008d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d98:	e008      	b.n	8008dac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d9a:	f7fc f9db 	bl	8005154 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d901      	bls.n	8008dac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e064      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dac:	4b11      	ldr	r3, [pc, #68]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0f0      	beq.n	8008d9a <HAL_RCC_OscConfig+0x452>
 8008db8:	e05c      	b.n	8008e74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dba:	4b10      	ldr	r3, [pc, #64]	@ (8008dfc <HAL_RCC_OscConfig+0x4b4>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc0:	f7fc f9c8 	bl	8005154 <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dc6:	e008      	b.n	8008dda <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dc8:	f7fc f9c4 	bl	8005154 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e04d      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dda:	4b06      	ldr	r3, [pc, #24]	@ (8008df4 <HAL_RCC_OscConfig+0x4ac>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f0      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x480>
 8008de6:	e045      	b.n	8008e74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d107      	bne.n	8008e00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e040      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
 8008df4:	40023800 	.word	0x40023800
 8008df8:	40007000 	.word	0x40007000
 8008dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e00:	4b1f      	ldr	r3, [pc, #124]	@ (8008e80 <HAL_RCC_OscConfig+0x538>)
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d030      	beq.n	8008e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d129      	bne.n	8008e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d122      	bne.n	8008e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008e30:	4013      	ands	r3, r2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d119      	bne.n	8008e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e46:	085b      	lsrs	r3, r3, #1
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d10f      	bne.n	8008e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d107      	bne.n	8008e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d001      	beq.n	8008e74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e000      	b.n	8008e76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	40023800 	.word	0x40023800

08008e84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e073      	b.n	8008f82 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7f5b      	ldrb	r3, [r3, #29]
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7f9 fa2c 	bl	8002308 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b10      	cmp	r3, #16
 8008ec2:	d055      	beq.n	8008f70 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	22ca      	movs	r2, #202	@ 0xca
 8008eca:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2253      	movs	r2, #83	@ 0x53
 8008ed2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fb73 	bl	80095c0 <RTC_EnterInitMode>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d12c      	bne.n	8008f3e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	6812      	ldr	r2, [r2, #0]
 8008eee:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6899      	ldr	r1, [r3, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	68d2      	ldr	r2, [r2, #12]
 8008f1e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6919      	ldr	r1, [r3, #16]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	041a      	lsls	r2, r3, #16
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	430a      	orrs	r2, r1
 8008f32:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fb7a 	bl	800962e <RTC_ExitInitMode>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d110      	bne.n	8008f66 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008f52:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	22ff      	movs	r2, #255	@ 0xff
 8008f6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f6e:	e001      	b.n	8008f74 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d102      	bne.n	8008f80 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f8a:	b590      	push	{r4, r7, lr}
 8008f8c:	b087      	sub	sp, #28
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	7f1b      	ldrb	r3, [r3, #28]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <HAL_RTC_SetTime+0x1c>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e087      	b.n	80090b6 <HAL_RTC_SetTime+0x12c>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d126      	bne.n	8009006 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 fb51 	bl	8009678 <RTC_ByteToBcd2>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	785b      	ldrb	r3, [r3, #1]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fb4a 	bl	8009678 <RTC_ByteToBcd2>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008fe8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	789b      	ldrb	r3, [r3, #2]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fb42 	bl	8009678 <RTC_ByteToBcd2>
 8008ff4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ff6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	78db      	ldrb	r3, [r3, #3]
 8008ffe:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009000:	4313      	orrs	r3, r2
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	e018      	b.n	8009038 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	785b      	ldrb	r3, [r3, #1]
 8009024:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009026:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800902c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	78db      	ldrb	r3, [r3, #3]
 8009032:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009034:	4313      	orrs	r3, r2
 8009036:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	22ca      	movs	r2, #202	@ 0xca
 800903e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2253      	movs	r2, #83	@ 0x53
 8009046:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 fab9 	bl	80095c0 <RTC_EnterInitMode>
 800904e:	4603      	mov	r3, r0
 8009050:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009052:	7cfb      	ldrb	r3, [r7, #19]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d120      	bne.n	800909a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009062:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009066:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009076:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6899      	ldr	r1, [r3, #8]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	431a      	orrs	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 facc 	bl	800962e <RTC_ExitInitMode>
 8009096:	4603      	mov	r3, r0
 8009098:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800909a:	7cfb      	ldrb	r3, [r7, #19]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d102      	bne.n	80090a6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2201      	movs	r2, #1
 80090a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	22ff      	movs	r2, #255	@ 0xff
 80090ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	771a      	strb	r2, [r3, #28]

  return status;
 80090b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	371c      	adds	r7, #28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd90      	pop	{r4, r7, pc}

080090be <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b086      	sub	sp, #24
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80090f0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80090f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	0c1b      	lsrs	r3, r3, #16
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009100:	b2da      	uxtb	r2, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	0a1b      	lsrs	r3, r3, #8
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009110:	b2da      	uxtb	r2, r3
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	b2db      	uxtb	r3, r3
 800911a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800911e:	b2da      	uxtb	r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	0d9b      	lsrs	r3, r3, #22
 8009128:	b2db      	uxtb	r3, r3
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	b2da      	uxtb	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d11a      	bne.n	8009170 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 fab8 	bl	80096b4 <RTC_Bcd2ToByte>
 8009144:	4603      	mov	r3, r0
 8009146:	461a      	mov	r2, r3
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	785b      	ldrb	r3, [r3, #1]
 8009150:	4618      	mov	r0, r3
 8009152:	f000 faaf 	bl	80096b4 <RTC_Bcd2ToByte>
 8009156:	4603      	mov	r3, r0
 8009158:	461a      	mov	r2, r3
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	789b      	ldrb	r3, [r3, #2]
 8009162:	4618      	mov	r0, r3
 8009164:	f000 faa6 	bl	80096b4 <RTC_Bcd2ToByte>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800917a:	b590      	push	{r4, r7, lr}
 800917c:	b087      	sub	sp, #28
 800917e:	af00      	add	r7, sp, #0
 8009180:	60f8      	str	r0, [r7, #12]
 8009182:	60b9      	str	r1, [r7, #8]
 8009184:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	7f1b      	ldrb	r3, [r3, #28]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_RTC_SetDate+0x1c>
 8009192:	2302      	movs	r3, #2
 8009194:	e071      	b.n	800927a <HAL_RTC_SetDate+0x100>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2202      	movs	r2, #2
 80091a0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10e      	bne.n	80091c6 <HAL_RTC_SetDate+0x4c>
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	f003 0310 	and.w	r3, r3, #16
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d008      	beq.n	80091c6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	f023 0310 	bic.w	r3, r3, #16
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	330a      	adds	r3, #10
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d11c      	bne.n	8009206 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	78db      	ldrb	r3, [r3, #3]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fa51 	bl	8009678 <RTC_ByteToBcd2>
 80091d6:	4603      	mov	r3, r0
 80091d8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fa4a 	bl	8009678 <RTC_ByteToBcd2>
 80091e4:	4603      	mov	r3, r0
 80091e6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091e8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	789b      	ldrb	r3, [r3, #2]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fa42 	bl	8009678 <RTC_ByteToBcd2>
 80091f4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091f6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009200:	4313      	orrs	r3, r2
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	e00e      	b.n	8009224 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	78db      	ldrb	r3, [r3, #3]
 800920a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009212:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009218:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	22ca      	movs	r2, #202	@ 0xca
 800922a:	625a      	str	r2, [r3, #36]	@ 0x24
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2253      	movs	r2, #83	@ 0x53
 8009232:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f9c3 	bl	80095c0 <RTC_EnterInitMode>
 800923a:	4603      	mov	r3, r0
 800923c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800923e:	7cfb      	ldrb	r3, [r7, #19]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10c      	bne.n	800925e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800924e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009252:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 f9ea 	bl	800962e <RTC_ExitInitMode>
 800925a:	4603      	mov	r3, r0
 800925c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800925e:	7cfb      	ldrb	r3, [r7, #19]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2201      	movs	r2, #1
 8009268:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	22ff      	movs	r2, #255	@ 0xff
 8009270:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	771a      	strb	r2, [r3, #28]

  return status;
 8009278:	7cfb      	ldrb	r3, [r7, #19]
}
 800927a:	4618      	mov	r0, r3
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	bd90      	pop	{r4, r7, pc}

08009282 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b086      	sub	sp, #24
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800929c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80092a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	0c1b      	lsrs	r3, r3, #16
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f003 031f 	and.w	r3, r3, #31
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	0b5b      	lsrs	r3, r3, #13
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d11a      	bne.n	8009316 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	78db      	ldrb	r3, [r3, #3]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 f9e5 	bl	80096b4 <RTC_Bcd2ToByte>
 80092ea:	4603      	mov	r3, r0
 80092ec:	461a      	mov	r2, r3
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f9dc 	bl	80096b4 <RTC_Bcd2ToByte>
 80092fc:	4603      	mov	r3, r0
 80092fe:	461a      	mov	r2, r3
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	789b      	ldrb	r3, [r3, #2]
 8009308:	4618      	mov	r0, r3
 800930a:	f000 f9d3 	bl	80096b4 <RTC_Bcd2ToByte>
 800930e:	4603      	mov	r3, r0
 8009310:	461a      	mov	r2, r3
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009320:	b590      	push	{r4, r7, lr}
 8009322:	b089      	sub	sp, #36	@ 0x24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	7f1b      	ldrb	r3, [r3, #28]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_RTC_SetAlarm+0x24>
 8009340:	2302      	movs	r3, #2
 8009342:	e113      	b.n	800956c <HAL_RTC_SetAlarm+0x24c>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2202      	movs	r2, #2
 800934e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d137      	bne.n	80093c6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	d102      	bne.n	800936a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2200      	movs	r2, #0
 8009368:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f982 	bl	8009678 <RTC_ByteToBcd2>
 8009374:	4603      	mov	r3, r0
 8009376:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	4618      	mov	r0, r3
 800937e:	f000 f97b 	bl	8009678 <RTC_ByteToBcd2>
 8009382:	4603      	mov	r3, r0
 8009384:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009386:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	789b      	ldrb	r3, [r3, #2]
 800938c:	4618      	mov	r0, r3
 800938e:	f000 f973 	bl	8009678 <RTC_ByteToBcd2>
 8009392:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009394:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	78db      	ldrb	r3, [r3, #3]
 800939c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800939e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 f965 	bl	8009678 <RTC_ByteToBcd2>
 80093ae:	4603      	mov	r3, r0
 80093b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80093b2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80093ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80093c0:	4313      	orrs	r3, r2
 80093c2:	61fb      	str	r3, [r7, #28]
 80093c4:	e023      	b.n	800940e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d102      	bne.n	80093da <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2200      	movs	r2, #0
 80093d8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093e6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093ec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	78db      	ldrb	r3, [r3, #3]
 80093f2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80093f4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80093fe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009404:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800940a:	4313      	orrs	r3, r2
 800940c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009416:	4313      	orrs	r3, r2
 8009418:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	22ca      	movs	r2, #202	@ 0xca
 8009420:	625a      	str	r2, [r3, #36]	@ 0x24
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2253      	movs	r2, #83	@ 0x53
 8009428:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009432:	d148      	bne.n	80094c6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	689a      	ldr	r2, [r3, #8]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009442:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689a      	ldr	r2, [r3, #8]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009452:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	b2da      	uxtb	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009464:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009466:	f7fb fe75 	bl	8005154 <HAL_GetTick>
 800946a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800946c:	e013      	b.n	8009496 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800946e:	f7fb fe71 	bl	8005154 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800947c:	d90b      	bls.n	8009496 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	22ff      	movs	r2, #255	@ 0xff
 8009484:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2203      	movs	r2, #3
 800948a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e06a      	b.n	800956c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0e4      	beq.n	800946e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	69fa      	ldr	r2, [r7, #28]
 80094aa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094c2:	609a      	str	r2, [r3, #8]
 80094c4:	e047      	b.n	8009556 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80094d4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689a      	ldr	r2, [r3, #8]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094e4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80094f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094f8:	f7fb fe2c 	bl	8005154 <HAL_GetTick>
 80094fc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80094fe:	e013      	b.n	8009528 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009500:	f7fb fe28 	bl	8005154 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800950e:	d90b      	bls.n	8009528 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	22ff      	movs	r2, #255	@ 0xff
 8009516:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2203      	movs	r2, #3
 800951c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e021      	b.n	800956c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0e4      	beq.n	8009500 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009554:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	22ff      	movs	r2, #255	@ 0xff
 800955c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3724      	adds	r7, #36	@ 0x24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd90      	pop	{r4, r7, pc}

08009574 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a0d      	ldr	r2, [pc, #52]	@ (80095bc <HAL_RTC_WaitForSynchro+0x48>)
 8009586:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009588:	f7fb fde4 	bl	8005154 <HAL_GetTick>
 800958c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800958e:	e009      	b.n	80095a4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009590:	f7fb fde0 	bl	8005154 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800959e:	d901      	bls.n	80095a4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e007      	b.n	80095b4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0ee      	beq.n	8009590 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	00017f5f 	.word	0x00017f5f

080095c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d122      	bne.n	8009624 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80095ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095ee:	f7fb fdb1 	bl	8005154 <HAL_GetTick>
 80095f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80095f4:	e00c      	b.n	8009610 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095f6:	f7fb fdad 	bl	8005154 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009604:	d904      	bls.n	8009610 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2204      	movs	r2, #4
 800960a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d102      	bne.n	8009624 <RTC_EnterInitMode+0x64>
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d1e8      	bne.n	80095f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009624:	7bfb      	ldrb	r3, [r7, #15]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009648:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f003 0320 	and.w	r3, r3, #32
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff ff8b 	bl	8009574 <HAL_RTC_WaitForSynchro>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2204      	movs	r2, #4
 8009668:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	4603      	mov	r3, r0
 8009680:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009686:	e005      	b.n	8009694 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3301      	adds	r3, #1
 800968c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	3b0a      	subs	r3, #10
 8009692:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	2b09      	cmp	r3, #9
 8009698:	d8f6      	bhi.n	8009688 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	b2db      	uxtb	r3, r3
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	79fb      	ldrb	r3, [r7, #7]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	b2db      	uxtb	r3, r3
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4603      	mov	r3, r0
 80096bc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	091b      	lsrs	r3, r3, #4
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	461a      	mov	r2, r3
 80096ca:	4613      	mov	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	005b      	lsls	r3, r3, #1
 80096d2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	f003 030f 	and.w	r3, r3, #15
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4413      	add	r3, r2
 80096e2:	b2db      	uxtb	r3, r3
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e022      	b.n	8009748 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d105      	bne.n	800971a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7f8 fe41 	bl	800239c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2203      	movs	r2, #3
 800971e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f814 	bl	8009750 <HAL_SD_InitCard>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e00a      	b.n	8009748 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009750:	b5b0      	push	{r4, r5, r7, lr}
 8009752:	b08e      	sub	sp, #56	@ 0x38
 8009754:	af04      	add	r7, sp, #16
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009758:	2300      	movs	r3, #0
 800975a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009760:	2300      	movs	r3, #0
 8009762:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009768:	2300      	movs	r3, #0
 800976a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800976c:	2376      	movs	r3, #118	@ 0x76
 800976e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681d      	ldr	r5, [r3, #0]
 8009774:	466c      	mov	r4, sp
 8009776:	f107 0314 	add.w	r3, r7, #20
 800977a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800977e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009782:	f107 0308 	add.w	r3, r7, #8
 8009786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009788:	4628      	mov	r0, r5
 800978a:	f002 fef1 	bl	800c570 <SDIO_Init>
 800978e:	4603      	mov	r3, r0
 8009790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e04f      	b.n	8009840 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80097a0:	4b29      	ldr	r3, [pc, #164]	@ (8009848 <HAL_SD_InitCard+0xf8>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f002 ff29 	bl	800c602 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80097b0:	4b25      	ldr	r3, [pc, #148]	@ (8009848 <HAL_SD_InitCard+0xf8>)
 80097b2:	2201      	movs	r2, #1
 80097b4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80097b6:	2002      	movs	r0, #2
 80097b8:	f7fb fcd8 	bl	800516c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fe69 	bl	800a494 <SD_PowerON>
 80097c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00b      	beq.n	80097e2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e02e      	b.n	8009840 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fd88 	bl	800a2f8 <SD_InitCard>
 80097e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	431a      	orrs	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e01b      	b.n	8009840 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009810:	4618      	mov	r0, r3
 8009812:	f002 ff88 	bl	800c726 <SDMMC_CmdBlockLength>
 8009816:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00f      	beq.n	800983e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a0a      	ldr	r2, [pc, #40]	@ (800984c <HAL_SD_InitCard+0xfc>)
 8009824:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	431a      	orrs	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3728      	adds	r7, #40	@ 0x28
 8009844:	46bd      	mov	sp, r7
 8009846:	bdb0      	pop	{r4, r5, r7, pc}
 8009848:	422580a0 	.word	0x422580a0
 800984c:	004005ff 	.word	0x004005ff

08009850 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b092      	sub	sp, #72	@ 0x48
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800985e:	f7fb fc79 	bl	8005154 <HAL_GetTick>
 8009862:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d107      	bne.n	8009882 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009876:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e1bd      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b01      	cmp	r3, #1
 800988c:	f040 81b0 	bne.w	8009bf0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009896:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	441a      	add	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d907      	bls.n	80098b4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e1a4      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2203      	movs	r2, #3
 80098b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2200      	movs	r2, #0
 80098c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d002      	beq.n	80098d2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ce:	025b      	lsls	r3, r3, #9
 80098d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098d2:	f04f 33ff 	mov.w	r3, #4294967295
 80098d6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	025b      	lsls	r3, r3, #9
 80098dc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80098de:	2390      	movs	r3, #144	@ 0x90
 80098e0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80098e2:	2302      	movs	r3, #2
 80098e4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80098ea:	2301      	movs	r3, #1
 80098ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f107 0214 	add.w	r2, r7, #20
 80098f6:	4611      	mov	r1, r2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f002 fee8 	bl	800c6ce <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d90a      	bls.n	800991a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2202      	movs	r2, #2
 8009908:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009910:	4618      	mov	r0, r3
 8009912:	f002 ff4c 	bl	800c7ae <SDMMC_CmdReadMultiBlock>
 8009916:	6478      	str	r0, [r7, #68]	@ 0x44
 8009918:	e009      	b.n	800992e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009926:	4618      	mov	r0, r3
 8009928:	f002 ff1f 	bl	800c76a <SDMMC_CmdReadSingleBlock>
 800992c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800992e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009930:	2b00      	cmp	r3, #0
 8009932:	d012      	beq.n	800995a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a7a      	ldr	r2, [pc, #488]	@ (8009b24 <HAL_SD_ReadBlocks+0x2d4>)
 800993a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009942:	431a      	orrs	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e151      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800995e:	e061      	b.n	8009a24 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009966:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d03c      	beq.n	80099e8 <HAL_SD_ReadBlocks+0x198>
 800996e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009970:	2b00      	cmp	r3, #0
 8009972:	d039      	beq.n	80099e8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009974:	2300      	movs	r3, #0
 8009976:	643b      	str	r3, [r7, #64]	@ 0x40
 8009978:	e033      	b.n	80099e2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f002 fe21 	bl	800c5c6 <SDIO_ReadFIFO>
 8009984:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009988:	b2da      	uxtb	r2, r3
 800998a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800998c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800998e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009990:	3301      	adds	r3, #1
 8009992:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009996:	3b01      	subs	r3, #1
 8009998:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800999a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800999c:	0a1b      	lsrs	r3, r3, #8
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80099a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a6:	3301      	adds	r3, #1
 80099a8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80099aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ac:	3b01      	subs	r3, #1
 80099ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80099b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b2:	0c1b      	lsrs	r3, r3, #16
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80099ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099bc:	3301      	adds	r3, #1
 80099be:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80099c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099c2:	3b01      	subs	r3, #1
 80099c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80099c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c8:	0e1b      	lsrs	r3, r3, #24
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80099d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d2:	3301      	adds	r3, #1
 80099d4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80099d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d8:	3b01      	subs	r3, #1
 80099da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80099dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099de:	3301      	adds	r3, #1
 80099e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80099e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099e4:	2b07      	cmp	r3, #7
 80099e6:	d9c8      	bls.n	800997a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80099e8:	f7fb fbb4 	bl	8005154 <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d902      	bls.n	80099fe <HAL_SD_ReadBlocks+0x1ae>
 80099f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d112      	bne.n	8009a24 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a48      	ldr	r2, [pc, #288]	@ (8009b24 <HAL_SD_ReadBlocks+0x2d4>)
 8009a04:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e0ec      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a2a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d096      	beq.n	8009960 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d022      	beq.n	8009a86 <HAL_SD_ReadBlocks+0x236>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d91f      	bls.n	8009a86 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d01b      	beq.n	8009a86 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f002 ff12 	bl	800c87c <SDMMC_CmdStopTransfer>
 8009a58:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d012      	beq.n	8009a86 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a2f      	ldr	r2, [pc, #188]	@ (8009b24 <HAL_SD_ReadBlocks+0x2d4>)
 8009a66:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a6e:	431a      	orrs	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e0bb      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a8c:	f003 0308 	and.w	r3, r3, #8
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d012      	beq.n	8009aba <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a22      	ldr	r2, [pc, #136]	@ (8009b24 <HAL_SD_ReadBlocks+0x2d4>)
 8009a9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa0:	f043 0208 	orr.w	r2, r3, #8
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e0a1      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d012      	beq.n	8009aee <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a15      	ldr	r2, [pc, #84]	@ (8009b24 <HAL_SD_ReadBlocks+0x2d4>)
 8009ace:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad4:	f043 0202 	orr.w	r2, r3, #2
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e087      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d064      	beq.n	8009bc6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a08      	ldr	r2, [pc, #32]	@ (8009b24 <HAL_SD_ReadBlocks+0x2d4>)
 8009b02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b08:	f043 0220 	orr.w	r2, r3, #32
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e06d      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>
 8009b22:	bf00      	nop
 8009b24:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f002 fd4a 	bl	800c5c6 <SDIO_ReadFIFO>
 8009b32:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3e:	3301      	adds	r3, #1
 8009b40:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b44:	3b01      	subs	r3, #1
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4a:	0a1b      	lsrs	r3, r3, #8
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b50:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b54:	3301      	adds	r3, #1
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b60:	0c1b      	lsrs	r3, r3, #16
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b66:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b70:	3b01      	subs	r3, #1
 8009b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b76:	0e1b      	lsrs	r3, r3, #24
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b7c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b80:	3301      	adds	r3, #1
 8009b82:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b86:	3b01      	subs	r3, #1
 8009b88:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009b8a:	f7fb fae3 	bl	8005154 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d902      	bls.n	8009ba0 <HAL_SD_ReadBlocks+0x350>
 8009b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d112      	bne.n	8009bc6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a18      	ldr	r2, [pc, #96]	@ (8009c08 <HAL_SD_ReadBlocks+0x3b8>)
 8009ba6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e01b      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <HAL_SD_ReadBlocks+0x38a>
 8009bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1a6      	bne.n	8009b28 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009be2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e006      	b.n	8009bfe <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
  }
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3748      	adds	r7, #72	@ 0x48
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	004005ff 	.word	0x004005ff

08009c0c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b092      	sub	sp, #72	@ 0x48
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c1a:	f7fb fa9b 	bl	8005154 <HAL_GetTick>
 8009c1e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d107      	bne.n	8009c3e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e165      	b.n	8009f0a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	f040 8158 	bne.w	8009efc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	441a      	add	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d907      	bls.n	8009c70 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c64:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e14c      	b.n	8009f0a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2203      	movs	r2, #3
 8009c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d002      	beq.n	8009c8e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8a:	025b      	lsls	r3, r3, #9
 8009c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c92:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	025b      	lsls	r3, r3, #9
 8009c98:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009c9a:	2390      	movs	r3, #144	@ 0x90
 8009c9c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f107 0218 	add.w	r2, r7, #24
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f002 fd0a 	bl	800c6ce <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d90a      	bls.n	8009cd6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f002 fdb2 	bl	800c836 <SDMMC_CmdWriteMultiBlock>
 8009cd2:	6478      	str	r0, [r7, #68]	@ 0x44
 8009cd4:	e009      	b.n	8009cea <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2210      	movs	r2, #16
 8009cda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f002 fd85 	bl	800c7f2 <SDMMC_CmdWriteSingleBlock>
 8009ce8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d012      	beq.n	8009d16 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a87      	ldr	r2, [pc, #540]	@ (8009f14 <HAL_SD_WriteBlocks+0x308>)
 8009cf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e0f9      	b.n	8009f0a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8009d1a:	e065      	b.n	8009de8 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d040      	beq.n	8009dac <HAL_SD_WriteBlocks+0x1a0>
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d03d      	beq.n	8009dac <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009d30:	2300      	movs	r3, #0
 8009d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d34:	e037      	b.n	8009da6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d3e:	3301      	adds	r3, #1
 8009d40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d44:	3b01      	subs	r3, #1
 8009d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	021a      	lsls	r2, r3, #8
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d56:	3301      	adds	r3, #1
 8009d58:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	041a      	lsls	r2, r3, #16
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d6e:	3301      	adds	r3, #1
 8009d70:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d74:	3b01      	subs	r3, #1
 8009d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	061a      	lsls	r2, r3, #24
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d86:	3301      	adds	r3, #1
 8009d88:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f107 0214 	add.w	r2, r7, #20
 8009d98:	4611      	mov	r1, r2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f002 fc20 	bl	800c5e0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009da2:	3301      	adds	r3, #1
 8009da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009da8:	2b07      	cmp	r3, #7
 8009daa:	d9c4      	bls.n	8009d36 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009dac:	f7fb f9d2 	bl	8005154 <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d902      	bls.n	8009dc2 <HAL_SD_WriteBlocks+0x1b6>
 8009dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d112      	bne.n	8009de8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a53      	ldr	r2, [pc, #332]	@ (8009f14 <HAL_SD_WriteBlocks+0x308>)
 8009dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e090      	b.n	8009f0a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dee:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d092      	beq.n	8009d1c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d022      	beq.n	8009e4a <HAL_SD_WriteBlocks+0x23e>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d91f      	bls.n	8009e4a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d01b      	beq.n	8009e4a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f002 fd30 	bl	800c87c <SDMMC_CmdStopTransfer>
 8009e1c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d012      	beq.n	8009e4a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a3a      	ldr	r2, [pc, #232]	@ (8009f14 <HAL_SD_WriteBlocks+0x308>)
 8009e2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e32:	431a      	orrs	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e05f      	b.n	8009f0a <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d012      	beq.n	8009e7e <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8009f14 <HAL_SD_WriteBlocks+0x308>)
 8009e5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e64:	f043 0208 	orr.w	r2, r3, #8
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e045      	b.n	8009f0a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d012      	beq.n	8009eb2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a20      	ldr	r2, [pc, #128]	@ (8009f14 <HAL_SD_WriteBlocks+0x308>)
 8009e92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e98:	f043 0202 	orr.w	r2, r3, #2
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e02b      	b.n	8009f0a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb8:	f003 0310 	and.w	r3, r3, #16
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d012      	beq.n	8009ee6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a13      	ldr	r2, [pc, #76]	@ (8009f14 <HAL_SD_WriteBlocks+0x308>)
 8009ec6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ecc:	f043 0210 	orr.w	r2, r3, #16
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e011      	b.n	8009f0a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009eee:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e006      	b.n	8009f0a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f00:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
  }
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3748      	adds	r7, #72	@ 0x48
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	004005ff 	.word	0x004005ff

08009f18 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f26:	0f9b      	lsrs	r3, r3, #30
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f32:	0e9b      	lsrs	r3, r3, #26
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	f003 030f 	and.w	r3, r3, #15
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f44:	0e1b      	lsrs	r3, r3, #24
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f56:	0c1b      	lsrs	r3, r3, #16
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f62:	0a1b      	lsrs	r3, r3, #8
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f78:	0d1b      	lsrs	r3, r3, #20
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f84:	0c1b      	lsrs	r3, r3, #16
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f003 030f 	and.w	r3, r3, #15
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f96:	0bdb      	lsrs	r3, r3, #15
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fa8:	0b9b      	lsrs	r3, r3, #14
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fba:	0b5b      	lsrs	r3, r3, #13
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fcc:	0b1b      	lsrs	r3, r3, #12
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d163      	bne.n	800a0b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fec:	009a      	lsls	r2, r3, #2
 8009fee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009ff8:	0f92      	lsrs	r2, r2, #30
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a004:	0edb      	lsrs	r3, r3, #27
 800a006:	b2db      	uxtb	r3, r3
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a016:	0e1b      	lsrs	r3, r3, #24
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	f003 0307 	and.w	r3, r3, #7
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a028:	0d5b      	lsrs	r3, r3, #21
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	f003 0307 	and.w	r3, r3, #7
 800a030:	b2da      	uxtb	r2, r3
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a03a:	0c9b      	lsrs	r3, r3, #18
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	f003 0307 	and.w	r3, r3, #7
 800a042:	b2da      	uxtb	r2, r3
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a04c:	0bdb      	lsrs	r3, r3, #15
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	f003 0307 	and.w	r3, r3, #7
 800a054:	b2da      	uxtb	r2, r3
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	7e1b      	ldrb	r3, [r3, #24]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	f003 0307 	and.w	r3, r3, #7
 800a06e:	3302      	adds	r3, #2
 800a070:	2201      	movs	r2, #1
 800a072:	fa02 f303 	lsl.w	r3, r2, r3
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a07a:	fb03 f202 	mul.w	r2, r3, r2
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	7a1b      	ldrb	r3, [r3, #8]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	f003 030f 	and.w	r3, r3, #15
 800a08c:	2201      	movs	r2, #1
 800a08e:	409a      	lsls	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a09c:	0a52      	lsrs	r2, r2, #9
 800a09e:	fb03 f202 	mul.w	r2, r3, r2
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0ac:	661a      	str	r2, [r3, #96]	@ 0x60
 800a0ae:	e031      	b.n	800a114 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d11d      	bne.n	800a0f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0bc:	041b      	lsls	r3, r3, #16
 800a0be:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0c6:	0c1b      	lsrs	r3, r3, #16
 800a0c8:	431a      	orrs	r2, r3
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	029a      	lsls	r2, r3, #10
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0e8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	661a      	str	r2, [r3, #96]	@ 0x60
 800a0f2:	e00f      	b.n	800a114 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a58      	ldr	r2, [pc, #352]	@ (800a25c <HAL_SD_GetCardCSD+0x344>)
 800a0fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a100:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e09d      	b.n	800a250 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a118:	0b9b      	lsrs	r3, r3, #14
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	b2da      	uxtb	r2, r3
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a12a:	09db      	lsrs	r3, r3, #7
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a132:	b2da      	uxtb	r2, r3
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a142:	b2da      	uxtb	r2, r3
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a14c:	0fdb      	lsrs	r3, r3, #31
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a158:	0f5b      	lsrs	r3, r3, #29
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	b2da      	uxtb	r2, r3
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a16a:	0e9b      	lsrs	r3, r3, #26
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	b2da      	uxtb	r2, r3
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a17c:	0d9b      	lsrs	r3, r3, #22
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	b2da      	uxtb	r2, r3
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a18e:	0d5b      	lsrs	r3, r3, #21
 800a190:	b2db      	uxtb	r3, r3
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	b2da      	uxtb	r2, r3
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1aa:	0c1b      	lsrs	r3, r3, #16
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1be:	0bdb      	lsrs	r3, r3, #15
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1d2:	0b9b      	lsrs	r3, r3, #14
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1e6:	0b5b      	lsrs	r3, r3, #13
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1fa:	0b1b      	lsrs	r3, r3, #12
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	b2da      	uxtb	r2, r3
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a20e:	0a9b      	lsrs	r3, r3, #10
 800a210:	b2db      	uxtb	r3, r3
 800a212:	f003 0303 	and.w	r3, r3, #3
 800a216:	b2da      	uxtb	r2, r3
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a222:	0a1b      	lsrs	r3, r3, #8
 800a224:	b2db      	uxtb	r3, r3
 800a226:	f003 0303 	and.w	r3, r3, #3
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a236:	085b      	lsrs	r3, r3, #1
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	004005ff 	.word	0x004005ff

0800a260 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a2c4:	f107 030c 	add.w	r3, r7, #12
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f970 	bl	800a5b0 <SD_SendStatus>
 800a2d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d005      	beq.n	800a2e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	0a5b      	lsrs	r3, r3, #9
 800a2e8:	f003 030f 	and.w	r3, r3, #15
 800a2ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a2ee:	693b      	ldr	r3, [r7, #16]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a2f8:	b5b0      	push	{r4, r5, r7, lr}
 800a2fa:	b094      	sub	sp, #80	@ 0x50
 800a2fc:	af04      	add	r7, sp, #16
 800a2fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a300:	2301      	movs	r3, #1
 800a302:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4618      	mov	r0, r3
 800a30a:	f002 f988 	bl	800c61e <SDIO_GetPowerState>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d102      	bne.n	800a31a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a314:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a318:	e0b8      	b.n	800a48c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d02f      	beq.n	800a382 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4618      	mov	r0, r3
 800a328:	f002 fb6f 	bl	800ca0a <SDMMC_CmdSendCID>
 800a32c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <SD_InitCard+0x40>
    {
      return errorstate;
 800a334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a336:	e0a9      	b.n	800a48c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2100      	movs	r1, #0
 800a33e:	4618      	mov	r0, r3
 800a340:	f002 f9b2 	bl	800c6a8 <SDIO_GetResponse>
 800a344:	4602      	mov	r2, r0
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2104      	movs	r1, #4
 800a350:	4618      	mov	r0, r3
 800a352:	f002 f9a9 	bl	800c6a8 <SDIO_GetResponse>
 800a356:	4602      	mov	r2, r0
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2108      	movs	r1, #8
 800a362:	4618      	mov	r0, r3
 800a364:	f002 f9a0 	bl	800c6a8 <SDIO_GetResponse>
 800a368:	4602      	mov	r2, r0
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	210c      	movs	r1, #12
 800a374:	4618      	mov	r0, r3
 800a376:	f002 f997 	bl	800c6a8 <SDIO_GetResponse>
 800a37a:	4602      	mov	r2, r0
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a386:	2b03      	cmp	r3, #3
 800a388:	d00d      	beq.n	800a3a6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f107 020e 	add.w	r2, r7, #14
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f002 fb75 	bl	800ca84 <SDMMC_CmdSetRelAdd>
 800a39a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <SD_InitCard+0xae>
    {
      return errorstate;
 800a3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a4:	e072      	b.n	800a48c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d036      	beq.n	800a41c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a3ae:	89fb      	ldrh	r3, [r7, #14]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3be:	041b      	lsls	r3, r3, #16
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	f002 fb3f 	bl	800ca46 <SDMMC_CmdSendCSD>
 800a3c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d2:	e05b      	b.n	800a48c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2100      	movs	r1, #0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f002 f964 	bl	800c6a8 <SDIO_GetResponse>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f002 f95b 	bl	800c6a8 <SDIO_GetResponse>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2108      	movs	r1, #8
 800a3fe:	4618      	mov	r0, r3
 800a400:	f002 f952 	bl	800c6a8 <SDIO_GetResponse>
 800a404:	4602      	mov	r2, r0
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	210c      	movs	r1, #12
 800a410:	4618      	mov	r0, r3
 800a412:	f002 f949 	bl	800c6a8 <SDIO_GetResponse>
 800a416:	4602      	mov	r2, r0
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2104      	movs	r1, #4
 800a422:	4618      	mov	r0, r3
 800a424:	f002 f940 	bl	800c6a8 <SDIO_GetResponse>
 800a428:	4603      	mov	r3, r0
 800a42a:	0d1a      	lsrs	r2, r3, #20
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a430:	f107 0310 	add.w	r3, r7, #16
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff fd6e 	bl	8009f18 <HAL_SD_GetCardCSD>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a442:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a446:	e021      	b.n	800a48c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6819      	ldr	r1, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a450:	041b      	lsls	r3, r3, #16
 800a452:	2200      	movs	r2, #0
 800a454:	461c      	mov	r4, r3
 800a456:	4615      	mov	r5, r2
 800a458:	4622      	mov	r2, r4
 800a45a:	462b      	mov	r3, r5
 800a45c:	4608      	mov	r0, r1
 800a45e:	f002 fa2f 	bl	800c8c0 <SDMMC_CmdSelDesel>
 800a462:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <SD_InitCard+0x176>
  {
    return errorstate;
 800a46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a46c:	e00e      	b.n	800a48c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681d      	ldr	r5, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	466c      	mov	r4, sp
 800a476:	f103 0210 	add.w	r2, r3, #16
 800a47a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a47c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a480:	3304      	adds	r3, #4
 800a482:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a484:	4628      	mov	r0, r5
 800a486:	f002 f873 	bl	800c570 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3740      	adds	r7, #64	@ 0x40
 800a490:	46bd      	mov	sp, r7
 800a492:	bdb0      	pop	{r4, r5, r7, pc}

0800a494 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f002 fa2a 	bl	800c906 <SDMMC_CmdGoIdleState>
 800a4b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <SD_PowerON+0x2a>
  {
    return errorstate;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	e072      	b.n	800a5a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f002 fa3d 	bl	800c942 <SDMMC_CmdOperCond>
 800a4c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00d      	beq.n	800a4ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f002 fa13 	bl	800c906 <SDMMC_CmdGoIdleState>
 800a4e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d004      	beq.n	800a4f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	e05b      	b.n	800a5a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d137      	bne.n	800a56a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2100      	movs	r1, #0
 800a500:	4618      	mov	r0, r3
 800a502:	f002 fa3d 	bl	800c980 <SDMMC_CmdAppCommand>
 800a506:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d02d      	beq.n	800a56a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a50e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a512:	e047      	b.n	800a5a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2100      	movs	r1, #0
 800a51a:	4618      	mov	r0, r3
 800a51c:	f002 fa30 	bl	800c980 <SDMMC_CmdAppCommand>
 800a520:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <SD_PowerON+0x98>
    {
      return errorstate;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	e03b      	b.n	800a5a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	491e      	ldr	r1, [pc, #120]	@ (800a5ac <SD_PowerON+0x118>)
 800a532:	4618      	mov	r0, r3
 800a534:	f002 fa46 	bl	800c9c4 <SDMMC_CmdAppOperCommand>
 800a538:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a540:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a544:	e02e      	b.n	800a5a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2100      	movs	r1, #0
 800a54c:	4618      	mov	r0, r3
 800a54e:	f002 f8ab 	bl	800c6a8 <SDIO_GetResponse>
 800a552:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	0fdb      	lsrs	r3, r3, #31
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d101      	bne.n	800a560 <SD_PowerON+0xcc>
 800a55c:	2301      	movs	r3, #1
 800a55e:	e000      	b.n	800a562 <SD_PowerON+0xce>
 800a560:	2300      	movs	r3, #0
 800a562:	613b      	str	r3, [r7, #16]

    count++;
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	3301      	adds	r3, #1
 800a568:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a570:	4293      	cmp	r3, r2
 800a572:	d802      	bhi.n	800a57a <SD_PowerON+0xe6>
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0cc      	beq.n	800a514 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a580:	4293      	cmp	r3, r2
 800a582:	d902      	bls.n	800a58a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a584:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a588:	e00c      	b.n	800a5a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	645a      	str	r2, [r3, #68]	@ 0x44
 800a59a:	e002      	b.n	800a5a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	c1100000 	.word	0xc1100000

0800a5b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d102      	bne.n	800a5c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a5c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a5c4:	e018      	b.n	800a5f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5ce:	041b      	lsls	r3, r3, #16
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	f002 fa77 	bl	800cac6 <SDMMC_CmdSendStatus>
 800a5d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	e009      	b.n	800a5f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f002 f85c 	bl	800c6a8 <SDIO_GetResponse>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e07b      	b.n	800a70a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a616:	2b00      	cmp	r3, #0
 800a618:	d108      	bne.n	800a62c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a622:	d009      	beq.n	800a638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	61da      	str	r2, [r3, #28]
 800a62a:	e005      	b.n	800a638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d106      	bne.n	800a658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7f7 ff80 	bl	8002558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a66e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a680:	431a      	orrs	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a68a:	431a      	orrs	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	f003 0302 	and.w	r3, r3, #2
 800a694:	431a      	orrs	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a1b      	ldr	r3, [r3, #32]
 800a6b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6bc:	ea42 0103 	orr.w	r1, r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	0c1b      	lsrs	r3, r3, #16
 800a6d6:	f003 0104 	and.w	r1, r3, #4
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6de:	f003 0210 	and.w	r2, r3, #16
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69da      	ldr	r2, [r3, #28]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a6f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	4613      	mov	r3, r2
 800a720:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <HAL_SPI_Transmit_IT+0x1a>
 800a728:	88fb      	ldrh	r3, [r7, #6]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e06a      	b.n	800a808 <HAL_SPI_Transmit_IT+0xf4>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d001      	beq.n	800a742 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800a73e:	2302      	movs	r3, #2
 800a740:	e062      	b.n	800a808 <HAL_SPI_Transmit_IT+0xf4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d101      	bne.n	800a750 <HAL_SPI_Transmit_IT+0x3c>
 800a74c:	2302      	movs	r3, #2
 800a74e:	e05b      	b.n	800a808 <HAL_SPI_Transmit_IT+0xf4>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2203      	movs	r2, #3
 800a75c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	88fa      	ldrh	r2, [r7, #6]
 800a770:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	88fa      	ldrh	r2, [r7, #6]
 800a776:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d003      	beq.n	800a7a0 <HAL_SPI_Transmit_IT+0x8c>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4a1e      	ldr	r2, [pc, #120]	@ (800a814 <HAL_SPI_Transmit_IT+0x100>)
 800a79c:	645a      	str	r2, [r3, #68]	@ 0x44
 800a79e:	e002      	b.n	800a7a6 <HAL_SPI_Transmit_IT+0x92>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4a1d      	ldr	r2, [pc, #116]	@ (800a818 <HAL_SPI_Transmit_IT+0x104>)
 800a7a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7ae:	d10f      	bne.n	800a7d0 <HAL_SPI_Transmit_IT+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a7ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7da:	2b40      	cmp	r3, #64	@ 0x40
 800a7dc:	d007      	beq.n	800a7ee <HAL_SPI_Transmit_IT+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7ec:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800a804:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	0800aa9b 	.word	0x0800aa9b
 800a818:	0800aa55 	.word	0x0800aa55

0800a81c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b088      	sub	sp, #32
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10e      	bne.n	800a85c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a844:	2b00      	cmp	r3, #0
 800a846:	d009      	beq.n	800a85c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d004      	beq.n	800a85c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	4798      	blx	r3
    return;
 800a85a:	e0ce      	b.n	800a9fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d009      	beq.n	800a87a <HAL_SPI_IRQHandler+0x5e>
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d004      	beq.n	800a87a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	4798      	blx	r3
    return;
 800a878:	e0bf      	b.n	800a9fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <HAL_SPI_IRQHandler+0x7e>
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 80b0 	beq.w	800a9fa <HAL_SPI_IRQHandler+0x1de>
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	f003 0320 	and.w	r3, r3, #32
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80aa 	beq.w	800a9fa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d023      	beq.n	800a8f8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d011      	beq.n	800a8e0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8c0:	f043 0204 	orr.w	r2, r3, #4
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	617b      	str	r3, [r7, #20]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	617b      	str	r3, [r7, #20]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	e00b      	b.n	800a8f8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	613b      	str	r3, [r7, #16]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	613b      	str	r3, [r7, #16]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	613b      	str	r3, [r7, #16]
 800a8f4:	693b      	ldr	r3, [r7, #16]
        return;
 800a8f6:	e080      	b.n	800a9fa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d014      	beq.n	800a92c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a906:	f043 0201 	orr.w	r2, r3, #1
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a90e:	2300      	movs	r3, #0
 800a910:	60fb      	str	r3, [r7, #12]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	60fb      	str	r3, [r7, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00c      	beq.n	800a950 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a93a:	f043 0208 	orr.w	r2, r3, #8
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a942:	2300      	movs	r3, #0
 800a944:	60bb      	str	r3, [r7, #8]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	60bb      	str	r3, [r7, #8]
 800a94e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a954:	2b00      	cmp	r3, #0
 800a956:	d04f      	beq.n	800a9f8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a966:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	f003 0302 	and.w	r3, r3, #2
 800a976:	2b00      	cmp	r3, #0
 800a978:	d104      	bne.n	800a984 <HAL_SPI_IRQHandler+0x168>
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d034      	beq.n	800a9ee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f022 0203 	bic.w	r2, r2, #3
 800a992:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d011      	beq.n	800a9c0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a0:	4a17      	ldr	r2, [pc, #92]	@ (800aa00 <HAL_SPI_IRQHandler+0x1e4>)
 800a9a2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fb fcf3 	bl	8006394 <HAL_DMA_Abort_IT>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d005      	beq.n	800a9c0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d016      	beq.n	800a9f6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9cc:	4a0c      	ldr	r2, [pc, #48]	@ (800aa00 <HAL_SPI_IRQHandler+0x1e4>)
 800a9ce:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fb fcdd 	bl	8006394 <HAL_DMA_Abort_IT>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00a      	beq.n	800a9f6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800a9ec:	e003      	b.n	800a9f6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f812 	bl	800aa18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a9f4:	e000      	b.n	800a9f8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800a9f6:	bf00      	nop
    return;
 800a9f8:	bf00      	nop
  }
}
 800a9fa:	3720      	adds	r7, #32
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	0800aa2d 	.word	0x0800aa2d

0800aa04 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7ff ffe6 	bl	800aa18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa4c:	bf00      	nop
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	330c      	adds	r3, #12
 800aa66:	7812      	ldrb	r2, [r2, #0]
 800aa68:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f903 	bl	800ac98 <SPI_CloseTx_ISR>
  }
}
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b082      	sub	sp, #8
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa6:	881a      	ldrh	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aab2:	1c9a      	adds	r2, r3, #2
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	3b01      	subs	r3, #1
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f8e1 	bl	800ac98 <SPI_CloseTx_ISR>
  }
}
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	4613      	mov	r3, r2
 800aaee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800aaf0:	f7fa fb30 	bl	8005154 <HAL_GetTick>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf8:	1a9b      	subs	r3, r3, r2
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4413      	add	r3, r2
 800aafe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ab00:	f7fa fb28 	bl	8005154 <HAL_GetTick>
 800ab04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ab06:	4b39      	ldr	r3, [pc, #228]	@ (800abec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	015b      	lsls	r3, r3, #5
 800ab0c:	0d1b      	lsrs	r3, r3, #20
 800ab0e:	69fa      	ldr	r2, [r7, #28]
 800ab10:	fb02 f303 	mul.w	r3, r2, r3
 800ab14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab16:	e054      	b.n	800abc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1e:	d050      	beq.n	800abc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ab20:	f7fa fb18 	bl	8005154 <HAL_GetTick>
 800ab24:	4602      	mov	r2, r0
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d902      	bls.n	800ab36 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d13d      	bne.n	800abb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ab44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab4e:	d111      	bne.n	800ab74 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab58:	d004      	beq.n	800ab64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab62:	d107      	bne.n	800ab74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab7c:	d10f      	bne.n	800ab9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ab9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800abae:	2303      	movs	r3, #3
 800abb0:	e017      	b.n	800abe2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	4013      	ands	r3, r2
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	429a      	cmp	r2, r3
 800abd0:	bf0c      	ite	eq
 800abd2:	2301      	moveq	r3, #1
 800abd4:	2300      	movne	r3, #0
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	461a      	mov	r2, r3
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d19b      	bne.n	800ab18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3720      	adds	r7, #32
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	20000004 	.word	0x20000004

0800abf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2201      	movs	r2, #1
 800ac04:	2102      	movs	r1, #2
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f7ff ff6a 	bl	800aae0 <SPI_WaitFlagStateUntilTimeout>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d007      	beq.n	800ac22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac16:	f043 0220 	orr.w	r2, r3, #32
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e032      	b.n	800ac88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ac22:	4b1b      	ldr	r3, [pc, #108]	@ (800ac90 <SPI_EndRxTxTransaction+0xa0>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a1b      	ldr	r2, [pc, #108]	@ (800ac94 <SPI_EndRxTxTransaction+0xa4>)
 800ac28:	fba2 2303 	umull	r2, r3, r2, r3
 800ac2c:	0d5b      	lsrs	r3, r3, #21
 800ac2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac40:	d112      	bne.n	800ac68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2180      	movs	r1, #128	@ 0x80
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7ff ff47 	bl	800aae0 <SPI_WaitFlagStateUntilTimeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d016      	beq.n	800ac86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac5c:	f043 0220 	orr.w	r2, r3, #32
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e00f      	b.n	800ac88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00a      	beq.n	800ac84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac7e:	2b80      	cmp	r3, #128	@ 0x80
 800ac80:	d0f2      	beq.n	800ac68 <SPI_EndRxTxTransaction+0x78>
 800ac82:	e000      	b.n	800ac86 <SPI_EndRxTxTransaction+0x96>
        break;
 800ac84:	bf00      	nop
  }

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20000004 	.word	0x20000004
 800ac94:	165e9f81 	.word	0x165e9f81

0800ac98 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800aca0:	4b2c      	ldr	r3, [pc, #176]	@ (800ad54 <SPI_CloseTx_ISR+0xbc>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a2c      	ldr	r2, [pc, #176]	@ (800ad58 <SPI_CloseTx_ISR+0xc0>)
 800aca6:	fba2 2303 	umull	r2, r3, r2, r3
 800acaa:	0a5b      	lsrs	r3, r3, #9
 800acac:	2264      	movs	r2, #100	@ 0x64
 800acae:	fb02 f303 	mul.w	r3, r2, r3
 800acb2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acb4:	f7fa fa4e 	bl	8005154 <HAL_GetTick>
 800acb8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d106      	bne.n	800acce <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acc4:	f043 0220 	orr.w	r2, r3, #32
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800accc:	e009      	b.n	800ace2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f003 0302 	and.w	r3, r3, #2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0eb      	beq.n	800acba <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800acf0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	2164      	movs	r1, #100	@ 0x64
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7ff ff7a 	bl	800abf0 <SPI_EndRxTxTransaction>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d005      	beq.n	800ad0e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad06:	f043 0220 	orr.w	r2, r3, #32
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10a      	bne.n	800ad2c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	60fb      	str	r3, [r7, #12]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d003      	beq.n	800ad44 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff fe6b 	bl	800aa18 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800ad42:	e002      	b.n	800ad4a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f7ff fe5d 	bl	800aa04 <HAL_SPI_TxCpltCallback>
}
 800ad4a:	bf00      	nop
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000004 	.word	0x20000004
 800ad58:	057619f1 	.word	0x057619f1

0800ad5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e042      	b.n	800adf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d106      	bne.n	800ad88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7f7 fdfe 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2224      	movs	r2, #36	@ 0x24
 800ad8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ad9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f001 f971 	bl	800c088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	691a      	ldr	r2, [r3, #16]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800adb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	695a      	ldr	r2, [r3, #20]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800add4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2220      	movs	r2, #32
 800ade0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e04a      	b.n	800aea4 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7f7 fdae 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2224      	movs	r2, #36	@ 0x24
 800ae2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68da      	ldr	r2, [r3, #12]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f001 f921 	bl	800c088 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	695a      	ldr	r2, [r3, #20]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800ae64:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	695a      	ldr	r2, [r3, #20]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f042 0208 	orr.w	r2, r2, #8
 800ae74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2220      	movs	r2, #32
 800ae90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2220      	movs	r2, #32
 800ae98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08a      	sub	sp, #40	@ 0x28
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	603b      	str	r3, [r7, #0]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b20      	cmp	r3, #32
 800aeca:	d175      	bne.n	800afb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d002      	beq.n	800aed8 <HAL_UART_Transmit+0x2c>
 800aed2:	88fb      	ldrh	r3, [r7, #6]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e06e      	b.n	800afba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2221      	movs	r2, #33	@ 0x21
 800aee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aeea:	f7fa f933 	bl	8005154 <HAL_GetTick>
 800aeee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	88fa      	ldrh	r2, [r7, #6]
 800aef4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	88fa      	ldrh	r2, [r7, #6]
 800aefa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af04:	d108      	bne.n	800af18 <HAL_UART_Transmit+0x6c>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d104      	bne.n	800af18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800af0e:	2300      	movs	r3, #0
 800af10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	61bb      	str	r3, [r7, #24]
 800af16:	e003      	b.n	800af20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af20:	e02e      	b.n	800af80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	2200      	movs	r2, #0
 800af2a:	2180      	movs	r1, #128	@ 0x80
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f000 fdf2 	bl	800bb16 <UART_WaitOnFlagUntilTimeout>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d005      	beq.n	800af44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2220      	movs	r2, #32
 800af3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e03a      	b.n	800afba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	3302      	adds	r3, #2
 800af5e:	61bb      	str	r3, [r7, #24]
 800af60:	e007      	b.n	800af72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	781a      	ldrb	r2, [r3, #0]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	3301      	adds	r3, #1
 800af70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800af76:	b29b      	uxth	r3, r3
 800af78:	3b01      	subs	r3, #1
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800af84:	b29b      	uxth	r3, r3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1cb      	bne.n	800af22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2200      	movs	r2, #0
 800af92:	2140      	movs	r1, #64	@ 0x40
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 fdbe 	bl	800bb16 <UART_WaitOnFlagUntilTimeout>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e006      	b.n	800afba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2220      	movs	r2, #32
 800afb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800afb4:	2300      	movs	r3, #0
 800afb6:	e000      	b.n	800afba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800afb8:	2302      	movs	r3, #2
  }
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3720      	adds	r7, #32
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b08a      	sub	sp, #40	@ 0x28
 800afc6:	af02      	add	r7, sp, #8
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	603b      	str	r3, [r7, #0]
 800afce:	4613      	mov	r3, r2
 800afd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b20      	cmp	r3, #32
 800afe0:	f040 8081 	bne.w	800b0e6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <HAL_UART_Receive+0x2e>
 800afea:	88fb      	ldrh	r3, [r7, #6]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e079      	b.n	800b0e8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2222      	movs	r2, #34	@ 0x22
 800affe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b008:	f7fa f8a4 	bl	8005154 <HAL_GetTick>
 800b00c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	88fa      	ldrh	r2, [r7, #6]
 800b012:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	88fa      	ldrh	r2, [r7, #6]
 800b018:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b022:	d108      	bne.n	800b036 <HAL_UART_Receive+0x74>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d104      	bne.n	800b036 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	61bb      	str	r3, [r7, #24]
 800b034:	e003      	b.n	800b03e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800b03e:	e047      	b.n	800b0d0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2200      	movs	r2, #0
 800b048:	2120      	movs	r1, #32
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f000 fd63 	bl	800bb16 <UART_WaitOnFlagUntilTimeout>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d005      	beq.n	800b062 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2220      	movs	r2, #32
 800b05a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e042      	b.n	800b0e8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10c      	bne.n	800b082 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	b29b      	uxth	r3, r3
 800b070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b074:	b29a      	uxth	r2, r3
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	3302      	adds	r3, #2
 800b07e:	61bb      	str	r3, [r7, #24]
 800b080:	e01f      	b.n	800b0c2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b08a:	d007      	beq.n	800b09c <HAL_UART_Receive+0xda>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <HAL_UART_Receive+0xe8>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d106      	bne.n	800b0aa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	701a      	strb	r2, [r3, #0]
 800b0a8:	e008      	b.n	800b0bc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1b2      	bne.n	800b040 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	e000      	b.n	800b0e8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b0e6:	2302      	movs	r3, #2
  }
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3720      	adds	r7, #32
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b08c      	sub	sp, #48	@ 0x30
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b104:	b2db      	uxtb	r3, r3
 800b106:	2b20      	cmp	r3, #32
 800b108:	d156      	bne.n	800b1b8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <HAL_UART_Transmit_DMA+0x26>
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e04f      	b.n	800b1ba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	88fa      	ldrh	r2, [r7, #6]
 800b124:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	88fa      	ldrh	r2, [r7, #6]
 800b12a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2221      	movs	r2, #33	@ 0x21
 800b136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b13e:	4a21      	ldr	r2, [pc, #132]	@ (800b1c4 <HAL_UART_Transmit_DMA+0xd4>)
 800b140:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b146:	4a20      	ldr	r2, [pc, #128]	@ (800b1c8 <HAL_UART_Transmit_DMA+0xd8>)
 800b148:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b14e:	4a1f      	ldr	r2, [pc, #124]	@ (800b1cc <HAL_UART_Transmit_DMA+0xdc>)
 800b150:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b156:	2200      	movs	r2, #0
 800b158:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b15a:	f107 0308 	add.w	r3, r7, #8
 800b15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b166:	6819      	ldr	r1, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3304      	adds	r3, #4
 800b16e:	461a      	mov	r2, r3
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	f7fb f847 	bl	8006204 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b17e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3314      	adds	r3, #20
 800b186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	e853 3f00 	ldrex	r3, [r3]
 800b18e:	617b      	str	r3, [r7, #20]
   return(result);
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b196:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	3314      	adds	r3, #20
 800b19e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1a0:	627a      	str	r2, [r7, #36]	@ 0x24
 800b1a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a4:	6a39      	ldr	r1, [r7, #32]
 800b1a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1a8:	e841 2300 	strex	r3, r2, [r1]
 800b1ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1e5      	bne.n	800b180 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	e000      	b.n	800b1ba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b1b8:	2302      	movs	r3, #2
  }
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3730      	adds	r7, #48	@ 0x30
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	0800b865 	.word	0x0800b865
 800b1c8:	0800b8ff 	.word	0x0800b8ff
 800b1cc:	0800ba83 	.word	0x0800ba83

0800b1d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b20      	cmp	r3, #32
 800b1e8:	d112      	bne.n	800b210 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <HAL_UART_Receive_DMA+0x26>
 800b1f0:	88fb      	ldrh	r3, [r7, #6]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e00b      	b.n	800b212 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b200:	88fb      	ldrh	r3, [r7, #6]
 800b202:	461a      	mov	r2, r3
 800b204:	68b9      	ldr	r1, [r7, #8]
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f000 fcde 	bl	800bbc8 <UART_Start_Receive_DMA>
 800b20c:	4603      	mov	r3, r0
 800b20e:	e000      	b.n	800b212 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b210:	2302      	movs	r3, #2
  }
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b0ba      	sub	sp, #232	@ 0xe8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	695b      	ldr	r3, [r3, #20]
 800b23e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b242:	2300      	movs	r3, #0
 800b244:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b248:	2300      	movs	r3, #0
 800b24a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b252:	f003 030f 	and.w	r3, r3, #15
 800b256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b25a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10f      	bne.n	800b282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b266:	f003 0320 	and.w	r3, r3, #32
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d009      	beq.n	800b282 <HAL_UART_IRQHandler+0x66>
 800b26e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b272:	f003 0320 	and.w	r3, r3, #32
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fe45 	bl	800bf0a <UART_Receive_IT>
      return;
 800b280:	e25b      	b.n	800b73a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 80de 	beq.w	800b448 <HAL_UART_IRQHandler+0x22c>
 800b28c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d106      	bne.n	800b2a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b29c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 80d1 	beq.w	800b448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2aa:	f003 0301 	and.w	r3, r3, #1
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00b      	beq.n	800b2ca <HAL_UART_IRQHandler+0xae>
 800b2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d005      	beq.n	800b2ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2c2:	f043 0201 	orr.w	r2, r3, #1
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2ce:	f003 0304 	and.w	r3, r3, #4
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00b      	beq.n	800b2ee <HAL_UART_IRQHandler+0xd2>
 800b2d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d005      	beq.n	800b2ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2e6:	f043 0202 	orr.w	r2, r3, #2
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00b      	beq.n	800b312 <HAL_UART_IRQHandler+0xf6>
 800b2fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	2b00      	cmp	r3, #0
 800b304:	d005      	beq.n	800b312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b30a:	f043 0204 	orr.w	r2, r3, #4
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b316:	f003 0308 	and.w	r3, r3, #8
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d011      	beq.n	800b342 <HAL_UART_IRQHandler+0x126>
 800b31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b322:	f003 0320 	and.w	r3, r3, #32
 800b326:	2b00      	cmp	r3, #0
 800b328:	d105      	bne.n	800b336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b32a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d005      	beq.n	800b342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b33a:	f043 0208 	orr.w	r2, r3, #8
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b346:	2b00      	cmp	r3, #0
 800b348:	f000 81f2 	beq.w	800b730 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b350:	f003 0320 	and.w	r3, r3, #32
 800b354:	2b00      	cmp	r3, #0
 800b356:	d008      	beq.n	800b36a <HAL_UART_IRQHandler+0x14e>
 800b358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b35c:	f003 0320 	and.w	r3, r3, #32
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fdd0 	bl	800bf0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b374:	2b40      	cmp	r3, #64	@ 0x40
 800b376:	bf0c      	ite	eq
 800b378:	2301      	moveq	r3, #1
 800b37a:	2300      	movne	r3, #0
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b386:	f003 0308 	and.w	r3, r3, #8
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d103      	bne.n	800b396 <HAL_UART_IRQHandler+0x17a>
 800b38e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b392:	2b00      	cmp	r3, #0
 800b394:	d04f      	beq.n	800b436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fcd8 	bl	800bd4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3a6:	2b40      	cmp	r3, #64	@ 0x40
 800b3a8:	d141      	bne.n	800b42e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3314      	adds	r3, #20
 800b3b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3b8:	e853 3f00 	ldrex	r3, [r3]
 800b3bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b3c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3314      	adds	r3, #20
 800b3d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b3d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b3da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b3e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b3e6:	e841 2300 	strex	r3, r2, [r1]
 800b3ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b3ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1d9      	bne.n	800b3aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d013      	beq.n	800b426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b402:	4a7e      	ldr	r2, [pc, #504]	@ (800b5fc <HAL_UART_IRQHandler+0x3e0>)
 800b404:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fa ffc2 	bl	8006394 <HAL_DMA_Abort_IT>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d016      	beq.n	800b444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b41a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b420:	4610      	mov	r0, r2
 800b422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b424:	e00e      	b.n	800b444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f99e 	bl	800b768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b42c:	e00a      	b.n	800b444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f99a 	bl	800b768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b434:	e006      	b.n	800b444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f996 	bl	800b768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b442:	e175      	b.n	800b730 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b444:	bf00      	nop
    return;
 800b446:	e173      	b.n	800b730 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	f040 814f 	bne.w	800b6f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b456:	f003 0310 	and.w	r3, r3, #16
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 8148 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b464:	f003 0310 	and.w	r3, r3, #16
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 8141 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b46e:	2300      	movs	r3, #0
 800b470:	60bb      	str	r3, [r7, #8]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	60bb      	str	r3, [r7, #8]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	60bb      	str	r3, [r7, #8]
 800b482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b48e:	2b40      	cmp	r3, #64	@ 0x40
 800b490:	f040 80b6 	bne.w	800b600 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 8145 	beq.w	800b734 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b4ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	f080 813e 	bcs.w	800b734 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4ca:	f000 8088 	beq.w	800b5de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	330c      	adds	r3, #12
 800b4d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b4dc:	e853 3f00 	ldrex	r3, [r3]
 800b4e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b4e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b4e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	330c      	adds	r3, #12
 800b4f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b4fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b4fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b506:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1d9      	bne.n	800b4ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3314      	adds	r3, #20
 800b520:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b522:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b524:	e853 3f00 	ldrex	r3, [r3]
 800b528:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b52a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b52c:	f023 0301 	bic.w	r3, r3, #1
 800b530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3314      	adds	r3, #20
 800b53a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b53e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b542:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b544:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b546:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b54a:	e841 2300 	strex	r3, r2, [r1]
 800b54e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1e1      	bne.n	800b51a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3314      	adds	r3, #20
 800b55c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b560:	e853 3f00 	ldrex	r3, [r3]
 800b564:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b56c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3314      	adds	r3, #20
 800b576:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b57a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b57c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b580:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b582:	e841 2300 	strex	r3, r2, [r1]
 800b586:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e3      	bne.n	800b556 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2220      	movs	r2, #32
 800b592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	330c      	adds	r3, #12
 800b5a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5a6:	e853 3f00 	ldrex	r3, [r3]
 800b5aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5ae:	f023 0310 	bic.w	r3, r3, #16
 800b5b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	330c      	adds	r3, #12
 800b5bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b5c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b5c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5c8:	e841 2300 	strex	r3, r2, [r1]
 800b5cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e3      	bne.n	800b59c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fa fe6b 	bl	80062b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f8c1 	bl	800b77c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5fa:	e09b      	b.n	800b734 <HAL_UART_IRQHandler+0x518>
 800b5fc:	0800be13 	.word	0x0800be13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b608:	b29b      	uxth	r3, r3
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b614:	b29b      	uxth	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	f000 808e 	beq.w	800b738 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b61c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 8089 	beq.w	800b738 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	330c      	adds	r3, #12
 800b62c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b630:	e853 3f00 	ldrex	r3, [r3]
 800b634:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b63c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	330c      	adds	r3, #12
 800b646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b64a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b64c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b652:	e841 2300 	strex	r3, r2, [r1]
 800b656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1e3      	bne.n	800b626 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3314      	adds	r3, #20
 800b664:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	623b      	str	r3, [r7, #32]
   return(result);
 800b66e:	6a3b      	ldr	r3, [r7, #32]
 800b670:	f023 0301 	bic.w	r3, r3, #1
 800b674:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3314      	adds	r3, #20
 800b67e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b682:	633a      	str	r2, [r7, #48]	@ 0x30
 800b684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b68a:	e841 2300 	strex	r3, r2, [r1]
 800b68e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1e3      	bne.n	800b65e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2220      	movs	r2, #32
 800b69a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	330c      	adds	r3, #12
 800b6aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	e853 3f00 	ldrex	r3, [r3]
 800b6b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f023 0310 	bic.w	r3, r3, #16
 800b6ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	330c      	adds	r3, #12
 800b6c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b6c8:	61fa      	str	r2, [r7, #28]
 800b6ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6cc:	69b9      	ldr	r1, [r7, #24]
 800b6ce:	69fa      	ldr	r2, [r7, #28]
 800b6d0:	e841 2300 	strex	r3, r2, [r1]
 800b6d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1e3      	bne.n	800b6a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2202      	movs	r2, #2
 800b6e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f847 	bl	800b77c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6ee:	e023      	b.n	800b738 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d009      	beq.n	800b710 <HAL_UART_IRQHandler+0x4f4>
 800b6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b704:	2b00      	cmp	r3, #0
 800b706:	d003      	beq.n	800b710 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fb96 	bl	800be3a <UART_Transmit_IT>
    return;
 800b70e:	e014      	b.n	800b73a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00e      	beq.n	800b73a <HAL_UART_IRQHandler+0x51e>
 800b71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b724:	2b00      	cmp	r3, #0
 800b726:	d008      	beq.n	800b73a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fbd6 	bl	800beda <UART_EndTransmit_IT>
    return;
 800b72e:	e004      	b.n	800b73a <HAL_UART_IRQHandler+0x51e>
    return;
 800b730:	bf00      	nop
 800b732:	e002      	b.n	800b73a <HAL_UART_IRQHandler+0x51e>
      return;
 800b734:	bf00      	nop
 800b736:	e000      	b.n	800b73a <HAL_UART_IRQHandler+0x51e>
      return;
 800b738:	bf00      	nop
  }
}
 800b73a:	37e8      	adds	r7, #232	@ 0xe8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	460b      	mov	r3, r1
 800b786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800b79c:	2300      	movs	r3, #0
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d101      	bne.n	800b7ae <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	e020      	b.n	800b7f0 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2224      	movs	r2, #36	@ 0x24
 800b7ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f023 030c 	bic.w	r3, r3, #12
 800b7cc:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f043 0308 	orr.w	r3, r3, #8
 800b7d4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d101      	bne.n	800b816 <HAL_HalfDuplex_EnableReceiver+0x1a>
 800b812:	2302      	movs	r3, #2
 800b814:	e020      	b.n	800b858 <HAL_HalfDuplex_EnableReceiver+0x5c>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2224      	movs	r2, #36	@ 0x24
 800b822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f023 030c 	bic.w	r3, r3, #12
 800b834:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f043 0304 	orr.w	r3, r3, #4
 800b83c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2220      	movs	r2, #32
 800b84a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b090      	sub	sp, #64	@ 0x40
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b870:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d137      	bne.n	800b8f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b882:	2200      	movs	r2, #0
 800b884:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3314      	adds	r3, #20
 800b88c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b890:	e853 3f00 	ldrex	r3, [r3]
 800b894:	623b      	str	r3, [r7, #32]
   return(result);
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b89c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3314      	adds	r3, #20
 800b8a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b8a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e5      	bne.n	800b886 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	330c      	adds	r3, #12
 800b8c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	e853 3f00 	ldrex	r3, [r3]
 800b8c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	330c      	adds	r3, #12
 800b8d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8da:	61fa      	str	r2, [r7, #28]
 800b8dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8de:	69b9      	ldr	r1, [r7, #24]
 800b8e0:	69fa      	ldr	r2, [r7, #28]
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1e5      	bne.n	800b8ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8ee:	e002      	b.n	800b8f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b8f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b8f2:	f7f6 fbdd 	bl	80020b0 <HAL_UART_TxCpltCallback>
}
 800b8f6:	bf00      	nop
 800b8f8:	3740      	adds	r7, #64	@ 0x40
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b90a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f7ff ff17 	bl	800b740 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b912:	bf00      	nop
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b09c      	sub	sp, #112	@ 0x70
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b926:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b932:	2b00      	cmp	r3, #0
 800b934:	d172      	bne.n	800ba1c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b938:	2200      	movs	r2, #0
 800b93a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b93c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	330c      	adds	r3, #12
 800b942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b946:	e853 3f00 	ldrex	r3, [r3]
 800b94a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b94c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b94e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b952:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	330c      	adds	r3, #12
 800b95a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b95c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b95e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b960:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b964:	e841 2300 	strex	r3, r2, [r1]
 800b968:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b96a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1e5      	bne.n	800b93c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3314      	adds	r3, #20
 800b976:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97a:	e853 3f00 	ldrex	r3, [r3]
 800b97e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b982:	f023 0301 	bic.w	r3, r3, #1
 800b986:	667b      	str	r3, [r7, #100]	@ 0x64
 800b988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3314      	adds	r3, #20
 800b98e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b990:	647a      	str	r2, [r7, #68]	@ 0x44
 800b992:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b998:	e841 2300 	strex	r3, r2, [r1]
 800b99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1e5      	bne.n	800b970 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3314      	adds	r3, #20
 800b9aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ae:	e853 3f00 	ldrex	r3, [r3]
 800b9b2:	623b      	str	r3, [r7, #32]
   return(result);
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9ba:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3314      	adds	r3, #20
 800b9c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b9c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9cc:	e841 2300 	strex	r3, r2, [r1]
 800b9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e5      	bne.n	800b9a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9da:	2220      	movs	r2, #32
 800b9dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d119      	bne.n	800ba1c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	330c      	adds	r3, #12
 800b9ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	e853 3f00 	ldrex	r3, [r3]
 800b9f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0310 	bic.w	r3, r3, #16
 800b9fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	330c      	adds	r3, #12
 800ba06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba08:	61fa      	str	r2, [r7, #28]
 800ba0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0c:	69b9      	ldr	r1, [r7, #24]
 800ba0e:	69fa      	ldr	r2, [r7, #28]
 800ba10:	e841 2300 	strex	r3, r2, [r1]
 800ba14:	617b      	str	r3, [r7, #20]
   return(result);
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1e5      	bne.n	800b9e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba1e:	2200      	movs	r2, #0
 800ba20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d106      	bne.n	800ba38 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba32:	f7ff fea3 	bl	800b77c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba36:	e002      	b.n	800ba3e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ba38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba3a:	f7f6 fb09 	bl	8002050 <HAL_UART_RxCpltCallback>
}
 800ba3e:	bf00      	nop
 800ba40:	3770      	adds	r7, #112	@ 0x70
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d108      	bne.n	800ba74 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f7ff fe85 	bl	800b77c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba72:	e002      	b.n	800ba7a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7ff fe6d 	bl	800b754 <HAL_UART_RxHalfCpltCallback>
}
 800ba7a:	bf00      	nop
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba9e:	2b80      	cmp	r3, #128	@ 0x80
 800baa0:	bf0c      	ite	eq
 800baa2:	2301      	moveq	r3, #1
 800baa4:	2300      	movne	r3, #0
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b21      	cmp	r3, #33	@ 0x21
 800bab4:	d108      	bne.n	800bac8 <UART_DMAError+0x46>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d005      	beq.n	800bac8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2200      	movs	r2, #0
 800bac0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800bac2:	68b8      	ldr	r0, [r7, #8]
 800bac4:	f000 f91a 	bl	800bcfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bad2:	2b40      	cmp	r3, #64	@ 0x40
 800bad4:	bf0c      	ite	eq
 800bad6:	2301      	moveq	r3, #1
 800bad8:	2300      	movne	r3, #0
 800bada:	b2db      	uxtb	r3, r3
 800badc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2b22      	cmp	r3, #34	@ 0x22
 800bae8:	d108      	bne.n	800bafc <UART_DMAError+0x7a>
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	2200      	movs	r2, #0
 800baf4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800baf6:	68b8      	ldr	r0, [r7, #8]
 800baf8:	f000 f928 	bl	800bd4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb00:	f043 0210 	orr.w	r2, r3, #16
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb08:	68b8      	ldr	r0, [r7, #8]
 800bb0a:	f7ff fe2d 	bl	800b768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb0e:	bf00      	nop
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b086      	sub	sp, #24
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	60b9      	str	r1, [r7, #8]
 800bb20:	603b      	str	r3, [r7, #0]
 800bb22:	4613      	mov	r3, r2
 800bb24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb26:	e03b      	b.n	800bba0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb28:	6a3b      	ldr	r3, [r7, #32]
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d037      	beq.n	800bba0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb30:	f7f9 fb10 	bl	8005154 <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	6a3a      	ldr	r2, [r7, #32]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d302      	bcc.n	800bb46 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e03a      	b.n	800bbc0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	f003 0304 	and.w	r3, r3, #4
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d023      	beq.n	800bba0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b80      	cmp	r3, #128	@ 0x80
 800bb5c:	d020      	beq.n	800bba0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2b40      	cmp	r3, #64	@ 0x40
 800bb62:	d01d      	beq.n	800bba0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 0308 	and.w	r3, r3, #8
 800bb6e:	2b08      	cmp	r3, #8
 800bb70:	d116      	bne.n	800bba0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bb72:	2300      	movs	r3, #0
 800bb74:	617b      	str	r3, [r7, #20]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	617b      	str	r3, [r7, #20]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	617b      	str	r3, [r7, #20]
 800bb86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 f8df 	bl	800bd4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2208      	movs	r2, #8
 800bb92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e00f      	b.n	800bbc0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	4013      	ands	r3, r2
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	bf0c      	ite	eq
 800bbb0:	2301      	moveq	r3, #1
 800bbb2:	2300      	movne	r3, #0
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d0b4      	beq.n	800bb28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b098      	sub	sp, #96	@ 0x60
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	88fa      	ldrh	r2, [r7, #6]
 800bbe0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2222      	movs	r2, #34	@ 0x22
 800bbec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf4:	4a3e      	ldr	r2, [pc, #248]	@ (800bcf0 <UART_Start_Receive_DMA+0x128>)
 800bbf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbfc:	4a3d      	ldr	r2, [pc, #244]	@ (800bcf4 <UART_Start_Receive_DMA+0x12c>)
 800bbfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc04:	4a3c      	ldr	r2, [pc, #240]	@ (800bcf8 <UART_Start_Receive_DMA+0x130>)
 800bc06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bc10:	f107 0308 	add.w	r3, r7, #8
 800bc14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	4619      	mov	r1, r3
 800bc22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	88fb      	ldrh	r3, [r7, #6]
 800bc28:	f7fa faec 	bl	8006204 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	613b      	str	r3, [r7, #16]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	613b      	str	r3, [r7, #16]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	613b      	str	r3, [r7, #16]
 800bc40:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d019      	beq.n	800bc7e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	330c      	adds	r3, #12
 800bc50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc54:	e853 3f00 	ldrex	r3, [r3]
 800bc58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc60:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	330c      	adds	r3, #12
 800bc68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bc6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bc70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc72:	e841 2300 	strex	r3, r2, [r1]
 800bc76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bc78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d1e5      	bne.n	800bc4a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3314      	adds	r3, #20
 800bc84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc88:	e853 3f00 	ldrex	r3, [r3]
 800bc8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc90:	f043 0301 	orr.w	r3, r3, #1
 800bc94:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	3314      	adds	r3, #20
 800bc9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc9e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bca0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bca4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bca6:	e841 2300 	strex	r3, r2, [r1]
 800bcaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1e5      	bne.n	800bc7e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3314      	adds	r3, #20
 800bcb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	e853 3f00 	ldrex	r3, [r3]
 800bcc0:	617b      	str	r3, [r7, #20]
   return(result);
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcc8:	653b      	str	r3, [r7, #80]	@ 0x50
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3314      	adds	r3, #20
 800bcd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bcd2:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	6a39      	ldr	r1, [r7, #32]
 800bcd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	61fb      	str	r3, [r7, #28]
   return(result);
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e5      	bne.n	800bcb2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3760      	adds	r7, #96	@ 0x60
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	0800b91b 	.word	0x0800b91b
 800bcf4:	0800ba47 	.word	0x0800ba47
 800bcf8:	0800ba83 	.word	0x0800ba83

0800bcfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b089      	sub	sp, #36	@ 0x24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	330c      	adds	r3, #12
 800bd0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	e853 3f00 	ldrex	r3, [r3]
 800bd12:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bd1a:	61fb      	str	r3, [r7, #28]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	330c      	adds	r3, #12
 800bd22:	69fa      	ldr	r2, [r7, #28]
 800bd24:	61ba      	str	r2, [r7, #24]
 800bd26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd28:	6979      	ldr	r1, [r7, #20]
 800bd2a:	69ba      	ldr	r2, [r7, #24]
 800bd2c:	e841 2300 	strex	r3, r2, [r1]
 800bd30:	613b      	str	r3, [r7, #16]
   return(result);
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1e5      	bne.n	800bd04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2220      	movs	r2, #32
 800bd3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bd40:	bf00      	nop
 800bd42:	3724      	adds	r7, #36	@ 0x24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b095      	sub	sp, #84	@ 0x54
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	330c      	adds	r3, #12
 800bd5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd5e:	e853 3f00 	ldrex	r3, [r3]
 800bd62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	330c      	adds	r3, #12
 800bd72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd74:	643a      	str	r2, [r7, #64]	@ 0x40
 800bd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd7c:	e841 2300 	strex	r3, r2, [r1]
 800bd80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1e5      	bne.n	800bd54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3314      	adds	r3, #20
 800bd8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	e853 3f00 	ldrex	r3, [r3]
 800bd96:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	f023 0301 	bic.w	r3, r3, #1
 800bd9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3314      	adds	r3, #20
 800bda6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bda8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bdaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bdae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdb0:	e841 2300 	strex	r3, r2, [r1]
 800bdb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1e5      	bne.n	800bd88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d119      	bne.n	800bdf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	330c      	adds	r3, #12
 800bdca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	f023 0310 	bic.w	r3, r3, #16
 800bdda:	647b      	str	r3, [r7, #68]	@ 0x44
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	330c      	adds	r3, #12
 800bde2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bde4:	61ba      	str	r2, [r7, #24]
 800bde6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde8:	6979      	ldr	r1, [r7, #20]
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	e841 2300 	strex	r3, r2, [r1]
 800bdf0:	613b      	str	r3, [r7, #16]
   return(result);
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1e5      	bne.n	800bdc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800be06:	bf00      	nop
 800be08:	3754      	adds	r7, #84	@ 0x54
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f7ff fc9b 	bl	800b768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be32:	bf00      	nop
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b085      	sub	sp, #20
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	2b21      	cmp	r3, #33	@ 0x21
 800be4c:	d13e      	bne.n	800becc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be56:	d114      	bne.n	800be82 <UART_Transmit_IT+0x48>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d110      	bne.n	800be82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	881b      	ldrh	r3, [r3, #0]
 800be6a:	461a      	mov	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	1c9a      	adds	r2, r3, #2
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	621a      	str	r2, [r3, #32]
 800be80:	e008      	b.n	800be94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	1c59      	adds	r1, r3, #1
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	6211      	str	r1, [r2, #32]
 800be8c:	781a      	ldrb	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800be98:	b29b      	uxth	r3, r3
 800be9a:	3b01      	subs	r3, #1
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	4619      	mov	r1, r3
 800bea2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10f      	bne.n	800bec8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	68da      	ldr	r2, [r3, #12]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800beb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68da      	ldr	r2, [r3, #12]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bec6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	e000      	b.n	800bece <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800becc:	2302      	movs	r3, #2
  }
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b082      	sub	sp, #8
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	68da      	ldr	r2, [r3, #12]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bef0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2220      	movs	r2, #32
 800bef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7f6 f8d8 	bl	80020b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b08c      	sub	sp, #48	@ 0x30
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	2b22      	cmp	r3, #34	@ 0x22
 800bf1c:	f040 80ae 	bne.w	800c07c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf28:	d117      	bne.n	800bf5a <UART_Receive_IT+0x50>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d113      	bne.n	800bf5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bf32:	2300      	movs	r3, #0
 800bf34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf52:	1c9a      	adds	r2, r3, #2
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	629a      	str	r2, [r3, #40]	@ 0x28
 800bf58:	e026      	b.n	800bfa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800bf60:	2300      	movs	r3, #0
 800bf62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf6c:	d007      	beq.n	800bf7e <UART_Receive_IT+0x74>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <UART_Receive_IT+0x82>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d106      	bne.n	800bf8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf88:	701a      	strb	r2, [r3, #0]
 800bf8a:	e008      	b.n	800bf9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa2:	1c5a      	adds	r2, r3, #1
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d15d      	bne.n	800c078 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f022 0220 	bic.w	r2, r2, #32
 800bfca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68da      	ldr	r2, [r3, #12]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bfda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	695a      	ldr	r2, [r3, #20]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f022 0201 	bic.w	r2, r2, #1
 800bfea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d135      	bne.n	800c06e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	330c      	adds	r3, #12
 800c00e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	e853 3f00 	ldrex	r3, [r3]
 800c016:	613b      	str	r3, [r7, #16]
   return(result);
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f023 0310 	bic.w	r3, r3, #16
 800c01e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	330c      	adds	r3, #12
 800c026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c028:	623a      	str	r2, [r7, #32]
 800c02a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02c:	69f9      	ldr	r1, [r7, #28]
 800c02e:	6a3a      	ldr	r2, [r7, #32]
 800c030:	e841 2300 	strex	r3, r2, [r1]
 800c034:	61bb      	str	r3, [r7, #24]
   return(result);
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1e5      	bne.n	800c008 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 0310 	and.w	r3, r3, #16
 800c046:	2b10      	cmp	r3, #16
 800c048:	d10a      	bne.n	800c060 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c04a:	2300      	movs	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff fb88 	bl	800b77c <HAL_UARTEx_RxEventCallback>
 800c06c:	e002      	b.n	800c074 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7f5 ffee 	bl	8002050 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	e002      	b.n	800c07e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c078:	2300      	movs	r3, #0
 800c07a:	e000      	b.n	800c07e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c07c:	2302      	movs	r3, #2
  }
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3730      	adds	r7, #48	@ 0x30
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
	...

0800c088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c08c:	b0c0      	sub	sp, #256	@ 0x100
 800c08e:	af00      	add	r7, sp, #0
 800c090:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0a4:	68d9      	ldr	r1, [r3, #12]
 800c0a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	ea40 0301 	orr.w	r3, r0, r1
 800c0b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c0b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0b6:	689a      	ldr	r2, [r3, #8]
 800c0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	431a      	orrs	r2, r3
 800c0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	431a      	orrs	r2, r3
 800c0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c0e0:	f021 010c 	bic.w	r1, r1, #12
 800c0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c0ee:	430b      	orrs	r3, r1
 800c0f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c0f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	695b      	ldr	r3, [r3, #20]
 800c0fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c102:	6999      	ldr	r1, [r3, #24]
 800c104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	ea40 0301 	orr.w	r3, r0, r1
 800c10e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	4b8f      	ldr	r3, [pc, #572]	@ (800c354 <UART_SetConfig+0x2cc>)
 800c118:	429a      	cmp	r2, r3
 800c11a:	d005      	beq.n	800c128 <UART_SetConfig+0xa0>
 800c11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	4b8d      	ldr	r3, [pc, #564]	@ (800c358 <UART_SetConfig+0x2d0>)
 800c124:	429a      	cmp	r2, r3
 800c126:	d104      	bne.n	800c132 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c128:	f7fb fea0 	bl	8007e6c <HAL_RCC_GetPCLK2Freq>
 800c12c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c130:	e003      	b.n	800c13a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c132:	f7fb fe87 	bl	8007e44 <HAL_RCC_GetPCLK1Freq>
 800c136:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c13e:	69db      	ldr	r3, [r3, #28]
 800c140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c144:	f040 810c 	bne.w	800c360 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c14c:	2200      	movs	r2, #0
 800c14e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c152:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c156:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c15a:	4622      	mov	r2, r4
 800c15c:	462b      	mov	r3, r5
 800c15e:	1891      	adds	r1, r2, r2
 800c160:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c162:	415b      	adcs	r3, r3
 800c164:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c166:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c16a:	4621      	mov	r1, r4
 800c16c:	eb12 0801 	adds.w	r8, r2, r1
 800c170:	4629      	mov	r1, r5
 800c172:	eb43 0901 	adc.w	r9, r3, r1
 800c176:	f04f 0200 	mov.w	r2, #0
 800c17a:	f04f 0300 	mov.w	r3, #0
 800c17e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c18a:	4690      	mov	r8, r2
 800c18c:	4699      	mov	r9, r3
 800c18e:	4623      	mov	r3, r4
 800c190:	eb18 0303 	adds.w	r3, r8, r3
 800c194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c198:	462b      	mov	r3, r5
 800c19a:	eb49 0303 	adc.w	r3, r9, r3
 800c19e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c1a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c1ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c1b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	18db      	adds	r3, r3, r3
 800c1ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1bc:	4613      	mov	r3, r2
 800c1be:	eb42 0303 	adc.w	r3, r2, r3
 800c1c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c1c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c1cc:	f7f4 fd7c 	bl	8000cc8 <__aeabi_uldivmod>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4b61      	ldr	r3, [pc, #388]	@ (800c35c <UART_SetConfig+0x2d4>)
 800c1d6:	fba3 2302 	umull	r2, r3, r3, r2
 800c1da:	095b      	lsrs	r3, r3, #5
 800c1dc:	011c      	lsls	r4, r3, #4
 800c1de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c1e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c1ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c1f0:	4642      	mov	r2, r8
 800c1f2:	464b      	mov	r3, r9
 800c1f4:	1891      	adds	r1, r2, r2
 800c1f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c1f8:	415b      	adcs	r3, r3
 800c1fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c200:	4641      	mov	r1, r8
 800c202:	eb12 0a01 	adds.w	sl, r2, r1
 800c206:	4649      	mov	r1, r9
 800c208:	eb43 0b01 	adc.w	fp, r3, r1
 800c20c:	f04f 0200 	mov.w	r2, #0
 800c210:	f04f 0300 	mov.w	r3, #0
 800c214:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c218:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c21c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c220:	4692      	mov	sl, r2
 800c222:	469b      	mov	fp, r3
 800c224:	4643      	mov	r3, r8
 800c226:	eb1a 0303 	adds.w	r3, sl, r3
 800c22a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c22e:	464b      	mov	r3, r9
 800c230:	eb4b 0303 	adc.w	r3, fp, r3
 800c234:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c244:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c248:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c24c:	460b      	mov	r3, r1
 800c24e:	18db      	adds	r3, r3, r3
 800c250:	643b      	str	r3, [r7, #64]	@ 0x40
 800c252:	4613      	mov	r3, r2
 800c254:	eb42 0303 	adc.w	r3, r2, r3
 800c258:	647b      	str	r3, [r7, #68]	@ 0x44
 800c25a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c25e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c262:	f7f4 fd31 	bl	8000cc8 <__aeabi_uldivmod>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4611      	mov	r1, r2
 800c26c:	4b3b      	ldr	r3, [pc, #236]	@ (800c35c <UART_SetConfig+0x2d4>)
 800c26e:	fba3 2301 	umull	r2, r3, r3, r1
 800c272:	095b      	lsrs	r3, r3, #5
 800c274:	2264      	movs	r2, #100	@ 0x64
 800c276:	fb02 f303 	mul.w	r3, r2, r3
 800c27a:	1acb      	subs	r3, r1, r3
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c282:	4b36      	ldr	r3, [pc, #216]	@ (800c35c <UART_SetConfig+0x2d4>)
 800c284:	fba3 2302 	umull	r2, r3, r3, r2
 800c288:	095b      	lsrs	r3, r3, #5
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c290:	441c      	add	r4, r3
 800c292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c296:	2200      	movs	r2, #0
 800c298:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c29c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c2a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c2a4:	4642      	mov	r2, r8
 800c2a6:	464b      	mov	r3, r9
 800c2a8:	1891      	adds	r1, r2, r2
 800c2aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c2ac:	415b      	adcs	r3, r3
 800c2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c2b4:	4641      	mov	r1, r8
 800c2b6:	1851      	adds	r1, r2, r1
 800c2b8:	6339      	str	r1, [r7, #48]	@ 0x30
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	414b      	adcs	r3, r1
 800c2be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2c0:	f04f 0200 	mov.w	r2, #0
 800c2c4:	f04f 0300 	mov.w	r3, #0
 800c2c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c2cc:	4659      	mov	r1, fp
 800c2ce:	00cb      	lsls	r3, r1, #3
 800c2d0:	4651      	mov	r1, sl
 800c2d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2d6:	4651      	mov	r1, sl
 800c2d8:	00ca      	lsls	r2, r1, #3
 800c2da:	4610      	mov	r0, r2
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4603      	mov	r3, r0
 800c2e0:	4642      	mov	r2, r8
 800c2e2:	189b      	adds	r3, r3, r2
 800c2e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c2e8:	464b      	mov	r3, r9
 800c2ea:	460a      	mov	r2, r1
 800c2ec:	eb42 0303 	adc.w	r3, r2, r3
 800c2f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c300:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c304:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c308:	460b      	mov	r3, r1
 800c30a:	18db      	adds	r3, r3, r3
 800c30c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c30e:	4613      	mov	r3, r2
 800c310:	eb42 0303 	adc.w	r3, r2, r3
 800c314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c31a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c31e:	f7f4 fcd3 	bl	8000cc8 <__aeabi_uldivmod>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	4b0d      	ldr	r3, [pc, #52]	@ (800c35c <UART_SetConfig+0x2d4>)
 800c328:	fba3 1302 	umull	r1, r3, r3, r2
 800c32c:	095b      	lsrs	r3, r3, #5
 800c32e:	2164      	movs	r1, #100	@ 0x64
 800c330:	fb01 f303 	mul.w	r3, r1, r3
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	00db      	lsls	r3, r3, #3
 800c338:	3332      	adds	r3, #50	@ 0x32
 800c33a:	4a08      	ldr	r2, [pc, #32]	@ (800c35c <UART_SetConfig+0x2d4>)
 800c33c:	fba2 2303 	umull	r2, r3, r2, r3
 800c340:	095b      	lsrs	r3, r3, #5
 800c342:	f003 0207 	and.w	r2, r3, #7
 800c346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4422      	add	r2, r4
 800c34e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c350:	e106      	b.n	800c560 <UART_SetConfig+0x4d8>
 800c352:	bf00      	nop
 800c354:	40011000 	.word	0x40011000
 800c358:	40011400 	.word	0x40011400
 800c35c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c364:	2200      	movs	r2, #0
 800c366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c36a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c36e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c372:	4642      	mov	r2, r8
 800c374:	464b      	mov	r3, r9
 800c376:	1891      	adds	r1, r2, r2
 800c378:	6239      	str	r1, [r7, #32]
 800c37a:	415b      	adcs	r3, r3
 800c37c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c37e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c382:	4641      	mov	r1, r8
 800c384:	1854      	adds	r4, r2, r1
 800c386:	4649      	mov	r1, r9
 800c388:	eb43 0501 	adc.w	r5, r3, r1
 800c38c:	f04f 0200 	mov.w	r2, #0
 800c390:	f04f 0300 	mov.w	r3, #0
 800c394:	00eb      	lsls	r3, r5, #3
 800c396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c39a:	00e2      	lsls	r2, r4, #3
 800c39c:	4614      	mov	r4, r2
 800c39e:	461d      	mov	r5, r3
 800c3a0:	4643      	mov	r3, r8
 800c3a2:	18e3      	adds	r3, r4, r3
 800c3a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c3a8:	464b      	mov	r3, r9
 800c3aa:	eb45 0303 	adc.w	r3, r5, r3
 800c3ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c3b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c3c2:	f04f 0200 	mov.w	r2, #0
 800c3c6:	f04f 0300 	mov.w	r3, #0
 800c3ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	008b      	lsls	r3, r1, #2
 800c3d2:	4621      	mov	r1, r4
 800c3d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3d8:	4621      	mov	r1, r4
 800c3da:	008a      	lsls	r2, r1, #2
 800c3dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c3e0:	f7f4 fc72 	bl	8000cc8 <__aeabi_uldivmod>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	4b60      	ldr	r3, [pc, #384]	@ (800c56c <UART_SetConfig+0x4e4>)
 800c3ea:	fba3 2302 	umull	r2, r3, r3, r2
 800c3ee:	095b      	lsrs	r3, r3, #5
 800c3f0:	011c      	lsls	r4, r3, #4
 800c3f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c3fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c400:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c404:	4642      	mov	r2, r8
 800c406:	464b      	mov	r3, r9
 800c408:	1891      	adds	r1, r2, r2
 800c40a:	61b9      	str	r1, [r7, #24]
 800c40c:	415b      	adcs	r3, r3
 800c40e:	61fb      	str	r3, [r7, #28]
 800c410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c414:	4641      	mov	r1, r8
 800c416:	1851      	adds	r1, r2, r1
 800c418:	6139      	str	r1, [r7, #16]
 800c41a:	4649      	mov	r1, r9
 800c41c:	414b      	adcs	r3, r1
 800c41e:	617b      	str	r3, [r7, #20]
 800c420:	f04f 0200 	mov.w	r2, #0
 800c424:	f04f 0300 	mov.w	r3, #0
 800c428:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c42c:	4659      	mov	r1, fp
 800c42e:	00cb      	lsls	r3, r1, #3
 800c430:	4651      	mov	r1, sl
 800c432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c436:	4651      	mov	r1, sl
 800c438:	00ca      	lsls	r2, r1, #3
 800c43a:	4610      	mov	r0, r2
 800c43c:	4619      	mov	r1, r3
 800c43e:	4603      	mov	r3, r0
 800c440:	4642      	mov	r2, r8
 800c442:	189b      	adds	r3, r3, r2
 800c444:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c448:	464b      	mov	r3, r9
 800c44a:	460a      	mov	r2, r1
 800c44c:	eb42 0303 	adc.w	r3, r2, r3
 800c450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c45e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c460:	f04f 0200 	mov.w	r2, #0
 800c464:	f04f 0300 	mov.w	r3, #0
 800c468:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c46c:	4649      	mov	r1, r9
 800c46e:	008b      	lsls	r3, r1, #2
 800c470:	4641      	mov	r1, r8
 800c472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c476:	4641      	mov	r1, r8
 800c478:	008a      	lsls	r2, r1, #2
 800c47a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c47e:	f7f4 fc23 	bl	8000cc8 <__aeabi_uldivmod>
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4611      	mov	r1, r2
 800c488:	4b38      	ldr	r3, [pc, #224]	@ (800c56c <UART_SetConfig+0x4e4>)
 800c48a:	fba3 2301 	umull	r2, r3, r3, r1
 800c48e:	095b      	lsrs	r3, r3, #5
 800c490:	2264      	movs	r2, #100	@ 0x64
 800c492:	fb02 f303 	mul.w	r3, r2, r3
 800c496:	1acb      	subs	r3, r1, r3
 800c498:	011b      	lsls	r3, r3, #4
 800c49a:	3332      	adds	r3, #50	@ 0x32
 800c49c:	4a33      	ldr	r2, [pc, #204]	@ (800c56c <UART_SetConfig+0x4e4>)
 800c49e:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a2:	095b      	lsrs	r3, r3, #5
 800c4a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c4a8:	441c      	add	r4, r3
 800c4aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	673b      	str	r3, [r7, #112]	@ 0x70
 800c4b2:	677a      	str	r2, [r7, #116]	@ 0x74
 800c4b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c4b8:	4642      	mov	r2, r8
 800c4ba:	464b      	mov	r3, r9
 800c4bc:	1891      	adds	r1, r2, r2
 800c4be:	60b9      	str	r1, [r7, #8]
 800c4c0:	415b      	adcs	r3, r3
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4c8:	4641      	mov	r1, r8
 800c4ca:	1851      	adds	r1, r2, r1
 800c4cc:	6039      	str	r1, [r7, #0]
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	414b      	adcs	r3, r1
 800c4d2:	607b      	str	r3, [r7, #4]
 800c4d4:	f04f 0200 	mov.w	r2, #0
 800c4d8:	f04f 0300 	mov.w	r3, #0
 800c4dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c4e0:	4659      	mov	r1, fp
 800c4e2:	00cb      	lsls	r3, r1, #3
 800c4e4:	4651      	mov	r1, sl
 800c4e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4ea:	4651      	mov	r1, sl
 800c4ec:	00ca      	lsls	r2, r1, #3
 800c4ee:	4610      	mov	r0, r2
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	4642      	mov	r2, r8
 800c4f6:	189b      	adds	r3, r3, r2
 800c4f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c4fa:	464b      	mov	r3, r9
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	eb42 0303 	adc.w	r3, r2, r3
 800c502:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c50e:	667a      	str	r2, [r7, #100]	@ 0x64
 800c510:	f04f 0200 	mov.w	r2, #0
 800c514:	f04f 0300 	mov.w	r3, #0
 800c518:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c51c:	4649      	mov	r1, r9
 800c51e:	008b      	lsls	r3, r1, #2
 800c520:	4641      	mov	r1, r8
 800c522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c526:	4641      	mov	r1, r8
 800c528:	008a      	lsls	r2, r1, #2
 800c52a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c52e:	f7f4 fbcb 	bl	8000cc8 <__aeabi_uldivmod>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4b0d      	ldr	r3, [pc, #52]	@ (800c56c <UART_SetConfig+0x4e4>)
 800c538:	fba3 1302 	umull	r1, r3, r3, r2
 800c53c:	095b      	lsrs	r3, r3, #5
 800c53e:	2164      	movs	r1, #100	@ 0x64
 800c540:	fb01 f303 	mul.w	r3, r1, r3
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	011b      	lsls	r3, r3, #4
 800c548:	3332      	adds	r3, #50	@ 0x32
 800c54a:	4a08      	ldr	r2, [pc, #32]	@ (800c56c <UART_SetConfig+0x4e4>)
 800c54c:	fba2 2303 	umull	r2, r3, r2, r3
 800c550:	095b      	lsrs	r3, r3, #5
 800c552:	f003 020f 	and.w	r2, r3, #15
 800c556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4422      	add	r2, r4
 800c55e:	609a      	str	r2, [r3, #8]
}
 800c560:	bf00      	nop
 800c562:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c566:	46bd      	mov	sp, r7
 800c568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c56c:	51eb851f 	.word	0x51eb851f

0800c570 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c570:	b084      	sub	sp, #16
 800c572:	b480      	push	{r7}
 800c574:	b085      	sub	sp, #20
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	f107 001c 	add.w	r0, r7, #28
 800c57e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c582:	2300      	movs	r3, #0
 800c584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c586:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c588:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c58a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c58e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c592:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c596:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c59a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800c5aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	431a      	orrs	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	b004      	add	sp, #16
 800c5c4:	4770      	bx	lr

0800c5c6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c602:	b480      	push	{r7}
 800c604:	b083      	sub	sp, #12
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2203      	movs	r2, #3
 800c60e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr

0800c61e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c61e:	b480      	push	{r7}
 800c620:	b083      	sub	sp, #12
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 0303 	and.w	r3, r3, #3
}
 800c62e:	4618      	mov	r0, r3
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b085      	sub	sp, #20
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c658:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c65e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c664:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	4313      	orrs	r3, r2
 800c66a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c674:	f023 030f 	bic.w	r3, r3, #15
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	431a      	orrs	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c68e:	b480      	push	{r7}
 800c690:	b083      	sub	sp, #12
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	b2db      	uxtb	r3, r3
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3314      	adds	r3, #20
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
}  
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3714      	adds	r7, #20
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b085      	sub	sp, #20
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c6f4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c6fa:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c700:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	4313      	orrs	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c70c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	431a      	orrs	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c718:	2300      	movs	r3, #0

}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b088      	sub	sp, #32
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c734:	2310      	movs	r3, #16
 800c736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c738:	2340      	movs	r3, #64	@ 0x40
 800c73a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c73c:	2300      	movs	r3, #0
 800c73e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c744:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c746:	f107 0308 	add.w	r3, r7, #8
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7ff ff74 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c752:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c756:	2110      	movs	r1, #16
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f9d7 	bl	800cb0c <SDMMC_GetCmdResp1>
 800c75e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c760:	69fb      	ldr	r3, [r7, #28]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3720      	adds	r7, #32
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b088      	sub	sp, #32
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c778:	2311      	movs	r3, #17
 800c77a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c77c:	2340      	movs	r3, #64	@ 0x40
 800c77e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c780:	2300      	movs	r3, #0
 800c782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c784:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c788:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c78a:	f107 0308 	add.w	r3, r7, #8
 800c78e:	4619      	mov	r1, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff ff52 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c79a:	2111      	movs	r1, #17
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f9b5 	bl	800cb0c <SDMMC_GetCmdResp1>
 800c7a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7a4:	69fb      	ldr	r3, [r7, #28]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3720      	adds	r7, #32
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b088      	sub	sp, #32
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c7bc:	2312      	movs	r3, #18
 800c7be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7c0:	2340      	movs	r3, #64	@ 0x40
 800c7c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7ce:	f107 0308 	add.w	r3, r7, #8
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7ff ff30 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c7da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7de:	2112      	movs	r1, #18
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f993 	bl	800cb0c <SDMMC_GetCmdResp1>
 800c7e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7e8:	69fb      	ldr	r3, [r7, #28]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3720      	adds	r7, #32
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b088      	sub	sp, #32
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c800:	2318      	movs	r3, #24
 800c802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c804:	2340      	movs	r3, #64	@ 0x40
 800c806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c808:	2300      	movs	r3, #0
 800c80a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c80c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c810:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c812:	f107 0308 	add.w	r3, r7, #8
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff ff0e 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c81e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c822:	2118      	movs	r1, #24
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f971 	bl	800cb0c <SDMMC_GetCmdResp1>
 800c82a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c82c:	69fb      	ldr	r3, [r7, #28]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3720      	adds	r7, #32
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b088      	sub	sp, #32
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c844:	2319      	movs	r3, #25
 800c846:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c848:	2340      	movs	r3, #64	@ 0x40
 800c84a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c84c:	2300      	movs	r3, #0
 800c84e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c854:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c856:	f107 0308 	add.w	r3, r7, #8
 800c85a:	4619      	mov	r1, r3
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7ff feec 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c862:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c866:	2119      	movs	r1, #25
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 f94f 	bl	800cb0c <SDMMC_GetCmdResp1>
 800c86e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c870:	69fb      	ldr	r3, [r7, #28]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3720      	adds	r7, #32
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
	...

0800c87c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b088      	sub	sp, #32
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c884:	2300      	movs	r3, #0
 800c886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c888:	230c      	movs	r3, #12
 800c88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c88c:	2340      	movs	r3, #64	@ 0x40
 800c88e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c890:	2300      	movs	r3, #0
 800c892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c898:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c89a:	f107 0308 	add.w	r3, r7, #8
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7ff feca 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c8a6:	4a05      	ldr	r2, [pc, #20]	@ (800c8bc <SDMMC_CmdStopTransfer+0x40>)
 800c8a8:	210c      	movs	r1, #12
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f92e 	bl	800cb0c <SDMMC_GetCmdResp1>
 800c8b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8b2:	69fb      	ldr	r3, [r7, #28]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3720      	adds	r7, #32
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	05f5e100 	.word	0x05f5e100

0800c8c0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08a      	sub	sp, #40	@ 0x28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c8d0:	2307      	movs	r3, #7
 800c8d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8d4:	2340      	movs	r3, #64	@ 0x40
 800c8d6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8e0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8e2:	f107 0310 	add.w	r3, r7, #16
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f7ff fea6 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c8ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8f2:	2107      	movs	r1, #7
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f000 f909 	bl	800cb0c <SDMMC_GetCmdResp1>
 800c8fa:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3728      	adds	r7, #40	@ 0x28
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b088      	sub	sp, #32
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c912:	2300      	movs	r3, #0
 800c914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c916:	2300      	movs	r3, #0
 800c918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c91a:	2300      	movs	r3, #0
 800c91c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c91e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c922:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c924:	f107 0308 	add.w	r3, r7, #8
 800c928:	4619      	mov	r1, r3
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff fe85 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fb23 	bl	800cf7c <SDMMC_GetCmdError>
 800c936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c938:	69fb      	ldr	r3, [r7, #28]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3720      	adds	r7, #32
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b088      	sub	sp, #32
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c94a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c94e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c950:	2308      	movs	r3, #8
 800c952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c954:	2340      	movs	r3, #64	@ 0x40
 800c956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c958:	2300      	movs	r3, #0
 800c95a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c95c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c960:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c962:	f107 0308 	add.w	r3, r7, #8
 800c966:	4619      	mov	r1, r3
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff fe66 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fab6 	bl	800cee0 <SDMMC_GetCmdResp7>
 800c974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c976:	69fb      	ldr	r3, [r7, #28]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3720      	adds	r7, #32
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c98e:	2337      	movs	r3, #55	@ 0x37
 800c990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c992:	2340      	movs	r3, #64	@ 0x40
 800c994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c99a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c99e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9a0:	f107 0308 	add.w	r3, r7, #8
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff fe47 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c9ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9b0:	2137      	movs	r1, #55	@ 0x37
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f8aa 	bl	800cb0c <SDMMC_GetCmdResp1>
 800c9b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ba:	69fb      	ldr	r3, [r7, #28]
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3720      	adds	r7, #32
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b088      	sub	sp, #32
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c9d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c9d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c9da:	2329      	movs	r3, #41	@ 0x29
 800c9dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9de:	2340      	movs	r3, #64	@ 0x40
 800c9e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9ec:	f107 0308 	add.w	r3, r7, #8
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7ff fe21 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f9bd 	bl	800cd78 <SDMMC_GetCmdResp3>
 800c9fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca00:	69fb      	ldr	r3, [r7, #28]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3720      	adds	r7, #32
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b088      	sub	sp, #32
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ca12:	2300      	movs	r3, #0
 800ca14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca16:	2302      	movs	r3, #2
 800ca18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ca1a:	23c0      	movs	r3, #192	@ 0xc0
 800ca1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca28:	f107 0308 	add.w	r3, r7, #8
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7ff fe03 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f957 	bl	800cce8 <SDMMC_GetCmdResp2>
 800ca3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca3c:	69fb      	ldr	r3, [r7, #28]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3720      	adds	r7, #32
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b088      	sub	sp, #32
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ca54:	2309      	movs	r3, #9
 800ca56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ca58:	23c0      	movs	r3, #192	@ 0xc0
 800ca5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca66:	f107 0308 	add.w	r3, r7, #8
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f7ff fde4 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f938 	bl	800cce8 <SDMMC_GetCmdResp2>
 800ca78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca7a:	69fb      	ldr	r3, [r7, #28]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3720      	adds	r7, #32
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ca92:	2303      	movs	r3, #3
 800ca94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca96:	2340      	movs	r3, #64	@ 0x40
 800ca98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800caa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800caa4:	f107 0308 	add.w	r3, r7, #8
 800caa8:	4619      	mov	r1, r3
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff fdc5 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	2103      	movs	r1, #3
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 f99d 	bl	800cdf4 <SDMMC_GetCmdResp6>
 800caba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cabc:	69fb      	ldr	r3, [r7, #28]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3720      	adds	r7, #32
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b088      	sub	sp, #32
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cad4:	230d      	movs	r3, #13
 800cad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cad8:	2340      	movs	r3, #64	@ 0x40
 800cada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cadc:	2300      	movs	r3, #0
 800cade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cae4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cae6:	f107 0308 	add.w	r3, r7, #8
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff fda4 	bl	800c63a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800caf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800caf6:	210d      	movs	r1, #13
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f807 	bl	800cb0c <SDMMC_GetCmdResp1>
 800cafe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb00:	69fb      	ldr	r3, [r7, #28]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3720      	adds	r7, #32
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	460b      	mov	r3, r1
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cb1a:	4b70      	ldr	r3, [pc, #448]	@ (800ccdc <SDMMC_GetCmdResp1+0x1d0>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a70      	ldr	r2, [pc, #448]	@ (800cce0 <SDMMC_GetCmdResp1+0x1d4>)
 800cb20:	fba2 2303 	umull	r2, r3, r2, r3
 800cb24:	0a5a      	lsrs	r2, r3, #9
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	fb02 f303 	mul.w	r3, r2, r3
 800cb2c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	1e5a      	subs	r2, r3, #1
 800cb32:	61fa      	str	r2, [r7, #28]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d102      	bne.n	800cb3e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cb3c:	e0c9      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb42:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d0ef      	beq.n	800cb2e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1ea      	bne.n	800cb2e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb5c:	f003 0304 	and.w	r3, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d004      	beq.n	800cb6e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2204      	movs	r2, #4
 800cb68:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb6a:	2304      	movs	r3, #4
 800cb6c:	e0b1      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb72:	f003 0301 	and.w	r3, r3, #1
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d004      	beq.n	800cb84 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e0a6      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	22c5      	movs	r2, #197	@ 0xc5
 800cb88:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f7ff fd7f 	bl	800c68e <SDIO_GetCommandResponse>
 800cb90:	4603      	mov	r3, r0
 800cb92:	461a      	mov	r2, r3
 800cb94:	7afb      	ldrb	r3, [r7, #11]
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d001      	beq.n	800cb9e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e099      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cb9e:	2100      	movs	r1, #0
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f7ff fd81 	bl	800c6a8 <SDIO_GetResponse>
 800cba6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	4b4e      	ldr	r3, [pc, #312]	@ (800cce4 <SDMMC_GetCmdResp1+0x1d8>)
 800cbac:	4013      	ands	r3, r2
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e08d      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	da02      	bge.n	800cbc2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cbbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cbc0:	e087      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cbcc:	2340      	movs	r3, #64	@ 0x40
 800cbce:	e080      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cbda:	2380      	movs	r3, #128	@ 0x80
 800cbdc:	e079      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cbe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbec:	e071      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d002      	beq.n	800cbfe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cbf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbfc:	e069      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d002      	beq.n	800cc0e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cc08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc0c:	e061      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cc18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cc1c:	e059      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d002      	beq.n	800cc2e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cc28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc2c:	e051      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cc38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cc3c:	e049      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cc48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cc4c:	e041      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cc58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc5c:	e039      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cc68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cc6c:	e031      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cc78:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cc7c:	e029      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d002      	beq.n	800cc8e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cc88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cc8c:	e021      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d002      	beq.n	800cc9e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cc98:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cc9c:	e019      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d002      	beq.n	800ccae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cca8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ccac:	e011      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d002      	beq.n	800ccbe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ccb8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ccbc:	e009      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f003 0308 	and.w	r3, r3, #8
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ccc8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cccc:	e001      	b.n	800ccd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ccce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3720      	adds	r7, #32
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	20000004 	.word	0x20000004
 800cce0:	10624dd3 	.word	0x10624dd3
 800cce4:	fdffe008 	.word	0xfdffe008

0800cce8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccf0:	4b1f      	ldr	r3, [pc, #124]	@ (800cd70 <SDMMC_GetCmdResp2+0x88>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a1f      	ldr	r2, [pc, #124]	@ (800cd74 <SDMMC_GetCmdResp2+0x8c>)
 800ccf6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccfa:	0a5b      	lsrs	r3, r3, #9
 800ccfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd00:	fb02 f303 	mul.w	r3, r2, r3
 800cd04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	1e5a      	subs	r2, r3, #1
 800cd0a:	60fa      	str	r2, [r7, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d102      	bne.n	800cd16 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cd14:	e026      	b.n	800cd64 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d0ef      	beq.n	800cd06 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d1ea      	bne.n	800cd06 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd34:	f003 0304 	and.w	r3, r3, #4
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d004      	beq.n	800cd46 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2204      	movs	r2, #4
 800cd40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd42:	2304      	movs	r3, #4
 800cd44:	e00e      	b.n	800cd64 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd4a:	f003 0301 	and.w	r3, r3, #1
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d004      	beq.n	800cd5c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e003      	b.n	800cd64 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	22c5      	movs	r2, #197	@ 0xc5
 800cd60:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3714      	adds	r7, #20
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr
 800cd70:	20000004 	.word	0x20000004
 800cd74:	10624dd3 	.word	0x10624dd3

0800cd78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd80:	4b1a      	ldr	r3, [pc, #104]	@ (800cdec <SDMMC_GetCmdResp3+0x74>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a1a      	ldr	r2, [pc, #104]	@ (800cdf0 <SDMMC_GetCmdResp3+0x78>)
 800cd86:	fba2 2303 	umull	r2, r3, r2, r3
 800cd8a:	0a5b      	lsrs	r3, r3, #9
 800cd8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd90:	fb02 f303 	mul.w	r3, r2, r3
 800cd94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	1e5a      	subs	r2, r3, #1
 800cd9a:	60fa      	str	r2, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d102      	bne.n	800cda6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cda0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cda4:	e01b      	b.n	800cdde <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0ef      	beq.n	800cd96 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d1ea      	bne.n	800cd96 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdc4:	f003 0304 	and.w	r3, r3, #4
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d004      	beq.n	800cdd6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2204      	movs	r2, #4
 800cdd0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdd2:	2304      	movs	r3, #4
 800cdd4:	e003      	b.n	800cdde <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	22c5      	movs	r2, #197	@ 0xc5
 800cdda:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	20000004 	.word	0x20000004
 800cdf0:	10624dd3 	.word	0x10624dd3

0800cdf4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce02:	4b35      	ldr	r3, [pc, #212]	@ (800ced8 <SDMMC_GetCmdResp6+0xe4>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a35      	ldr	r2, [pc, #212]	@ (800cedc <SDMMC_GetCmdResp6+0xe8>)
 800ce08:	fba2 2303 	umull	r2, r3, r2, r3
 800ce0c:	0a5b      	lsrs	r3, r3, #9
 800ce0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce12:	fb02 f303 	mul.w	r3, r2, r3
 800ce16:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	1e5a      	subs	r2, r3, #1
 800ce1c:	61fa      	str	r2, [r7, #28]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d102      	bne.n	800ce28 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce26:	e052      	b.n	800cece <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce2c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d0ef      	beq.n	800ce18 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1ea      	bne.n	800ce18 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce46:	f003 0304 	and.w	r3, r3, #4
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d004      	beq.n	800ce58 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2204      	movs	r2, #4
 800ce52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce54:	2304      	movs	r3, #4
 800ce56:	e03a      	b.n	800cece <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d004      	beq.n	800ce6e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2201      	movs	r2, #1
 800ce68:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e02f      	b.n	800cece <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f7ff fc0d 	bl	800c68e <SDIO_GetCommandResponse>
 800ce74:	4603      	mov	r3, r0
 800ce76:	461a      	mov	r2, r3
 800ce78:	7afb      	ldrb	r3, [r7, #11]
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d001      	beq.n	800ce82 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e025      	b.n	800cece <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	22c5      	movs	r2, #197	@ 0xc5
 800ce86:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ce88:	2100      	movs	r1, #0
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f7ff fc0c 	bl	800c6a8 <SDIO_GetResponse>
 800ce90:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d106      	bne.n	800ceaa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	0c1b      	lsrs	r3, r3, #16
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cea6:	2300      	movs	r3, #0
 800cea8:	e011      	b.n	800cece <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ceb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ceb8:	e009      	b.n	800cece <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cec8:	e001      	b.n	800cece <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ceca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3720      	adds	r7, #32
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	20000004 	.word	0x20000004
 800cedc:	10624dd3 	.word	0x10624dd3

0800cee0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cee8:	4b22      	ldr	r3, [pc, #136]	@ (800cf74 <SDMMC_GetCmdResp7+0x94>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a22      	ldr	r2, [pc, #136]	@ (800cf78 <SDMMC_GetCmdResp7+0x98>)
 800ceee:	fba2 2303 	umull	r2, r3, r2, r3
 800cef2:	0a5b      	lsrs	r3, r3, #9
 800cef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cef8:	fb02 f303 	mul.w	r3, r2, r3
 800cefc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	1e5a      	subs	r2, r3, #1
 800cf02:	60fa      	str	r2, [r7, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d102      	bne.n	800cf0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf0c:	e02c      	b.n	800cf68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d0ef      	beq.n	800cefe <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1ea      	bne.n	800cefe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d004      	beq.n	800cf3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2204      	movs	r2, #4
 800cf38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf3a:	2304      	movs	r3, #4
 800cf3c:	e014      	b.n	800cf68 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf42:	f003 0301 	and.w	r3, r3, #1
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d004      	beq.n	800cf54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e009      	b.n	800cf68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2240      	movs	r2, #64	@ 0x40
 800cf64:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cf66:	2300      	movs	r3, #0
  
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3714      	adds	r7, #20
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	20000004 	.word	0x20000004
 800cf78:	10624dd3 	.word	0x10624dd3

0800cf7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf84:	4b11      	ldr	r3, [pc, #68]	@ (800cfcc <SDMMC_GetCmdError+0x50>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a11      	ldr	r2, [pc, #68]	@ (800cfd0 <SDMMC_GetCmdError+0x54>)
 800cf8a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf8e:	0a5b      	lsrs	r3, r3, #9
 800cf90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf94:	fb02 f303 	mul.w	r3, r2, r3
 800cf98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	1e5a      	subs	r2, r3, #1
 800cf9e:	60fa      	str	r2, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d102      	bne.n	800cfaa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfa4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cfa8:	e009      	b.n	800cfbe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0f1      	beq.n	800cf9a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	22c5      	movs	r2, #197	@ 0xc5
 800cfba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	20000004 	.word	0x20000004
 800cfd0:	10624dd3 	.word	0x10624dd3

0800cfd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cfd8:	4904      	ldr	r1, [pc, #16]	@ (800cfec <MX_FATFS_Init+0x18>)
 800cfda:	4805      	ldr	r0, [pc, #20]	@ (800cff0 <MX_FATFS_Init+0x1c>)
 800cfdc:	f003 fad6 	bl	801058c <FATFS_LinkDriver>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	4b03      	ldr	r3, [pc, #12]	@ (800cff4 <MX_FATFS_Init+0x20>)
 800cfe6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cfe8:	bf00      	nop
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	200026e8 	.word	0x200026e8
 800cff0:	080183d0 	.word	0x080183d0
 800cff4:	200026e4 	.word	0x200026e4

0800cff8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cff8:	b480      	push	{r7}
 800cffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cffc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cffe:	4618      	mov	r0, r3
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d012:	f000 f86b 	bl	800d0ec <BSP_SD_IsDetected>
 800d016:	4603      	mov	r3, r0
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d001      	beq.n	800d020 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d01c:	2301      	movs	r3, #1
 800d01e:	e005      	b.n	800d02c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d020:	4804      	ldr	r0, [pc, #16]	@ (800d034 <BSP_SD_Init+0x2c>)
 800d022:	f7fc fb65 	bl	80096f0 <HAL_SD_Init>
 800d026:	4603      	mov	r3, r0
 800d028:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d02a:	79fb      	ldrb	r3, [r7, #7]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	20000410 	.word	0x20000410

0800d038 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af02      	add	r7, sp, #8
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
 800d044:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	68f9      	ldr	r1, [r7, #12]
 800d054:	4806      	ldr	r0, [pc, #24]	@ (800d070 <BSP_SD_ReadBlocks+0x38>)
 800d056:	f7fc fbfb 	bl	8009850 <HAL_SD_ReadBlocks>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d001      	beq.n	800d064 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d060:	2301      	movs	r3, #1
 800d062:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d064:	7dfb      	ldrb	r3, [r7, #23]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	20000410 	.word	0x20000410

0800d074 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b088      	sub	sp, #32
 800d078:	af02      	add	r7, sp, #8
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
 800d080:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	68ba      	ldr	r2, [r7, #8]
 800d08e:	68f9      	ldr	r1, [r7, #12]
 800d090:	4806      	ldr	r0, [pc, #24]	@ (800d0ac <BSP_SD_WriteBlocks+0x38>)
 800d092:	f7fc fdbb 	bl	8009c0c <HAL_SD_WriteBlocks>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d09c:	2301      	movs	r3, #1
 800d09e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3718      	adds	r7, #24
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20000410 	.word	0x20000410

0800d0b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d0b4:	4805      	ldr	r0, [pc, #20]	@ (800d0cc <BSP_SD_GetCardState+0x1c>)
 800d0b6:	f7fd f8ff 	bl	800a2b8 <HAL_SD_GetCardState>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b04      	cmp	r3, #4
 800d0be:	bf14      	ite	ne
 800d0c0:	2301      	movne	r3, #1
 800d0c2:	2300      	moveq	r3, #0
 800d0c4:	b2db      	uxtb	r3, r3
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20000410 	.word	0x20000410

0800d0d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d0d8:	6879      	ldr	r1, [r7, #4]
 800d0da:	4803      	ldr	r0, [pc, #12]	@ (800d0e8 <BSP_SD_GetCardInfo+0x18>)
 800d0dc:	f7fd f8c0 	bl	800a260 <HAL_SD_GetCardInfo>
}
 800d0e0:	bf00      	nop
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	20000410 	.word	0x20000410

0800d0ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d0f6:	f000 f80b 	bl	800d110 <BSP_PlatformIsDetected>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d101      	bne.n	800d104 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d100:	2300      	movs	r3, #0
 800d102:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d104:	79fb      	ldrb	r3, [r7, #7]
 800d106:	b2db      	uxtb	r3, r3
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d116:	2301      	movs	r3, #1
 800d118:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d11a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d11e:	4806      	ldr	r0, [pc, #24]	@ (800d138 <BSP_PlatformIsDetected+0x28>)
 800d120:	f7f9 fd58 	bl	8006bd4 <HAL_GPIO_ReadPin>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d12a:	2300      	movs	r3, #0
 800d12c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d12e:	79fb      	ldrb	r3, [r7, #7]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	40020000 	.word	0x40020000

0800d13c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	4603      	mov	r3, r0
 800d144:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d146:	4b0b      	ldr	r3, [pc, #44]	@ (800d174 <SD_CheckStatus+0x38>)
 800d148:	2201      	movs	r2, #1
 800d14a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d14c:	f7ff ffb0 	bl	800d0b0 <BSP_SD_GetCardState>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d107      	bne.n	800d166 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d156:	4b07      	ldr	r3, [pc, #28]	@ (800d174 <SD_CheckStatus+0x38>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	f023 0301 	bic.w	r3, r3, #1
 800d160:	b2da      	uxtb	r2, r3
 800d162:	4b04      	ldr	r3, [pc, #16]	@ (800d174 <SD_CheckStatus+0x38>)
 800d164:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d166:	4b03      	ldr	r3, [pc, #12]	@ (800d174 <SD_CheckStatus+0x38>)
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	b2db      	uxtb	r3, r3
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	20000039 	.word	0x20000039

0800d178 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	4603      	mov	r3, r0
 800d180:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d182:	4b0b      	ldr	r3, [pc, #44]	@ (800d1b0 <SD_initialize+0x38>)
 800d184:	2201      	movs	r2, #1
 800d186:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d188:	f7ff ff3e 	bl	800d008 <BSP_SD_Init>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d107      	bne.n	800d1a2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	4618      	mov	r0, r3
 800d196:	f7ff ffd1 	bl	800d13c <SD_CheckStatus>
 800d19a:	4603      	mov	r3, r0
 800d19c:	461a      	mov	r2, r3
 800d19e:	4b04      	ldr	r3, [pc, #16]	@ (800d1b0 <SD_initialize+0x38>)
 800d1a0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d1a2:	4b03      	ldr	r3, [pc, #12]	@ (800d1b0 <SD_initialize+0x38>)
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	b2db      	uxtb	r3, r3
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3708      	adds	r7, #8
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	20000039 	.word	0x20000039

0800d1b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7ff ffbb 	bl	800d13c <SD_CheckStatus>
 800d1c6:	4603      	mov	r3, r0
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	607a      	str	r2, [r7, #4]
 800d1da:	603b      	str	r3, [r7, #0]
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e8:	683a      	ldr	r2, [r7, #0]
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	68b8      	ldr	r0, [r7, #8]
 800d1ee:	f7ff ff23 	bl	800d038 <BSP_SD_ReadBlocks>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d107      	bne.n	800d208 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d1f8:	bf00      	nop
 800d1fa:	f7ff ff59 	bl	800d0b0 <BSP_SD_GetCardState>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1fa      	bne.n	800d1fa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d204:	2300      	movs	r3, #0
 800d206:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d208:	7dfb      	ldrb	r3, [r7, #23]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3718      	adds	r7, #24
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b086      	sub	sp, #24
 800d216:	af00      	add	r7, sp, #0
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
 800d21c:	603b      	str	r3, [r7, #0]
 800d21e:	4603      	mov	r3, r0
 800d220:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d222:	2301      	movs	r3, #1
 800d224:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d226:	f04f 33ff 	mov.w	r3, #4294967295
 800d22a:	683a      	ldr	r2, [r7, #0]
 800d22c:	6879      	ldr	r1, [r7, #4]
 800d22e:	68b8      	ldr	r0, [r7, #8]
 800d230:	f7ff ff20 	bl	800d074 <BSP_SD_WriteBlocks>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d107      	bne.n	800d24a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d23a:	bf00      	nop
 800d23c:	f7ff ff38 	bl	800d0b0 <BSP_SD_GetCardState>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1fa      	bne.n	800d23c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d246:	2300      	movs	r3, #0
 800d248:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3718      	adds	r7, #24
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08c      	sub	sp, #48	@ 0x30
 800d258:	af00      	add	r7, sp, #0
 800d25a:	4603      	mov	r3, r0
 800d25c:	603a      	str	r2, [r7, #0]
 800d25e:	71fb      	strb	r3, [r7, #7]
 800d260:	460b      	mov	r3, r1
 800d262:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d26a:	4b25      	ldr	r3, [pc, #148]	@ (800d300 <SD_ioctl+0xac>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	f003 0301 	and.w	r3, r3, #1
 800d274:	2b00      	cmp	r3, #0
 800d276:	d001      	beq.n	800d27c <SD_ioctl+0x28>
 800d278:	2303      	movs	r3, #3
 800d27a:	e03c      	b.n	800d2f6 <SD_ioctl+0xa2>

  switch (cmd)
 800d27c:	79bb      	ldrb	r3, [r7, #6]
 800d27e:	2b03      	cmp	r3, #3
 800d280:	d834      	bhi.n	800d2ec <SD_ioctl+0x98>
 800d282:	a201      	add	r2, pc, #4	@ (adr r2, 800d288 <SD_ioctl+0x34>)
 800d284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d288:	0800d299 	.word	0x0800d299
 800d28c:	0800d2a1 	.word	0x0800d2a1
 800d290:	0800d2b9 	.word	0x0800d2b9
 800d294:	0800d2d3 	.word	0x0800d2d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d29e:	e028      	b.n	800d2f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2a0:	f107 030c 	add.w	r3, r7, #12
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7ff ff13 	bl	800d0d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d2aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d2b6:	e01c      	b.n	800d2f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2b8:	f107 030c 	add.w	r3, r7, #12
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff ff07 	bl	800d0d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d2d0:	e00f      	b.n	800d2f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2d2:	f107 030c 	add.w	r3, r7, #12
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7ff fefa 	bl	800d0d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2de:	0a5a      	lsrs	r2, r3, #9
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d2ea:	e002      	b.n	800d2f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d2ec:	2304      	movs	r3, #4
 800d2ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d2f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3730      	adds	r7, #48	@ 0x30
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20000039 	.word	0x20000039

0800d304 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	4603      	mov	r3, r0
 800d30c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d30e:	79fb      	ldrb	r3, [r7, #7]
 800d310:	4a08      	ldr	r2, [pc, #32]	@ (800d334 <disk_status+0x30>)
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	79fa      	ldrb	r2, [r7, #7]
 800d31c:	4905      	ldr	r1, [pc, #20]	@ (800d334 <disk_status+0x30>)
 800d31e:	440a      	add	r2, r1
 800d320:	7a12      	ldrb	r2, [r2, #8]
 800d322:	4610      	mov	r0, r2
 800d324:	4798      	blx	r3
 800d326:	4603      	mov	r3, r0
 800d328:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	20002914 	.word	0x20002914

0800d338 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	4603      	mov	r3, r0
 800d340:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d342:	2300      	movs	r3, #0
 800d344:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d346:	79fb      	ldrb	r3, [r7, #7]
 800d348:	4a0e      	ldr	r2, [pc, #56]	@ (800d384 <disk_initialize+0x4c>)
 800d34a:	5cd3      	ldrb	r3, [r2, r3]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d114      	bne.n	800d37a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d350:	79fb      	ldrb	r3, [r7, #7]
 800d352:	4a0c      	ldr	r2, [pc, #48]	@ (800d384 <disk_initialize+0x4c>)
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4413      	add	r3, r2
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	79fa      	ldrb	r2, [r7, #7]
 800d35e:	4909      	ldr	r1, [pc, #36]	@ (800d384 <disk_initialize+0x4c>)
 800d360:	440a      	add	r2, r1
 800d362:	7a12      	ldrb	r2, [r2, #8]
 800d364:	4610      	mov	r0, r2
 800d366:	4798      	blx	r3
 800d368:	4603      	mov	r3, r0
 800d36a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d103      	bne.n	800d37a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800d372:	79fb      	ldrb	r3, [r7, #7]
 800d374:	4a03      	ldr	r2, [pc, #12]	@ (800d384 <disk_initialize+0x4c>)
 800d376:	2101      	movs	r1, #1
 800d378:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800d37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	20002914 	.word	0x20002914

0800d388 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d388:	b590      	push	{r4, r7, lr}
 800d38a:	b087      	sub	sp, #28
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60b9      	str	r1, [r7, #8]
 800d390:	607a      	str	r2, [r7, #4]
 800d392:	603b      	str	r3, [r7, #0]
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d398:	7bfb      	ldrb	r3, [r7, #15]
 800d39a:	4a0a      	ldr	r2, [pc, #40]	@ (800d3c4 <disk_read+0x3c>)
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4413      	add	r3, r2
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	689c      	ldr	r4, [r3, #8]
 800d3a4:	7bfb      	ldrb	r3, [r7, #15]
 800d3a6:	4a07      	ldr	r2, [pc, #28]	@ (800d3c4 <disk_read+0x3c>)
 800d3a8:	4413      	add	r3, r2
 800d3aa:	7a18      	ldrb	r0, [r3, #8]
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	68b9      	ldr	r1, [r7, #8]
 800d3b2:	47a0      	blx	r4
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	371c      	adds	r7, #28
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd90      	pop	{r4, r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20002914 	.word	0x20002914

0800d3c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d3c8:	b590      	push	{r4, r7, lr}
 800d3ca:	b087      	sub	sp, #28
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60b9      	str	r1, [r7, #8]
 800d3d0:	607a      	str	r2, [r7, #4]
 800d3d2:	603b      	str	r3, [r7, #0]
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d3d8:	7bfb      	ldrb	r3, [r7, #15]
 800d3da:	4a0a      	ldr	r2, [pc, #40]	@ (800d404 <disk_write+0x3c>)
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	4413      	add	r3, r2
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	68dc      	ldr	r4, [r3, #12]
 800d3e4:	7bfb      	ldrb	r3, [r7, #15]
 800d3e6:	4a07      	ldr	r2, [pc, #28]	@ (800d404 <disk_write+0x3c>)
 800d3e8:	4413      	add	r3, r2
 800d3ea:	7a18      	ldrb	r0, [r3, #8]
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	68b9      	ldr	r1, [r7, #8]
 800d3f2:	47a0      	blx	r4
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	371c      	adds	r7, #28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd90      	pop	{r4, r7, pc}
 800d402:	bf00      	nop
 800d404:	20002914 	.word	0x20002914

0800d408 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4603      	mov	r3, r0
 800d410:	603a      	str	r2, [r7, #0]
 800d412:	71fb      	strb	r3, [r7, #7]
 800d414:	460b      	mov	r3, r1
 800d416:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	4a09      	ldr	r2, [pc, #36]	@ (800d440 <disk_ioctl+0x38>)
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	691b      	ldr	r3, [r3, #16]
 800d424:	79fa      	ldrb	r2, [r7, #7]
 800d426:	4906      	ldr	r1, [pc, #24]	@ (800d440 <disk_ioctl+0x38>)
 800d428:	440a      	add	r2, r1
 800d42a:	7a10      	ldrb	r0, [r2, #8]
 800d42c:	79b9      	ldrb	r1, [r7, #6]
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	4798      	blx	r3
 800d432:	4603      	mov	r3, r0
 800d434:	73fb      	strb	r3, [r7, #15]
  return res;
 800d436:	7bfb      	ldrb	r3, [r7, #15]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	20002914 	.word	0x20002914

0800d444 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3301      	adds	r3, #1
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d454:	89fb      	ldrh	r3, [r7, #14]
 800d456:	021b      	lsls	r3, r3, #8
 800d458:	b21a      	sxth	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	b21b      	sxth	r3, r3
 800d460:	4313      	orrs	r3, r2
 800d462:	b21b      	sxth	r3, r3
 800d464:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d466:	89fb      	ldrh	r3, [r7, #14]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3714      	adds	r7, #20
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	3303      	adds	r3, #3
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	021b      	lsls	r3, r3, #8
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	3202      	adds	r2, #2
 800d48c:	7812      	ldrb	r2, [r2, #0]
 800d48e:	4313      	orrs	r3, r2
 800d490:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	021b      	lsls	r3, r3, #8
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	3201      	adds	r2, #1
 800d49a:	7812      	ldrb	r2, [r2, #0]
 800d49c:	4313      	orrs	r3, r2
 800d49e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	021b      	lsls	r3, r3, #8
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	7812      	ldrb	r2, [r2, #0]
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	60fb      	str	r3, [r7, #12]
	return rv;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3714      	adds	r7, #20
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr

0800d4ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d4ba:	b480      	push	{r7}
 800d4bc:	b083      	sub	sp, #12
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	887a      	ldrh	r2, [r7, #2]
 800d4ce:	b2d2      	uxtb	r2, r2
 800d4d0:	701a      	strb	r2, [r3, #0]
 800d4d2:	887b      	ldrh	r3, [r7, #2]
 800d4d4:	0a1b      	lsrs	r3, r3, #8
 800d4d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	607a      	str	r2, [r7, #4]
 800d4de:	887a      	ldrh	r2, [r7, #2]
 800d4e0:	b2d2      	uxtb	r2, r2
 800d4e2:	701a      	strb	r2, [r3, #0]
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	683a      	ldr	r2, [r7, #0]
 800d502:	b2d2      	uxtb	r2, r2
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	0a1b      	lsrs	r3, r3, #8
 800d50a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	607a      	str	r2, [r7, #4]
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	b2d2      	uxtb	r2, r2
 800d516:	701a      	strb	r2, [r3, #0]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	0a1b      	lsrs	r3, r3, #8
 800d51c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	1c5a      	adds	r2, r3, #1
 800d522:	607a      	str	r2, [r7, #4]
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	b2d2      	uxtb	r2, r2
 800d528:	701a      	strb	r2, [r3, #0]
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	0a1b      	lsrs	r3, r3, #8
 800d52e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	607a      	str	r2, [r7, #4]
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	b2d2      	uxtb	r2, r2
 800d53a:	701a      	strb	r2, [r3, #0]
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d548:	b480      	push	{r7}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00d      	beq.n	800d57e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d562:	693a      	ldr	r2, [r7, #16]
 800d564:	1c53      	adds	r3, r2, #1
 800d566:	613b      	str	r3, [r7, #16]
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	1c59      	adds	r1, r3, #1
 800d56c:	6179      	str	r1, [r7, #20]
 800d56e:	7812      	ldrb	r2, [r2, #0]
 800d570:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3b01      	subs	r3, #1
 800d576:	607b      	str	r3, [r7, #4]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1f1      	bne.n	800d562 <mem_cpy+0x1a>
	}
}
 800d57e:	bf00      	nop
 800d580:	371c      	adds	r7, #28
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d58a:	b480      	push	{r7}
 800d58c:	b087      	sub	sp, #28
 800d58e:	af00      	add	r7, sp, #0
 800d590:	60f8      	str	r0, [r7, #12]
 800d592:	60b9      	str	r1, [r7, #8]
 800d594:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	1c5a      	adds	r2, r3, #1
 800d59e:	617a      	str	r2, [r7, #20]
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	b2d2      	uxtb	r2, r2
 800d5a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	607b      	str	r3, [r7, #4]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1f3      	bne.n	800d59a <mem_set+0x10>
}
 800d5b2:	bf00      	nop
 800d5b4:	bf00      	nop
 800d5b6:	371c      	adds	r7, #28
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d5c0:	b480      	push	{r7}
 800d5c2:	b089      	sub	sp, #36	@ 0x24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	61fb      	str	r3, [r7, #28]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	1c5a      	adds	r2, r3, #1
 800d5dc:	61fa      	str	r2, [r7, #28]
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	61ba      	str	r2, [r7, #24]
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	1acb      	subs	r3, r1, r3
 800d5ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	607b      	str	r3, [r7, #4]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d002      	beq.n	800d600 <mem_cmp+0x40>
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d0eb      	beq.n	800d5d8 <mem_cmp+0x18>

	return r;
 800d600:	697b      	ldr	r3, [r7, #20]
}
 800d602:	4618      	mov	r0, r3
 800d604:	3724      	adds	r7, #36	@ 0x24
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d60e:	b480      	push	{r7}
 800d610:	b083      	sub	sp, #12
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
 800d616:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d618:	e002      	b.n	800d620 <chk_chr+0x12>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	3301      	adds	r3, #1
 800d61e:	607b      	str	r3, [r7, #4]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d005      	beq.n	800d634 <chk_chr+0x26>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	461a      	mov	r2, r3
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	4293      	cmp	r3, r2
 800d632:	d1f2      	bne.n	800d61a <chk_chr+0xc>
	return *str;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	781b      	ldrb	r3, [r3, #0]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d64e:	2300      	movs	r3, #0
 800d650:	60bb      	str	r3, [r7, #8]
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	60fb      	str	r3, [r7, #12]
 800d656:	e029      	b.n	800d6ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d658:	4a27      	ldr	r2, [pc, #156]	@ (800d6f8 <chk_lock+0xb4>)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	011b      	lsls	r3, r3, #4
 800d65e:	4413      	add	r3, r2
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d01d      	beq.n	800d6a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d666:	4a24      	ldr	r2, [pc, #144]	@ (800d6f8 <chk_lock+0xb4>)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	011b      	lsls	r3, r3, #4
 800d66c:	4413      	add	r3, r2
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	429a      	cmp	r2, r3
 800d676:	d116      	bne.n	800d6a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d678:	4a1f      	ldr	r2, [pc, #124]	@ (800d6f8 <chk_lock+0xb4>)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	011b      	lsls	r3, r3, #4
 800d67e:	4413      	add	r3, r2
 800d680:	3304      	adds	r3, #4
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d688:	429a      	cmp	r2, r3
 800d68a:	d10c      	bne.n	800d6a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d68c:	4a1a      	ldr	r2, [pc, #104]	@ (800d6f8 <chk_lock+0xb4>)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	011b      	lsls	r3, r3, #4
 800d692:	4413      	add	r3, r2
 800d694:	3308      	adds	r3, #8
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d102      	bne.n	800d6a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d6a0:	e007      	b.n	800d6b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	60fb      	str	r3, [r7, #12]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d9d2      	bls.n	800d658 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d109      	bne.n	800d6cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d102      	bne.n	800d6c4 <chk_lock+0x80>
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d101      	bne.n	800d6c8 <chk_lock+0x84>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	e010      	b.n	800d6ea <chk_lock+0xa6>
 800d6c8:	2312      	movs	r3, #18
 800d6ca:	e00e      	b.n	800d6ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d108      	bne.n	800d6e4 <chk_lock+0xa0>
 800d6d2:	4a09      	ldr	r2, [pc, #36]	@ (800d6f8 <chk_lock+0xb4>)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	011b      	lsls	r3, r3, #4
 800d6d8:	4413      	add	r3, r2
 800d6da:	330c      	adds	r3, #12
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6e2:	d101      	bne.n	800d6e8 <chk_lock+0xa4>
 800d6e4:	2310      	movs	r3, #16
 800d6e6:	e000      	b.n	800d6ea <chk_lock+0xa6>
 800d6e8:	2300      	movs	r3, #0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3714      	adds	r7, #20
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	200026f4 	.word	0x200026f4

0800d6fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d702:	2300      	movs	r3, #0
 800d704:	607b      	str	r3, [r7, #4]
 800d706:	e002      	b.n	800d70e <enq_lock+0x12>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	3301      	adds	r3, #1
 800d70c:	607b      	str	r3, [r7, #4]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d806      	bhi.n	800d722 <enq_lock+0x26>
 800d714:	4a09      	ldr	r2, [pc, #36]	@ (800d73c <enq_lock+0x40>)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	011b      	lsls	r3, r3, #4
 800d71a:	4413      	add	r3, r2
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1f2      	bne.n	800d708 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b02      	cmp	r3, #2
 800d726:	bf14      	ite	ne
 800d728:	2301      	movne	r3, #1
 800d72a:	2300      	moveq	r3, #0
 800d72c:	b2db      	uxtb	r3, r3
}
 800d72e:	4618      	mov	r0, r3
 800d730:	370c      	adds	r7, #12
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	200026f4 	.word	0x200026f4

0800d740 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d74a:	2300      	movs	r3, #0
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	e01f      	b.n	800d790 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d750:	4a41      	ldr	r2, [pc, #260]	@ (800d858 <inc_lock+0x118>)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	011b      	lsls	r3, r3, #4
 800d756:	4413      	add	r3, r2
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d113      	bne.n	800d78a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d762:	4a3d      	ldr	r2, [pc, #244]	@ (800d858 <inc_lock+0x118>)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	011b      	lsls	r3, r3, #4
 800d768:	4413      	add	r3, r2
 800d76a:	3304      	adds	r3, #4
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d772:	429a      	cmp	r2, r3
 800d774:	d109      	bne.n	800d78a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d776:	4a38      	ldr	r2, [pc, #224]	@ (800d858 <inc_lock+0x118>)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	011b      	lsls	r3, r3, #4
 800d77c:	4413      	add	r3, r2
 800d77e:	3308      	adds	r3, #8
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d786:	429a      	cmp	r2, r3
 800d788:	d006      	beq.n	800d798 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3301      	adds	r3, #1
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b01      	cmp	r3, #1
 800d794:	d9dc      	bls.n	800d750 <inc_lock+0x10>
 800d796:	e000      	b.n	800d79a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d798:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d132      	bne.n	800d806 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	e002      	b.n	800d7ac <inc_lock+0x6c>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	60fb      	str	r3, [r7, #12]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d806      	bhi.n	800d7c0 <inc_lock+0x80>
 800d7b2:	4a29      	ldr	r2, [pc, #164]	@ (800d858 <inc_lock+0x118>)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	011b      	lsls	r3, r3, #4
 800d7b8:	4413      	add	r3, r2
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1f2      	bne.n	800d7a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b02      	cmp	r3, #2
 800d7c4:	d101      	bne.n	800d7ca <inc_lock+0x8a>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	e040      	b.n	800d84c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	4922      	ldr	r1, [pc, #136]	@ (800d858 <inc_lock+0x118>)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	011b      	lsls	r3, r3, #4
 800d7d4:	440b      	add	r3, r1
 800d7d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	689a      	ldr	r2, [r3, #8]
 800d7dc:	491e      	ldr	r1, [pc, #120]	@ (800d858 <inc_lock+0x118>)
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	011b      	lsls	r3, r3, #4
 800d7e2:	440b      	add	r3, r1
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	695a      	ldr	r2, [r3, #20]
 800d7ec:	491a      	ldr	r1, [pc, #104]	@ (800d858 <inc_lock+0x118>)
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	011b      	lsls	r3, r3, #4
 800d7f2:	440b      	add	r3, r1
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d7f8:	4a17      	ldr	r2, [pc, #92]	@ (800d858 <inc_lock+0x118>)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	011b      	lsls	r3, r3, #4
 800d7fe:	4413      	add	r3, r2
 800d800:	330c      	adds	r3, #12
 800d802:	2200      	movs	r2, #0
 800d804:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d009      	beq.n	800d820 <inc_lock+0xe0>
 800d80c:	4a12      	ldr	r2, [pc, #72]	@ (800d858 <inc_lock+0x118>)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	011b      	lsls	r3, r3, #4
 800d812:	4413      	add	r3, r2
 800d814:	330c      	adds	r3, #12
 800d816:	881b      	ldrh	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d001      	beq.n	800d820 <inc_lock+0xe0>
 800d81c:	2300      	movs	r3, #0
 800d81e:	e015      	b.n	800d84c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d108      	bne.n	800d838 <inc_lock+0xf8>
 800d826:	4a0c      	ldr	r2, [pc, #48]	@ (800d858 <inc_lock+0x118>)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	011b      	lsls	r3, r3, #4
 800d82c:	4413      	add	r3, r2
 800d82e:	330c      	adds	r3, #12
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	3301      	adds	r3, #1
 800d834:	b29a      	uxth	r2, r3
 800d836:	e001      	b.n	800d83c <inc_lock+0xfc>
 800d838:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d83c:	4906      	ldr	r1, [pc, #24]	@ (800d858 <inc_lock+0x118>)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	011b      	lsls	r3, r3, #4
 800d842:	440b      	add	r3, r1
 800d844:	330c      	adds	r3, #12
 800d846:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	3301      	adds	r3, #1
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3714      	adds	r7, #20
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr
 800d858:	200026f4 	.word	0x200026f4

0800d85c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	3b01      	subs	r3, #1
 800d868:	607b      	str	r3, [r7, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d825      	bhi.n	800d8bc <dec_lock+0x60>
		n = Files[i].ctr;
 800d870:	4a17      	ldr	r2, [pc, #92]	@ (800d8d0 <dec_lock+0x74>)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	011b      	lsls	r3, r3, #4
 800d876:	4413      	add	r3, r2
 800d878:	330c      	adds	r3, #12
 800d87a:	881b      	ldrh	r3, [r3, #0]
 800d87c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d87e:	89fb      	ldrh	r3, [r7, #14]
 800d880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d884:	d101      	bne.n	800d88a <dec_lock+0x2e>
 800d886:	2300      	movs	r3, #0
 800d888:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d88a:	89fb      	ldrh	r3, [r7, #14]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <dec_lock+0x3a>
 800d890:	89fb      	ldrh	r3, [r7, #14]
 800d892:	3b01      	subs	r3, #1
 800d894:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d896:	4a0e      	ldr	r2, [pc, #56]	@ (800d8d0 <dec_lock+0x74>)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	011b      	lsls	r3, r3, #4
 800d89c:	4413      	add	r3, r2
 800d89e:	330c      	adds	r3, #12
 800d8a0:	89fa      	ldrh	r2, [r7, #14]
 800d8a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d8a4:	89fb      	ldrh	r3, [r7, #14]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d105      	bne.n	800d8b6 <dec_lock+0x5a>
 800d8aa:	4a09      	ldr	r2, [pc, #36]	@ (800d8d0 <dec_lock+0x74>)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	011b      	lsls	r3, r3, #4
 800d8b0:	4413      	add	r3, r2
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	737b      	strb	r3, [r7, #13]
 800d8ba:	e001      	b.n	800d8c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d8bc:	2302      	movs	r3, #2
 800d8be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d8c0:	7b7b      	ldrb	r3, [r7, #13]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3714      	adds	r7, #20
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	200026f4 	.word	0x200026f4

0800d8d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d8dc:	2300      	movs	r3, #0
 800d8de:	60fb      	str	r3, [r7, #12]
 800d8e0:	e010      	b.n	800d904 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d8e2:	4a0d      	ldr	r2, [pc, #52]	@ (800d918 <clear_lock+0x44>)
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	011b      	lsls	r3, r3, #4
 800d8e8:	4413      	add	r3, r2
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d105      	bne.n	800d8fe <clear_lock+0x2a>
 800d8f2:	4a09      	ldr	r2, [pc, #36]	@ (800d918 <clear_lock+0x44>)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	011b      	lsls	r3, r3, #4
 800d8f8:	4413      	add	r3, r2
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3301      	adds	r3, #1
 800d902:	60fb      	str	r3, [r7, #12]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d9eb      	bls.n	800d8e2 <clear_lock+0xe>
	}
}
 800d90a:	bf00      	nop
 800d90c:	bf00      	nop
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr
 800d918:	200026f4 	.word	0x200026f4

0800d91c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	78db      	ldrb	r3, [r3, #3]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d034      	beq.n	800d99a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d934:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7858      	ldrb	r0, [r3, #1]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d940:	2301      	movs	r3, #1
 800d942:	697a      	ldr	r2, [r7, #20]
 800d944:	f7ff fd40 	bl	800d3c8 <disk_write>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d002      	beq.n	800d954 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d94e:	2301      	movs	r3, #1
 800d950:	73fb      	strb	r3, [r7, #15]
 800d952:	e022      	b.n	800d99a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	1ad2      	subs	r2, r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	429a      	cmp	r2, r3
 800d968:	d217      	bcs.n	800d99a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	789b      	ldrb	r3, [r3, #2]
 800d96e:	613b      	str	r3, [r7, #16]
 800d970:	e010      	b.n	800d994 <sync_window+0x78>
					wsect += fs->fsize;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6a1b      	ldr	r3, [r3, #32]
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	4413      	add	r3, r2
 800d97a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	7858      	ldrb	r0, [r3, #1]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d986:	2301      	movs	r3, #1
 800d988:	697a      	ldr	r2, [r7, #20]
 800d98a:	f7ff fd1d 	bl	800d3c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	3b01      	subs	r3, #1
 800d992:	613b      	str	r3, [r7, #16]
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d8eb      	bhi.n	800d972 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3718      	adds	r7, #24
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d01b      	beq.n	800d9f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f7ff ffad 	bl	800d91c <sync_window>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d9c6:	7bfb      	ldrb	r3, [r7, #15]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d113      	bne.n	800d9f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	7858      	ldrb	r0, [r3, #1]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	f7ff fcd5 	bl	800d388 <disk_read>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d004      	beq.n	800d9ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	683a      	ldr	r2, [r7, #0]
 800d9f2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
	...

0800da00 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff ff87 	bl	800d91c <sync_window>
 800da0e:	4603      	mov	r3, r0
 800da10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800da12:	7bfb      	ldrb	r3, [r7, #15]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d159      	bne.n	800dacc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	2b03      	cmp	r3, #3
 800da1e:	d149      	bne.n	800dab4 <sync_fs+0xb4>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	791b      	ldrb	r3, [r3, #4]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d145      	bne.n	800dab4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	899b      	ldrh	r3, [r3, #12]
 800da32:	461a      	mov	r2, r3
 800da34:	2100      	movs	r1, #0
 800da36:	f7ff fda8 	bl	800d58a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	3338      	adds	r3, #56	@ 0x38
 800da3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800da42:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800da46:	4618      	mov	r0, r3
 800da48:	f7ff fd37 	bl	800d4ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	3338      	adds	r3, #56	@ 0x38
 800da50:	4921      	ldr	r1, [pc, #132]	@ (800dad8 <sync_fs+0xd8>)
 800da52:	4618      	mov	r0, r3
 800da54:	f7ff fd4c 	bl	800d4f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	3338      	adds	r3, #56	@ 0x38
 800da5c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800da60:	491e      	ldr	r1, [pc, #120]	@ (800dadc <sync_fs+0xdc>)
 800da62:	4618      	mov	r0, r3
 800da64:	f7ff fd44 	bl	800d4f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	3338      	adds	r3, #56	@ 0x38
 800da6c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	4619      	mov	r1, r3
 800da76:	4610      	mov	r0, r2
 800da78:	f7ff fd3a 	bl	800d4f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	3338      	adds	r3, #56	@ 0x38
 800da80:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	695b      	ldr	r3, [r3, #20]
 800da88:	4619      	mov	r1, r3
 800da8a:	4610      	mov	r0, r2
 800da8c:	f7ff fd30 	bl	800d4f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da94:	1c5a      	adds	r2, r3, #1
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	7858      	ldrb	r0, [r3, #1]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800daa8:	2301      	movs	r3, #1
 800daaa:	f7ff fc8d 	bl	800d3c8 <disk_write>
			fs->fsi_flag = 0;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	785b      	ldrb	r3, [r3, #1]
 800dab8:	2200      	movs	r2, #0
 800daba:	2100      	movs	r1, #0
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7ff fca3 	bl	800d408 <disk_ioctl>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <sync_fs+0xcc>
 800dac8:	2301      	movs	r3, #1
 800daca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	41615252 	.word	0x41615252
 800dadc:	61417272 	.word	0x61417272

0800dae0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	3b02      	subs	r3, #2
 800daee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	69db      	ldr	r3, [r3, #28]
 800daf4:	3b02      	subs	r3, #2
 800daf6:	683a      	ldr	r2, [r7, #0]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d301      	bcc.n	800db00 <clust2sect+0x20>
 800dafc:	2300      	movs	r3, #0
 800dafe:	e008      	b.n	800db12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	895b      	ldrh	r3, [r3, #10]
 800db04:	461a      	mov	r2, r3
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	fb03 f202 	mul.w	r2, r3, r2
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db10:	4413      	add	r3, r2
}
 800db12:	4618      	mov	r0, r3
 800db14:	370c      	adds	r7, #12
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b086      	sub	sp, #24
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d904      	bls.n	800db3e <get_fat+0x20>
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	69db      	ldr	r3, [r3, #28]
 800db38:	683a      	ldr	r2, [r7, #0]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d302      	bcc.n	800db44 <get_fat+0x26>
		val = 1;	/* Internal error */
 800db3e:	2301      	movs	r3, #1
 800db40:	617b      	str	r3, [r7, #20]
 800db42:	e0ba      	b.n	800dcba <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800db44:	f04f 33ff 	mov.w	r3, #4294967295
 800db48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2b03      	cmp	r3, #3
 800db50:	f000 8082 	beq.w	800dc58 <get_fat+0x13a>
 800db54:	2b03      	cmp	r3, #3
 800db56:	f300 80a6 	bgt.w	800dca6 <get_fat+0x188>
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d002      	beq.n	800db64 <get_fat+0x46>
 800db5e:	2b02      	cmp	r3, #2
 800db60:	d055      	beq.n	800dc0e <get_fat+0xf0>
 800db62:	e0a0      	b.n	800dca6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	60fb      	str	r3, [r7, #12]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	085b      	lsrs	r3, r3, #1
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	4413      	add	r3, r2
 800db70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	899b      	ldrh	r3, [r3, #12]
 800db7a:	4619      	mov	r1, r3
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800db82:	4413      	add	r3, r2
 800db84:	4619      	mov	r1, r3
 800db86:	6938      	ldr	r0, [r7, #16]
 800db88:	f7ff ff0c 	bl	800d9a4 <move_window>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f040 808c 	bne.w	800dcac <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	1c5a      	adds	r2, r3, #1
 800db98:	60fa      	str	r2, [r7, #12]
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	8992      	ldrh	r2, [r2, #12]
 800db9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dba2:	fb01 f202 	mul.w	r2, r1, r2
 800dba6:	1a9b      	subs	r3, r3, r2
 800dba8:	693a      	ldr	r2, [r7, #16]
 800dbaa:	4413      	add	r3, r2
 800dbac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dbb0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	899b      	ldrh	r3, [r3, #12]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbc2:	4413      	add	r3, r2
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6938      	ldr	r0, [r7, #16]
 800dbc8:	f7ff feec 	bl	800d9a4 <move_window>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d16e      	bne.n	800dcb0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	899b      	ldrh	r3, [r3, #12]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbde:	fb01 f202 	mul.w	r2, r1, r2
 800dbe2:	1a9b      	subs	r3, r3, r2
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dbec:	021b      	lsls	r3, r3, #8
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	f003 0301 	and.w	r3, r3, #1
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d002      	beq.n	800dc04 <get_fat+0xe6>
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	091b      	lsrs	r3, r3, #4
 800dc02:	e002      	b.n	800dc0a <get_fat+0xec>
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc0a:	617b      	str	r3, [r7, #20]
			break;
 800dc0c:	e055      	b.n	800dcba <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	899b      	ldrh	r3, [r3, #12]
 800dc16:	085b      	lsrs	r3, r3, #1
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc22:	4413      	add	r3, r2
 800dc24:	4619      	mov	r1, r3
 800dc26:	6938      	ldr	r0, [r7, #16]
 800dc28:	f7ff febc 	bl	800d9a4 <move_window>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d140      	bne.n	800dcb4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	005b      	lsls	r3, r3, #1
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	8992      	ldrh	r2, [r2, #12]
 800dc40:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc44:	fb00 f202 	mul.w	r2, r0, r2
 800dc48:	1a9b      	subs	r3, r3, r2
 800dc4a:	440b      	add	r3, r1
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff fbf9 	bl	800d444 <ld_word>
 800dc52:	4603      	mov	r3, r0
 800dc54:	617b      	str	r3, [r7, #20]
			break;
 800dc56:	e030      	b.n	800dcba <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	899b      	ldrh	r3, [r3, #12]
 800dc60:	089b      	lsrs	r3, r3, #2
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	4619      	mov	r1, r3
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc6c:	4413      	add	r3, r2
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6938      	ldr	r0, [r7, #16]
 800dc72:	f7ff fe97 	bl	800d9a4 <move_window>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d11d      	bne.n	800dcb8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	693a      	ldr	r2, [r7, #16]
 800dc88:	8992      	ldrh	r2, [r2, #12]
 800dc8a:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc8e:	fb00 f202 	mul.w	r2, r0, r2
 800dc92:	1a9b      	subs	r3, r3, r2
 800dc94:	440b      	add	r3, r1
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff fbec 	bl	800d474 <ld_dword>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800dca2:	617b      	str	r3, [r7, #20]
			break;
 800dca4:	e009      	b.n	800dcba <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dca6:	2301      	movs	r3, #1
 800dca8:	617b      	str	r3, [r7, #20]
 800dcaa:	e006      	b.n	800dcba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcac:	bf00      	nop
 800dcae:	e004      	b.n	800dcba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcb0:	bf00      	nop
 800dcb2:	e002      	b.n	800dcba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dcb4:	bf00      	nop
 800dcb6:	e000      	b.n	800dcba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dcb8:	bf00      	nop
		}
	}

	return val;
 800dcba:	697b      	ldr	r3, [r7, #20]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3718      	adds	r7, #24
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dcc4:	b590      	push	{r4, r7, lr}
 800dcc6:	b089      	sub	sp, #36	@ 0x24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	f240 8109 	bls.w	800deee <put_fat+0x22a>
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	69db      	ldr	r3, [r3, #28]
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	f080 8103 	bcs.w	800deee <put_fat+0x22a>
		switch (fs->fs_type) {
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	f000 80b6 	beq.w	800de5e <put_fat+0x19a>
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	f300 80fb 	bgt.w	800deee <put_fat+0x22a>
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d003      	beq.n	800dd04 <put_fat+0x40>
 800dcfc:	2b02      	cmp	r3, #2
 800dcfe:	f000 8083 	beq.w	800de08 <put_fat+0x144>
 800dd02:	e0f4      	b.n	800deee <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	61bb      	str	r3, [r7, #24]
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	085b      	lsrs	r3, r3, #1
 800dd0c:	69ba      	ldr	r2, [r7, #24]
 800dd0e:	4413      	add	r3, r2
 800dd10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	899b      	ldrh	r3, [r3, #12]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd22:	4413      	add	r3, r2
 800dd24:	4619      	mov	r1, r3
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f7ff fe3c 	bl	800d9a4 <move_window>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd30:	7ffb      	ldrb	r3, [r7, #31]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	f040 80d4 	bne.w	800dee0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	1c5a      	adds	r2, r3, #1
 800dd42:	61ba      	str	r2, [r7, #24]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	8992      	ldrh	r2, [r2, #12]
 800dd48:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd4c:	fb00 f202 	mul.w	r2, r0, r2
 800dd50:	1a9b      	subs	r3, r3, r2
 800dd52:	440b      	add	r3, r1
 800dd54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00d      	beq.n	800dd7c <put_fat+0xb8>
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	b25b      	sxtb	r3, r3
 800dd66:	f003 030f 	and.w	r3, r3, #15
 800dd6a:	b25a      	sxtb	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	011b      	lsls	r3, r3, #4
 800dd72:	b25b      	sxtb	r3, r3
 800dd74:	4313      	orrs	r3, r2
 800dd76:	b25b      	sxtb	r3, r3
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	e001      	b.n	800dd80 <put_fat+0xbc>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	697a      	ldr	r2, [r7, #20]
 800dd82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2201      	movs	r2, #1
 800dd88:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	899b      	ldrh	r3, [r3, #12]
 800dd92:	4619      	mov	r1, r3
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd9a:	4413      	add	r3, r2
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7ff fe00 	bl	800d9a4 <move_window>
 800dda4:	4603      	mov	r3, r0
 800dda6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dda8:	7ffb      	ldrb	r3, [r7, #31]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f040 809a 	bne.w	800dee4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	899b      	ldrh	r3, [r3, #12]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddc2:	fb00 f202 	mul.w	r2, r0, r2
 800ddc6:	1a9b      	subs	r3, r3, r2
 800ddc8:	440b      	add	r3, r1
 800ddca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	f003 0301 	and.w	r3, r3, #1
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d003      	beq.n	800ddde <put_fat+0x11a>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	091b      	lsrs	r3, r3, #4
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	e00e      	b.n	800ddfc <put_fat+0x138>
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	b25b      	sxtb	r3, r3
 800dde4:	f023 030f 	bic.w	r3, r3, #15
 800dde8:	b25a      	sxtb	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	0a1b      	lsrs	r3, r3, #8
 800ddee:	b25b      	sxtb	r3, r3
 800ddf0:	f003 030f 	and.w	r3, r3, #15
 800ddf4:	b25b      	sxtb	r3, r3
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	b25b      	sxtb	r3, r3
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2201      	movs	r2, #1
 800de04:	70da      	strb	r2, [r3, #3]
			break;
 800de06:	e072      	b.n	800deee <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	899b      	ldrh	r3, [r3, #12]
 800de10:	085b      	lsrs	r3, r3, #1
 800de12:	b29b      	uxth	r3, r3
 800de14:	4619      	mov	r1, r3
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	fbb3 f3f1 	udiv	r3, r3, r1
 800de1c:	4413      	add	r3, r2
 800de1e:	4619      	mov	r1, r3
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f7ff fdbf 	bl	800d9a4 <move_window>
 800de26:	4603      	mov	r3, r0
 800de28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de2a:	7ffb      	ldrb	r3, [r7, #31]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d15b      	bne.n	800dee8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	8992      	ldrh	r2, [r2, #12]
 800de3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800de42:	fb00 f202 	mul.w	r2, r0, r2
 800de46:	1a9b      	subs	r3, r3, r2
 800de48:	440b      	add	r3, r1
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	b292      	uxth	r2, r2
 800de4e:	4611      	mov	r1, r2
 800de50:	4618      	mov	r0, r3
 800de52:	f7ff fb32 	bl	800d4ba <st_word>
			fs->wflag = 1;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2201      	movs	r2, #1
 800de5a:	70da      	strb	r2, [r3, #3]
			break;
 800de5c:	e047      	b.n	800deee <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	899b      	ldrh	r3, [r3, #12]
 800de66:	089b      	lsrs	r3, r3, #2
 800de68:	b29b      	uxth	r3, r3
 800de6a:	4619      	mov	r1, r3
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	fbb3 f3f1 	udiv	r3, r3, r1
 800de72:	4413      	add	r3, r2
 800de74:	4619      	mov	r1, r3
 800de76:	68f8      	ldr	r0, [r7, #12]
 800de78:	f7ff fd94 	bl	800d9a4 <move_window>
 800de7c:	4603      	mov	r3, r0
 800de7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de80:	7ffb      	ldrb	r3, [r7, #31]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d132      	bne.n	800deec <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	8992      	ldrh	r2, [r2, #12]
 800de9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800de9e:	fb00 f202 	mul.w	r2, r0, r2
 800dea2:	1a9b      	subs	r3, r3, r2
 800dea4:	440b      	add	r3, r1
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff fae4 	bl	800d474 <ld_dword>
 800deac:	4603      	mov	r3, r0
 800deae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800deb2:	4323      	orrs	r3, r4
 800deb4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	8992      	ldrh	r2, [r2, #12]
 800dec4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dec8:	fb00 f202 	mul.w	r2, r0, r2
 800decc:	1a9b      	subs	r3, r3, r2
 800dece:	440b      	add	r3, r1
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7ff fb0c 	bl	800d4f0 <st_dword>
			fs->wflag = 1;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2201      	movs	r2, #1
 800dedc:	70da      	strb	r2, [r3, #3]
			break;
 800dede:	e006      	b.n	800deee <put_fat+0x22a>
			if (res != FR_OK) break;
 800dee0:	bf00      	nop
 800dee2:	e004      	b.n	800deee <put_fat+0x22a>
			if (res != FR_OK) break;
 800dee4:	bf00      	nop
 800dee6:	e002      	b.n	800deee <put_fat+0x22a>
			if (res != FR_OK) break;
 800dee8:	bf00      	nop
 800deea:	e000      	b.n	800deee <put_fat+0x22a>
			if (res != FR_OK) break;
 800deec:	bf00      	nop
		}
	}
	return res;
 800deee:	7ffb      	ldrb	r3, [r7, #31]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3724      	adds	r7, #36	@ 0x24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd90      	pop	{r4, r7, pc}

0800def8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b088      	sub	sp, #32
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d904      	bls.n	800df1e <remove_chain+0x26>
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	69db      	ldr	r3, [r3, #28]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d301      	bcc.n	800df22 <remove_chain+0x2a>
 800df1e:	2302      	movs	r3, #2
 800df20:	e04b      	b.n	800dfba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00c      	beq.n	800df42 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800df28:	f04f 32ff 	mov.w	r2, #4294967295
 800df2c:	6879      	ldr	r1, [r7, #4]
 800df2e:	69b8      	ldr	r0, [r7, #24]
 800df30:	f7ff fec8 	bl	800dcc4 <put_fat>
 800df34:	4603      	mov	r3, r0
 800df36:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800df38:	7ffb      	ldrb	r3, [r7, #31]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <remove_chain+0x4a>
 800df3e:	7ffb      	ldrb	r3, [r7, #31]
 800df40:	e03b      	b.n	800dfba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800df42:	68b9      	ldr	r1, [r7, #8]
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7ff fdea 	bl	800db1e <get_fat>
 800df4a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d031      	beq.n	800dfb6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d101      	bne.n	800df5c <remove_chain+0x64>
 800df58:	2302      	movs	r3, #2
 800df5a:	e02e      	b.n	800dfba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df62:	d101      	bne.n	800df68 <remove_chain+0x70>
 800df64:	2301      	movs	r3, #1
 800df66:	e028      	b.n	800dfba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800df68:	2200      	movs	r2, #0
 800df6a:	68b9      	ldr	r1, [r7, #8]
 800df6c:	69b8      	ldr	r0, [r7, #24]
 800df6e:	f7ff fea9 	bl	800dcc4 <put_fat>
 800df72:	4603      	mov	r3, r0
 800df74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800df76:	7ffb      	ldrb	r3, [r7, #31]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <remove_chain+0x88>
 800df7c:	7ffb      	ldrb	r3, [r7, #31]
 800df7e:	e01c      	b.n	800dfba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800df80:	69bb      	ldr	r3, [r7, #24]
 800df82:	699a      	ldr	r2, [r3, #24]
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	69db      	ldr	r3, [r3, #28]
 800df88:	3b02      	subs	r3, #2
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d20b      	bcs.n	800dfa6 <remove_chain+0xae>
			fs->free_clst++;
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	1c5a      	adds	r2, r3, #1
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	791b      	ldrb	r3, [r3, #4]
 800df9c:	f043 0301 	orr.w	r3, r3, #1
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	69db      	ldr	r3, [r3, #28]
 800dfae:	68ba      	ldr	r2, [r7, #8]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d3c6      	bcc.n	800df42 <remove_chain+0x4a>
 800dfb4:	e000      	b.n	800dfb8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dfb6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3720      	adds	r7, #32
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b088      	sub	sp, #32
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
 800dfca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10d      	bne.n	800dff4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d004      	beq.n	800dfee <create_chain+0x2c>
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	69db      	ldr	r3, [r3, #28]
 800dfe8:	69ba      	ldr	r2, [r7, #24]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d31b      	bcc.n	800e026 <create_chain+0x64>
 800dfee:	2301      	movs	r3, #1
 800dff0:	61bb      	str	r3, [r7, #24]
 800dff2:	e018      	b.n	800e026 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dff4:	6839      	ldr	r1, [r7, #0]
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7ff fd91 	bl	800db1e <get_fat>
 800dffc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d801      	bhi.n	800e008 <create_chain+0x46>
 800e004:	2301      	movs	r3, #1
 800e006:	e070      	b.n	800e0ea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e00e:	d101      	bne.n	800e014 <create_chain+0x52>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	e06a      	b.n	800e0ea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	69db      	ldr	r3, [r3, #28]
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d201      	bcs.n	800e022 <create_chain+0x60>
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	e063      	b.n	800e0ea <create_chain+0x128>
		scl = clst;
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	3301      	adds	r3, #1
 800e02e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	69db      	ldr	r3, [r3, #28]
 800e034:	69fa      	ldr	r2, [r7, #28]
 800e036:	429a      	cmp	r2, r3
 800e038:	d307      	bcc.n	800e04a <create_chain+0x88>
				ncl = 2;
 800e03a:	2302      	movs	r3, #2
 800e03c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e03e:	69fa      	ldr	r2, [r7, #28]
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	429a      	cmp	r2, r3
 800e044:	d901      	bls.n	800e04a <create_chain+0x88>
 800e046:	2300      	movs	r3, #0
 800e048:	e04f      	b.n	800e0ea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e04a:	69f9      	ldr	r1, [r7, #28]
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff fd66 	bl	800db1e <get_fat>
 800e052:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00e      	beq.n	800e078 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d003      	beq.n	800e068 <create_chain+0xa6>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e066:	d101      	bne.n	800e06c <create_chain+0xaa>
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	e03e      	b.n	800e0ea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e06c:	69fa      	ldr	r2, [r7, #28]
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	429a      	cmp	r2, r3
 800e072:	d1da      	bne.n	800e02a <create_chain+0x68>
 800e074:	2300      	movs	r3, #0
 800e076:	e038      	b.n	800e0ea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e078:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e07a:	f04f 32ff 	mov.w	r2, #4294967295
 800e07e:	69f9      	ldr	r1, [r7, #28]
 800e080:	6938      	ldr	r0, [r7, #16]
 800e082:	f7ff fe1f 	bl	800dcc4 <put_fat>
 800e086:	4603      	mov	r3, r0
 800e088:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e08a:	7dfb      	ldrb	r3, [r7, #23]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d109      	bne.n	800e0a4 <create_chain+0xe2>
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d006      	beq.n	800e0a4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e096:	69fa      	ldr	r2, [r7, #28]
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6938      	ldr	r0, [r7, #16]
 800e09c:	f7ff fe12 	bl	800dcc4 <put_fat>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e0a4:	7dfb      	ldrb	r3, [r7, #23]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d116      	bne.n	800e0d8 <create_chain+0x116>
		fs->last_clst = ncl;
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	69fa      	ldr	r2, [r7, #28]
 800e0ae:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	699a      	ldr	r2, [r3, #24]
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	69db      	ldr	r3, [r3, #28]
 800e0b8:	3b02      	subs	r3, #2
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d804      	bhi.n	800e0c8 <create_chain+0x106>
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	699b      	ldr	r3, [r3, #24]
 800e0c2:	1e5a      	subs	r2, r3, #1
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	791b      	ldrb	r3, [r3, #4]
 800e0cc:	f043 0301 	orr.w	r3, r3, #1
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	711a      	strb	r2, [r3, #4]
 800e0d6:	e007      	b.n	800e0e8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e0d8:	7dfb      	ldrb	r3, [r7, #23]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d102      	bne.n	800e0e4 <create_chain+0x122>
 800e0de:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e2:	e000      	b.n	800e0e6 <create_chain+0x124>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e0e8:	69fb      	ldr	r3, [r7, #28]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3720      	adds	r7, #32
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	b087      	sub	sp, #28
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e106:	3304      	adds	r3, #4
 800e108:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	899b      	ldrh	r3, [r3, #12]
 800e10e:	461a      	mov	r2, r3
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	fbb3 f3f2 	udiv	r3, r3, r2
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	8952      	ldrh	r2, [r2, #10]
 800e11a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e11e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	1d1a      	adds	r2, r3, #4
 800e124:	613a      	str	r2, [r7, #16]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <clmt_clust+0x42>
 800e130:	2300      	movs	r3, #0
 800e132:	e010      	b.n	800e156 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e134:	697a      	ldr	r2, [r7, #20]
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d307      	bcc.n	800e14c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e13c:	697a      	ldr	r2, [r7, #20]
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	617b      	str	r3, [r7, #20]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	3304      	adds	r3, #4
 800e148:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e14a:	e7e9      	b.n	800e120 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e14c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	4413      	add	r3, r2
}
 800e156:	4618      	mov	r0, r3
 800e158:	371c      	adds	r7, #28
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b086      	sub	sp, #24
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e178:	d204      	bcs.n	800e184 <dir_sdi+0x22>
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	f003 031f 	and.w	r3, r3, #31
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e184:	2302      	movs	r3, #2
 800e186:	e071      	b.n	800e26c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	683a      	ldr	r2, [r7, #0]
 800e18c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d106      	bne.n	800e1a8 <dir_sdi+0x46>
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d902      	bls.n	800e1a8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d10c      	bne.n	800e1c8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	095b      	lsrs	r3, r3, #5
 800e1b2:	693a      	ldr	r2, [r7, #16]
 800e1b4:	8912      	ldrh	r2, [r2, #8]
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d301      	bcc.n	800e1be <dir_sdi+0x5c>
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	e056      	b.n	800e26c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	61da      	str	r2, [r3, #28]
 800e1c6:	e02d      	b.n	800e224 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	895b      	ldrh	r3, [r3, #10]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	899b      	ldrh	r3, [r3, #12]
 800e1d2:	fb02 f303 	mul.w	r3, r2, r3
 800e1d6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e1d8:	e019      	b.n	800e20e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6979      	ldr	r1, [r7, #20]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7ff fc9d 	bl	800db1e <get_fat>
 800e1e4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ec:	d101      	bne.n	800e1f2 <dir_sdi+0x90>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e03c      	b.n	800e26c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d904      	bls.n	800e202 <dir_sdi+0xa0>
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	69db      	ldr	r3, [r3, #28]
 800e1fc:	697a      	ldr	r2, [r7, #20]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d301      	bcc.n	800e206 <dir_sdi+0xa4>
 800e202:	2302      	movs	r3, #2
 800e204:	e032      	b.n	800e26c <dir_sdi+0x10a>
			ofs -= csz;
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	429a      	cmp	r2, r3
 800e214:	d2e1      	bcs.n	800e1da <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e216:	6979      	ldr	r1, [r7, #20]
 800e218:	6938      	ldr	r0, [r7, #16]
 800e21a:	f7ff fc61 	bl	800dae0 <clust2sect>
 800e21e:	4602      	mov	r2, r0
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	697a      	ldr	r2, [r7, #20]
 800e228:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	69db      	ldr	r3, [r3, #28]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d101      	bne.n	800e236 <dir_sdi+0xd4>
 800e232:	2302      	movs	r3, #2
 800e234:	e01a      	b.n	800e26c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	69da      	ldr	r2, [r3, #28]
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	899b      	ldrh	r3, [r3, #12]
 800e23e:	4619      	mov	r1, r3
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	fbb3 f3f1 	udiv	r3, r3, r1
 800e246:	441a      	add	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	899b      	ldrh	r3, [r3, #12]
 800e256:	461a      	mov	r2, r3
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e25e:	fb00 f202 	mul.w	r2, r0, r2
 800e262:	1a9b      	subs	r3, r3, r2
 800e264:	18ca      	adds	r2, r1, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e26a:	2300      	movs	r3, #0
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3718      	adds	r7, #24
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b086      	sub	sp, #24
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	695b      	ldr	r3, [r3, #20]
 800e288:	3320      	adds	r3, #32
 800e28a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	69db      	ldr	r3, [r3, #28]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d003      	beq.n	800e29c <dir_next+0x28>
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e29a:	d301      	bcc.n	800e2a0 <dir_next+0x2c>
 800e29c:	2304      	movs	r3, #4
 800e29e:	e0bb      	b.n	800e418 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	899b      	ldrh	r3, [r3, #12]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2ac:	fb01 f202 	mul.w	r2, r1, r2
 800e2b0:	1a9b      	subs	r3, r3, r2
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	f040 809d 	bne.w	800e3f2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	69db      	ldr	r3, [r3, #28]
 800e2bc:	1c5a      	adds	r2, r3, #1
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	699b      	ldr	r3, [r3, #24]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d10b      	bne.n	800e2e2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	095b      	lsrs	r3, r3, #5
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	8912      	ldrh	r2, [r2, #8]
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	f0c0 808d 	bcc.w	800e3f2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	61da      	str	r2, [r3, #28]
 800e2de:	2304      	movs	r3, #4
 800e2e0:	e09a      	b.n	800e418 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	899b      	ldrh	r3, [r3, #12]
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	8952      	ldrh	r2, [r2, #10]
 800e2f2:	3a01      	subs	r2, #1
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d17b      	bne.n	800e3f2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	699b      	ldr	r3, [r3, #24]
 800e300:	4619      	mov	r1, r3
 800e302:	4610      	mov	r0, r2
 800e304:	f7ff fc0b 	bl	800db1e <get_fat>
 800e308:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d801      	bhi.n	800e314 <dir_next+0xa0>
 800e310:	2302      	movs	r3, #2
 800e312:	e081      	b.n	800e418 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e31a:	d101      	bne.n	800e320 <dir_next+0xac>
 800e31c:	2301      	movs	r3, #1
 800e31e:	e07b      	b.n	800e418 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	69db      	ldr	r3, [r3, #28]
 800e324:	697a      	ldr	r2, [r7, #20]
 800e326:	429a      	cmp	r2, r3
 800e328:	d359      	bcc.n	800e3de <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d104      	bne.n	800e33a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	61da      	str	r2, [r3, #28]
 800e336:	2304      	movs	r3, #4
 800e338:	e06e      	b.n	800e418 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	699b      	ldr	r3, [r3, #24]
 800e340:	4619      	mov	r1, r3
 800e342:	4610      	mov	r0, r2
 800e344:	f7ff fe3d 	bl	800dfc2 <create_chain>
 800e348:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d101      	bne.n	800e354 <dir_next+0xe0>
 800e350:	2307      	movs	r3, #7
 800e352:	e061      	b.n	800e418 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	2b01      	cmp	r3, #1
 800e358:	d101      	bne.n	800e35e <dir_next+0xea>
 800e35a:	2302      	movs	r3, #2
 800e35c:	e05c      	b.n	800e418 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e364:	d101      	bne.n	800e36a <dir_next+0xf6>
 800e366:	2301      	movs	r3, #1
 800e368:	e056      	b.n	800e418 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f7ff fad6 	bl	800d91c <sync_window>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <dir_next+0x106>
 800e376:	2301      	movs	r3, #1
 800e378:	e04e      	b.n	800e418 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	899b      	ldrh	r3, [r3, #12]
 800e384:	461a      	mov	r2, r3
 800e386:	2100      	movs	r1, #0
 800e388:	f7ff f8ff 	bl	800d58a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e38c:	2300      	movs	r3, #0
 800e38e:	613b      	str	r3, [r7, #16]
 800e390:	6979      	ldr	r1, [r7, #20]
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f7ff fba4 	bl	800dae0 <clust2sect>
 800e398:	4602      	mov	r2, r0
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	635a      	str	r2, [r3, #52]	@ 0x34
 800e39e:	e012      	b.n	800e3c6 <dir_next+0x152>
						fs->wflag = 1;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f7ff fab8 	bl	800d91c <sync_window>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <dir_next+0x142>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e030      	b.n	800e418 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	613b      	str	r3, [r7, #16]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3c0:	1c5a      	adds	r2, r3, #1
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	635a      	str	r2, [r3, #52]	@ 0x34
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	895b      	ldrh	r3, [r3, #10]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d3e6      	bcc.n	800e3a0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	1ad2      	subs	r2, r2, r3
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	697a      	ldr	r2, [r7, #20]
 800e3e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e3e4:	6979      	ldr	r1, [r7, #20]
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f7ff fb7a 	bl	800dae0 <clust2sect>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	68ba      	ldr	r2, [r7, #8]
 800e3f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	899b      	ldrh	r3, [r3, #12]
 800e402:	461a      	mov	r2, r3
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	fbb3 f0f2 	udiv	r0, r3, r2
 800e40a:	fb00 f202 	mul.w	r2, r0, r2
 800e40e:	1a9b      	subs	r3, r3, r2
 800e410:	18ca      	adds	r2, r1, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3718      	adds	r7, #24
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e430:	2100      	movs	r1, #0
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7ff fe95 	bl	800e162 <dir_sdi>
 800e438:	4603      	mov	r3, r0
 800e43a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e43c:	7dfb      	ldrb	r3, [r7, #23]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d12b      	bne.n	800e49a <dir_alloc+0x7a>
		n = 0;
 800e442:	2300      	movs	r3, #0
 800e444:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	69db      	ldr	r3, [r3, #28]
 800e44a:	4619      	mov	r1, r3
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f7ff faa9 	bl	800d9a4 <move_window>
 800e452:	4603      	mov	r3, r0
 800e454:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e456:	7dfb      	ldrb	r3, [r7, #23]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d11d      	bne.n	800e498 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6a1b      	ldr	r3, [r3, #32]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	2be5      	cmp	r3, #229	@ 0xe5
 800e464:	d004      	beq.n	800e470 <dir_alloc+0x50>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d107      	bne.n	800e480 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	3301      	adds	r3, #1
 800e474:	613b      	str	r3, [r7, #16]
 800e476:	693a      	ldr	r2, [r7, #16]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d102      	bne.n	800e484 <dir_alloc+0x64>
 800e47e:	e00c      	b.n	800e49a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e480:	2300      	movs	r3, #0
 800e482:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e484:	2101      	movs	r1, #1
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f7ff fef4 	bl	800e274 <dir_next>
 800e48c:	4603      	mov	r3, r0
 800e48e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e490:	7dfb      	ldrb	r3, [r7, #23]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d0d7      	beq.n	800e446 <dir_alloc+0x26>
 800e496:	e000      	b.n	800e49a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e498:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e49a:	7dfb      	ldrb	r3, [r7, #23]
 800e49c:	2b04      	cmp	r3, #4
 800e49e:	d101      	bne.n	800e4a4 <dir_alloc+0x84>
 800e4a0:	2307      	movs	r3, #7
 800e4a2:	75fb      	strb	r3, [r7, #23]
	return res;
 800e4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3718      	adds	r7, #24
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b084      	sub	sp, #16
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
 800e4b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	331a      	adds	r3, #26
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fe ffc1 	bl	800d444 <ld_word>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	2b03      	cmp	r3, #3
 800e4cc:	d109      	bne.n	800e4e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	3314      	adds	r3, #20
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fe ffb6 	bl	800d444 <ld_word>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	041b      	lsls	r3, r3, #16
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	331a      	adds	r3, #26
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	b292      	uxth	r2, r2
 800e500:	4611      	mov	r1, r2
 800e502:	4618      	mov	r0, r3
 800e504:	f7fe ffd9 	bl	800d4ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	2b03      	cmp	r3, #3
 800e50e:	d109      	bne.n	800e524 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	f103 0214 	add.w	r2, r3, #20
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	0c1b      	lsrs	r3, r3, #16
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	4619      	mov	r1, r3
 800e51e:	4610      	mov	r0, r2
 800e520:	f7fe ffcb 	bl	800d4ba <st_word>
	}
}
 800e524:	bf00      	nop
 800e526:	3710      	adds	r7, #16
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e52c:	b590      	push	{r4, r7, lr}
 800e52e:	b087      	sub	sp, #28
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	331a      	adds	r3, #26
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fe ff82 	bl	800d444 <ld_word>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <cmp_lfn+0x1e>
 800e546:	2300      	movs	r3, #0
 800e548:	e059      	b.n	800e5fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e552:	1e5a      	subs	r2, r3, #1
 800e554:	4613      	mov	r3, r2
 800e556:	005b      	lsls	r3, r3, #1
 800e558:	4413      	add	r3, r2
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	4413      	add	r3, r2
 800e55e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e560:	2301      	movs	r3, #1
 800e562:	81fb      	strh	r3, [r7, #14]
 800e564:	2300      	movs	r3, #0
 800e566:	613b      	str	r3, [r7, #16]
 800e568:	e033      	b.n	800e5d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e56a:	4a27      	ldr	r2, [pc, #156]	@ (800e608 <cmp_lfn+0xdc>)
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	4413      	add	r3, r2
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	461a      	mov	r2, r3
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	4413      	add	r3, r2
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fe ff63 	bl	800d444 <ld_word>
 800e57e:	4603      	mov	r3, r0
 800e580:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e582:	89fb      	ldrh	r3, [r7, #14]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d01a      	beq.n	800e5be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	2bfe      	cmp	r3, #254	@ 0xfe
 800e58c:	d812      	bhi.n	800e5b4 <cmp_lfn+0x88>
 800e58e:	89bb      	ldrh	r3, [r7, #12]
 800e590:	4618      	mov	r0, r3
 800e592:	f002 f847 	bl	8010624 <ff_wtoupper>
 800e596:	4603      	mov	r3, r0
 800e598:	461c      	mov	r4, r3
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	617a      	str	r2, [r7, #20]
 800e5a0:	005b      	lsls	r3, r3, #1
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	881b      	ldrh	r3, [r3, #0]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f002 f83b 	bl	8010624 <ff_wtoupper>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	429c      	cmp	r4, r3
 800e5b2:	d001      	beq.n	800e5b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	e022      	b.n	800e5fe <cmp_lfn+0xd2>
			}
			wc = uc;
 800e5b8:	89bb      	ldrh	r3, [r7, #12]
 800e5ba:	81fb      	strh	r3, [r7, #14]
 800e5bc:	e006      	b.n	800e5cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e5be:	89bb      	ldrh	r3, [r7, #12]
 800e5c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d001      	beq.n	800e5cc <cmp_lfn+0xa0>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	e018      	b.n	800e5fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	613b      	str	r3, [r7, #16]
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	2b0c      	cmp	r3, #12
 800e5d6:	d9c8      	bls.n	800e56a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00b      	beq.n	800e5fc <cmp_lfn+0xd0>
 800e5e4:	89fb      	ldrh	r3, [r7, #14]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d008      	beq.n	800e5fc <cmp_lfn+0xd0>
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	005b      	lsls	r3, r3, #1
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	881b      	ldrh	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <cmp_lfn+0xd0>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	e000      	b.n	800e5fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e5fc:	2301      	movs	r3, #1
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	371c      	adds	r7, #28
 800e602:	46bd      	mov	sp, r7
 800e604:	bd90      	pop	{r4, r7, pc}
 800e606:	bf00      	nop
 800e608:	08018464 	.word	0x08018464

0800e60c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b088      	sub	sp, #32
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	4611      	mov	r1, r2
 800e618:	461a      	mov	r2, r3
 800e61a:	460b      	mov	r3, r1
 800e61c:	71fb      	strb	r3, [r7, #7]
 800e61e:	4613      	mov	r3, r2
 800e620:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	330d      	adds	r3, #13
 800e626:	79ba      	ldrb	r2, [r7, #6]
 800e628:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	330b      	adds	r3, #11
 800e62e:	220f      	movs	r2, #15
 800e630:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	330c      	adds	r3, #12
 800e636:	2200      	movs	r2, #0
 800e638:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	331a      	adds	r3, #26
 800e63e:	2100      	movs	r1, #0
 800e640:	4618      	mov	r0, r3
 800e642:	f7fe ff3a 	bl	800d4ba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e646:	79fb      	ldrb	r3, [r7, #7]
 800e648:	1e5a      	subs	r2, r3, #1
 800e64a:	4613      	mov	r3, r2
 800e64c:	005b      	lsls	r3, r3, #1
 800e64e:	4413      	add	r3, r2
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	4413      	add	r3, r2
 800e654:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e656:	2300      	movs	r3, #0
 800e658:	82fb      	strh	r3, [r7, #22]
 800e65a:	2300      	movs	r3, #0
 800e65c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e65e:	8afb      	ldrh	r3, [r7, #22]
 800e660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e664:	4293      	cmp	r3, r2
 800e666:	d007      	beq.n	800e678 <put_lfn+0x6c>
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	1c5a      	adds	r2, r3, #1
 800e66c:	61fa      	str	r2, [r7, #28]
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	4413      	add	r3, r2
 800e674:	881b      	ldrh	r3, [r3, #0]
 800e676:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e678:	4a17      	ldr	r2, [pc, #92]	@ (800e6d8 <put_lfn+0xcc>)
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	4413      	add	r3, r2
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	461a      	mov	r2, r3
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	4413      	add	r3, r2
 800e686:	8afa      	ldrh	r2, [r7, #22]
 800e688:	4611      	mov	r1, r2
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fe ff15 	bl	800d4ba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e690:	8afb      	ldrh	r3, [r7, #22]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d102      	bne.n	800e69c <put_lfn+0x90>
 800e696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e69a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	61bb      	str	r3, [r7, #24]
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	2b0c      	cmp	r3, #12
 800e6a6:	d9da      	bls.n	800e65e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e6a8:	8afb      	ldrh	r3, [r7, #22]
 800e6aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d006      	beq.n	800e6c0 <put_lfn+0xb4>
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	005b      	lsls	r3, r3, #1
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d103      	bne.n	800e6c8 <put_lfn+0xbc>
 800e6c0:	79fb      	ldrb	r3, [r7, #7]
 800e6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	79fa      	ldrb	r2, [r7, #7]
 800e6cc:	701a      	strb	r2, [r3, #0]
}
 800e6ce:	bf00      	nop
 800e6d0:	3720      	adds	r7, #32
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	08018464 	.word	0x08018464

0800e6dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b08c      	sub	sp, #48	@ 0x30
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
 800e6e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e6ea:	220b      	movs	r2, #11
 800e6ec:	68b9      	ldr	r1, [r7, #8]
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f7fe ff2a 	bl	800d548 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	2b05      	cmp	r3, #5
 800e6f8:	d92b      	bls.n	800e752 <gen_numname+0x76>
		sr = seq;
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e6fe:	e022      	b.n	800e746 <gen_numname+0x6a>
			wc = *lfn++;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	1c9a      	adds	r2, r3, #2
 800e704:	607a      	str	r2, [r7, #4]
 800e706:	881b      	ldrh	r3, [r3, #0]
 800e708:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e70a:	2300      	movs	r3, #0
 800e70c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e70e:	e017      	b.n	800e740 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	005a      	lsls	r2, r3, #1
 800e714:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e716:	f003 0301 	and.w	r3, r3, #1
 800e71a:	4413      	add	r3, r2
 800e71c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e71e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e720:	085b      	lsrs	r3, r3, #1
 800e722:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d005      	beq.n	800e73a <gen_numname+0x5e>
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800e734:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800e738:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e73c:	3301      	adds	r3, #1
 800e73e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e742:	2b0f      	cmp	r3, #15
 800e744:	d9e4      	bls.n	800e710 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1d8      	bne.n	800e700 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e752:	2307      	movs	r3, #7
 800e754:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	f003 030f 	and.w	r3, r3, #15
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	3330      	adds	r3, #48	@ 0x30
 800e762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e766:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e76a:	2b39      	cmp	r3, #57	@ 0x39
 800e76c:	d904      	bls.n	800e778 <gen_numname+0x9c>
 800e76e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e772:	3307      	adds	r3, #7
 800e774:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e77a:	1e5a      	subs	r2, r3, #1
 800e77c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e77e:	3330      	adds	r3, #48	@ 0x30
 800e780:	443b      	add	r3, r7
 800e782:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e786:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	091b      	lsrs	r3, r3, #4
 800e78e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d1df      	bne.n	800e756 <gen_numname+0x7a>
	ns[i] = '~';
 800e796:	f107 0214 	add.w	r2, r7, #20
 800e79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e79c:	4413      	add	r3, r2
 800e79e:	227e      	movs	r2, #126	@ 0x7e
 800e7a0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7a6:	e002      	b.n	800e7ae <gen_numname+0xd2>
 800e7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d205      	bcs.n	800e7c2 <gen_numname+0xe6>
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ba:	4413      	add	r3, r2
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	2b20      	cmp	r3, #32
 800e7c0:	d1f2      	bne.n	800e7a8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c4:	2b07      	cmp	r3, #7
 800e7c6:	d807      	bhi.n	800e7d8 <gen_numname+0xfc>
 800e7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e7ce:	3330      	adds	r3, #48	@ 0x30
 800e7d0:	443b      	add	r3, r7
 800e7d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e7d6:	e000      	b.n	800e7da <gen_numname+0xfe>
 800e7d8:	2120      	movs	r1, #32
 800e7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7dc:	1c5a      	adds	r2, r3, #1
 800e7de:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	460a      	mov	r2, r1
 800e7e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ea:	2b07      	cmp	r3, #7
 800e7ec:	d9e9      	bls.n	800e7c2 <gen_numname+0xe6>
}
 800e7ee:	bf00      	nop
 800e7f0:	bf00      	nop
 800e7f2:	3730      	adds	r7, #48	@ 0x30
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e800:	2300      	movs	r3, #0
 800e802:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e804:	230b      	movs	r3, #11
 800e806:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e808:	7bfb      	ldrb	r3, [r7, #15]
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	0852      	lsrs	r2, r2, #1
 800e80e:	01db      	lsls	r3, r3, #7
 800e810:	4313      	orrs	r3, r2
 800e812:	b2da      	uxtb	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	1c59      	adds	r1, r3, #1
 800e818:	6079      	str	r1, [r7, #4]
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	4413      	add	r3, r2
 800e81e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	3b01      	subs	r3, #1
 800e824:	60bb      	str	r3, [r7, #8]
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1ed      	bne.n	800e808 <sum_sfn+0x10>
	return sum;
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr

0800e83a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b086      	sub	sp, #24
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e848:	2100      	movs	r1, #0
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f7ff fc89 	bl	800e162 <dir_sdi>
 800e850:	4603      	mov	r3, r0
 800e852:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <dir_find+0x24>
 800e85a:	7dfb      	ldrb	r3, [r7, #23]
 800e85c:	e0a9      	b.n	800e9b2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e85e:	23ff      	movs	r3, #255	@ 0xff
 800e860:	753b      	strb	r3, [r7, #20]
 800e862:	7d3b      	ldrb	r3, [r7, #20]
 800e864:	757b      	strb	r3, [r7, #21]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f04f 32ff 	mov.w	r2, #4294967295
 800e86c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	69db      	ldr	r3, [r3, #28]
 800e872:	4619      	mov	r1, r3
 800e874:	6938      	ldr	r0, [r7, #16]
 800e876:	f7ff f895 	bl	800d9a4 <move_window>
 800e87a:	4603      	mov	r3, r0
 800e87c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e87e:	7dfb      	ldrb	r3, [r7, #23]
 800e880:	2b00      	cmp	r3, #0
 800e882:	f040 8090 	bne.w	800e9a6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6a1b      	ldr	r3, [r3, #32]
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e88e:	7dbb      	ldrb	r3, [r7, #22]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d102      	bne.n	800e89a <dir_find+0x60>
 800e894:	2304      	movs	r3, #4
 800e896:	75fb      	strb	r3, [r7, #23]
 800e898:	e08a      	b.n	800e9b0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6a1b      	ldr	r3, [r3, #32]
 800e89e:	330b      	adds	r3, #11
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8a6:	73fb      	strb	r3, [r7, #15]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	7bfa      	ldrb	r2, [r7, #15]
 800e8ac:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e8ae:	7dbb      	ldrb	r3, [r7, #22]
 800e8b0:	2be5      	cmp	r3, #229	@ 0xe5
 800e8b2:	d007      	beq.n	800e8c4 <dir_find+0x8a>
 800e8b4:	7bfb      	ldrb	r3, [r7, #15]
 800e8b6:	f003 0308 	and.w	r3, r3, #8
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d009      	beq.n	800e8d2 <dir_find+0x98>
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
 800e8c0:	2b0f      	cmp	r3, #15
 800e8c2:	d006      	beq.n	800e8d2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e8c4:	23ff      	movs	r3, #255	@ 0xff
 800e8c6:	757b      	strb	r3, [r7, #21]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ce:	631a      	str	r2, [r3, #48]	@ 0x30
 800e8d0:	e05e      	b.n	800e990 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
 800e8d4:	2b0f      	cmp	r3, #15
 800e8d6:	d136      	bne.n	800e946 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e8de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d154      	bne.n	800e990 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e8e6:	7dbb      	ldrb	r3, [r7, #22]
 800e8e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00d      	beq.n	800e90c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6a1b      	ldr	r3, [r3, #32]
 800e8f4:	7b5b      	ldrb	r3, [r3, #13]
 800e8f6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e8f8:	7dbb      	ldrb	r3, [r7, #22]
 800e8fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8fe:	75bb      	strb	r3, [r7, #22]
 800e900:	7dbb      	ldrb	r3, [r7, #22]
 800e902:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	695a      	ldr	r2, [r3, #20]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e90c:	7dba      	ldrb	r2, [r7, #22]
 800e90e:	7d7b      	ldrb	r3, [r7, #21]
 800e910:	429a      	cmp	r2, r3
 800e912:	d115      	bne.n	800e940 <dir_find+0x106>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6a1b      	ldr	r3, [r3, #32]
 800e918:	330d      	adds	r3, #13
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	7d3a      	ldrb	r2, [r7, #20]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d10e      	bne.n	800e940 <dir_find+0x106>
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	691a      	ldr	r2, [r3, #16]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a1b      	ldr	r3, [r3, #32]
 800e92a:	4619      	mov	r1, r3
 800e92c:	4610      	mov	r0, r2
 800e92e:	f7ff fdfd 	bl	800e52c <cmp_lfn>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d003      	beq.n	800e940 <dir_find+0x106>
 800e938:	7d7b      	ldrb	r3, [r7, #21]
 800e93a:	3b01      	subs	r3, #1
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	e000      	b.n	800e942 <dir_find+0x108>
 800e940:	23ff      	movs	r3, #255	@ 0xff
 800e942:	757b      	strb	r3, [r7, #21]
 800e944:	e024      	b.n	800e990 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e946:	7d7b      	ldrb	r3, [r7, #21]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d109      	bne.n	800e960 <dir_find+0x126>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a1b      	ldr	r3, [r3, #32]
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff ff51 	bl	800e7f8 <sum_sfn>
 800e956:	4603      	mov	r3, r0
 800e958:	461a      	mov	r2, r3
 800e95a:	7d3b      	ldrb	r3, [r7, #20]
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d024      	beq.n	800e9aa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e966:	f003 0301 	and.w	r3, r3, #1
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10a      	bne.n	800e984 <dir_find+0x14a>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a18      	ldr	r0, [r3, #32]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	3324      	adds	r3, #36	@ 0x24
 800e976:	220b      	movs	r2, #11
 800e978:	4619      	mov	r1, r3
 800e97a:	f7fe fe21 	bl	800d5c0 <mem_cmp>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d014      	beq.n	800e9ae <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e984:	23ff      	movs	r3, #255	@ 0xff
 800e986:	757b      	strb	r3, [r7, #21]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f04f 32ff 	mov.w	r2, #4294967295
 800e98e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e990:	2100      	movs	r1, #0
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7ff fc6e 	bl	800e274 <dir_next>
 800e998:	4603      	mov	r3, r0
 800e99a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e99c:	7dfb      	ldrb	r3, [r7, #23]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f43f af65 	beq.w	800e86e <dir_find+0x34>
 800e9a4:	e004      	b.n	800e9b0 <dir_find+0x176>
		if (res != FR_OK) break;
 800e9a6:	bf00      	nop
 800e9a8:	e002      	b.n	800e9b0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e9aa:	bf00      	nop
 800e9ac:	e000      	b.n	800e9b0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e9ae:	bf00      	nop

	return res;
 800e9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3718      	adds	r7, #24
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
	...

0800e9bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08c      	sub	sp, #48	@ 0x30
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e9d0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <dir_register+0x20>
 800e9d8:	2306      	movs	r3, #6
 800e9da:	e0e0      	b.n	800eb9e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e9dc:	2300      	movs	r3, #0
 800e9de:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9e0:	e002      	b.n	800e9e8 <dir_register+0x2c>
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	691a      	ldr	r2, [r3, #16]
 800e9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	4413      	add	r3, r2
 800e9f2:	881b      	ldrh	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d1f4      	bne.n	800e9e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e9fe:	f107 030c 	add.w	r3, r7, #12
 800ea02:	220c      	movs	r2, #12
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fe fd9f 	bl	800d548 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ea0a:	7dfb      	ldrb	r3, [r7, #23]
 800ea0c:	f003 0301 	and.w	r3, r3, #1
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d032      	beq.n	800ea7a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2240      	movs	r2, #64	@ 0x40
 800ea18:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea20:	e016      	b.n	800ea50 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	691a      	ldr	r2, [r3, #16]
 800ea2c:	f107 010c 	add.w	r1, r7, #12
 800ea30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea32:	f7ff fe53 	bl	800e6dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7ff feff 	bl	800e83a <dir_find>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800ea42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d106      	bne.n	800ea58 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ea4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea52:	2b63      	cmp	r3, #99	@ 0x63
 800ea54:	d9e5      	bls.n	800ea22 <dir_register+0x66>
 800ea56:	e000      	b.n	800ea5a <dir_register+0x9e>
			if (res != FR_OK) break;
 800ea58:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ea5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea5c:	2b64      	cmp	r3, #100	@ 0x64
 800ea5e:	d101      	bne.n	800ea64 <dir_register+0xa8>
 800ea60:	2307      	movs	r3, #7
 800ea62:	e09c      	b.n	800eb9e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ea64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea68:	2b04      	cmp	r3, #4
 800ea6a:	d002      	beq.n	800ea72 <dir_register+0xb6>
 800ea6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea70:	e095      	b.n	800eb9e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ea72:	7dfa      	ldrb	r2, [r7, #23]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ea7a:	7dfb      	ldrb	r3, [r7, #23]
 800ea7c:	f003 0302 	and.w	r3, r3, #2
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d007      	beq.n	800ea94 <dir_register+0xd8>
 800ea84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea86:	330c      	adds	r3, #12
 800ea88:	4a47      	ldr	r2, [pc, #284]	@ (800eba8 <dir_register+0x1ec>)
 800ea8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ea8e:	089b      	lsrs	r3, r3, #2
 800ea90:	3301      	adds	r3, #1
 800ea92:	e000      	b.n	800ea96 <dir_register+0xda>
 800ea94:	2301      	movs	r3, #1
 800ea96:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ea98:	6a39      	ldr	r1, [r7, #32]
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f7ff fcc0 	bl	800e420 <dir_alloc>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800eaa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d148      	bne.n	800eb40 <dir_register+0x184>
 800eaae:	6a3b      	ldr	r3, [r7, #32]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	623b      	str	r3, [r7, #32]
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d042      	beq.n	800eb40 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	695a      	ldr	r2, [r3, #20]
 800eabe:	6a3b      	ldr	r3, [r7, #32]
 800eac0:	015b      	lsls	r3, r3, #5
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	4619      	mov	r1, r3
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f7ff fb4b 	bl	800e162 <dir_sdi>
 800eacc:	4603      	mov	r3, r0
 800eace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ead2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d132      	bne.n	800eb40 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	3324      	adds	r3, #36	@ 0x24
 800eade:	4618      	mov	r0, r3
 800eae0:	f7ff fe8a 	bl	800e7f8 <sum_sfn>
 800eae4:	4603      	mov	r3, r0
 800eae6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	69db      	ldr	r3, [r3, #28]
 800eaec:	4619      	mov	r1, r3
 800eaee:	69f8      	ldr	r0, [r7, #28]
 800eaf0:	f7fe ff58 	bl	800d9a4 <move_window>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800eafa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d11d      	bne.n	800eb3e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	6918      	ldr	r0, [r3, #16]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6a19      	ldr	r1, [r3, #32]
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	b2da      	uxtb	r2, r3
 800eb0e:	7efb      	ldrb	r3, [r7, #27]
 800eb10:	f7ff fd7c 	bl	800e60c <put_lfn>
				fs->wflag = 1;
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	2201      	movs	r2, #1
 800eb18:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7ff fba9 	bl	800e274 <dir_next>
 800eb22:	4603      	mov	r3, r0
 800eb24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800eb28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d107      	bne.n	800eb40 <dir_register+0x184>
 800eb30:	6a3b      	ldr	r3, [r7, #32]
 800eb32:	3b01      	subs	r3, #1
 800eb34:	623b      	str	r3, [r7, #32]
 800eb36:	6a3b      	ldr	r3, [r7, #32]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1d5      	bne.n	800eae8 <dir_register+0x12c>
 800eb3c:	e000      	b.n	800eb40 <dir_register+0x184>
				if (res != FR_OK) break;
 800eb3e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eb40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d128      	bne.n	800eb9a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	69db      	ldr	r3, [r3, #28]
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	69f8      	ldr	r0, [r7, #28]
 800eb50:	f7fe ff28 	bl	800d9a4 <move_window>
 800eb54:	4603      	mov	r3, r0
 800eb56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800eb5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d11b      	bne.n	800eb9a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6a1b      	ldr	r3, [r3, #32]
 800eb66:	2220      	movs	r2, #32
 800eb68:	2100      	movs	r1, #0
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7fe fd0d 	bl	800d58a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6a18      	ldr	r0, [r3, #32]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	3324      	adds	r3, #36	@ 0x24
 800eb78:	220b      	movs	r2, #11
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	f7fe fce4 	bl	800d548 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	330c      	adds	r3, #12
 800eb8c:	f002 0218 	and.w	r2, r2, #24
 800eb90:	b2d2      	uxtb	r2, r2
 800eb92:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	2201      	movs	r2, #1
 800eb98:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800eb9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3730      	adds	r7, #48	@ 0x30
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	4ec4ec4f 	.word	0x4ec4ec4f

0800ebac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08a      	sub	sp, #40	@ 0x28
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	613b      	str	r3, [r7, #16]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	691b      	ldr	r3, [r3, #16]
 800ebc2:	60fb      	str	r3, [r7, #12]
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	617b      	str	r3, [r7, #20]
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	1c5a      	adds	r2, r3, #1
 800ebd0:	61ba      	str	r2, [r7, #24]
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ebda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebdc:	2b1f      	cmp	r3, #31
 800ebde:	d940      	bls.n	800ec62 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ebe0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebe2:	2b2f      	cmp	r3, #47	@ 0x2f
 800ebe4:	d006      	beq.n	800ebf4 <create_name+0x48>
 800ebe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebe8:	2b5c      	cmp	r3, #92	@ 0x5c
 800ebea:	d110      	bne.n	800ec0e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ebec:	e002      	b.n	800ebf4 <create_name+0x48>
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	61bb      	str	r3, [r7, #24]
 800ebf4:	693a      	ldr	r2, [r7, #16]
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	2b2f      	cmp	r3, #47	@ 0x2f
 800ebfe:	d0f6      	beq.n	800ebee <create_name+0x42>
 800ec00:	693a      	ldr	r2, [r7, #16]
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	4413      	add	r3, r2
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	2b5c      	cmp	r3, #92	@ 0x5c
 800ec0a:	d0f0      	beq.n	800ebee <create_name+0x42>
			break;
 800ec0c:	e02a      	b.n	800ec64 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	2bfe      	cmp	r3, #254	@ 0xfe
 800ec12:	d901      	bls.n	800ec18 <create_name+0x6c>
 800ec14:	2306      	movs	r3, #6
 800ec16:	e17d      	b.n	800ef14 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ec18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ec1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec20:	2101      	movs	r1, #1
 800ec22:	4618      	mov	r0, r3
 800ec24:	f001 fcc2 	bl	80105ac <ff_convert>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ec2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <create_name+0x8a>
 800ec32:	2306      	movs	r3, #6
 800ec34:	e16e      	b.n	800ef14 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ec36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec38:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec3a:	d809      	bhi.n	800ec50 <create_name+0xa4>
 800ec3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec3e:	4619      	mov	r1, r3
 800ec40:	488d      	ldr	r0, [pc, #564]	@ (800ee78 <create_name+0x2cc>)
 800ec42:	f7fe fce4 	bl	800d60e <chk_chr>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <create_name+0xa4>
 800ec4c:	2306      	movs	r3, #6
 800ec4e:	e161      	b.n	800ef14 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	617a      	str	r2, [r7, #20]
 800ec56:	005b      	lsls	r3, r3, #1
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec5e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ec60:	e7b4      	b.n	800ebcc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ec62:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ec64:	693a      	ldr	r2, [r7, #16]
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	441a      	add	r2, r3
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ec6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec70:	2b1f      	cmp	r3, #31
 800ec72:	d801      	bhi.n	800ec78 <create_name+0xcc>
 800ec74:	2304      	movs	r3, #4
 800ec76:	e000      	b.n	800ec7a <create_name+0xce>
 800ec78:	2300      	movs	r3, #0
 800ec7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ec7e:	e011      	b.n	800eca4 <create_name+0xf8>
		w = lfn[di - 1];
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ec86:	3b01      	subs	r3, #1
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	881b      	ldrh	r3, [r3, #0]
 800ec90:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ec92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec94:	2b20      	cmp	r3, #32
 800ec96:	d002      	beq.n	800ec9e <create_name+0xf2>
 800ec98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec9c:	d106      	bne.n	800ecac <create_name+0x100>
		di--;
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	3b01      	subs	r3, #1
 800eca2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1ea      	bne.n	800ec80 <create_name+0xd4>
 800ecaa:	e000      	b.n	800ecae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ecac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	005b      	lsls	r3, r3, #1
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d101      	bne.n	800ecc4 <create_name+0x118>
 800ecc0:	2306      	movs	r3, #6
 800ecc2:	e127      	b.n	800ef14 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3324      	adds	r3, #36	@ 0x24
 800ecc8:	220b      	movs	r2, #11
 800ecca:	2120      	movs	r1, #32
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7fe fc5c 	bl	800d58a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	61bb      	str	r3, [r7, #24]
 800ecd6:	e002      	b.n	800ecde <create_name+0x132>
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	61bb      	str	r3, [r7, #24]
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	005b      	lsls	r3, r3, #1
 800ece2:	68fa      	ldr	r2, [r7, #12]
 800ece4:	4413      	add	r3, r2
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	2b20      	cmp	r3, #32
 800ecea:	d0f5      	beq.n	800ecd8 <create_name+0x12c>
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecf8:	d0ee      	beq.n	800ecd8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d009      	beq.n	800ed14 <create_name+0x168>
 800ed00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed04:	f043 0303 	orr.w	r3, r3, #3
 800ed08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ed0c:	e002      	b.n	800ed14 <create_name+0x168>
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	3b01      	subs	r3, #1
 800ed12:	617b      	str	r3, [r7, #20]
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d009      	beq.n	800ed2e <create_name+0x182>
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ed20:	3b01      	subs	r3, #1
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	4413      	add	r3, r2
 800ed28:	881b      	ldrh	r3, [r3, #0]
 800ed2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed2c:	d1ef      	bne.n	800ed0e <create_name+0x162>

	i = b = 0; ni = 8;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed34:	2300      	movs	r3, #0
 800ed36:	623b      	str	r3, [r7, #32]
 800ed38:	2308      	movs	r3, #8
 800ed3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	1c5a      	adds	r2, r3, #1
 800ed40:	61ba      	str	r2, [r7, #24]
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	4413      	add	r3, r2
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ed4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	f000 8090 	beq.w	800ee74 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ed54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed56:	2b20      	cmp	r3, #32
 800ed58:	d006      	beq.n	800ed68 <create_name+0x1bc>
 800ed5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed5e:	d10a      	bne.n	800ed76 <create_name+0x1ca>
 800ed60:	69ba      	ldr	r2, [r7, #24]
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d006      	beq.n	800ed76 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ed68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed6c:	f043 0303 	orr.w	r3, r3, #3
 800ed70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed74:	e07d      	b.n	800ee72 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ed76:	6a3a      	ldr	r2, [r7, #32]
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d203      	bcs.n	800ed86 <create_name+0x1da>
 800ed7e:	69ba      	ldr	r2, [r7, #24]
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d123      	bne.n	800edce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	2b0b      	cmp	r3, #11
 800ed8a:	d106      	bne.n	800ed9a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ed8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed90:	f043 0303 	orr.w	r3, r3, #3
 800ed94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed98:	e075      	b.n	800ee86 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ed9a:	69ba      	ldr	r2, [r7, #24]
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d005      	beq.n	800edae <create_name+0x202>
 800eda2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eda6:	f043 0303 	orr.w	r3, r3, #3
 800edaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800edae:	69ba      	ldr	r2, [r7, #24]
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d866      	bhi.n	800ee84 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	61bb      	str	r3, [r7, #24]
 800edba:	2308      	movs	r3, #8
 800edbc:	623b      	str	r3, [r7, #32]
 800edbe:	230b      	movs	r3, #11
 800edc0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800edc2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800edcc:	e051      	b.n	800ee72 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800edce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edd0:	2b7f      	cmp	r3, #127	@ 0x7f
 800edd2:	d914      	bls.n	800edfe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800edd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edd6:	2100      	movs	r1, #0
 800edd8:	4618      	mov	r0, r3
 800edda:	f001 fbe7 	bl	80105ac <ff_convert>
 800edde:	4603      	mov	r3, r0
 800ede0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ede2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d004      	beq.n	800edf2 <create_name+0x246>
 800ede8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edea:	3b80      	subs	r3, #128	@ 0x80
 800edec:	4a23      	ldr	r2, [pc, #140]	@ (800ee7c <create_name+0x2d0>)
 800edee:	5cd3      	ldrb	r3, [r2, r3]
 800edf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800edf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edf6:	f043 0302 	orr.w	r3, r3, #2
 800edfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800edfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d007      	beq.n	800ee14 <create_name+0x268>
 800ee04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee06:	4619      	mov	r1, r3
 800ee08:	481d      	ldr	r0, [pc, #116]	@ (800ee80 <create_name+0x2d4>)
 800ee0a:	f7fe fc00 	bl	800d60e <chk_chr>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d008      	beq.n	800ee26 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ee14:	235f      	movs	r3, #95	@ 0x5f
 800ee16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ee18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee1c:	f043 0303 	orr.w	r3, r3, #3
 800ee20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ee24:	e01b      	b.n	800ee5e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ee26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee28:	2b40      	cmp	r3, #64	@ 0x40
 800ee2a:	d909      	bls.n	800ee40 <create_name+0x294>
 800ee2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee2e:	2b5a      	cmp	r3, #90	@ 0x5a
 800ee30:	d806      	bhi.n	800ee40 <create_name+0x294>
					b |= 2;
 800ee32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee36:	f043 0302 	orr.w	r3, r3, #2
 800ee3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ee3e:	e00e      	b.n	800ee5e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ee40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee42:	2b60      	cmp	r3, #96	@ 0x60
 800ee44:	d90b      	bls.n	800ee5e <create_name+0x2b2>
 800ee46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee48:	2b7a      	cmp	r3, #122	@ 0x7a
 800ee4a:	d808      	bhi.n	800ee5e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ee4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee50:	f043 0301 	orr.w	r3, r3, #1
 800ee54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ee58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee5a:	3b20      	subs	r3, #32
 800ee5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ee5e:	6a3b      	ldr	r3, [r7, #32]
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	623a      	str	r2, [r7, #32]
 800ee64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ee66:	b2d1      	uxtb	r1, r2
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	460a      	mov	r2, r1
 800ee6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ee72:	e763      	b.n	800ed3c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ee74:	bf00      	nop
 800ee76:	e006      	b.n	800ee86 <create_name+0x2da>
 800ee78:	08015184 	.word	0x08015184
 800ee7c:	080183e4 	.word	0x080183e4
 800ee80:	08015190 	.word	0x08015190
			if (si > di) break;			/* No extension */
 800ee84:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ee8c:	2be5      	cmp	r3, #229	@ 0xe5
 800ee8e:	d103      	bne.n	800ee98 <create_name+0x2ec>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2205      	movs	r2, #5
 800ee94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	2b08      	cmp	r3, #8
 800ee9c:	d104      	bne.n	800eea8 <create_name+0x2fc>
 800ee9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800eea8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eeac:	f003 030c 	and.w	r3, r3, #12
 800eeb0:	2b0c      	cmp	r3, #12
 800eeb2:	d005      	beq.n	800eec0 <create_name+0x314>
 800eeb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eeb8:	f003 0303 	and.w	r3, r3, #3
 800eebc:	2b03      	cmp	r3, #3
 800eebe:	d105      	bne.n	800eecc <create_name+0x320>
 800eec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eec4:	f043 0302 	orr.w	r3, r3, #2
 800eec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800eecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eed0:	f003 0302 	and.w	r3, r3, #2
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d117      	bne.n	800ef08 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800eed8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eedc:	f003 0303 	and.w	r3, r3, #3
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d105      	bne.n	800eef0 <create_name+0x344>
 800eee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eee8:	f043 0310 	orr.w	r3, r3, #16
 800eeec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800eef0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eef4:	f003 030c 	and.w	r3, r3, #12
 800eef8:	2b04      	cmp	r3, #4
 800eefa:	d105      	bne.n	800ef08 <create_name+0x35c>
 800eefc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef00:	f043 0308 	orr.w	r3, r3, #8
 800ef04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ef0e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ef12:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3728      	adds	r7, #40	@ 0x28
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef30:	e002      	b.n	800ef38 <follow_path+0x1c>
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	3301      	adds	r3, #1
 800ef36:	603b      	str	r3, [r7, #0]
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ef3e:	d0f8      	beq.n	800ef32 <follow_path+0x16>
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	2b5c      	cmp	r3, #92	@ 0x5c
 800ef46:	d0f4      	beq.n	800ef32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	2b1f      	cmp	r3, #31
 800ef54:	d80a      	bhi.n	800ef6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2280      	movs	r2, #128	@ 0x80
 800ef5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ef5e:	2100      	movs	r1, #0
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f7ff f8fe 	bl	800e162 <dir_sdi>
 800ef66:	4603      	mov	r3, r0
 800ef68:	75fb      	strb	r3, [r7, #23]
 800ef6a:	e048      	b.n	800effe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ef6c:	463b      	mov	r3, r7
 800ef6e:	4619      	mov	r1, r3
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f7ff fe1b 	bl	800ebac <create_name>
 800ef76:	4603      	mov	r3, r0
 800ef78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef7a:	7dfb      	ldrb	r3, [r7, #23]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d139      	bne.n	800eff4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f7ff fc5a 	bl	800e83a <dir_find>
 800ef86:	4603      	mov	r3, r0
 800ef88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ef90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ef92:	7dfb      	ldrb	r3, [r7, #23]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00a      	beq.n	800efae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ef98:	7dfb      	ldrb	r3, [r7, #23]
 800ef9a:	2b04      	cmp	r3, #4
 800ef9c:	d12c      	bne.n	800eff8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ef9e:	7afb      	ldrb	r3, [r7, #11]
 800efa0:	f003 0304 	and.w	r3, r3, #4
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d127      	bne.n	800eff8 <follow_path+0xdc>
 800efa8:	2305      	movs	r3, #5
 800efaa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800efac:	e024      	b.n	800eff8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800efae:	7afb      	ldrb	r3, [r7, #11]
 800efb0:	f003 0304 	and.w	r3, r3, #4
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d121      	bne.n	800effc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	799b      	ldrb	r3, [r3, #6]
 800efbc:	f003 0310 	and.w	r3, r3, #16
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d102      	bne.n	800efca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800efc4:	2305      	movs	r3, #5
 800efc6:	75fb      	strb	r3, [r7, #23]
 800efc8:	e019      	b.n	800effe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	695b      	ldr	r3, [r3, #20]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	8992      	ldrh	r2, [r2, #12]
 800efd8:	fbb3 f0f2 	udiv	r0, r3, r2
 800efdc:	fb00 f202 	mul.w	r2, r0, r2
 800efe0:	1a9b      	subs	r3, r3, r2
 800efe2:	440b      	add	r3, r1
 800efe4:	4619      	mov	r1, r3
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f7ff fa61 	bl	800e4ae <ld_clust>
 800efec:	4602      	mov	r2, r0
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eff2:	e7bb      	b.n	800ef6c <follow_path+0x50>
			if (res != FR_OK) break;
 800eff4:	bf00      	nop
 800eff6:	e002      	b.n	800effe <follow_path+0xe2>
				break;
 800eff8:	bf00      	nop
 800effa:	e000      	b.n	800effe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800effc:	bf00      	nop
			}
		}
	}

	return res;
 800effe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f008:	b480      	push	{r7}
 800f00a:	b087      	sub	sp, #28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f010:	f04f 33ff 	mov.w	r3, #4294967295
 800f014:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d031      	beq.n	800f082 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	617b      	str	r3, [r7, #20]
 800f024:	e002      	b.n	800f02c <get_ldnumber+0x24>
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	3301      	adds	r3, #1
 800f02a:	617b      	str	r3, [r7, #20]
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	2b1f      	cmp	r3, #31
 800f032:	d903      	bls.n	800f03c <get_ldnumber+0x34>
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	2b3a      	cmp	r3, #58	@ 0x3a
 800f03a:	d1f4      	bne.n	800f026 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	2b3a      	cmp	r3, #58	@ 0x3a
 800f042:	d11c      	bne.n	800f07e <get_ldnumber+0x76>
			tp = *path;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	1c5a      	adds	r2, r3, #1
 800f04e:	60fa      	str	r2, [r7, #12]
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	3b30      	subs	r3, #48	@ 0x30
 800f054:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	2b09      	cmp	r3, #9
 800f05a:	d80e      	bhi.n	800f07a <get_ldnumber+0x72>
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	429a      	cmp	r2, r3
 800f062:	d10a      	bne.n	800f07a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d107      	bne.n	800f07a <get_ldnumber+0x72>
					vol = (int)i;
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	3301      	adds	r3, #1
 800f072:	617b      	str	r3, [r7, #20]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	697a      	ldr	r2, [r7, #20]
 800f078:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	e002      	b.n	800f084 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f07e:	2300      	movs	r3, #0
 800f080:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f082:	693b      	ldr	r3, [r7, #16]
}
 800f084:	4618      	mov	r0, r3
 800f086:	371c      	adds	r7, #28
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	70da      	strb	r2, [r3, #3]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f0a6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f0a8:	6839      	ldr	r1, [r7, #0]
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7fe fc7a 	bl	800d9a4 <move_window>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d001      	beq.n	800f0ba <check_fs+0x2a>
 800f0b6:	2304      	movs	r3, #4
 800f0b8:	e038      	b.n	800f12c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	3338      	adds	r3, #56	@ 0x38
 800f0be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fe f9be 	bl	800d444 <ld_word>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d001      	beq.n	800f0d8 <check_fs+0x48>
 800f0d4:	2303      	movs	r3, #3
 800f0d6:	e029      	b.n	800f12c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f0de:	2be9      	cmp	r3, #233	@ 0xe9
 800f0e0:	d009      	beq.n	800f0f6 <check_fs+0x66>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f0e8:	2beb      	cmp	r3, #235	@ 0xeb
 800f0ea:	d11e      	bne.n	800f12a <check_fs+0x9a>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f0f2:	2b90      	cmp	r3, #144	@ 0x90
 800f0f4:	d119      	bne.n	800f12a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	3338      	adds	r3, #56	@ 0x38
 800f0fa:	3336      	adds	r3, #54	@ 0x36
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fe f9b9 	bl	800d474 <ld_dword>
 800f102:	4603      	mov	r3, r0
 800f104:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f108:	4a0a      	ldr	r2, [pc, #40]	@ (800f134 <check_fs+0xa4>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d101      	bne.n	800f112 <check_fs+0x82>
 800f10e:	2300      	movs	r3, #0
 800f110:	e00c      	b.n	800f12c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	3338      	adds	r3, #56	@ 0x38
 800f116:	3352      	adds	r3, #82	@ 0x52
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fe f9ab 	bl	800d474 <ld_dword>
 800f11e:	4603      	mov	r3, r0
 800f120:	4a05      	ldr	r2, [pc, #20]	@ (800f138 <check_fs+0xa8>)
 800f122:	4293      	cmp	r3, r2
 800f124:	d101      	bne.n	800f12a <check_fs+0x9a>
 800f126:	2300      	movs	r3, #0
 800f128:	e000      	b.n	800f12c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f12a:	2302      	movs	r3, #2
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	00544146 	.word	0x00544146
 800f138:	33544146 	.word	0x33544146

0800f13c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b096      	sub	sp, #88	@ 0x58
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	4613      	mov	r3, r2
 800f148:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	2200      	movs	r2, #0
 800f14e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f7ff ff59 	bl	800f008 <get_ldnumber>
 800f156:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	da01      	bge.n	800f162 <find_volume+0x26>
 800f15e:	230b      	movs	r3, #11
 800f160:	e265      	b.n	800f62e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f162:	4a9f      	ldr	r2, [pc, #636]	@ (800f3e0 <find_volume+0x2a4>)
 800f164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f16a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d101      	bne.n	800f176 <find_volume+0x3a>
 800f172:	230c      	movs	r3, #12
 800f174:	e25b      	b.n	800f62e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f17a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f17c:	79fb      	ldrb	r3, [r7, #7]
 800f17e:	f023 0301 	bic.w	r3, r3, #1
 800f182:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d01a      	beq.n	800f1c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f18e:	785b      	ldrb	r3, [r3, #1]
 800f190:	4618      	mov	r0, r3
 800f192:	f7fe f8b7 	bl	800d304 <disk_status>
 800f196:	4603      	mov	r3, r0
 800f198:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f19c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1a0:	f003 0301 	and.w	r3, r3, #1
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d10c      	bne.n	800f1c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f1a8:	79fb      	ldrb	r3, [r7, #7]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d007      	beq.n	800f1be <find_volume+0x82>
 800f1ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1b2:	f003 0304 	and.w	r3, r3, #4
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d001      	beq.n	800f1be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f1ba:	230a      	movs	r3, #10
 800f1bc:	e237      	b.n	800f62e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e235      	b.n	800f62e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d2:	785b      	ldrb	r3, [r3, #1]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fe f8af 	bl	800d338 <disk_initialize>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f1e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1e4:	f003 0301 	and.w	r3, r3, #1
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d001      	beq.n	800f1f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f1ec:	2303      	movs	r3, #3
 800f1ee:	e21e      	b.n	800f62e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f1f0:	79fb      	ldrb	r3, [r7, #7]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d007      	beq.n	800f206 <find_volume+0xca>
 800f1f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1fa:	f003 0304 	and.w	r3, r3, #4
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d001      	beq.n	800f206 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f202:	230a      	movs	r3, #10
 800f204:	e213      	b.n	800f62e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f208:	7858      	ldrb	r0, [r3, #1]
 800f20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20c:	330c      	adds	r3, #12
 800f20e:	461a      	mov	r2, r3
 800f210:	2102      	movs	r1, #2
 800f212:	f7fe f8f9 	bl	800d408 <disk_ioctl>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d001      	beq.n	800f220 <find_volume+0xe4>
 800f21c:	2301      	movs	r3, #1
 800f21e:	e206      	b.n	800f62e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f222:	899b      	ldrh	r3, [r3, #12]
 800f224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f228:	d80d      	bhi.n	800f246 <find_volume+0x10a>
 800f22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f22c:	899b      	ldrh	r3, [r3, #12]
 800f22e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f232:	d308      	bcc.n	800f246 <find_volume+0x10a>
 800f234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f236:	899b      	ldrh	r3, [r3, #12]
 800f238:	461a      	mov	r2, r3
 800f23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23c:	899b      	ldrh	r3, [r3, #12]
 800f23e:	3b01      	subs	r3, #1
 800f240:	4013      	ands	r3, r2
 800f242:	2b00      	cmp	r3, #0
 800f244:	d001      	beq.n	800f24a <find_volume+0x10e>
 800f246:	2301      	movs	r3, #1
 800f248:	e1f1      	b.n	800f62e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f24a:	2300      	movs	r3, #0
 800f24c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f24e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f250:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f252:	f7ff ff1d 	bl	800f090 <check_fs>
 800f256:	4603      	mov	r3, r0
 800f258:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f25c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f260:	2b02      	cmp	r3, #2
 800f262:	d149      	bne.n	800f2f8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f264:	2300      	movs	r3, #0
 800f266:	643b      	str	r3, [r7, #64]	@ 0x40
 800f268:	e01e      	b.n	800f2a8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f272:	011b      	lsls	r3, r3, #4
 800f274:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f278:	4413      	add	r3, r2
 800f27a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f27e:	3304      	adds	r3, #4
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d006      	beq.n	800f294 <find_volume+0x158>
 800f286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f288:	3308      	adds	r3, #8
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fe f8f2 	bl	800d474 <ld_dword>
 800f290:	4602      	mov	r2, r0
 800f292:	e000      	b.n	800f296 <find_volume+0x15a>
 800f294:	2200      	movs	r2, #0
 800f296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	3358      	adds	r3, #88	@ 0x58
 800f29c:	443b      	add	r3, r7
 800f29e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f2a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2aa:	2b03      	cmp	r3, #3
 800f2ac:	d9dd      	bls.n	800f26a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f2b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d002      	beq.n	800f2be <find_volume+0x182>
 800f2b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f2be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	3358      	adds	r3, #88	@ 0x58
 800f2c4:	443b      	add	r3, r7
 800f2c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f2ca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f2cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d005      	beq.n	800f2de <find_volume+0x1a2>
 800f2d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f2d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f2d6:	f7ff fedb 	bl	800f090 <check_fs>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	e000      	b.n	800f2e0 <find_volume+0x1a4>
 800f2de:	2303      	movs	r3, #3
 800f2e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f2e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d905      	bls.n	800f2f8 <find_volume+0x1bc>
 800f2ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2f4:	2b03      	cmp	r3, #3
 800f2f6:	d9e2      	bls.n	800f2be <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f2f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f2fc:	2b04      	cmp	r3, #4
 800f2fe:	d101      	bne.n	800f304 <find_volume+0x1c8>
 800f300:	2301      	movs	r3, #1
 800f302:	e194      	b.n	800f62e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f304:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d901      	bls.n	800f310 <find_volume+0x1d4>
 800f30c:	230d      	movs	r3, #13
 800f30e:	e18e      	b.n	800f62e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f312:	3338      	adds	r3, #56	@ 0x38
 800f314:	330b      	adds	r3, #11
 800f316:	4618      	mov	r0, r3
 800f318:	f7fe f894 	bl	800d444 <ld_word>
 800f31c:	4603      	mov	r3, r0
 800f31e:	461a      	mov	r2, r3
 800f320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f322:	899b      	ldrh	r3, [r3, #12]
 800f324:	429a      	cmp	r2, r3
 800f326:	d001      	beq.n	800f32c <find_volume+0x1f0>
 800f328:	230d      	movs	r3, #13
 800f32a:	e180      	b.n	800f62e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32e:	3338      	adds	r3, #56	@ 0x38
 800f330:	3316      	adds	r3, #22
 800f332:	4618      	mov	r0, r3
 800f334:	f7fe f886 	bl	800d444 <ld_word>
 800f338:	4603      	mov	r3, r0
 800f33a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d106      	bne.n	800f350 <find_volume+0x214>
 800f342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f344:	3338      	adds	r3, #56	@ 0x38
 800f346:	3324      	adds	r3, #36	@ 0x24
 800f348:	4618      	mov	r0, r3
 800f34a:	f7fe f893 	bl	800d474 <ld_dword>
 800f34e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f352:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f354:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f358:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800f35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f35e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f362:	789b      	ldrb	r3, [r3, #2]
 800f364:	2b01      	cmp	r3, #1
 800f366:	d005      	beq.n	800f374 <find_volume+0x238>
 800f368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f36a:	789b      	ldrb	r3, [r3, #2]
 800f36c:	2b02      	cmp	r3, #2
 800f36e:	d001      	beq.n	800f374 <find_volume+0x238>
 800f370:	230d      	movs	r3, #13
 800f372:	e15c      	b.n	800f62e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f376:	789b      	ldrb	r3, [r3, #2]
 800f378:	461a      	mov	r2, r3
 800f37a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f37c:	fb02 f303 	mul.w	r3, r2, r3
 800f380:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f384:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f388:	461a      	mov	r2, r3
 800f38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f390:	895b      	ldrh	r3, [r3, #10]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d008      	beq.n	800f3a8 <find_volume+0x26c>
 800f396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f398:	895b      	ldrh	r3, [r3, #10]
 800f39a:	461a      	mov	r2, r3
 800f39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f39e:	895b      	ldrh	r3, [r3, #10]
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	4013      	ands	r3, r2
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d001      	beq.n	800f3ac <find_volume+0x270>
 800f3a8:	230d      	movs	r3, #13
 800f3aa:	e140      	b.n	800f62e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ae:	3338      	adds	r3, #56	@ 0x38
 800f3b0:	3311      	adds	r3, #17
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fe f846 	bl	800d444 <ld_word>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c2:	891b      	ldrh	r3, [r3, #8]
 800f3c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f3c6:	8992      	ldrh	r2, [r2, #12]
 800f3c8:	0952      	lsrs	r2, r2, #5
 800f3ca:	b292      	uxth	r2, r2
 800f3cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3d0:	fb01 f202 	mul.w	r2, r1, r2
 800f3d4:	1a9b      	subs	r3, r3, r2
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d003      	beq.n	800f3e4 <find_volume+0x2a8>
 800f3dc:	230d      	movs	r3, #13
 800f3de:	e126      	b.n	800f62e <find_volume+0x4f2>
 800f3e0:	200026ec 	.word	0x200026ec

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e6:	3338      	adds	r3, #56	@ 0x38
 800f3e8:	3313      	adds	r3, #19
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fe f82a 	bl	800d444 <ld_word>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f3f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d106      	bne.n	800f408 <find_volume+0x2cc>
 800f3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3fc:	3338      	adds	r3, #56	@ 0x38
 800f3fe:	3320      	adds	r3, #32
 800f400:	4618      	mov	r0, r3
 800f402:	f7fe f837 	bl	800d474 <ld_dword>
 800f406:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f40a:	3338      	adds	r3, #56	@ 0x38
 800f40c:	330e      	adds	r3, #14
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fe f818 	bl	800d444 <ld_word>
 800f414:	4603      	mov	r3, r0
 800f416:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f418:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d101      	bne.n	800f422 <find_volume+0x2e6>
 800f41e:	230d      	movs	r3, #13
 800f420:	e105      	b.n	800f62e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f422:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f426:	4413      	add	r3, r2
 800f428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f42a:	8911      	ldrh	r1, [r2, #8]
 800f42c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f42e:	8992      	ldrh	r2, [r2, #12]
 800f430:	0952      	lsrs	r2, r2, #5
 800f432:	b292      	uxth	r2, r2
 800f434:	fbb1 f2f2 	udiv	r2, r1, r2
 800f438:	b292      	uxth	r2, r2
 800f43a:	4413      	add	r3, r2
 800f43c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f43e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f442:	429a      	cmp	r2, r3
 800f444:	d201      	bcs.n	800f44a <find_volume+0x30e>
 800f446:	230d      	movs	r3, #13
 800f448:	e0f1      	b.n	800f62e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f44a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44e:	1ad3      	subs	r3, r2, r3
 800f450:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f452:	8952      	ldrh	r2, [r2, #10]
 800f454:	fbb3 f3f2 	udiv	r3, r3, r2
 800f458:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d101      	bne.n	800f464 <find_volume+0x328>
 800f460:	230d      	movs	r3, #13
 800f462:	e0e4      	b.n	800f62e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f464:	2303      	movs	r3, #3
 800f466:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f46c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f470:	4293      	cmp	r3, r2
 800f472:	d802      	bhi.n	800f47a <find_volume+0x33e>
 800f474:	2302      	movs	r3, #2
 800f476:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f47c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f480:	4293      	cmp	r3, r2
 800f482:	d802      	bhi.n	800f48a <find_volume+0x34e>
 800f484:	2301      	movs	r3, #1
 800f486:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f48c:	1c9a      	adds	r2, r3, #2
 800f48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f490:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f494:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f496:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f498:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f49a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f49c:	441a      	add	r2, r3
 800f49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f4a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a6:	441a      	add	r2, r3
 800f4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4aa:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800f4ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f4b0:	2b03      	cmp	r3, #3
 800f4b2:	d11e      	bne.n	800f4f2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b6:	3338      	adds	r3, #56	@ 0x38
 800f4b8:	332a      	adds	r3, #42	@ 0x2a
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fd ffc2 	bl	800d444 <ld_word>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <find_volume+0x38e>
 800f4c6:	230d      	movs	r3, #13
 800f4c8:	e0b1      	b.n	800f62e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4cc:	891b      	ldrh	r3, [r3, #8]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d001      	beq.n	800f4d6 <find_volume+0x39a>
 800f4d2:	230d      	movs	r3, #13
 800f4d4:	e0ab      	b.n	800f62e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d8:	3338      	adds	r3, #56	@ 0x38
 800f4da:	332c      	adds	r3, #44	@ 0x2c
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7fd ffc9 	bl	800d474 <ld_dword>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ea:	69db      	ldr	r3, [r3, #28]
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4f0:	e01f      	b.n	800f532 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f4:	891b      	ldrh	r3, [r3, #8]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d101      	bne.n	800f4fe <find_volume+0x3c2>
 800f4fa:	230d      	movs	r3, #13
 800f4fc:	e097      	b.n	800f62e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f500:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f504:	441a      	add	r2, r3
 800f506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f508:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f50a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f50e:	2b02      	cmp	r3, #2
 800f510:	d103      	bne.n	800f51a <find_volume+0x3de>
 800f512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f514:	69db      	ldr	r3, [r3, #28]
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	e00a      	b.n	800f530 <find_volume+0x3f4>
 800f51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f51c:	69da      	ldr	r2, [r3, #28]
 800f51e:	4613      	mov	r3, r2
 800f520:	005b      	lsls	r3, r3, #1
 800f522:	4413      	add	r3, r2
 800f524:	085a      	lsrs	r2, r3, #1
 800f526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f528:	69db      	ldr	r3, [r3, #28]
 800f52a:	f003 0301 	and.w	r3, r3, #1
 800f52e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f530:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f534:	6a1a      	ldr	r2, [r3, #32]
 800f536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f538:	899b      	ldrh	r3, [r3, #12]
 800f53a:	4619      	mov	r1, r3
 800f53c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f53e:	440b      	add	r3, r1
 800f540:	3b01      	subs	r3, #1
 800f542:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f544:	8989      	ldrh	r1, [r1, #12]
 800f546:	fbb3 f3f1 	udiv	r3, r3, r1
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d201      	bcs.n	800f552 <find_volume+0x416>
 800f54e:	230d      	movs	r3, #13
 800f550:	e06d      	b.n	800f62e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f554:	f04f 32ff 	mov.w	r2, #4294967295
 800f558:	619a      	str	r2, [r3, #24]
 800f55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f55c:	699a      	ldr	r2, [r3, #24]
 800f55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f560:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f564:	2280      	movs	r2, #128	@ 0x80
 800f566:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f568:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f56c:	2b03      	cmp	r3, #3
 800f56e:	d149      	bne.n	800f604 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f572:	3338      	adds	r3, #56	@ 0x38
 800f574:	3330      	adds	r3, #48	@ 0x30
 800f576:	4618      	mov	r0, r3
 800f578:	f7fd ff64 	bl	800d444 <ld_word>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d140      	bne.n	800f604 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f584:	3301      	adds	r3, #1
 800f586:	4619      	mov	r1, r3
 800f588:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f58a:	f7fe fa0b 	bl	800d9a4 <move_window>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d137      	bne.n	800f604 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f596:	2200      	movs	r2, #0
 800f598:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59c:	3338      	adds	r3, #56	@ 0x38
 800f59e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fd ff4e 	bl	800d444 <ld_word>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d127      	bne.n	800f604 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b6:	3338      	adds	r3, #56	@ 0x38
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fd ff5b 	bl	800d474 <ld_dword>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	4a1d      	ldr	r2, [pc, #116]	@ (800f638 <find_volume+0x4fc>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d11e      	bne.n	800f604 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c8:	3338      	adds	r3, #56	@ 0x38
 800f5ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fd ff50 	bl	800d474 <ld_dword>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	4a19      	ldr	r2, [pc, #100]	@ (800f63c <find_volume+0x500>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d113      	bne.n	800f604 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5de:	3338      	adds	r3, #56	@ 0x38
 800f5e0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fd ff45 	bl	800d474 <ld_dword>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f2:	3338      	adds	r3, #56	@ 0x38
 800f5f4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7fd ff3b 	bl	800d474 <ld_dword>
 800f5fe:	4602      	mov	r2, r0
 800f600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f602:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f606:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f60a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f60c:	4b0c      	ldr	r3, [pc, #48]	@ (800f640 <find_volume+0x504>)
 800f60e:	881b      	ldrh	r3, [r3, #0]
 800f610:	3301      	adds	r3, #1
 800f612:	b29a      	uxth	r2, r3
 800f614:	4b0a      	ldr	r3, [pc, #40]	@ (800f640 <find_volume+0x504>)
 800f616:	801a      	strh	r2, [r3, #0]
 800f618:	4b09      	ldr	r3, [pc, #36]	@ (800f640 <find_volume+0x504>)
 800f61a:	881a      	ldrh	r2, [r3, #0]
 800f61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f61e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f622:	4a08      	ldr	r2, [pc, #32]	@ (800f644 <find_volume+0x508>)
 800f624:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f626:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f628:	f7fe f954 	bl	800d8d4 <clear_lock>
#endif
	return FR_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3758      	adds	r7, #88	@ 0x58
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	41615252 	.word	0x41615252
 800f63c:	61417272 	.word	0x61417272
 800f640:	200026f0 	.word	0x200026f0
 800f644:	20002714 	.word	0x20002714

0800f648 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f652:	2309      	movs	r3, #9
 800f654:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d01c      	beq.n	800f696 <validate+0x4e>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d018      	beq.n	800f696 <validate+0x4e>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d013      	beq.n	800f696 <validate+0x4e>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	889a      	ldrh	r2, [r3, #4]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	88db      	ldrh	r3, [r3, #6]
 800f678:	429a      	cmp	r2, r3
 800f67a:	d10c      	bne.n	800f696 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	785b      	ldrb	r3, [r3, #1]
 800f682:	4618      	mov	r0, r3
 800f684:	f7fd fe3e 	bl	800d304 <disk_status>
 800f688:	4603      	mov	r3, r0
 800f68a:	f003 0301 	and.w	r3, r3, #1
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d101      	bne.n	800f696 <validate+0x4e>
			res = FR_OK;
 800f692:	2300      	movs	r3, #0
 800f694:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f696:	7bfb      	ldrb	r3, [r7, #15]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d102      	bne.n	800f6a2 <validate+0x5a>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	e000      	b.n	800f6a4 <validate+0x5c>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	683a      	ldr	r2, [r7, #0]
 800f6a6:	6013      	str	r3, [r2, #0]
	return res;
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
	...

0800f6b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b088      	sub	sp, #32
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	4613      	mov	r3, r2
 800f6c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f6c6:	f107 0310 	add.w	r3, r7, #16
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7ff fc9c 	bl	800f008 <get_ldnumber>
 800f6d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f6d2:	69fb      	ldr	r3, [r7, #28]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	da01      	bge.n	800f6dc <f_mount+0x28>
 800f6d8:	230b      	movs	r3, #11
 800f6da:	e02b      	b.n	800f734 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f6dc:	4a17      	ldr	r2, [pc, #92]	@ (800f73c <f_mount+0x88>)
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d005      	beq.n	800f6f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f6ec:	69b8      	ldr	r0, [r7, #24]
 800f6ee:	f7fe f8f1 	bl	800d8d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f6f2:	69bb      	ldr	r3, [r7, #24]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d002      	beq.n	800f704 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2200      	movs	r2, #0
 800f702:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	490d      	ldr	r1, [pc, #52]	@ (800f73c <f_mount+0x88>)
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <f_mount+0x66>
 800f714:	79fb      	ldrb	r3, [r7, #7]
 800f716:	2b01      	cmp	r3, #1
 800f718:	d001      	beq.n	800f71e <f_mount+0x6a>
 800f71a:	2300      	movs	r3, #0
 800f71c:	e00a      	b.n	800f734 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f71e:	f107 010c 	add.w	r1, r7, #12
 800f722:	f107 0308 	add.w	r3, r7, #8
 800f726:	2200      	movs	r2, #0
 800f728:	4618      	mov	r0, r3
 800f72a:	f7ff fd07 	bl	800f13c <find_volume>
 800f72e:	4603      	mov	r3, r0
 800f730:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f732:	7dfb      	ldrb	r3, [r7, #23]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3720      	adds	r7, #32
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	200026ec 	.word	0x200026ec

0800f740 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b09a      	sub	sp, #104	@ 0x68
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	4613      	mov	r3, r2
 800f74c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d101      	bne.n	800f758 <f_open+0x18>
 800f754:	2309      	movs	r3, #9
 800f756:	e1b7      	b.n	800fac8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f758:	79fb      	ldrb	r3, [r7, #7]
 800f75a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f75e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f760:	79fa      	ldrb	r2, [r7, #7]
 800f762:	f107 0114 	add.w	r1, r7, #20
 800f766:	f107 0308 	add.w	r3, r7, #8
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff fce6 	bl	800f13c <find_volume>
 800f770:	4603      	mov	r3, r0
 800f772:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f776:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f040 819b 	bne.w	800fab6 <f_open+0x376>
		dj.obj.fs = fs;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	f107 0318 	add.w	r3, r7, #24
 800f78a:	4611      	mov	r1, r2
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7ff fbc5 	bl	800ef1c <follow_path>
 800f792:	4603      	mov	r3, r0
 800f794:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f798:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d118      	bne.n	800f7d2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f7a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f7a4:	b25b      	sxtb	r3, r3
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	da03      	bge.n	800f7b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f7aa:	2306      	movs	r3, #6
 800f7ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f7b0:	e00f      	b.n	800f7d2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	bf8c      	ite	hi
 800f7b8:	2301      	movhi	r3, #1
 800f7ba:	2300      	movls	r3, #0
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	461a      	mov	r2, r3
 800f7c0:	f107 0318 	add.w	r3, r7, #24
 800f7c4:	4611      	mov	r1, r2
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7fd ff3c 	bl	800d644 <chk_lock>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f7d2:	79fb      	ldrb	r3, [r7, #7]
 800f7d4:	f003 031c 	and.w	r3, r3, #28
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d07f      	beq.n	800f8dc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800f7dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d017      	beq.n	800f814 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f7e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f7e8:	2b04      	cmp	r3, #4
 800f7ea:	d10e      	bne.n	800f80a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f7ec:	f7fd ff86 	bl	800d6fc <enq_lock>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d006      	beq.n	800f804 <f_open+0xc4>
 800f7f6:	f107 0318 	add.w	r3, r7, #24
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7ff f8de 	bl	800e9bc <dir_register>
 800f800:	4603      	mov	r3, r0
 800f802:	e000      	b.n	800f806 <f_open+0xc6>
 800f804:	2312      	movs	r3, #18
 800f806:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f80a:	79fb      	ldrb	r3, [r7, #7]
 800f80c:	f043 0308 	orr.w	r3, r3, #8
 800f810:	71fb      	strb	r3, [r7, #7]
 800f812:	e010      	b.n	800f836 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f814:	7fbb      	ldrb	r3, [r7, #30]
 800f816:	f003 0311 	and.w	r3, r3, #17
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d003      	beq.n	800f826 <f_open+0xe6>
					res = FR_DENIED;
 800f81e:	2307      	movs	r3, #7
 800f820:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f824:	e007      	b.n	800f836 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	f003 0304 	and.w	r3, r3, #4
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <f_open+0xf6>
 800f830:	2308      	movs	r3, #8
 800f832:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f836:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d168      	bne.n	800f910 <f_open+0x1d0>
 800f83e:	79fb      	ldrb	r3, [r7, #7]
 800f840:	f003 0308 	and.w	r3, r3, #8
 800f844:	2b00      	cmp	r3, #0
 800f846:	d063      	beq.n	800f910 <f_open+0x1d0>
				dw = GET_FATTIME();
 800f848:	f7fd fbd6 	bl	800cff8 <get_fattime>
 800f84c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f850:	330e      	adds	r3, #14
 800f852:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f854:	4618      	mov	r0, r3
 800f856:	f7fd fe4b 	bl	800d4f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f85c:	3316      	adds	r3, #22
 800f85e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f860:	4618      	mov	r0, r3
 800f862:	f7fd fe45 	bl	800d4f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f868:	330b      	adds	r3, #11
 800f86a:	2220      	movs	r2, #32
 800f86c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f872:	4611      	mov	r1, r2
 800f874:	4618      	mov	r0, r3
 800f876:	f7fe fe1a 	bl	800e4ae <ld_clust>
 800f87a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f880:	2200      	movs	r2, #0
 800f882:	4618      	mov	r0, r3
 800f884:	f7fe fe32 	bl	800e4ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f88a:	331c      	adds	r3, #28
 800f88c:	2100      	movs	r1, #0
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fd fe2e 	bl	800d4f0 <st_dword>
					fs->wflag = 1;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	2201      	movs	r2, #1
 800f898:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f89a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d037      	beq.n	800f910 <f_open+0x1d0>
						dw = fs->winsect;
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8a4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f8a6:	f107 0318 	add.w	r3, r7, #24
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fe fb22 	bl	800def8 <remove_chain>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800f8ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d126      	bne.n	800f910 <f_open+0x1d0>
							res = move_window(fs, dw);
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fe f86c 	bl	800d9a4 <move_window>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f8d6:	3a01      	subs	r2, #1
 800f8d8:	615a      	str	r2, [r3, #20]
 800f8da:	e019      	b.n	800f910 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f8dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d115      	bne.n	800f910 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f8e4:	7fbb      	ldrb	r3, [r7, #30]
 800f8e6:	f003 0310 	and.w	r3, r3, #16
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d003      	beq.n	800f8f6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800f8ee:	2304      	movs	r3, #4
 800f8f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f8f4:	e00c      	b.n	800f910 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f8f6:	79fb      	ldrb	r3, [r7, #7]
 800f8f8:	f003 0302 	and.w	r3, r3, #2
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d007      	beq.n	800f910 <f_open+0x1d0>
 800f900:	7fbb      	ldrb	r3, [r7, #30]
 800f902:	f003 0301 	and.w	r3, r3, #1
 800f906:	2b00      	cmp	r3, #0
 800f908:	d002      	beq.n	800f910 <f_open+0x1d0>
						res = FR_DENIED;
 800f90a:	2307      	movs	r3, #7
 800f90c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f910:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f914:	2b00      	cmp	r3, #0
 800f916:	d126      	bne.n	800f966 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f918:	79fb      	ldrb	r3, [r7, #7]
 800f91a:	f003 0308 	and.w	r3, r3, #8
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d003      	beq.n	800f92a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800f922:	79fb      	ldrb	r3, [r7, #7]
 800f924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f928:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f932:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f938:	79fb      	ldrb	r3, [r7, #7]
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	bf8c      	ite	hi
 800f93e:	2301      	movhi	r3, #1
 800f940:	2300      	movls	r3, #0
 800f942:	b2db      	uxtb	r3, r3
 800f944:	461a      	mov	r2, r3
 800f946:	f107 0318 	add.w	r3, r7, #24
 800f94a:	4611      	mov	r1, r2
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fd fef7 	bl	800d740 <inc_lock>
 800f952:	4602      	mov	r2, r0
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	691b      	ldr	r3, [r3, #16]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d102      	bne.n	800f966 <f_open+0x226>
 800f960:	2302      	movs	r3, #2
 800f962:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f966:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f040 80a3 	bne.w	800fab6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f974:	4611      	mov	r1, r2
 800f976:	4618      	mov	r0, r3
 800f978:	f7fe fd99 	bl	800e4ae <ld_clust>
 800f97c:	4602      	mov	r2, r0
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f984:	331c      	adds	r3, #28
 800f986:	4618      	mov	r0, r3
 800f988:	f7fd fd74 	bl	800d474 <ld_dword>
 800f98c:	4602      	mov	r2, r0
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2200      	movs	r2, #0
 800f996:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f998:	697a      	ldr	r2, [r7, #20]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	88da      	ldrh	r2, [r3, #6]
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	79fa      	ldrb	r2, [r7, #7]
 800f9aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	3330      	adds	r3, #48	@ 0x30
 800f9c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f9c6:	2100      	movs	r1, #0
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fd fdde 	bl	800d58a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f9ce:	79fb      	ldrb	r3, [r7, #7]
 800f9d0:	f003 0320 	and.w	r3, r3, #32
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d06e      	beq.n	800fab6 <f_open+0x376>
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d06a      	beq.n	800fab6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	68da      	ldr	r2, [r3, #12]
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	895b      	ldrh	r3, [r3, #10]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	899b      	ldrh	r3, [r3, #12]
 800f9f2:	fb02 f303 	mul.w	r3, r2, r3
 800f9f6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	689b      	ldr	r3, [r3, #8]
 800f9fc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	68db      	ldr	r3, [r3, #12]
 800fa02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa04:	e016      	b.n	800fa34 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe f887 	bl	800db1e <get_fat>
 800fa10:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fa12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d802      	bhi.n	800fa1e <f_open+0x2de>
 800fa18:	2302      	movs	r3, #2
 800fa1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fa1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fa20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa24:	d102      	bne.n	800fa2c <f_open+0x2ec>
 800fa26:	2301      	movs	r3, #1
 800fa28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fa2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d103      	bne.n	800fa44 <f_open+0x304>
 800fa3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fa3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d8e0      	bhi.n	800fa06 <f_open+0x2c6>
				}
				fp->clust = clst;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fa48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fa4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d131      	bne.n	800fab6 <f_open+0x376>
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	899b      	ldrh	r3, [r3, #12]
 800fa56:	461a      	mov	r2, r3
 800fa58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa5e:	fb01 f202 	mul.w	r2, r1, r2
 800fa62:	1a9b      	subs	r3, r3, r2
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d026      	beq.n	800fab6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7fe f837 	bl	800dae0 <clust2sect>
 800fa72:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800fa74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d103      	bne.n	800fa82 <f_open+0x342>
						res = FR_INT_ERR;
 800fa7a:	2302      	movs	r3, #2
 800fa7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fa80:	e019      	b.n	800fab6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	899b      	ldrh	r3, [r3, #12]
 800fa86:	461a      	mov	r2, r3
 800fa88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa90:	441a      	add	r2, r3
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	7858      	ldrb	r0, [r3, #1]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6a1a      	ldr	r2, [r3, #32]
 800faa4:	2301      	movs	r3, #1
 800faa6:	f7fd fc6f 	bl	800d388 <disk_read>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d002      	beq.n	800fab6 <f_open+0x376>
 800fab0:	2301      	movs	r3, #1
 800fab2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fab6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d002      	beq.n	800fac4 <f_open+0x384>
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2200      	movs	r2, #0
 800fac2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fac4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3768      	adds	r7, #104	@ 0x68
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b08c      	sub	sp, #48	@ 0x30
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
 800fadc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	2200      	movs	r2, #0
 800fae6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f107 0210 	add.w	r2, r7, #16
 800faee:	4611      	mov	r1, r2
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7ff fda9 	bl	800f648 <validate>
 800faf6:	4603      	mov	r3, r0
 800faf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fafc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d107      	bne.n	800fb14 <f_write+0x44>
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	7d5b      	ldrb	r3, [r3, #21]
 800fb08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800fb0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d002      	beq.n	800fb1a <f_write+0x4a>
 800fb14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb18:	e16a      	b.n	800fdf0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	7d1b      	ldrb	r3, [r3, #20]
 800fb1e:	f003 0302 	and.w	r3, r3, #2
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d101      	bne.n	800fb2a <f_write+0x5a>
 800fb26:	2307      	movs	r3, #7
 800fb28:	e162      	b.n	800fdf0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	699a      	ldr	r2, [r3, #24]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	441a      	add	r2, r3
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	699b      	ldr	r3, [r3, #24]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	f080 814c 	bcs.w	800fdd4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	699b      	ldr	r3, [r3, #24]
 800fb40:	43db      	mvns	r3, r3
 800fb42:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fb44:	e146      	b.n	800fdd4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	699b      	ldr	r3, [r3, #24]
 800fb4a:	693a      	ldr	r2, [r7, #16]
 800fb4c:	8992      	ldrh	r2, [r2, #12]
 800fb4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb52:	fb01 f202 	mul.w	r2, r1, r2
 800fb56:	1a9b      	subs	r3, r3, r2
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	f040 80f1 	bne.w	800fd40 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	699b      	ldr	r3, [r3, #24]
 800fb62:	693a      	ldr	r2, [r7, #16]
 800fb64:	8992      	ldrh	r2, [r2, #12]
 800fb66:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb6a:	693a      	ldr	r2, [r7, #16]
 800fb6c:	8952      	ldrh	r2, [r2, #10]
 800fb6e:	3a01      	subs	r2, #1
 800fb70:	4013      	ands	r3, r2
 800fb72:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d143      	bne.n	800fc02 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	699b      	ldr	r3, [r3, #24]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d10c      	bne.n	800fb9c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	689b      	ldr	r3, [r3, #8]
 800fb86:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d11a      	bne.n	800fbc4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2100      	movs	r1, #0
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fe fa15 	bl	800dfc2 <create_chain>
 800fb98:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fb9a:	e013      	b.n	800fbc4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d007      	beq.n	800fbb4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	699b      	ldr	r3, [r3, #24]
 800fba8:	4619      	mov	r1, r3
 800fbaa:	68f8      	ldr	r0, [r7, #12]
 800fbac:	f7fe faa1 	bl	800e0f2 <clmt_clust>
 800fbb0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fbb2:	e007      	b.n	800fbc4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	69db      	ldr	r3, [r3, #28]
 800fbba:	4619      	mov	r1, r3
 800fbbc:	4610      	mov	r0, r2
 800fbbe:	f7fe fa00 	bl	800dfc2 <create_chain>
 800fbc2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	f000 8109 	beq.w	800fdde <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbce:	2b01      	cmp	r3, #1
 800fbd0:	d104      	bne.n	800fbdc <f_write+0x10c>
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2202      	movs	r2, #2
 800fbd6:	755a      	strb	r2, [r3, #21]
 800fbd8:	2302      	movs	r3, #2
 800fbda:	e109      	b.n	800fdf0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe2:	d104      	bne.n	800fbee <f_write+0x11e>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	755a      	strb	r2, [r3, #21]
 800fbea:	2301      	movs	r3, #1
 800fbec:	e100      	b.n	800fdf0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbf2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d102      	bne.n	800fc02 <f_write+0x132>
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc00:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	7d1b      	ldrb	r3, [r3, #20]
 800fc06:	b25b      	sxtb	r3, r3
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	da18      	bge.n	800fc3e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	7858      	ldrb	r0, [r3, #1]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6a1a      	ldr	r2, [r3, #32]
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	f7fd fbd4 	bl	800d3c8 <disk_write>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d004      	beq.n	800fc30 <f_write+0x160>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	755a      	strb	r2, [r3, #21]
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e0df      	b.n	800fdf0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	7d1b      	ldrb	r3, [r3, #20]
 800fc34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc38:	b2da      	uxtb	r2, r3
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fc3e:	693a      	ldr	r2, [r7, #16]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	69db      	ldr	r3, [r3, #28]
 800fc44:	4619      	mov	r1, r3
 800fc46:	4610      	mov	r0, r2
 800fc48:	f7fd ff4a 	bl	800dae0 <clust2sect>
 800fc4c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d104      	bne.n	800fc5e <f_write+0x18e>
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2202      	movs	r2, #2
 800fc58:	755a      	strb	r2, [r3, #21]
 800fc5a:	2302      	movs	r3, #2
 800fc5c:	e0c8      	b.n	800fdf0 <f_write+0x320>
			sect += csect;
 800fc5e:	697a      	ldr	r2, [r7, #20]
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	4413      	add	r3, r2
 800fc64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	899b      	ldrh	r3, [r3, #12]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc72:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fc74:	6a3b      	ldr	r3, [r7, #32]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d043      	beq.n	800fd02 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fc7a:	69ba      	ldr	r2, [r7, #24]
 800fc7c:	6a3b      	ldr	r3, [r7, #32]
 800fc7e:	4413      	add	r3, r2
 800fc80:	693a      	ldr	r2, [r7, #16]
 800fc82:	8952      	ldrh	r2, [r2, #10]
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d905      	bls.n	800fc94 <f_write+0x1c4>
					cc = fs->csize - csect;
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	895b      	ldrh	r3, [r3, #10]
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	7858      	ldrb	r0, [r3, #1]
 800fc98:	6a3b      	ldr	r3, [r7, #32]
 800fc9a:	697a      	ldr	r2, [r7, #20]
 800fc9c:	69f9      	ldr	r1, [r7, #28]
 800fc9e:	f7fd fb93 	bl	800d3c8 <disk_write>
 800fca2:	4603      	mov	r3, r0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d004      	beq.n	800fcb2 <f_write+0x1e2>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2201      	movs	r2, #1
 800fcac:	755a      	strb	r2, [r3, #21]
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e09e      	b.n	800fdf0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	6a1a      	ldr	r2, [r3, #32]
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	6a3a      	ldr	r2, [r7, #32]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d918      	bls.n	800fcf2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	6a1a      	ldr	r2, [r3, #32]
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	1ad3      	subs	r3, r2, r3
 800fcce:	693a      	ldr	r2, [r7, #16]
 800fcd0:	8992      	ldrh	r2, [r2, #12]
 800fcd2:	fb02 f303 	mul.w	r3, r2, r3
 800fcd6:	69fa      	ldr	r2, [r7, #28]
 800fcd8:	18d1      	adds	r1, r2, r3
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	899b      	ldrh	r3, [r3, #12]
 800fcde:	461a      	mov	r2, r3
 800fce0:	f7fd fc32 	bl	800d548 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	7d1b      	ldrb	r3, [r3, #20]
 800fce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcec:	b2da      	uxtb	r2, r3
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	899b      	ldrh	r3, [r3, #12]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	6a3b      	ldr	r3, [r7, #32]
 800fcfa:	fb02 f303 	mul.w	r3, r2, r3
 800fcfe:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800fd00:	e04b      	b.n	800fd9a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	6a1b      	ldr	r3, [r3, #32]
 800fd06:	697a      	ldr	r2, [r7, #20]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d016      	beq.n	800fd3a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	699a      	ldr	r2, [r3, #24]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d210      	bcs.n	800fd3a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	7858      	ldrb	r0, [r3, #1]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd22:	2301      	movs	r3, #1
 800fd24:	697a      	ldr	r2, [r7, #20]
 800fd26:	f7fd fb2f 	bl	800d388 <disk_read>
 800fd2a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d004      	beq.n	800fd3a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2201      	movs	r2, #1
 800fd34:	755a      	strb	r2, [r3, #21]
 800fd36:	2301      	movs	r3, #1
 800fd38:	e05a      	b.n	800fdf0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	697a      	ldr	r2, [r7, #20]
 800fd3e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	899b      	ldrh	r3, [r3, #12]
 800fd44:	4618      	mov	r0, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	699b      	ldr	r3, [r3, #24]
 800fd4a:	693a      	ldr	r2, [r7, #16]
 800fd4c:	8992      	ldrh	r2, [r2, #12]
 800fd4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd52:	fb01 f202 	mul.w	r2, r1, r2
 800fd56:	1a9b      	subs	r3, r3, r2
 800fd58:	1ac3      	subs	r3, r0, r3
 800fd5a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fd5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d901      	bls.n	800fd68 <f_write+0x298>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	699b      	ldr	r3, [r3, #24]
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	8992      	ldrh	r2, [r2, #12]
 800fd76:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd7a:	fb00 f202 	mul.w	r2, r0, r2
 800fd7e:	1a9b      	subs	r3, r3, r2
 800fd80:	440b      	add	r3, r1
 800fd82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd84:	69f9      	ldr	r1, [r7, #28]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fd fbde 	bl	800d548 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	7d1b      	ldrb	r3, [r3, #20]
 800fd90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fd9a:	69fa      	ldr	r2, [r7, #28]
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd9e:	4413      	add	r3, r2
 800fda0:	61fb      	str	r3, [r7, #28]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	699a      	ldr	r2, [r3, #24]
 800fda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda8:	441a      	add	r2, r3
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	619a      	str	r2, [r3, #24]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	68da      	ldr	r2, [r3, #12]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	699b      	ldr	r3, [r3, #24]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	bf38      	it	cc
 800fdba:	461a      	movcc	r2, r3
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	60da      	str	r2, [r3, #12]
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc6:	441a      	add	r2, r3
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f47f aeb5 	bne.w	800fb46 <f_write+0x76>
 800fddc:	e000      	b.n	800fde0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fdde:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	7d1b      	ldrb	r3, [r3, #20]
 800fde4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fde8:	b2da      	uxtb	r2, r3
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fdee:	2300      	movs	r3, #0
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3730      	adds	r7, #48	@ 0x30
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b086      	sub	sp, #24
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f107 0208 	add.w	r2, r7, #8
 800fe06:	4611      	mov	r1, r2
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7ff fc1d 	bl	800f648 <validate>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d168      	bne.n	800feea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	7d1b      	ldrb	r3, [r3, #20]
 800fe1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d062      	beq.n	800feea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	7d1b      	ldrb	r3, [r3, #20]
 800fe28:	b25b      	sxtb	r3, r3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	da15      	bge.n	800fe5a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	7858      	ldrb	r0, [r3, #1]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6a1a      	ldr	r2, [r3, #32]
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	f7fd fac3 	bl	800d3c8 <disk_write>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d001      	beq.n	800fe4c <f_sync+0x54>
 800fe48:	2301      	movs	r3, #1
 800fe4a:	e04f      	b.n	800feec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	7d1b      	ldrb	r3, [r3, #20]
 800fe50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe54:	b2da      	uxtb	r2, r3
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fe5a:	f7fd f8cd 	bl	800cff8 <get_fattime>
 800fe5e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fe60:	68ba      	ldr	r2, [r7, #8]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe66:	4619      	mov	r1, r3
 800fe68:	4610      	mov	r0, r2
 800fe6a:	f7fd fd9b 	bl	800d9a4 <move_window>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fe72:	7dfb      	ldrb	r3, [r7, #23]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d138      	bne.n	800feea <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe7c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	330b      	adds	r3, #11
 800fe82:	781a      	ldrb	r2, [r3, #0]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	330b      	adds	r3, #11
 800fe88:	f042 0220 	orr.w	r2, r2, #32
 800fe8c:	b2d2      	uxtb	r2, r2
 800fe8e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6818      	ldr	r0, [r3, #0]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	689b      	ldr	r3, [r3, #8]
 800fe98:	461a      	mov	r2, r3
 800fe9a:	68f9      	ldr	r1, [r7, #12]
 800fe9c:	f7fe fb26 	bl	800e4ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f103 021c 	add.w	r2, r3, #28
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	4619      	mov	r1, r3
 800feac:	4610      	mov	r0, r2
 800feae:	f7fd fb1f 	bl	800d4f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	3316      	adds	r3, #22
 800feb6:	6939      	ldr	r1, [r7, #16]
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fd fb19 	bl	800d4f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	3312      	adds	r3, #18
 800fec2:	2100      	movs	r1, #0
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fd faf8 	bl	800d4ba <st_word>
					fs->wflag = 1;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	2201      	movs	r2, #1
 800fece:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fd fd94 	bl	800da00 <sync_fs>
 800fed8:	4603      	mov	r3, r0
 800feda:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	7d1b      	ldrb	r3, [r3, #20]
 800fee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fee4:	b2da      	uxtb	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800feea:	7dfb      	ldrb	r3, [r7, #23]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7ff ff7b 	bl	800fdf8 <f_sync>
 800ff02:	4603      	mov	r3, r0
 800ff04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ff06:	7bfb      	ldrb	r3, [r7, #15]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d118      	bne.n	800ff3e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f107 0208 	add.w	r2, r7, #8
 800ff12:	4611      	mov	r1, r2
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7ff fb97 	bl	800f648 <validate>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ff1e:	7bfb      	ldrb	r3, [r7, #15]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d10c      	bne.n	800ff3e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fd fc97 	bl	800d85c <dec_lock>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ff32:	7bfb      	ldrb	r3, [r7, #15]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d102      	bne.n	800ff3e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ff3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3710      	adds	r7, #16
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	460b      	mov	r3, r1
 800ff52:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ff54:	78fb      	ldrb	r3, [r7, #3]
 800ff56:	2b0a      	cmp	r3, #10
 800ff58:	d103      	bne.n	800ff62 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ff5a:	210d      	movs	r1, #13
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f7ff fff3 	bl	800ff48 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	db25      	blt.n	800ffba <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	1c5a      	adds	r2, r3, #1
 800ff72:	60fa      	str	r2, [r7, #12]
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	4413      	add	r3, r2
 800ff78:	78fa      	ldrb	r2, [r7, #3]
 800ff7a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2b3c      	cmp	r3, #60	@ 0x3c
 800ff80:	dd12      	ble.n	800ffa8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6818      	ldr	r0, [r3, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f103 010c 	add.w	r1, r3, #12
 800ff8c:	68fa      	ldr	r2, [r7, #12]
 800ff8e:	f107 0308 	add.w	r3, r7, #8
 800ff92:	f7ff fd9d 	bl	800fad0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ff96:	68ba      	ldr	r2, [r7, #8]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d101      	bne.n	800ffa2 <putc_bfd+0x5a>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	e001      	b.n	800ffa6 <putc_bfd+0x5e>
 800ffa2:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	68fa      	ldr	r2, [r7, #12]
 800ffac:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	1c5a      	adds	r2, r3, #1
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	609a      	str	r2, [r3, #8]
 800ffb8:	e000      	b.n	800ffbc <putc_bfd+0x74>
	if (i < 0) return;
 800ffba:	bf00      	nop
}
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}

0800ffc2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ffc2:	b580      	push	{r7, lr}
 800ffc4:	b084      	sub	sp, #16
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	db16      	blt.n	8010000 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6818      	ldr	r0, [r3, #0]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f103 010c 	add.w	r1, r3, #12
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	f107 030c 	add.w	r3, r7, #12
 800ffe6:	f7ff fd73 	bl	800fad0 <f_write>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d107      	bne.n	8010000 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d102      	bne.n	8010000 <putc_flush+0x3e>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	689b      	ldr	r3, [r3, #8]
 800fffe:	e001      	b.n	8010004 <putc_flush+0x42>
	return EOF;
 8010000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010004:	4618      	mov	r0, r3
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	683a      	ldr	r2, [r7, #0]
 801001a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2200      	movs	r2, #0
 8010020:	605a      	str	r2, [r3, #4]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	685a      	ldr	r2, [r3, #4]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	609a      	str	r2, [r3, #8]
}
 801002a:	bf00      	nop
 801002c:	370c      	adds	r7, #12
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr

08010036 <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b096      	sub	sp, #88	@ 0x58
 801003a:	af00      	add	r7, sp, #0
 801003c:	4603      	mov	r3, r0
 801003e:	6039      	str	r1, [r7, #0]
 8010040:	71fb      	strb	r3, [r7, #7]
	putbuff pb;


	putc_init(&pb, fp);
 8010042:	f107 030c 	add.w	r3, r7, #12
 8010046:	6839      	ldr	r1, [r7, #0]
 8010048:	4618      	mov	r0, r3
 801004a:	f7ff ffdf 	bl	801000c <putc_init>
	putc_bfd(&pb, c);	/* Put the character */
 801004e:	79fa      	ldrb	r2, [r7, #7]
 8010050:	f107 030c 	add.w	r3, r7, #12
 8010054:	4611      	mov	r1, r2
 8010056:	4618      	mov	r0, r3
 8010058:	f7ff ff76 	bl	800ff48 <putc_bfd>
	return putc_flush(&pb);
 801005c:	f107 030c 	add.w	r3, r7, #12
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff ffae 	bl	800ffc2 <putc_flush>
 8010066:	4603      	mov	r3, r0
}
 8010068:	4618      	mov	r0, r3
 801006a:	3758      	adds	r7, #88	@ 0x58
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b096      	sub	sp, #88	@ 0x58
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801007a:	f107 030c 	add.w	r3, r7, #12
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff ffc3 	bl	801000c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8010086:	e009      	b.n	801009c <f_puts+0x2c>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	1c5a      	adds	r2, r3, #1
 801008c:	607a      	str	r2, [r7, #4]
 801008e:	781a      	ldrb	r2, [r3, #0]
 8010090:	f107 030c 	add.w	r3, r7, #12
 8010094:	4611      	mov	r1, r2
 8010096:	4618      	mov	r0, r3
 8010098:	f7ff ff56 	bl	800ff48 <putc_bfd>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d1f1      	bne.n	8010088 <f_puts+0x18>
	return putc_flush(&pb);
 80100a4:	f107 030c 	add.w	r3, r7, #12
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7ff ff8a 	bl	800ffc2 <putc_flush>
 80100ae:	4603      	mov	r3, r0
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3758      	adds	r7, #88	@ 0x58
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80100b8:	b40e      	push	{r1, r2, r3}
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b0a7      	sub	sp, #156	@ 0x9c
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80100c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80100c6:	6879      	ldr	r1, [r7, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7ff ff9f 	bl	801000c <putc_init>

	va_start(arp, fmt);
 80100ce:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80100d2:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 80100d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80100d8:	1c5a      	adds	r2, r3, #1
 80100da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 80100e4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	f000 81f2 	beq.w	80104d2 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80100ee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80100f2:	2b25      	cmp	r3, #37	@ 0x25
 80100f4:	d008      	beq.n	8010108 <f_printf+0x50>
			putc_bfd(&pb, c);
 80100f6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80100fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80100fe:	4611      	mov	r1, r2
 8010100:	4618      	mov	r0, r3
 8010102:	f7ff ff21 	bl	800ff48 <putc_bfd>
			continue;
 8010106:	e1e3      	b.n	80104d0 <f_printf+0x418>
		}
		w = f = 0;
 8010108:	2300      	movs	r3, #0
 801010a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801010e:	2300      	movs	r3, #0
 8010110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8010114:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010118:	1c5a      	adds	r2, r3, #1
 801011a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8010124:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010128:	2b30      	cmp	r3, #48	@ 0x30
 801012a:	d10b      	bne.n	8010144 <f_printf+0x8c>
			f = 1; c = *fmt++;
 801012c:	2301      	movs	r3, #1
 801012e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8010132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010136:	1c5a      	adds	r2, r3, #1
 8010138:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8010142:	e024      	b.n	801018e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8010144:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010148:	2b2d      	cmp	r3, #45	@ 0x2d
 801014a:	d120      	bne.n	801018e <f_printf+0xd6>
				f = 2; c = *fmt++;
 801014c:	2302      	movs	r3, #2
 801014e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8010152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010156:	1c5a      	adds	r2, r3, #1
 8010158:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8010162:	e014      	b.n	801018e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8010164:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010168:	4613      	mov	r3, r2
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	4413      	add	r3, r2
 801016e:	005b      	lsls	r3, r3, #1
 8010170:	461a      	mov	r2, r3
 8010172:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010176:	4413      	add	r3, r2
 8010178:	3b30      	subs	r3, #48	@ 0x30
 801017a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 801017e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010182:	1c5a      	adds	r2, r3, #1
 8010184:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 801018e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010192:	2b2f      	cmp	r3, #47	@ 0x2f
 8010194:	d903      	bls.n	801019e <f_printf+0xe6>
 8010196:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801019a:	2b39      	cmp	r3, #57	@ 0x39
 801019c:	d9e2      	bls.n	8010164 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801019e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80101a2:	2b6c      	cmp	r3, #108	@ 0x6c
 80101a4:	d003      	beq.n	80101ae <f_printf+0xf6>
 80101a6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80101aa:	2b4c      	cmp	r3, #76	@ 0x4c
 80101ac:	d10d      	bne.n	80101ca <f_printf+0x112>
			f |= 4; c = *fmt++;
 80101ae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80101b2:	f043 0304 	orr.w	r3, r3, #4
 80101b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80101ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80101be:	1c5a      	adds	r2, r3, #1
 80101c0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80101ca:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f000 8181 	beq.w	80104d6 <f_printf+0x41e>
		d = c;
 80101d4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80101d8:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 80101dc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80101e0:	2b60      	cmp	r3, #96	@ 0x60
 80101e2:	d908      	bls.n	80101f6 <f_printf+0x13e>
 80101e4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80101e8:	2b7a      	cmp	r3, #122	@ 0x7a
 80101ea:	d804      	bhi.n	80101f6 <f_printf+0x13e>
 80101ec:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80101f0:	3b20      	subs	r3, #32
 80101f2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 80101f6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80101fa:	3b42      	subs	r3, #66	@ 0x42
 80101fc:	2b16      	cmp	r3, #22
 80101fe:	f200 8098 	bhi.w	8010332 <f_printf+0x27a>
 8010202:	a201      	add	r2, pc, #4	@ (adr r2, 8010208 <f_printf+0x150>)
 8010204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010208:	08010313 	.word	0x08010313
 801020c:	080102fb 	.word	0x080102fb
 8010210:	08010323 	.word	0x08010323
 8010214:	08010333 	.word	0x08010333
 8010218:	08010333 	.word	0x08010333
 801021c:	08010333 	.word	0x08010333
 8010220:	08010333 	.word	0x08010333
 8010224:	08010333 	.word	0x08010333
 8010228:	08010333 	.word	0x08010333
 801022c:	08010333 	.word	0x08010333
 8010230:	08010333 	.word	0x08010333
 8010234:	08010333 	.word	0x08010333
 8010238:	08010333 	.word	0x08010333
 801023c:	0801031b 	.word	0x0801031b
 8010240:	08010333 	.word	0x08010333
 8010244:	08010333 	.word	0x08010333
 8010248:	08010333 	.word	0x08010333
 801024c:	08010265 	.word	0x08010265
 8010250:	08010333 	.word	0x08010333
 8010254:	08010323 	.word	0x08010323
 8010258:	08010333 	.word	0x08010333
 801025c:	08010333 	.word	0x08010333
 8010260:	0801032b 	.word	0x0801032b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8010264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010266:	1d1a      	adds	r2, r3, #4
 8010268:	67ba      	str	r2, [r7, #120]	@ 0x78
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 801026e:	2300      	movs	r3, #0
 8010270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010274:	e004      	b.n	8010280 <f_printf+0x1c8>
 8010276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801027a:	3301      	adds	r3, #1
 801027c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010280:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010286:	4413      	add	r3, r2
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1f3      	bne.n	8010276 <f_printf+0x1be>
			if (!(f & 2)) {
 801028e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010292:	f003 0302 	and.w	r3, r3, #2
 8010296:	2b00      	cmp	r3, #0
 8010298:	d11a      	bne.n	80102d0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801029a:	e005      	b.n	80102a8 <f_printf+0x1f0>
 801029c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80102a0:	2120      	movs	r1, #32
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7ff fe50 	bl	800ff48 <putc_bfd>
 80102a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102ac:	1c5a      	adds	r2, r3, #1
 80102ae:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80102b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d8f0      	bhi.n	801029c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80102ba:	e009      	b.n	80102d0 <f_printf+0x218>
 80102bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80102be:	1c5a      	adds	r2, r3, #1
 80102c0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80102c2:	781a      	ldrb	r2, [r3, #0]
 80102c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80102c8:	4611      	mov	r1, r2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff fe3c 	bl	800ff48 <putc_bfd>
 80102d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d1f1      	bne.n	80102bc <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80102d8:	e005      	b.n	80102e6 <f_printf+0x22e>
 80102da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80102de:	2120      	movs	r1, #32
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7ff fe31 	bl	800ff48 <putc_bfd>
 80102e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102ea:	1c5a      	adds	r2, r3, #1
 80102ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80102f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d8f0      	bhi.n	80102da <f_printf+0x222>
			continue;
 80102f8:	e0ea      	b.n	80104d0 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80102fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80102fc:	1d1a      	adds	r2, r3, #4
 80102fe:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	b2da      	uxtb	r2, r3
 8010304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010308:	4611      	mov	r1, r2
 801030a:	4618      	mov	r0, r3
 801030c:	f7ff fe1c 	bl	800ff48 <putc_bfd>
 8010310:	e0de      	b.n	80104d0 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8010312:	2302      	movs	r3, #2
 8010314:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8010318:	e014      	b.n	8010344 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801031a:	2308      	movs	r3, #8
 801031c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8010320:	e010      	b.n	8010344 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8010322:	230a      	movs	r3, #10
 8010324:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8010328:	e00c      	b.n	8010344 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801032a:	2310      	movs	r3, #16
 801032c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8010330:	e008      	b.n	8010344 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8010332:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8010336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801033a:	4611      	mov	r1, r2
 801033c:	4618      	mov	r0, r3
 801033e:	f7ff fe03 	bl	800ff48 <putc_bfd>
 8010342:	e0c5      	b.n	80104d0 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8010344:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010348:	f003 0304 	and.w	r3, r3, #4
 801034c:	2b00      	cmp	r3, #0
 801034e:	d004      	beq.n	801035a <f_printf+0x2a2>
 8010350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010352:	1d1a      	adds	r2, r3, #4
 8010354:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	e00c      	b.n	8010374 <f_printf+0x2bc>
 801035a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801035e:	2b44      	cmp	r3, #68	@ 0x44
 8010360:	d104      	bne.n	801036c <f_printf+0x2b4>
 8010362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010364:	1d1a      	adds	r2, r3, #4
 8010366:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	e003      	b.n	8010374 <f_printf+0x2bc>
 801036c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801036e:	1d1a      	adds	r2, r3, #4
 8010370:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8010378:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801037c:	2b44      	cmp	r3, #68	@ 0x44
 801037e:	d10e      	bne.n	801039e <f_printf+0x2e6>
 8010380:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010384:	2b00      	cmp	r3, #0
 8010386:	da0a      	bge.n	801039e <f_printf+0x2e6>
			v = 0 - v;
 8010388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801038c:	425b      	negs	r3, r3
 801038e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8010392:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010396:	f043 0308 	orr.w	r3, r3, #8
 801039a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 801039e:	2300      	movs	r3, #0
 80103a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80103a4:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80103a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80103ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80103b0:	fb01 f202 	mul.w	r2, r1, r2
 80103b4:	1a9b      	subs	r3, r3, r2
 80103b6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80103ba:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80103be:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80103c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80103c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80103ca:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80103ce:	2b09      	cmp	r3, #9
 80103d0:	d90b      	bls.n	80103ea <f_printf+0x332>
 80103d2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80103d6:	2b78      	cmp	r3, #120	@ 0x78
 80103d8:	d101      	bne.n	80103de <f_printf+0x326>
 80103da:	2227      	movs	r2, #39	@ 0x27
 80103dc:	e000      	b.n	80103e0 <f_printf+0x328>
 80103de:	2207      	movs	r2, #7
 80103e0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80103e4:	4413      	add	r3, r2
 80103e6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 80103ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80103ee:	1c5a      	adds	r2, r3, #1
 80103f0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80103f4:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80103f8:	3230      	adds	r2, #48	@ 0x30
 80103fa:	b2d2      	uxtb	r2, r2
 80103fc:	3398      	adds	r3, #152	@ 0x98
 80103fe:	443b      	add	r3, r7
 8010400:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8010404:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010408:	2b00      	cmp	r3, #0
 801040a:	d003      	beq.n	8010414 <f_printf+0x35c>
 801040c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010410:	2b1f      	cmp	r3, #31
 8010412:	d9c7      	bls.n	80103a4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8010414:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010418:	f003 0308 	and.w	r3, r3, #8
 801041c:	2b00      	cmp	r3, #0
 801041e:	d009      	beq.n	8010434 <f_printf+0x37c>
 8010420:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010424:	1c5a      	adds	r2, r3, #1
 8010426:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801042a:	3398      	adds	r3, #152	@ 0x98
 801042c:	443b      	add	r3, r7
 801042e:	222d      	movs	r2, #45	@ 0x2d
 8010430:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8010434:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010438:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801043c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010440:	f003 0301 	and.w	r3, r3, #1
 8010444:	2b00      	cmp	r3, #0
 8010446:	d001      	beq.n	801044c <f_printf+0x394>
 8010448:	2330      	movs	r3, #48	@ 0x30
 801044a:	e000      	b.n	801044e <f_printf+0x396>
 801044c:	2320      	movs	r3, #32
 801044e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8010452:	e007      	b.n	8010464 <f_printf+0x3ac>
 8010454:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8010458:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801045c:	4611      	mov	r1, r2
 801045e:	4618      	mov	r0, r3
 8010460:	f7ff fd72 	bl	800ff48 <putc_bfd>
 8010464:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010468:	f003 0302 	and.w	r3, r3, #2
 801046c:	2b00      	cmp	r3, #0
 801046e:	d108      	bne.n	8010482 <f_printf+0x3ca>
 8010470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801047a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801047e:	429a      	cmp	r2, r3
 8010480:	d8e8      	bhi.n	8010454 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8010482:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010486:	3b01      	subs	r3, #1
 8010488:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801048c:	f107 020c 	add.w	r2, r7, #12
 8010490:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010494:	4413      	add	r3, r2
 8010496:	781a      	ldrb	r2, [r3, #0]
 8010498:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801049c:	4611      	mov	r1, r2
 801049e:	4618      	mov	r0, r3
 80104a0:	f7ff fd52 	bl	800ff48 <putc_bfd>
		} while (i);
 80104a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d1ea      	bne.n	8010482 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80104ac:	e007      	b.n	80104be <f_printf+0x406>
 80104ae:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80104b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80104b6:	4611      	mov	r1, r2
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7ff fd45 	bl	800ff48 <putc_bfd>
 80104be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80104c2:	1c5a      	adds	r2, r3, #1
 80104c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80104c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d8ee      	bhi.n	80104ae <f_printf+0x3f6>
		c = *fmt++;
 80104d0:	e600      	b.n	80100d4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80104d2:	bf00      	nop
 80104d4:	e000      	b.n	80104d8 <f_printf+0x420>
		if (!c) break;
 80104d6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80104d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80104dc:	4618      	mov	r0, r3
 80104de:	f7ff fd70 	bl	800ffc2 <putc_flush>
 80104e2:	4603      	mov	r3, r0
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	379c      	adds	r7, #156	@ 0x9c
 80104e8:	46bd      	mov	sp, r7
 80104ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80104ee:	b003      	add	sp, #12
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop

080104f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b087      	sub	sp, #28
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	4613      	mov	r3, r2
 8010500:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010502:	2301      	movs	r3, #1
 8010504:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801050a:	4b1f      	ldr	r3, [pc, #124]	@ (8010588 <FATFS_LinkDriverEx+0x94>)
 801050c:	7a5b      	ldrb	r3, [r3, #9]
 801050e:	b2db      	uxtb	r3, r3
 8010510:	2b00      	cmp	r3, #0
 8010512:	d131      	bne.n	8010578 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010514:	4b1c      	ldr	r3, [pc, #112]	@ (8010588 <FATFS_LinkDriverEx+0x94>)
 8010516:	7a5b      	ldrb	r3, [r3, #9]
 8010518:	b2db      	uxtb	r3, r3
 801051a:	461a      	mov	r2, r3
 801051c:	4b1a      	ldr	r3, [pc, #104]	@ (8010588 <FATFS_LinkDriverEx+0x94>)
 801051e:	2100      	movs	r1, #0
 8010520:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010522:	4b19      	ldr	r3, [pc, #100]	@ (8010588 <FATFS_LinkDriverEx+0x94>)
 8010524:	7a5b      	ldrb	r3, [r3, #9]
 8010526:	b2db      	uxtb	r3, r3
 8010528:	4a17      	ldr	r2, [pc, #92]	@ (8010588 <FATFS_LinkDriverEx+0x94>)
 801052a:	009b      	lsls	r3, r3, #2
 801052c:	4413      	add	r3, r2
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010532:	4b15      	ldr	r3, [pc, #84]	@ (8010588 <FATFS_LinkDriverEx+0x94>)
 8010534:	7a5b      	ldrb	r3, [r3, #9]
 8010536:	b2db      	uxtb	r3, r3
 8010538:	461a      	mov	r2, r3
 801053a:	4b13      	ldr	r3, [pc, #76]	@ (8010588 <FATFS_LinkDriverEx+0x94>)
 801053c:	4413      	add	r3, r2
 801053e:	79fa      	ldrb	r2, [r7, #7]
 8010540:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010542:	4b11      	ldr	r3, [pc, #68]	@ (8010588 <FATFS_LinkDriverEx+0x94>)
 8010544:	7a5b      	ldrb	r3, [r3, #9]
 8010546:	b2db      	uxtb	r3, r3
 8010548:	1c5a      	adds	r2, r3, #1
 801054a:	b2d1      	uxtb	r1, r2
 801054c:	4a0e      	ldr	r2, [pc, #56]	@ (8010588 <FATFS_LinkDriverEx+0x94>)
 801054e:	7251      	strb	r1, [r2, #9]
 8010550:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010552:	7dbb      	ldrb	r3, [r7, #22]
 8010554:	3330      	adds	r3, #48	@ 0x30
 8010556:	b2da      	uxtb	r2, r3
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	3301      	adds	r3, #1
 8010560:	223a      	movs	r2, #58	@ 0x3a
 8010562:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	3302      	adds	r3, #2
 8010568:	222f      	movs	r2, #47	@ 0x2f
 801056a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	3303      	adds	r3, #3
 8010570:	2200      	movs	r2, #0
 8010572:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010574:	2300      	movs	r3, #0
 8010576:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010578:	7dfb      	ldrb	r3, [r7, #23]
}
 801057a:	4618      	mov	r0, r3
 801057c:	371c      	adds	r7, #28
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr
 8010586:	bf00      	nop
 8010588:	20002914 	.word	0x20002914

0801058c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010596:	2200      	movs	r2, #0
 8010598:	6839      	ldr	r1, [r7, #0]
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7ff ffaa 	bl	80104f4 <FATFS_LinkDriverEx>
 80105a0:	4603      	mov	r3, r0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3708      	adds	r7, #8
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
	...

080105ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	4603      	mov	r3, r0
 80105b4:	6039      	str	r1, [r7, #0]
 80105b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80105b8:	88fb      	ldrh	r3, [r7, #6]
 80105ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80105bc:	d802      	bhi.n	80105c4 <ff_convert+0x18>
		c = chr;
 80105be:	88fb      	ldrh	r3, [r7, #6]
 80105c0:	81fb      	strh	r3, [r7, #14]
 80105c2:	e025      	b.n	8010610 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d00b      	beq.n	80105e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80105ca:	88fb      	ldrh	r3, [r7, #6]
 80105cc:	2bff      	cmp	r3, #255	@ 0xff
 80105ce:	d805      	bhi.n	80105dc <ff_convert+0x30>
 80105d0:	88fb      	ldrh	r3, [r7, #6]
 80105d2:	3b80      	subs	r3, #128	@ 0x80
 80105d4:	4a12      	ldr	r2, [pc, #72]	@ (8010620 <ff_convert+0x74>)
 80105d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105da:	e000      	b.n	80105de <ff_convert+0x32>
 80105dc:	2300      	movs	r3, #0
 80105de:	81fb      	strh	r3, [r7, #14]
 80105e0:	e016      	b.n	8010610 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80105e2:	2300      	movs	r3, #0
 80105e4:	81fb      	strh	r3, [r7, #14]
 80105e6:	e009      	b.n	80105fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80105e8:	89fb      	ldrh	r3, [r7, #14]
 80105ea:	4a0d      	ldr	r2, [pc, #52]	@ (8010620 <ff_convert+0x74>)
 80105ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105f0:	88fa      	ldrh	r2, [r7, #6]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d006      	beq.n	8010604 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80105f6:	89fb      	ldrh	r3, [r7, #14]
 80105f8:	3301      	adds	r3, #1
 80105fa:	81fb      	strh	r3, [r7, #14]
 80105fc:	89fb      	ldrh	r3, [r7, #14]
 80105fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8010600:	d9f2      	bls.n	80105e8 <ff_convert+0x3c>
 8010602:	e000      	b.n	8010606 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010604:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010606:	89fb      	ldrh	r3, [r7, #14]
 8010608:	3380      	adds	r3, #128	@ 0x80
 801060a:	b29b      	uxth	r3, r3
 801060c:	b2db      	uxtb	r3, r3
 801060e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010610:	89fb      	ldrh	r3, [r7, #14]
}
 8010612:	4618      	mov	r0, r3
 8010614:	3714      	adds	r7, #20
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	08018474 	.word	0x08018474

08010624 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010624:	b480      	push	{r7}
 8010626:	b087      	sub	sp, #28
 8010628:	af00      	add	r7, sp, #0
 801062a:	4603      	mov	r3, r0
 801062c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801062e:	88fb      	ldrh	r3, [r7, #6]
 8010630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010634:	d201      	bcs.n	801063a <ff_wtoupper+0x16>
 8010636:	4b3e      	ldr	r3, [pc, #248]	@ (8010730 <ff_wtoupper+0x10c>)
 8010638:	e000      	b.n	801063c <ff_wtoupper+0x18>
 801063a:	4b3e      	ldr	r3, [pc, #248]	@ (8010734 <ff_wtoupper+0x110>)
 801063c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	1c9a      	adds	r2, r3, #2
 8010642:	617a      	str	r2, [r7, #20]
 8010644:	881b      	ldrh	r3, [r3, #0]
 8010646:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010648:	8a7b      	ldrh	r3, [r7, #18]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d068      	beq.n	8010720 <ff_wtoupper+0xfc>
 801064e:	88fa      	ldrh	r2, [r7, #6]
 8010650:	8a7b      	ldrh	r3, [r7, #18]
 8010652:	429a      	cmp	r2, r3
 8010654:	d364      	bcc.n	8010720 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	1c9a      	adds	r2, r3, #2
 801065a:	617a      	str	r2, [r7, #20]
 801065c:	881b      	ldrh	r3, [r3, #0]
 801065e:	823b      	strh	r3, [r7, #16]
 8010660:	8a3b      	ldrh	r3, [r7, #16]
 8010662:	0a1b      	lsrs	r3, r3, #8
 8010664:	81fb      	strh	r3, [r7, #14]
 8010666:	8a3b      	ldrh	r3, [r7, #16]
 8010668:	b2db      	uxtb	r3, r3
 801066a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801066c:	88fa      	ldrh	r2, [r7, #6]
 801066e:	8a79      	ldrh	r1, [r7, #18]
 8010670:	8a3b      	ldrh	r3, [r7, #16]
 8010672:	440b      	add	r3, r1
 8010674:	429a      	cmp	r2, r3
 8010676:	da49      	bge.n	801070c <ff_wtoupper+0xe8>
			switch (cmd) {
 8010678:	89fb      	ldrh	r3, [r7, #14]
 801067a:	2b08      	cmp	r3, #8
 801067c:	d84f      	bhi.n	801071e <ff_wtoupper+0xfa>
 801067e:	a201      	add	r2, pc, #4	@ (adr r2, 8010684 <ff_wtoupper+0x60>)
 8010680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010684:	080106a9 	.word	0x080106a9
 8010688:	080106bb 	.word	0x080106bb
 801068c:	080106d1 	.word	0x080106d1
 8010690:	080106d9 	.word	0x080106d9
 8010694:	080106e1 	.word	0x080106e1
 8010698:	080106e9 	.word	0x080106e9
 801069c:	080106f1 	.word	0x080106f1
 80106a0:	080106f9 	.word	0x080106f9
 80106a4:	08010701 	.word	0x08010701
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80106a8:	88fa      	ldrh	r2, [r7, #6]
 80106aa:	8a7b      	ldrh	r3, [r7, #18]
 80106ac:	1ad3      	subs	r3, r2, r3
 80106ae:	005b      	lsls	r3, r3, #1
 80106b0:	697a      	ldr	r2, [r7, #20]
 80106b2:	4413      	add	r3, r2
 80106b4:	881b      	ldrh	r3, [r3, #0]
 80106b6:	80fb      	strh	r3, [r7, #6]
 80106b8:	e027      	b.n	801070a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80106ba:	88fa      	ldrh	r2, [r7, #6]
 80106bc:	8a7b      	ldrh	r3, [r7, #18]
 80106be:	1ad3      	subs	r3, r2, r3
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	f003 0301 	and.w	r3, r3, #1
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	88fa      	ldrh	r2, [r7, #6]
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	80fb      	strh	r3, [r7, #6]
 80106ce:	e01c      	b.n	801070a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80106d0:	88fb      	ldrh	r3, [r7, #6]
 80106d2:	3b10      	subs	r3, #16
 80106d4:	80fb      	strh	r3, [r7, #6]
 80106d6:	e018      	b.n	801070a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80106d8:	88fb      	ldrh	r3, [r7, #6]
 80106da:	3b20      	subs	r3, #32
 80106dc:	80fb      	strh	r3, [r7, #6]
 80106de:	e014      	b.n	801070a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80106e0:	88fb      	ldrh	r3, [r7, #6]
 80106e2:	3b30      	subs	r3, #48	@ 0x30
 80106e4:	80fb      	strh	r3, [r7, #6]
 80106e6:	e010      	b.n	801070a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80106e8:	88fb      	ldrh	r3, [r7, #6]
 80106ea:	3b1a      	subs	r3, #26
 80106ec:	80fb      	strh	r3, [r7, #6]
 80106ee:	e00c      	b.n	801070a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80106f0:	88fb      	ldrh	r3, [r7, #6]
 80106f2:	3308      	adds	r3, #8
 80106f4:	80fb      	strh	r3, [r7, #6]
 80106f6:	e008      	b.n	801070a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80106f8:	88fb      	ldrh	r3, [r7, #6]
 80106fa:	3b50      	subs	r3, #80	@ 0x50
 80106fc:	80fb      	strh	r3, [r7, #6]
 80106fe:	e004      	b.n	801070a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010700:	88fb      	ldrh	r3, [r7, #6]
 8010702:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8010706:	80fb      	strh	r3, [r7, #6]
 8010708:	bf00      	nop
			}
			break;
 801070a:	e008      	b.n	801071e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801070c:	89fb      	ldrh	r3, [r7, #14]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d195      	bne.n	801063e <ff_wtoupper+0x1a>
 8010712:	8a3b      	ldrh	r3, [r7, #16]
 8010714:	005b      	lsls	r3, r3, #1
 8010716:	697a      	ldr	r2, [r7, #20]
 8010718:	4413      	add	r3, r2
 801071a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801071c:	e78f      	b.n	801063e <ff_wtoupper+0x1a>
			break;
 801071e:	bf00      	nop
	}

	return chr;
 8010720:	88fb      	ldrh	r3, [r7, #6]
}
 8010722:	4618      	mov	r0, r3
 8010724:	371c      	adds	r7, #28
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	08018574 	.word	0x08018574
 8010734:	08018768 	.word	0x08018768

08010738 <__cvt>:
 8010738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801073c:	ec57 6b10 	vmov	r6, r7, d0
 8010740:	2f00      	cmp	r7, #0
 8010742:	460c      	mov	r4, r1
 8010744:	4619      	mov	r1, r3
 8010746:	463b      	mov	r3, r7
 8010748:	bfbb      	ittet	lt
 801074a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801074e:	461f      	movlt	r7, r3
 8010750:	2300      	movge	r3, #0
 8010752:	232d      	movlt	r3, #45	@ 0x2d
 8010754:	700b      	strb	r3, [r1, #0]
 8010756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010758:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801075c:	4691      	mov	r9, r2
 801075e:	f023 0820 	bic.w	r8, r3, #32
 8010762:	bfbc      	itt	lt
 8010764:	4632      	movlt	r2, r6
 8010766:	4616      	movlt	r6, r2
 8010768:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801076c:	d005      	beq.n	801077a <__cvt+0x42>
 801076e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010772:	d100      	bne.n	8010776 <__cvt+0x3e>
 8010774:	3401      	adds	r4, #1
 8010776:	2102      	movs	r1, #2
 8010778:	e000      	b.n	801077c <__cvt+0x44>
 801077a:	2103      	movs	r1, #3
 801077c:	ab03      	add	r3, sp, #12
 801077e:	9301      	str	r3, [sp, #4]
 8010780:	ab02      	add	r3, sp, #8
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	ec47 6b10 	vmov	d0, r6, r7
 8010788:	4653      	mov	r3, sl
 801078a:	4622      	mov	r2, r4
 801078c:	f001 f8a8 	bl	80118e0 <_dtoa_r>
 8010790:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010794:	4605      	mov	r5, r0
 8010796:	d119      	bne.n	80107cc <__cvt+0x94>
 8010798:	f019 0f01 	tst.w	r9, #1
 801079c:	d00e      	beq.n	80107bc <__cvt+0x84>
 801079e:	eb00 0904 	add.w	r9, r0, r4
 80107a2:	2200      	movs	r2, #0
 80107a4:	2300      	movs	r3, #0
 80107a6:	4630      	mov	r0, r6
 80107a8:	4639      	mov	r1, r7
 80107aa:	f7f0 f9ad 	bl	8000b08 <__aeabi_dcmpeq>
 80107ae:	b108      	cbz	r0, 80107b4 <__cvt+0x7c>
 80107b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80107b4:	2230      	movs	r2, #48	@ 0x30
 80107b6:	9b03      	ldr	r3, [sp, #12]
 80107b8:	454b      	cmp	r3, r9
 80107ba:	d31e      	bcc.n	80107fa <__cvt+0xc2>
 80107bc:	9b03      	ldr	r3, [sp, #12]
 80107be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80107c0:	1b5b      	subs	r3, r3, r5
 80107c2:	4628      	mov	r0, r5
 80107c4:	6013      	str	r3, [r2, #0]
 80107c6:	b004      	add	sp, #16
 80107c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80107d0:	eb00 0904 	add.w	r9, r0, r4
 80107d4:	d1e5      	bne.n	80107a2 <__cvt+0x6a>
 80107d6:	7803      	ldrb	r3, [r0, #0]
 80107d8:	2b30      	cmp	r3, #48	@ 0x30
 80107da:	d10a      	bne.n	80107f2 <__cvt+0xba>
 80107dc:	2200      	movs	r2, #0
 80107de:	2300      	movs	r3, #0
 80107e0:	4630      	mov	r0, r6
 80107e2:	4639      	mov	r1, r7
 80107e4:	f7f0 f990 	bl	8000b08 <__aeabi_dcmpeq>
 80107e8:	b918      	cbnz	r0, 80107f2 <__cvt+0xba>
 80107ea:	f1c4 0401 	rsb	r4, r4, #1
 80107ee:	f8ca 4000 	str.w	r4, [sl]
 80107f2:	f8da 3000 	ldr.w	r3, [sl]
 80107f6:	4499      	add	r9, r3
 80107f8:	e7d3      	b.n	80107a2 <__cvt+0x6a>
 80107fa:	1c59      	adds	r1, r3, #1
 80107fc:	9103      	str	r1, [sp, #12]
 80107fe:	701a      	strb	r2, [r3, #0]
 8010800:	e7d9      	b.n	80107b6 <__cvt+0x7e>

08010802 <__exponent>:
 8010802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010804:	2900      	cmp	r1, #0
 8010806:	bfba      	itte	lt
 8010808:	4249      	neglt	r1, r1
 801080a:	232d      	movlt	r3, #45	@ 0x2d
 801080c:	232b      	movge	r3, #43	@ 0x2b
 801080e:	2909      	cmp	r1, #9
 8010810:	7002      	strb	r2, [r0, #0]
 8010812:	7043      	strb	r3, [r0, #1]
 8010814:	dd29      	ble.n	801086a <__exponent+0x68>
 8010816:	f10d 0307 	add.w	r3, sp, #7
 801081a:	461d      	mov	r5, r3
 801081c:	270a      	movs	r7, #10
 801081e:	461a      	mov	r2, r3
 8010820:	fbb1 f6f7 	udiv	r6, r1, r7
 8010824:	fb07 1416 	mls	r4, r7, r6, r1
 8010828:	3430      	adds	r4, #48	@ 0x30
 801082a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801082e:	460c      	mov	r4, r1
 8010830:	2c63      	cmp	r4, #99	@ 0x63
 8010832:	f103 33ff 	add.w	r3, r3, #4294967295
 8010836:	4631      	mov	r1, r6
 8010838:	dcf1      	bgt.n	801081e <__exponent+0x1c>
 801083a:	3130      	adds	r1, #48	@ 0x30
 801083c:	1e94      	subs	r4, r2, #2
 801083e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010842:	1c41      	adds	r1, r0, #1
 8010844:	4623      	mov	r3, r4
 8010846:	42ab      	cmp	r3, r5
 8010848:	d30a      	bcc.n	8010860 <__exponent+0x5e>
 801084a:	f10d 0309 	add.w	r3, sp, #9
 801084e:	1a9b      	subs	r3, r3, r2
 8010850:	42ac      	cmp	r4, r5
 8010852:	bf88      	it	hi
 8010854:	2300      	movhi	r3, #0
 8010856:	3302      	adds	r3, #2
 8010858:	4403      	add	r3, r0
 801085a:	1a18      	subs	r0, r3, r0
 801085c:	b003      	add	sp, #12
 801085e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010860:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010864:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010868:	e7ed      	b.n	8010846 <__exponent+0x44>
 801086a:	2330      	movs	r3, #48	@ 0x30
 801086c:	3130      	adds	r1, #48	@ 0x30
 801086e:	7083      	strb	r3, [r0, #2]
 8010870:	70c1      	strb	r1, [r0, #3]
 8010872:	1d03      	adds	r3, r0, #4
 8010874:	e7f1      	b.n	801085a <__exponent+0x58>
	...

08010878 <_printf_float>:
 8010878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087c:	b08d      	sub	sp, #52	@ 0x34
 801087e:	460c      	mov	r4, r1
 8010880:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010884:	4616      	mov	r6, r2
 8010886:	461f      	mov	r7, r3
 8010888:	4605      	mov	r5, r0
 801088a:	f000 ff23 	bl	80116d4 <_localeconv_r>
 801088e:	6803      	ldr	r3, [r0, #0]
 8010890:	9304      	str	r3, [sp, #16]
 8010892:	4618      	mov	r0, r3
 8010894:	f7ef fd0c 	bl	80002b0 <strlen>
 8010898:	2300      	movs	r3, #0
 801089a:	930a      	str	r3, [sp, #40]	@ 0x28
 801089c:	f8d8 3000 	ldr.w	r3, [r8]
 80108a0:	9005      	str	r0, [sp, #20]
 80108a2:	3307      	adds	r3, #7
 80108a4:	f023 0307 	bic.w	r3, r3, #7
 80108a8:	f103 0208 	add.w	r2, r3, #8
 80108ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80108b0:	f8d4 b000 	ldr.w	fp, [r4]
 80108b4:	f8c8 2000 	str.w	r2, [r8]
 80108b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80108bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80108c0:	9307      	str	r3, [sp, #28]
 80108c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80108c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80108ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80108ce:	4b9c      	ldr	r3, [pc, #624]	@ (8010b40 <_printf_float+0x2c8>)
 80108d0:	f04f 32ff 	mov.w	r2, #4294967295
 80108d4:	f7f0 f94a 	bl	8000b6c <__aeabi_dcmpun>
 80108d8:	bb70      	cbnz	r0, 8010938 <_printf_float+0xc0>
 80108da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80108de:	4b98      	ldr	r3, [pc, #608]	@ (8010b40 <_printf_float+0x2c8>)
 80108e0:	f04f 32ff 	mov.w	r2, #4294967295
 80108e4:	f7f0 f924 	bl	8000b30 <__aeabi_dcmple>
 80108e8:	bb30      	cbnz	r0, 8010938 <_printf_float+0xc0>
 80108ea:	2200      	movs	r2, #0
 80108ec:	2300      	movs	r3, #0
 80108ee:	4640      	mov	r0, r8
 80108f0:	4649      	mov	r1, r9
 80108f2:	f7f0 f913 	bl	8000b1c <__aeabi_dcmplt>
 80108f6:	b110      	cbz	r0, 80108fe <_printf_float+0x86>
 80108f8:	232d      	movs	r3, #45	@ 0x2d
 80108fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108fe:	4a91      	ldr	r2, [pc, #580]	@ (8010b44 <_printf_float+0x2cc>)
 8010900:	4b91      	ldr	r3, [pc, #580]	@ (8010b48 <_printf_float+0x2d0>)
 8010902:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010906:	bf94      	ite	ls
 8010908:	4690      	movls	r8, r2
 801090a:	4698      	movhi	r8, r3
 801090c:	2303      	movs	r3, #3
 801090e:	6123      	str	r3, [r4, #16]
 8010910:	f02b 0304 	bic.w	r3, fp, #4
 8010914:	6023      	str	r3, [r4, #0]
 8010916:	f04f 0900 	mov.w	r9, #0
 801091a:	9700      	str	r7, [sp, #0]
 801091c:	4633      	mov	r3, r6
 801091e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010920:	4621      	mov	r1, r4
 8010922:	4628      	mov	r0, r5
 8010924:	f000 f9d2 	bl	8010ccc <_printf_common>
 8010928:	3001      	adds	r0, #1
 801092a:	f040 808d 	bne.w	8010a48 <_printf_float+0x1d0>
 801092e:	f04f 30ff 	mov.w	r0, #4294967295
 8010932:	b00d      	add	sp, #52	@ 0x34
 8010934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010938:	4642      	mov	r2, r8
 801093a:	464b      	mov	r3, r9
 801093c:	4640      	mov	r0, r8
 801093e:	4649      	mov	r1, r9
 8010940:	f7f0 f914 	bl	8000b6c <__aeabi_dcmpun>
 8010944:	b140      	cbz	r0, 8010958 <_printf_float+0xe0>
 8010946:	464b      	mov	r3, r9
 8010948:	2b00      	cmp	r3, #0
 801094a:	bfbc      	itt	lt
 801094c:	232d      	movlt	r3, #45	@ 0x2d
 801094e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010952:	4a7e      	ldr	r2, [pc, #504]	@ (8010b4c <_printf_float+0x2d4>)
 8010954:	4b7e      	ldr	r3, [pc, #504]	@ (8010b50 <_printf_float+0x2d8>)
 8010956:	e7d4      	b.n	8010902 <_printf_float+0x8a>
 8010958:	6863      	ldr	r3, [r4, #4]
 801095a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801095e:	9206      	str	r2, [sp, #24]
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	d13b      	bne.n	80109dc <_printf_float+0x164>
 8010964:	2306      	movs	r3, #6
 8010966:	6063      	str	r3, [r4, #4]
 8010968:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801096c:	2300      	movs	r3, #0
 801096e:	6022      	str	r2, [r4, #0]
 8010970:	9303      	str	r3, [sp, #12]
 8010972:	ab0a      	add	r3, sp, #40	@ 0x28
 8010974:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010978:	ab09      	add	r3, sp, #36	@ 0x24
 801097a:	9300      	str	r3, [sp, #0]
 801097c:	6861      	ldr	r1, [r4, #4]
 801097e:	ec49 8b10 	vmov	d0, r8, r9
 8010982:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010986:	4628      	mov	r0, r5
 8010988:	f7ff fed6 	bl	8010738 <__cvt>
 801098c:	9b06      	ldr	r3, [sp, #24]
 801098e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010990:	2b47      	cmp	r3, #71	@ 0x47
 8010992:	4680      	mov	r8, r0
 8010994:	d129      	bne.n	80109ea <_printf_float+0x172>
 8010996:	1cc8      	adds	r0, r1, #3
 8010998:	db02      	blt.n	80109a0 <_printf_float+0x128>
 801099a:	6863      	ldr	r3, [r4, #4]
 801099c:	4299      	cmp	r1, r3
 801099e:	dd41      	ble.n	8010a24 <_printf_float+0x1ac>
 80109a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80109a4:	fa5f fa8a 	uxtb.w	sl, sl
 80109a8:	3901      	subs	r1, #1
 80109aa:	4652      	mov	r2, sl
 80109ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80109b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80109b2:	f7ff ff26 	bl	8010802 <__exponent>
 80109b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80109b8:	1813      	adds	r3, r2, r0
 80109ba:	2a01      	cmp	r2, #1
 80109bc:	4681      	mov	r9, r0
 80109be:	6123      	str	r3, [r4, #16]
 80109c0:	dc02      	bgt.n	80109c8 <_printf_float+0x150>
 80109c2:	6822      	ldr	r2, [r4, #0]
 80109c4:	07d2      	lsls	r2, r2, #31
 80109c6:	d501      	bpl.n	80109cc <_printf_float+0x154>
 80109c8:	3301      	adds	r3, #1
 80109ca:	6123      	str	r3, [r4, #16]
 80109cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d0a2      	beq.n	801091a <_printf_float+0xa2>
 80109d4:	232d      	movs	r3, #45	@ 0x2d
 80109d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109da:	e79e      	b.n	801091a <_printf_float+0xa2>
 80109dc:	9a06      	ldr	r2, [sp, #24]
 80109de:	2a47      	cmp	r2, #71	@ 0x47
 80109e0:	d1c2      	bne.n	8010968 <_printf_float+0xf0>
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d1c0      	bne.n	8010968 <_printf_float+0xf0>
 80109e6:	2301      	movs	r3, #1
 80109e8:	e7bd      	b.n	8010966 <_printf_float+0xee>
 80109ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80109ee:	d9db      	bls.n	80109a8 <_printf_float+0x130>
 80109f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80109f4:	d118      	bne.n	8010a28 <_printf_float+0x1b0>
 80109f6:	2900      	cmp	r1, #0
 80109f8:	6863      	ldr	r3, [r4, #4]
 80109fa:	dd0b      	ble.n	8010a14 <_printf_float+0x19c>
 80109fc:	6121      	str	r1, [r4, #16]
 80109fe:	b913      	cbnz	r3, 8010a06 <_printf_float+0x18e>
 8010a00:	6822      	ldr	r2, [r4, #0]
 8010a02:	07d0      	lsls	r0, r2, #31
 8010a04:	d502      	bpl.n	8010a0c <_printf_float+0x194>
 8010a06:	3301      	adds	r3, #1
 8010a08:	440b      	add	r3, r1
 8010a0a:	6123      	str	r3, [r4, #16]
 8010a0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010a0e:	f04f 0900 	mov.w	r9, #0
 8010a12:	e7db      	b.n	80109cc <_printf_float+0x154>
 8010a14:	b913      	cbnz	r3, 8010a1c <_printf_float+0x1a4>
 8010a16:	6822      	ldr	r2, [r4, #0]
 8010a18:	07d2      	lsls	r2, r2, #31
 8010a1a:	d501      	bpl.n	8010a20 <_printf_float+0x1a8>
 8010a1c:	3302      	adds	r3, #2
 8010a1e:	e7f4      	b.n	8010a0a <_printf_float+0x192>
 8010a20:	2301      	movs	r3, #1
 8010a22:	e7f2      	b.n	8010a0a <_printf_float+0x192>
 8010a24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a2a:	4299      	cmp	r1, r3
 8010a2c:	db05      	blt.n	8010a3a <_printf_float+0x1c2>
 8010a2e:	6823      	ldr	r3, [r4, #0]
 8010a30:	6121      	str	r1, [r4, #16]
 8010a32:	07d8      	lsls	r0, r3, #31
 8010a34:	d5ea      	bpl.n	8010a0c <_printf_float+0x194>
 8010a36:	1c4b      	adds	r3, r1, #1
 8010a38:	e7e7      	b.n	8010a0a <_printf_float+0x192>
 8010a3a:	2900      	cmp	r1, #0
 8010a3c:	bfd4      	ite	le
 8010a3e:	f1c1 0202 	rsble	r2, r1, #2
 8010a42:	2201      	movgt	r2, #1
 8010a44:	4413      	add	r3, r2
 8010a46:	e7e0      	b.n	8010a0a <_printf_float+0x192>
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	055a      	lsls	r2, r3, #21
 8010a4c:	d407      	bmi.n	8010a5e <_printf_float+0x1e6>
 8010a4e:	6923      	ldr	r3, [r4, #16]
 8010a50:	4642      	mov	r2, r8
 8010a52:	4631      	mov	r1, r6
 8010a54:	4628      	mov	r0, r5
 8010a56:	47b8      	blx	r7
 8010a58:	3001      	adds	r0, #1
 8010a5a:	d12b      	bne.n	8010ab4 <_printf_float+0x23c>
 8010a5c:	e767      	b.n	801092e <_printf_float+0xb6>
 8010a5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010a62:	f240 80dd 	bls.w	8010c20 <_printf_float+0x3a8>
 8010a66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	f7f0 f84b 	bl	8000b08 <__aeabi_dcmpeq>
 8010a72:	2800      	cmp	r0, #0
 8010a74:	d033      	beq.n	8010ade <_printf_float+0x266>
 8010a76:	4a37      	ldr	r2, [pc, #220]	@ (8010b54 <_printf_float+0x2dc>)
 8010a78:	2301      	movs	r3, #1
 8010a7a:	4631      	mov	r1, r6
 8010a7c:	4628      	mov	r0, r5
 8010a7e:	47b8      	blx	r7
 8010a80:	3001      	adds	r0, #1
 8010a82:	f43f af54 	beq.w	801092e <_printf_float+0xb6>
 8010a86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010a8a:	4543      	cmp	r3, r8
 8010a8c:	db02      	blt.n	8010a94 <_printf_float+0x21c>
 8010a8e:	6823      	ldr	r3, [r4, #0]
 8010a90:	07d8      	lsls	r0, r3, #31
 8010a92:	d50f      	bpl.n	8010ab4 <_printf_float+0x23c>
 8010a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a98:	4631      	mov	r1, r6
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	47b8      	blx	r7
 8010a9e:	3001      	adds	r0, #1
 8010aa0:	f43f af45 	beq.w	801092e <_printf_float+0xb6>
 8010aa4:	f04f 0900 	mov.w	r9, #0
 8010aa8:	f108 38ff 	add.w	r8, r8, #4294967295
 8010aac:	f104 0a1a 	add.w	sl, r4, #26
 8010ab0:	45c8      	cmp	r8, r9
 8010ab2:	dc09      	bgt.n	8010ac8 <_printf_float+0x250>
 8010ab4:	6823      	ldr	r3, [r4, #0]
 8010ab6:	079b      	lsls	r3, r3, #30
 8010ab8:	f100 8103 	bmi.w	8010cc2 <_printf_float+0x44a>
 8010abc:	68e0      	ldr	r0, [r4, #12]
 8010abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ac0:	4298      	cmp	r0, r3
 8010ac2:	bfb8      	it	lt
 8010ac4:	4618      	movlt	r0, r3
 8010ac6:	e734      	b.n	8010932 <_printf_float+0xba>
 8010ac8:	2301      	movs	r3, #1
 8010aca:	4652      	mov	r2, sl
 8010acc:	4631      	mov	r1, r6
 8010ace:	4628      	mov	r0, r5
 8010ad0:	47b8      	blx	r7
 8010ad2:	3001      	adds	r0, #1
 8010ad4:	f43f af2b 	beq.w	801092e <_printf_float+0xb6>
 8010ad8:	f109 0901 	add.w	r9, r9, #1
 8010adc:	e7e8      	b.n	8010ab0 <_printf_float+0x238>
 8010ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	dc39      	bgt.n	8010b58 <_printf_float+0x2e0>
 8010ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8010b54 <_printf_float+0x2dc>)
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	4631      	mov	r1, r6
 8010aea:	4628      	mov	r0, r5
 8010aec:	47b8      	blx	r7
 8010aee:	3001      	adds	r0, #1
 8010af0:	f43f af1d 	beq.w	801092e <_printf_float+0xb6>
 8010af4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010af8:	ea59 0303 	orrs.w	r3, r9, r3
 8010afc:	d102      	bne.n	8010b04 <_printf_float+0x28c>
 8010afe:	6823      	ldr	r3, [r4, #0]
 8010b00:	07d9      	lsls	r1, r3, #31
 8010b02:	d5d7      	bpl.n	8010ab4 <_printf_float+0x23c>
 8010b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b08:	4631      	mov	r1, r6
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	47b8      	blx	r7
 8010b0e:	3001      	adds	r0, #1
 8010b10:	f43f af0d 	beq.w	801092e <_printf_float+0xb6>
 8010b14:	f04f 0a00 	mov.w	sl, #0
 8010b18:	f104 0b1a 	add.w	fp, r4, #26
 8010b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b1e:	425b      	negs	r3, r3
 8010b20:	4553      	cmp	r3, sl
 8010b22:	dc01      	bgt.n	8010b28 <_printf_float+0x2b0>
 8010b24:	464b      	mov	r3, r9
 8010b26:	e793      	b.n	8010a50 <_printf_float+0x1d8>
 8010b28:	2301      	movs	r3, #1
 8010b2a:	465a      	mov	r2, fp
 8010b2c:	4631      	mov	r1, r6
 8010b2e:	4628      	mov	r0, r5
 8010b30:	47b8      	blx	r7
 8010b32:	3001      	adds	r0, #1
 8010b34:	f43f aefb 	beq.w	801092e <_printf_float+0xb6>
 8010b38:	f10a 0a01 	add.w	sl, sl, #1
 8010b3c:	e7ee      	b.n	8010b1c <_printf_float+0x2a4>
 8010b3e:	bf00      	nop
 8010b40:	7fefffff 	.word	0x7fefffff
 8010b44:	08018824 	.word	0x08018824
 8010b48:	08018828 	.word	0x08018828
 8010b4c:	0801882c 	.word	0x0801882c
 8010b50:	08018830 	.word	0x08018830
 8010b54:	08018834 	.word	0x08018834
 8010b58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010b5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010b5e:	4553      	cmp	r3, sl
 8010b60:	bfa8      	it	ge
 8010b62:	4653      	movge	r3, sl
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	4699      	mov	r9, r3
 8010b68:	dc36      	bgt.n	8010bd8 <_printf_float+0x360>
 8010b6a:	f04f 0b00 	mov.w	fp, #0
 8010b6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b72:	f104 021a 	add.w	r2, r4, #26
 8010b76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010b78:	9306      	str	r3, [sp, #24]
 8010b7a:	eba3 0309 	sub.w	r3, r3, r9
 8010b7e:	455b      	cmp	r3, fp
 8010b80:	dc31      	bgt.n	8010be6 <_printf_float+0x36e>
 8010b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b84:	459a      	cmp	sl, r3
 8010b86:	dc3a      	bgt.n	8010bfe <_printf_float+0x386>
 8010b88:	6823      	ldr	r3, [r4, #0]
 8010b8a:	07da      	lsls	r2, r3, #31
 8010b8c:	d437      	bmi.n	8010bfe <_printf_float+0x386>
 8010b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b90:	ebaa 0903 	sub.w	r9, sl, r3
 8010b94:	9b06      	ldr	r3, [sp, #24]
 8010b96:	ebaa 0303 	sub.w	r3, sl, r3
 8010b9a:	4599      	cmp	r9, r3
 8010b9c:	bfa8      	it	ge
 8010b9e:	4699      	movge	r9, r3
 8010ba0:	f1b9 0f00 	cmp.w	r9, #0
 8010ba4:	dc33      	bgt.n	8010c0e <_printf_float+0x396>
 8010ba6:	f04f 0800 	mov.w	r8, #0
 8010baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010bae:	f104 0b1a 	add.w	fp, r4, #26
 8010bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bb4:	ebaa 0303 	sub.w	r3, sl, r3
 8010bb8:	eba3 0309 	sub.w	r3, r3, r9
 8010bbc:	4543      	cmp	r3, r8
 8010bbe:	f77f af79 	ble.w	8010ab4 <_printf_float+0x23c>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	465a      	mov	r2, fp
 8010bc6:	4631      	mov	r1, r6
 8010bc8:	4628      	mov	r0, r5
 8010bca:	47b8      	blx	r7
 8010bcc:	3001      	adds	r0, #1
 8010bce:	f43f aeae 	beq.w	801092e <_printf_float+0xb6>
 8010bd2:	f108 0801 	add.w	r8, r8, #1
 8010bd6:	e7ec      	b.n	8010bb2 <_printf_float+0x33a>
 8010bd8:	4642      	mov	r2, r8
 8010bda:	4631      	mov	r1, r6
 8010bdc:	4628      	mov	r0, r5
 8010bde:	47b8      	blx	r7
 8010be0:	3001      	adds	r0, #1
 8010be2:	d1c2      	bne.n	8010b6a <_printf_float+0x2f2>
 8010be4:	e6a3      	b.n	801092e <_printf_float+0xb6>
 8010be6:	2301      	movs	r3, #1
 8010be8:	4631      	mov	r1, r6
 8010bea:	4628      	mov	r0, r5
 8010bec:	9206      	str	r2, [sp, #24]
 8010bee:	47b8      	blx	r7
 8010bf0:	3001      	adds	r0, #1
 8010bf2:	f43f ae9c 	beq.w	801092e <_printf_float+0xb6>
 8010bf6:	9a06      	ldr	r2, [sp, #24]
 8010bf8:	f10b 0b01 	add.w	fp, fp, #1
 8010bfc:	e7bb      	b.n	8010b76 <_printf_float+0x2fe>
 8010bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c02:	4631      	mov	r1, r6
 8010c04:	4628      	mov	r0, r5
 8010c06:	47b8      	blx	r7
 8010c08:	3001      	adds	r0, #1
 8010c0a:	d1c0      	bne.n	8010b8e <_printf_float+0x316>
 8010c0c:	e68f      	b.n	801092e <_printf_float+0xb6>
 8010c0e:	9a06      	ldr	r2, [sp, #24]
 8010c10:	464b      	mov	r3, r9
 8010c12:	4442      	add	r2, r8
 8010c14:	4631      	mov	r1, r6
 8010c16:	4628      	mov	r0, r5
 8010c18:	47b8      	blx	r7
 8010c1a:	3001      	adds	r0, #1
 8010c1c:	d1c3      	bne.n	8010ba6 <_printf_float+0x32e>
 8010c1e:	e686      	b.n	801092e <_printf_float+0xb6>
 8010c20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010c24:	f1ba 0f01 	cmp.w	sl, #1
 8010c28:	dc01      	bgt.n	8010c2e <_printf_float+0x3b6>
 8010c2a:	07db      	lsls	r3, r3, #31
 8010c2c:	d536      	bpl.n	8010c9c <_printf_float+0x424>
 8010c2e:	2301      	movs	r3, #1
 8010c30:	4642      	mov	r2, r8
 8010c32:	4631      	mov	r1, r6
 8010c34:	4628      	mov	r0, r5
 8010c36:	47b8      	blx	r7
 8010c38:	3001      	adds	r0, #1
 8010c3a:	f43f ae78 	beq.w	801092e <_printf_float+0xb6>
 8010c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c42:	4631      	mov	r1, r6
 8010c44:	4628      	mov	r0, r5
 8010c46:	47b8      	blx	r7
 8010c48:	3001      	adds	r0, #1
 8010c4a:	f43f ae70 	beq.w	801092e <_printf_float+0xb6>
 8010c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010c52:	2200      	movs	r2, #0
 8010c54:	2300      	movs	r3, #0
 8010c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c5a:	f7ef ff55 	bl	8000b08 <__aeabi_dcmpeq>
 8010c5e:	b9c0      	cbnz	r0, 8010c92 <_printf_float+0x41a>
 8010c60:	4653      	mov	r3, sl
 8010c62:	f108 0201 	add.w	r2, r8, #1
 8010c66:	4631      	mov	r1, r6
 8010c68:	4628      	mov	r0, r5
 8010c6a:	47b8      	blx	r7
 8010c6c:	3001      	adds	r0, #1
 8010c6e:	d10c      	bne.n	8010c8a <_printf_float+0x412>
 8010c70:	e65d      	b.n	801092e <_printf_float+0xb6>
 8010c72:	2301      	movs	r3, #1
 8010c74:	465a      	mov	r2, fp
 8010c76:	4631      	mov	r1, r6
 8010c78:	4628      	mov	r0, r5
 8010c7a:	47b8      	blx	r7
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	f43f ae56 	beq.w	801092e <_printf_float+0xb6>
 8010c82:	f108 0801 	add.w	r8, r8, #1
 8010c86:	45d0      	cmp	r8, sl
 8010c88:	dbf3      	blt.n	8010c72 <_printf_float+0x3fa>
 8010c8a:	464b      	mov	r3, r9
 8010c8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010c90:	e6df      	b.n	8010a52 <_printf_float+0x1da>
 8010c92:	f04f 0800 	mov.w	r8, #0
 8010c96:	f104 0b1a 	add.w	fp, r4, #26
 8010c9a:	e7f4      	b.n	8010c86 <_printf_float+0x40e>
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	4642      	mov	r2, r8
 8010ca0:	e7e1      	b.n	8010c66 <_printf_float+0x3ee>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	464a      	mov	r2, r9
 8010ca6:	4631      	mov	r1, r6
 8010ca8:	4628      	mov	r0, r5
 8010caa:	47b8      	blx	r7
 8010cac:	3001      	adds	r0, #1
 8010cae:	f43f ae3e 	beq.w	801092e <_printf_float+0xb6>
 8010cb2:	f108 0801 	add.w	r8, r8, #1
 8010cb6:	68e3      	ldr	r3, [r4, #12]
 8010cb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010cba:	1a5b      	subs	r3, r3, r1
 8010cbc:	4543      	cmp	r3, r8
 8010cbe:	dcf0      	bgt.n	8010ca2 <_printf_float+0x42a>
 8010cc0:	e6fc      	b.n	8010abc <_printf_float+0x244>
 8010cc2:	f04f 0800 	mov.w	r8, #0
 8010cc6:	f104 0919 	add.w	r9, r4, #25
 8010cca:	e7f4      	b.n	8010cb6 <_printf_float+0x43e>

08010ccc <_printf_common>:
 8010ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd0:	4616      	mov	r6, r2
 8010cd2:	4698      	mov	r8, r3
 8010cd4:	688a      	ldr	r2, [r1, #8]
 8010cd6:	690b      	ldr	r3, [r1, #16]
 8010cd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	bfb8      	it	lt
 8010ce0:	4613      	movlt	r3, r2
 8010ce2:	6033      	str	r3, [r6, #0]
 8010ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ce8:	4607      	mov	r7, r0
 8010cea:	460c      	mov	r4, r1
 8010cec:	b10a      	cbz	r2, 8010cf2 <_printf_common+0x26>
 8010cee:	3301      	adds	r3, #1
 8010cf0:	6033      	str	r3, [r6, #0]
 8010cf2:	6823      	ldr	r3, [r4, #0]
 8010cf4:	0699      	lsls	r1, r3, #26
 8010cf6:	bf42      	ittt	mi
 8010cf8:	6833      	ldrmi	r3, [r6, #0]
 8010cfa:	3302      	addmi	r3, #2
 8010cfc:	6033      	strmi	r3, [r6, #0]
 8010cfe:	6825      	ldr	r5, [r4, #0]
 8010d00:	f015 0506 	ands.w	r5, r5, #6
 8010d04:	d106      	bne.n	8010d14 <_printf_common+0x48>
 8010d06:	f104 0a19 	add.w	sl, r4, #25
 8010d0a:	68e3      	ldr	r3, [r4, #12]
 8010d0c:	6832      	ldr	r2, [r6, #0]
 8010d0e:	1a9b      	subs	r3, r3, r2
 8010d10:	42ab      	cmp	r3, r5
 8010d12:	dc26      	bgt.n	8010d62 <_printf_common+0x96>
 8010d14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010d18:	6822      	ldr	r2, [r4, #0]
 8010d1a:	3b00      	subs	r3, #0
 8010d1c:	bf18      	it	ne
 8010d1e:	2301      	movne	r3, #1
 8010d20:	0692      	lsls	r2, r2, #26
 8010d22:	d42b      	bmi.n	8010d7c <_printf_common+0xb0>
 8010d24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010d28:	4641      	mov	r1, r8
 8010d2a:	4638      	mov	r0, r7
 8010d2c:	47c8      	blx	r9
 8010d2e:	3001      	adds	r0, #1
 8010d30:	d01e      	beq.n	8010d70 <_printf_common+0xa4>
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	6922      	ldr	r2, [r4, #16]
 8010d36:	f003 0306 	and.w	r3, r3, #6
 8010d3a:	2b04      	cmp	r3, #4
 8010d3c:	bf02      	ittt	eq
 8010d3e:	68e5      	ldreq	r5, [r4, #12]
 8010d40:	6833      	ldreq	r3, [r6, #0]
 8010d42:	1aed      	subeq	r5, r5, r3
 8010d44:	68a3      	ldr	r3, [r4, #8]
 8010d46:	bf0c      	ite	eq
 8010d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d4c:	2500      	movne	r5, #0
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	bfc4      	itt	gt
 8010d52:	1a9b      	subgt	r3, r3, r2
 8010d54:	18ed      	addgt	r5, r5, r3
 8010d56:	2600      	movs	r6, #0
 8010d58:	341a      	adds	r4, #26
 8010d5a:	42b5      	cmp	r5, r6
 8010d5c:	d11a      	bne.n	8010d94 <_printf_common+0xc8>
 8010d5e:	2000      	movs	r0, #0
 8010d60:	e008      	b.n	8010d74 <_printf_common+0xa8>
 8010d62:	2301      	movs	r3, #1
 8010d64:	4652      	mov	r2, sl
 8010d66:	4641      	mov	r1, r8
 8010d68:	4638      	mov	r0, r7
 8010d6a:	47c8      	blx	r9
 8010d6c:	3001      	adds	r0, #1
 8010d6e:	d103      	bne.n	8010d78 <_printf_common+0xac>
 8010d70:	f04f 30ff 	mov.w	r0, #4294967295
 8010d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d78:	3501      	adds	r5, #1
 8010d7a:	e7c6      	b.n	8010d0a <_printf_common+0x3e>
 8010d7c:	18e1      	adds	r1, r4, r3
 8010d7e:	1c5a      	adds	r2, r3, #1
 8010d80:	2030      	movs	r0, #48	@ 0x30
 8010d82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010d86:	4422      	add	r2, r4
 8010d88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010d8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010d90:	3302      	adds	r3, #2
 8010d92:	e7c7      	b.n	8010d24 <_printf_common+0x58>
 8010d94:	2301      	movs	r3, #1
 8010d96:	4622      	mov	r2, r4
 8010d98:	4641      	mov	r1, r8
 8010d9a:	4638      	mov	r0, r7
 8010d9c:	47c8      	blx	r9
 8010d9e:	3001      	adds	r0, #1
 8010da0:	d0e6      	beq.n	8010d70 <_printf_common+0xa4>
 8010da2:	3601      	adds	r6, #1
 8010da4:	e7d9      	b.n	8010d5a <_printf_common+0x8e>
	...

08010da8 <_printf_i>:
 8010da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010dac:	7e0f      	ldrb	r7, [r1, #24]
 8010dae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010db0:	2f78      	cmp	r7, #120	@ 0x78
 8010db2:	4691      	mov	r9, r2
 8010db4:	4680      	mov	r8, r0
 8010db6:	460c      	mov	r4, r1
 8010db8:	469a      	mov	sl, r3
 8010dba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010dbe:	d807      	bhi.n	8010dd0 <_printf_i+0x28>
 8010dc0:	2f62      	cmp	r7, #98	@ 0x62
 8010dc2:	d80a      	bhi.n	8010dda <_printf_i+0x32>
 8010dc4:	2f00      	cmp	r7, #0
 8010dc6:	f000 80d2 	beq.w	8010f6e <_printf_i+0x1c6>
 8010dca:	2f58      	cmp	r7, #88	@ 0x58
 8010dcc:	f000 80b9 	beq.w	8010f42 <_printf_i+0x19a>
 8010dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010dd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010dd8:	e03a      	b.n	8010e50 <_printf_i+0xa8>
 8010dda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010dde:	2b15      	cmp	r3, #21
 8010de0:	d8f6      	bhi.n	8010dd0 <_printf_i+0x28>
 8010de2:	a101      	add	r1, pc, #4	@ (adr r1, 8010de8 <_printf_i+0x40>)
 8010de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010de8:	08010e41 	.word	0x08010e41
 8010dec:	08010e55 	.word	0x08010e55
 8010df0:	08010dd1 	.word	0x08010dd1
 8010df4:	08010dd1 	.word	0x08010dd1
 8010df8:	08010dd1 	.word	0x08010dd1
 8010dfc:	08010dd1 	.word	0x08010dd1
 8010e00:	08010e55 	.word	0x08010e55
 8010e04:	08010dd1 	.word	0x08010dd1
 8010e08:	08010dd1 	.word	0x08010dd1
 8010e0c:	08010dd1 	.word	0x08010dd1
 8010e10:	08010dd1 	.word	0x08010dd1
 8010e14:	08010f55 	.word	0x08010f55
 8010e18:	08010e7f 	.word	0x08010e7f
 8010e1c:	08010f0f 	.word	0x08010f0f
 8010e20:	08010dd1 	.word	0x08010dd1
 8010e24:	08010dd1 	.word	0x08010dd1
 8010e28:	08010f77 	.word	0x08010f77
 8010e2c:	08010dd1 	.word	0x08010dd1
 8010e30:	08010e7f 	.word	0x08010e7f
 8010e34:	08010dd1 	.word	0x08010dd1
 8010e38:	08010dd1 	.word	0x08010dd1
 8010e3c:	08010f17 	.word	0x08010f17
 8010e40:	6833      	ldr	r3, [r6, #0]
 8010e42:	1d1a      	adds	r2, r3, #4
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	6032      	str	r2, [r6, #0]
 8010e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010e50:	2301      	movs	r3, #1
 8010e52:	e09d      	b.n	8010f90 <_printf_i+0x1e8>
 8010e54:	6833      	ldr	r3, [r6, #0]
 8010e56:	6820      	ldr	r0, [r4, #0]
 8010e58:	1d19      	adds	r1, r3, #4
 8010e5a:	6031      	str	r1, [r6, #0]
 8010e5c:	0606      	lsls	r6, r0, #24
 8010e5e:	d501      	bpl.n	8010e64 <_printf_i+0xbc>
 8010e60:	681d      	ldr	r5, [r3, #0]
 8010e62:	e003      	b.n	8010e6c <_printf_i+0xc4>
 8010e64:	0645      	lsls	r5, r0, #25
 8010e66:	d5fb      	bpl.n	8010e60 <_printf_i+0xb8>
 8010e68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010e6c:	2d00      	cmp	r5, #0
 8010e6e:	da03      	bge.n	8010e78 <_printf_i+0xd0>
 8010e70:	232d      	movs	r3, #45	@ 0x2d
 8010e72:	426d      	negs	r5, r5
 8010e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e78:	4859      	ldr	r0, [pc, #356]	@ (8010fe0 <_printf_i+0x238>)
 8010e7a:	230a      	movs	r3, #10
 8010e7c:	e011      	b.n	8010ea2 <_printf_i+0xfa>
 8010e7e:	6821      	ldr	r1, [r4, #0]
 8010e80:	6833      	ldr	r3, [r6, #0]
 8010e82:	0608      	lsls	r0, r1, #24
 8010e84:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e88:	d402      	bmi.n	8010e90 <_printf_i+0xe8>
 8010e8a:	0649      	lsls	r1, r1, #25
 8010e8c:	bf48      	it	mi
 8010e8e:	b2ad      	uxthmi	r5, r5
 8010e90:	2f6f      	cmp	r7, #111	@ 0x6f
 8010e92:	4853      	ldr	r0, [pc, #332]	@ (8010fe0 <_printf_i+0x238>)
 8010e94:	6033      	str	r3, [r6, #0]
 8010e96:	bf14      	ite	ne
 8010e98:	230a      	movne	r3, #10
 8010e9a:	2308      	moveq	r3, #8
 8010e9c:	2100      	movs	r1, #0
 8010e9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010ea2:	6866      	ldr	r6, [r4, #4]
 8010ea4:	60a6      	str	r6, [r4, #8]
 8010ea6:	2e00      	cmp	r6, #0
 8010ea8:	bfa2      	ittt	ge
 8010eaa:	6821      	ldrge	r1, [r4, #0]
 8010eac:	f021 0104 	bicge.w	r1, r1, #4
 8010eb0:	6021      	strge	r1, [r4, #0]
 8010eb2:	b90d      	cbnz	r5, 8010eb8 <_printf_i+0x110>
 8010eb4:	2e00      	cmp	r6, #0
 8010eb6:	d04b      	beq.n	8010f50 <_printf_i+0x1a8>
 8010eb8:	4616      	mov	r6, r2
 8010eba:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ebe:	fb03 5711 	mls	r7, r3, r1, r5
 8010ec2:	5dc7      	ldrb	r7, [r0, r7]
 8010ec4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010ec8:	462f      	mov	r7, r5
 8010eca:	42bb      	cmp	r3, r7
 8010ecc:	460d      	mov	r5, r1
 8010ece:	d9f4      	bls.n	8010eba <_printf_i+0x112>
 8010ed0:	2b08      	cmp	r3, #8
 8010ed2:	d10b      	bne.n	8010eec <_printf_i+0x144>
 8010ed4:	6823      	ldr	r3, [r4, #0]
 8010ed6:	07df      	lsls	r7, r3, #31
 8010ed8:	d508      	bpl.n	8010eec <_printf_i+0x144>
 8010eda:	6923      	ldr	r3, [r4, #16]
 8010edc:	6861      	ldr	r1, [r4, #4]
 8010ede:	4299      	cmp	r1, r3
 8010ee0:	bfde      	ittt	le
 8010ee2:	2330      	movle	r3, #48	@ 0x30
 8010ee4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ee8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010eec:	1b92      	subs	r2, r2, r6
 8010eee:	6122      	str	r2, [r4, #16]
 8010ef0:	f8cd a000 	str.w	sl, [sp]
 8010ef4:	464b      	mov	r3, r9
 8010ef6:	aa03      	add	r2, sp, #12
 8010ef8:	4621      	mov	r1, r4
 8010efa:	4640      	mov	r0, r8
 8010efc:	f7ff fee6 	bl	8010ccc <_printf_common>
 8010f00:	3001      	adds	r0, #1
 8010f02:	d14a      	bne.n	8010f9a <_printf_i+0x1f2>
 8010f04:	f04f 30ff 	mov.w	r0, #4294967295
 8010f08:	b004      	add	sp, #16
 8010f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f0e:	6823      	ldr	r3, [r4, #0]
 8010f10:	f043 0320 	orr.w	r3, r3, #32
 8010f14:	6023      	str	r3, [r4, #0]
 8010f16:	4833      	ldr	r0, [pc, #204]	@ (8010fe4 <_printf_i+0x23c>)
 8010f18:	2778      	movs	r7, #120	@ 0x78
 8010f1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	6831      	ldr	r1, [r6, #0]
 8010f22:	061f      	lsls	r7, r3, #24
 8010f24:	f851 5b04 	ldr.w	r5, [r1], #4
 8010f28:	d402      	bmi.n	8010f30 <_printf_i+0x188>
 8010f2a:	065f      	lsls	r7, r3, #25
 8010f2c:	bf48      	it	mi
 8010f2e:	b2ad      	uxthmi	r5, r5
 8010f30:	6031      	str	r1, [r6, #0]
 8010f32:	07d9      	lsls	r1, r3, #31
 8010f34:	bf44      	itt	mi
 8010f36:	f043 0320 	orrmi.w	r3, r3, #32
 8010f3a:	6023      	strmi	r3, [r4, #0]
 8010f3c:	b11d      	cbz	r5, 8010f46 <_printf_i+0x19e>
 8010f3e:	2310      	movs	r3, #16
 8010f40:	e7ac      	b.n	8010e9c <_printf_i+0xf4>
 8010f42:	4827      	ldr	r0, [pc, #156]	@ (8010fe0 <_printf_i+0x238>)
 8010f44:	e7e9      	b.n	8010f1a <_printf_i+0x172>
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	f023 0320 	bic.w	r3, r3, #32
 8010f4c:	6023      	str	r3, [r4, #0]
 8010f4e:	e7f6      	b.n	8010f3e <_printf_i+0x196>
 8010f50:	4616      	mov	r6, r2
 8010f52:	e7bd      	b.n	8010ed0 <_printf_i+0x128>
 8010f54:	6833      	ldr	r3, [r6, #0]
 8010f56:	6825      	ldr	r5, [r4, #0]
 8010f58:	6961      	ldr	r1, [r4, #20]
 8010f5a:	1d18      	adds	r0, r3, #4
 8010f5c:	6030      	str	r0, [r6, #0]
 8010f5e:	062e      	lsls	r6, r5, #24
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	d501      	bpl.n	8010f68 <_printf_i+0x1c0>
 8010f64:	6019      	str	r1, [r3, #0]
 8010f66:	e002      	b.n	8010f6e <_printf_i+0x1c6>
 8010f68:	0668      	lsls	r0, r5, #25
 8010f6a:	d5fb      	bpl.n	8010f64 <_printf_i+0x1bc>
 8010f6c:	8019      	strh	r1, [r3, #0]
 8010f6e:	2300      	movs	r3, #0
 8010f70:	6123      	str	r3, [r4, #16]
 8010f72:	4616      	mov	r6, r2
 8010f74:	e7bc      	b.n	8010ef0 <_printf_i+0x148>
 8010f76:	6833      	ldr	r3, [r6, #0]
 8010f78:	1d1a      	adds	r2, r3, #4
 8010f7a:	6032      	str	r2, [r6, #0]
 8010f7c:	681e      	ldr	r6, [r3, #0]
 8010f7e:	6862      	ldr	r2, [r4, #4]
 8010f80:	2100      	movs	r1, #0
 8010f82:	4630      	mov	r0, r6
 8010f84:	f7ef f944 	bl	8000210 <memchr>
 8010f88:	b108      	cbz	r0, 8010f8e <_printf_i+0x1e6>
 8010f8a:	1b80      	subs	r0, r0, r6
 8010f8c:	6060      	str	r0, [r4, #4]
 8010f8e:	6863      	ldr	r3, [r4, #4]
 8010f90:	6123      	str	r3, [r4, #16]
 8010f92:	2300      	movs	r3, #0
 8010f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f98:	e7aa      	b.n	8010ef0 <_printf_i+0x148>
 8010f9a:	6923      	ldr	r3, [r4, #16]
 8010f9c:	4632      	mov	r2, r6
 8010f9e:	4649      	mov	r1, r9
 8010fa0:	4640      	mov	r0, r8
 8010fa2:	47d0      	blx	sl
 8010fa4:	3001      	adds	r0, #1
 8010fa6:	d0ad      	beq.n	8010f04 <_printf_i+0x15c>
 8010fa8:	6823      	ldr	r3, [r4, #0]
 8010faa:	079b      	lsls	r3, r3, #30
 8010fac:	d413      	bmi.n	8010fd6 <_printf_i+0x22e>
 8010fae:	68e0      	ldr	r0, [r4, #12]
 8010fb0:	9b03      	ldr	r3, [sp, #12]
 8010fb2:	4298      	cmp	r0, r3
 8010fb4:	bfb8      	it	lt
 8010fb6:	4618      	movlt	r0, r3
 8010fb8:	e7a6      	b.n	8010f08 <_printf_i+0x160>
 8010fba:	2301      	movs	r3, #1
 8010fbc:	4632      	mov	r2, r6
 8010fbe:	4649      	mov	r1, r9
 8010fc0:	4640      	mov	r0, r8
 8010fc2:	47d0      	blx	sl
 8010fc4:	3001      	adds	r0, #1
 8010fc6:	d09d      	beq.n	8010f04 <_printf_i+0x15c>
 8010fc8:	3501      	adds	r5, #1
 8010fca:	68e3      	ldr	r3, [r4, #12]
 8010fcc:	9903      	ldr	r1, [sp, #12]
 8010fce:	1a5b      	subs	r3, r3, r1
 8010fd0:	42ab      	cmp	r3, r5
 8010fd2:	dcf2      	bgt.n	8010fba <_printf_i+0x212>
 8010fd4:	e7eb      	b.n	8010fae <_printf_i+0x206>
 8010fd6:	2500      	movs	r5, #0
 8010fd8:	f104 0619 	add.w	r6, r4, #25
 8010fdc:	e7f5      	b.n	8010fca <_printf_i+0x222>
 8010fde:	bf00      	nop
 8010fe0:	08018836 	.word	0x08018836
 8010fe4:	08018847 	.word	0x08018847

08010fe8 <_scanf_float>:
 8010fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fec:	b087      	sub	sp, #28
 8010fee:	4617      	mov	r7, r2
 8010ff0:	9303      	str	r3, [sp, #12]
 8010ff2:	688b      	ldr	r3, [r1, #8]
 8010ff4:	1e5a      	subs	r2, r3, #1
 8010ff6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010ffa:	bf81      	itttt	hi
 8010ffc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011000:	eb03 0b05 	addhi.w	fp, r3, r5
 8011004:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011008:	608b      	strhi	r3, [r1, #8]
 801100a:	680b      	ldr	r3, [r1, #0]
 801100c:	460a      	mov	r2, r1
 801100e:	f04f 0500 	mov.w	r5, #0
 8011012:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011016:	f842 3b1c 	str.w	r3, [r2], #28
 801101a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801101e:	4680      	mov	r8, r0
 8011020:	460c      	mov	r4, r1
 8011022:	bf98      	it	ls
 8011024:	f04f 0b00 	movls.w	fp, #0
 8011028:	9201      	str	r2, [sp, #4]
 801102a:	4616      	mov	r6, r2
 801102c:	46aa      	mov	sl, r5
 801102e:	46a9      	mov	r9, r5
 8011030:	9502      	str	r5, [sp, #8]
 8011032:	68a2      	ldr	r2, [r4, #8]
 8011034:	b152      	cbz	r2, 801104c <_scanf_float+0x64>
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	2b4e      	cmp	r3, #78	@ 0x4e
 801103c:	d864      	bhi.n	8011108 <_scanf_float+0x120>
 801103e:	2b40      	cmp	r3, #64	@ 0x40
 8011040:	d83c      	bhi.n	80110bc <_scanf_float+0xd4>
 8011042:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011046:	b2c8      	uxtb	r0, r1
 8011048:	280e      	cmp	r0, #14
 801104a:	d93a      	bls.n	80110c2 <_scanf_float+0xda>
 801104c:	f1b9 0f00 	cmp.w	r9, #0
 8011050:	d003      	beq.n	801105a <_scanf_float+0x72>
 8011052:	6823      	ldr	r3, [r4, #0]
 8011054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011058:	6023      	str	r3, [r4, #0]
 801105a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801105e:	f1ba 0f01 	cmp.w	sl, #1
 8011062:	f200 8117 	bhi.w	8011294 <_scanf_float+0x2ac>
 8011066:	9b01      	ldr	r3, [sp, #4]
 8011068:	429e      	cmp	r6, r3
 801106a:	f200 8108 	bhi.w	801127e <_scanf_float+0x296>
 801106e:	2001      	movs	r0, #1
 8011070:	b007      	add	sp, #28
 8011072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011076:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801107a:	2a0d      	cmp	r2, #13
 801107c:	d8e6      	bhi.n	801104c <_scanf_float+0x64>
 801107e:	a101      	add	r1, pc, #4	@ (adr r1, 8011084 <_scanf_float+0x9c>)
 8011080:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011084:	080111cb 	.word	0x080111cb
 8011088:	0801104d 	.word	0x0801104d
 801108c:	0801104d 	.word	0x0801104d
 8011090:	0801104d 	.word	0x0801104d
 8011094:	0801122b 	.word	0x0801122b
 8011098:	08011203 	.word	0x08011203
 801109c:	0801104d 	.word	0x0801104d
 80110a0:	0801104d 	.word	0x0801104d
 80110a4:	080111d9 	.word	0x080111d9
 80110a8:	0801104d 	.word	0x0801104d
 80110ac:	0801104d 	.word	0x0801104d
 80110b0:	0801104d 	.word	0x0801104d
 80110b4:	0801104d 	.word	0x0801104d
 80110b8:	08011191 	.word	0x08011191
 80110bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80110c0:	e7db      	b.n	801107a <_scanf_float+0x92>
 80110c2:	290e      	cmp	r1, #14
 80110c4:	d8c2      	bhi.n	801104c <_scanf_float+0x64>
 80110c6:	a001      	add	r0, pc, #4	@ (adr r0, 80110cc <_scanf_float+0xe4>)
 80110c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80110cc:	08011181 	.word	0x08011181
 80110d0:	0801104d 	.word	0x0801104d
 80110d4:	08011181 	.word	0x08011181
 80110d8:	08011217 	.word	0x08011217
 80110dc:	0801104d 	.word	0x0801104d
 80110e0:	08011129 	.word	0x08011129
 80110e4:	08011167 	.word	0x08011167
 80110e8:	08011167 	.word	0x08011167
 80110ec:	08011167 	.word	0x08011167
 80110f0:	08011167 	.word	0x08011167
 80110f4:	08011167 	.word	0x08011167
 80110f8:	08011167 	.word	0x08011167
 80110fc:	08011167 	.word	0x08011167
 8011100:	08011167 	.word	0x08011167
 8011104:	08011167 	.word	0x08011167
 8011108:	2b6e      	cmp	r3, #110	@ 0x6e
 801110a:	d809      	bhi.n	8011120 <_scanf_float+0x138>
 801110c:	2b60      	cmp	r3, #96	@ 0x60
 801110e:	d8b2      	bhi.n	8011076 <_scanf_float+0x8e>
 8011110:	2b54      	cmp	r3, #84	@ 0x54
 8011112:	d07b      	beq.n	801120c <_scanf_float+0x224>
 8011114:	2b59      	cmp	r3, #89	@ 0x59
 8011116:	d199      	bne.n	801104c <_scanf_float+0x64>
 8011118:	2d07      	cmp	r5, #7
 801111a:	d197      	bne.n	801104c <_scanf_float+0x64>
 801111c:	2508      	movs	r5, #8
 801111e:	e02c      	b.n	801117a <_scanf_float+0x192>
 8011120:	2b74      	cmp	r3, #116	@ 0x74
 8011122:	d073      	beq.n	801120c <_scanf_float+0x224>
 8011124:	2b79      	cmp	r3, #121	@ 0x79
 8011126:	e7f6      	b.n	8011116 <_scanf_float+0x12e>
 8011128:	6821      	ldr	r1, [r4, #0]
 801112a:	05c8      	lsls	r0, r1, #23
 801112c:	d51b      	bpl.n	8011166 <_scanf_float+0x17e>
 801112e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011132:	6021      	str	r1, [r4, #0]
 8011134:	f109 0901 	add.w	r9, r9, #1
 8011138:	f1bb 0f00 	cmp.w	fp, #0
 801113c:	d003      	beq.n	8011146 <_scanf_float+0x15e>
 801113e:	3201      	adds	r2, #1
 8011140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011144:	60a2      	str	r2, [r4, #8]
 8011146:	68a3      	ldr	r3, [r4, #8]
 8011148:	3b01      	subs	r3, #1
 801114a:	60a3      	str	r3, [r4, #8]
 801114c:	6923      	ldr	r3, [r4, #16]
 801114e:	3301      	adds	r3, #1
 8011150:	6123      	str	r3, [r4, #16]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	3b01      	subs	r3, #1
 8011156:	2b00      	cmp	r3, #0
 8011158:	607b      	str	r3, [r7, #4]
 801115a:	f340 8087 	ble.w	801126c <_scanf_float+0x284>
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	3301      	adds	r3, #1
 8011162:	603b      	str	r3, [r7, #0]
 8011164:	e765      	b.n	8011032 <_scanf_float+0x4a>
 8011166:	eb1a 0105 	adds.w	r1, sl, r5
 801116a:	f47f af6f 	bne.w	801104c <_scanf_float+0x64>
 801116e:	6822      	ldr	r2, [r4, #0]
 8011170:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011174:	6022      	str	r2, [r4, #0]
 8011176:	460d      	mov	r5, r1
 8011178:	468a      	mov	sl, r1
 801117a:	f806 3b01 	strb.w	r3, [r6], #1
 801117e:	e7e2      	b.n	8011146 <_scanf_float+0x15e>
 8011180:	6822      	ldr	r2, [r4, #0]
 8011182:	0610      	lsls	r0, r2, #24
 8011184:	f57f af62 	bpl.w	801104c <_scanf_float+0x64>
 8011188:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801118c:	6022      	str	r2, [r4, #0]
 801118e:	e7f4      	b.n	801117a <_scanf_float+0x192>
 8011190:	f1ba 0f00 	cmp.w	sl, #0
 8011194:	d10e      	bne.n	80111b4 <_scanf_float+0x1cc>
 8011196:	f1b9 0f00 	cmp.w	r9, #0
 801119a:	d10e      	bne.n	80111ba <_scanf_float+0x1d2>
 801119c:	6822      	ldr	r2, [r4, #0]
 801119e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80111a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80111a6:	d108      	bne.n	80111ba <_scanf_float+0x1d2>
 80111a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80111ac:	6022      	str	r2, [r4, #0]
 80111ae:	f04f 0a01 	mov.w	sl, #1
 80111b2:	e7e2      	b.n	801117a <_scanf_float+0x192>
 80111b4:	f1ba 0f02 	cmp.w	sl, #2
 80111b8:	d055      	beq.n	8011266 <_scanf_float+0x27e>
 80111ba:	2d01      	cmp	r5, #1
 80111bc:	d002      	beq.n	80111c4 <_scanf_float+0x1dc>
 80111be:	2d04      	cmp	r5, #4
 80111c0:	f47f af44 	bne.w	801104c <_scanf_float+0x64>
 80111c4:	3501      	adds	r5, #1
 80111c6:	b2ed      	uxtb	r5, r5
 80111c8:	e7d7      	b.n	801117a <_scanf_float+0x192>
 80111ca:	f1ba 0f01 	cmp.w	sl, #1
 80111ce:	f47f af3d 	bne.w	801104c <_scanf_float+0x64>
 80111d2:	f04f 0a02 	mov.w	sl, #2
 80111d6:	e7d0      	b.n	801117a <_scanf_float+0x192>
 80111d8:	b97d      	cbnz	r5, 80111fa <_scanf_float+0x212>
 80111da:	f1b9 0f00 	cmp.w	r9, #0
 80111de:	f47f af38 	bne.w	8011052 <_scanf_float+0x6a>
 80111e2:	6822      	ldr	r2, [r4, #0]
 80111e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80111e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80111ec:	f040 8108 	bne.w	8011400 <_scanf_float+0x418>
 80111f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80111f4:	6022      	str	r2, [r4, #0]
 80111f6:	2501      	movs	r5, #1
 80111f8:	e7bf      	b.n	801117a <_scanf_float+0x192>
 80111fa:	2d03      	cmp	r5, #3
 80111fc:	d0e2      	beq.n	80111c4 <_scanf_float+0x1dc>
 80111fe:	2d05      	cmp	r5, #5
 8011200:	e7de      	b.n	80111c0 <_scanf_float+0x1d8>
 8011202:	2d02      	cmp	r5, #2
 8011204:	f47f af22 	bne.w	801104c <_scanf_float+0x64>
 8011208:	2503      	movs	r5, #3
 801120a:	e7b6      	b.n	801117a <_scanf_float+0x192>
 801120c:	2d06      	cmp	r5, #6
 801120e:	f47f af1d 	bne.w	801104c <_scanf_float+0x64>
 8011212:	2507      	movs	r5, #7
 8011214:	e7b1      	b.n	801117a <_scanf_float+0x192>
 8011216:	6822      	ldr	r2, [r4, #0]
 8011218:	0591      	lsls	r1, r2, #22
 801121a:	f57f af17 	bpl.w	801104c <_scanf_float+0x64>
 801121e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011222:	6022      	str	r2, [r4, #0]
 8011224:	f8cd 9008 	str.w	r9, [sp, #8]
 8011228:	e7a7      	b.n	801117a <_scanf_float+0x192>
 801122a:	6822      	ldr	r2, [r4, #0]
 801122c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011230:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011234:	d006      	beq.n	8011244 <_scanf_float+0x25c>
 8011236:	0550      	lsls	r0, r2, #21
 8011238:	f57f af08 	bpl.w	801104c <_scanf_float+0x64>
 801123c:	f1b9 0f00 	cmp.w	r9, #0
 8011240:	f000 80de 	beq.w	8011400 <_scanf_float+0x418>
 8011244:	0591      	lsls	r1, r2, #22
 8011246:	bf58      	it	pl
 8011248:	9902      	ldrpl	r1, [sp, #8]
 801124a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801124e:	bf58      	it	pl
 8011250:	eba9 0101 	subpl.w	r1, r9, r1
 8011254:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011258:	bf58      	it	pl
 801125a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801125e:	6022      	str	r2, [r4, #0]
 8011260:	f04f 0900 	mov.w	r9, #0
 8011264:	e789      	b.n	801117a <_scanf_float+0x192>
 8011266:	f04f 0a03 	mov.w	sl, #3
 801126a:	e786      	b.n	801117a <_scanf_float+0x192>
 801126c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011270:	4639      	mov	r1, r7
 8011272:	4640      	mov	r0, r8
 8011274:	4798      	blx	r3
 8011276:	2800      	cmp	r0, #0
 8011278:	f43f aedb 	beq.w	8011032 <_scanf_float+0x4a>
 801127c:	e6e6      	b.n	801104c <_scanf_float+0x64>
 801127e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011286:	463a      	mov	r2, r7
 8011288:	4640      	mov	r0, r8
 801128a:	4798      	blx	r3
 801128c:	6923      	ldr	r3, [r4, #16]
 801128e:	3b01      	subs	r3, #1
 8011290:	6123      	str	r3, [r4, #16]
 8011292:	e6e8      	b.n	8011066 <_scanf_float+0x7e>
 8011294:	1e6b      	subs	r3, r5, #1
 8011296:	2b06      	cmp	r3, #6
 8011298:	d824      	bhi.n	80112e4 <_scanf_float+0x2fc>
 801129a:	2d02      	cmp	r5, #2
 801129c:	d836      	bhi.n	801130c <_scanf_float+0x324>
 801129e:	9b01      	ldr	r3, [sp, #4]
 80112a0:	429e      	cmp	r6, r3
 80112a2:	f67f aee4 	bls.w	801106e <_scanf_float+0x86>
 80112a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80112aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80112ae:	463a      	mov	r2, r7
 80112b0:	4640      	mov	r0, r8
 80112b2:	4798      	blx	r3
 80112b4:	6923      	ldr	r3, [r4, #16]
 80112b6:	3b01      	subs	r3, #1
 80112b8:	6123      	str	r3, [r4, #16]
 80112ba:	e7f0      	b.n	801129e <_scanf_float+0x2b6>
 80112bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80112c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80112c4:	463a      	mov	r2, r7
 80112c6:	4640      	mov	r0, r8
 80112c8:	4798      	blx	r3
 80112ca:	6923      	ldr	r3, [r4, #16]
 80112cc:	3b01      	subs	r3, #1
 80112ce:	6123      	str	r3, [r4, #16]
 80112d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112d4:	fa5f fa8a 	uxtb.w	sl, sl
 80112d8:	f1ba 0f02 	cmp.w	sl, #2
 80112dc:	d1ee      	bne.n	80112bc <_scanf_float+0x2d4>
 80112de:	3d03      	subs	r5, #3
 80112e0:	b2ed      	uxtb	r5, r5
 80112e2:	1b76      	subs	r6, r6, r5
 80112e4:	6823      	ldr	r3, [r4, #0]
 80112e6:	05da      	lsls	r2, r3, #23
 80112e8:	d530      	bpl.n	801134c <_scanf_float+0x364>
 80112ea:	055b      	lsls	r3, r3, #21
 80112ec:	d511      	bpl.n	8011312 <_scanf_float+0x32a>
 80112ee:	9b01      	ldr	r3, [sp, #4]
 80112f0:	429e      	cmp	r6, r3
 80112f2:	f67f aebc 	bls.w	801106e <_scanf_float+0x86>
 80112f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80112fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80112fe:	463a      	mov	r2, r7
 8011300:	4640      	mov	r0, r8
 8011302:	4798      	blx	r3
 8011304:	6923      	ldr	r3, [r4, #16]
 8011306:	3b01      	subs	r3, #1
 8011308:	6123      	str	r3, [r4, #16]
 801130a:	e7f0      	b.n	80112ee <_scanf_float+0x306>
 801130c:	46aa      	mov	sl, r5
 801130e:	46b3      	mov	fp, r6
 8011310:	e7de      	b.n	80112d0 <_scanf_float+0x2e8>
 8011312:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011316:	6923      	ldr	r3, [r4, #16]
 8011318:	2965      	cmp	r1, #101	@ 0x65
 801131a:	f103 33ff 	add.w	r3, r3, #4294967295
 801131e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011322:	6123      	str	r3, [r4, #16]
 8011324:	d00c      	beq.n	8011340 <_scanf_float+0x358>
 8011326:	2945      	cmp	r1, #69	@ 0x45
 8011328:	d00a      	beq.n	8011340 <_scanf_float+0x358>
 801132a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801132e:	463a      	mov	r2, r7
 8011330:	4640      	mov	r0, r8
 8011332:	4798      	blx	r3
 8011334:	6923      	ldr	r3, [r4, #16]
 8011336:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801133a:	3b01      	subs	r3, #1
 801133c:	1eb5      	subs	r5, r6, #2
 801133e:	6123      	str	r3, [r4, #16]
 8011340:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011344:	463a      	mov	r2, r7
 8011346:	4640      	mov	r0, r8
 8011348:	4798      	blx	r3
 801134a:	462e      	mov	r6, r5
 801134c:	6822      	ldr	r2, [r4, #0]
 801134e:	f012 0210 	ands.w	r2, r2, #16
 8011352:	d001      	beq.n	8011358 <_scanf_float+0x370>
 8011354:	2000      	movs	r0, #0
 8011356:	e68b      	b.n	8011070 <_scanf_float+0x88>
 8011358:	7032      	strb	r2, [r6, #0]
 801135a:	6823      	ldr	r3, [r4, #0]
 801135c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011364:	d11c      	bne.n	80113a0 <_scanf_float+0x3b8>
 8011366:	9b02      	ldr	r3, [sp, #8]
 8011368:	454b      	cmp	r3, r9
 801136a:	eba3 0209 	sub.w	r2, r3, r9
 801136e:	d123      	bne.n	80113b8 <_scanf_float+0x3d0>
 8011370:	9901      	ldr	r1, [sp, #4]
 8011372:	2200      	movs	r2, #0
 8011374:	4640      	mov	r0, r8
 8011376:	f002 fc2b 	bl	8013bd0 <_strtod_r>
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	6821      	ldr	r1, [r4, #0]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f011 0f02 	tst.w	r1, #2
 8011384:	ec57 6b10 	vmov	r6, r7, d0
 8011388:	f103 0204 	add.w	r2, r3, #4
 801138c:	d01f      	beq.n	80113ce <_scanf_float+0x3e6>
 801138e:	9903      	ldr	r1, [sp, #12]
 8011390:	600a      	str	r2, [r1, #0]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	e9c3 6700 	strd	r6, r7, [r3]
 8011398:	68e3      	ldr	r3, [r4, #12]
 801139a:	3301      	adds	r3, #1
 801139c:	60e3      	str	r3, [r4, #12]
 801139e:	e7d9      	b.n	8011354 <_scanf_float+0x36c>
 80113a0:	9b04      	ldr	r3, [sp, #16]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d0e4      	beq.n	8011370 <_scanf_float+0x388>
 80113a6:	9905      	ldr	r1, [sp, #20]
 80113a8:	230a      	movs	r3, #10
 80113aa:	3101      	adds	r1, #1
 80113ac:	4640      	mov	r0, r8
 80113ae:	f002 fc8f 	bl	8013cd0 <_strtol_r>
 80113b2:	9b04      	ldr	r3, [sp, #16]
 80113b4:	9e05      	ldr	r6, [sp, #20]
 80113b6:	1ac2      	subs	r2, r0, r3
 80113b8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80113bc:	429e      	cmp	r6, r3
 80113be:	bf28      	it	cs
 80113c0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80113c4:	4910      	ldr	r1, [pc, #64]	@ (8011408 <_scanf_float+0x420>)
 80113c6:	4630      	mov	r0, r6
 80113c8:	f000 f918 	bl	80115fc <siprintf>
 80113cc:	e7d0      	b.n	8011370 <_scanf_float+0x388>
 80113ce:	f011 0f04 	tst.w	r1, #4
 80113d2:	9903      	ldr	r1, [sp, #12]
 80113d4:	600a      	str	r2, [r1, #0]
 80113d6:	d1dc      	bne.n	8011392 <_scanf_float+0x3aa>
 80113d8:	681d      	ldr	r5, [r3, #0]
 80113da:	4632      	mov	r2, r6
 80113dc:	463b      	mov	r3, r7
 80113de:	4630      	mov	r0, r6
 80113e0:	4639      	mov	r1, r7
 80113e2:	f7ef fbc3 	bl	8000b6c <__aeabi_dcmpun>
 80113e6:	b128      	cbz	r0, 80113f4 <_scanf_float+0x40c>
 80113e8:	4808      	ldr	r0, [pc, #32]	@ (801140c <_scanf_float+0x424>)
 80113ea:	f000 f9eb 	bl	80117c4 <nanf>
 80113ee:	ed85 0a00 	vstr	s0, [r5]
 80113f2:	e7d1      	b.n	8011398 <_scanf_float+0x3b0>
 80113f4:	4630      	mov	r0, r6
 80113f6:	4639      	mov	r1, r7
 80113f8:	f7ef fc16 	bl	8000c28 <__aeabi_d2f>
 80113fc:	6028      	str	r0, [r5, #0]
 80113fe:	e7cb      	b.n	8011398 <_scanf_float+0x3b0>
 8011400:	f04f 0900 	mov.w	r9, #0
 8011404:	e629      	b.n	801105a <_scanf_float+0x72>
 8011406:	bf00      	nop
 8011408:	08018858 	.word	0x08018858
 801140c:	08018bed 	.word	0x08018bed

08011410 <std>:
 8011410:	2300      	movs	r3, #0
 8011412:	b510      	push	{r4, lr}
 8011414:	4604      	mov	r4, r0
 8011416:	e9c0 3300 	strd	r3, r3, [r0]
 801141a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801141e:	6083      	str	r3, [r0, #8]
 8011420:	8181      	strh	r1, [r0, #12]
 8011422:	6643      	str	r3, [r0, #100]	@ 0x64
 8011424:	81c2      	strh	r2, [r0, #14]
 8011426:	6183      	str	r3, [r0, #24]
 8011428:	4619      	mov	r1, r3
 801142a:	2208      	movs	r2, #8
 801142c:	305c      	adds	r0, #92	@ 0x5c
 801142e:	f000 f948 	bl	80116c2 <memset>
 8011432:	4b0d      	ldr	r3, [pc, #52]	@ (8011468 <std+0x58>)
 8011434:	6263      	str	r3, [r4, #36]	@ 0x24
 8011436:	4b0d      	ldr	r3, [pc, #52]	@ (801146c <std+0x5c>)
 8011438:	62a3      	str	r3, [r4, #40]	@ 0x28
 801143a:	4b0d      	ldr	r3, [pc, #52]	@ (8011470 <std+0x60>)
 801143c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801143e:	4b0d      	ldr	r3, [pc, #52]	@ (8011474 <std+0x64>)
 8011440:	6323      	str	r3, [r4, #48]	@ 0x30
 8011442:	4b0d      	ldr	r3, [pc, #52]	@ (8011478 <std+0x68>)
 8011444:	6224      	str	r4, [r4, #32]
 8011446:	429c      	cmp	r4, r3
 8011448:	d006      	beq.n	8011458 <std+0x48>
 801144a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801144e:	4294      	cmp	r4, r2
 8011450:	d002      	beq.n	8011458 <std+0x48>
 8011452:	33d0      	adds	r3, #208	@ 0xd0
 8011454:	429c      	cmp	r4, r3
 8011456:	d105      	bne.n	8011464 <std+0x54>
 8011458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801145c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011460:	f000 b9ac 	b.w	80117bc <__retarget_lock_init_recursive>
 8011464:	bd10      	pop	{r4, pc}
 8011466:	bf00      	nop
 8011468:	0801163d 	.word	0x0801163d
 801146c:	0801165f 	.word	0x0801165f
 8011470:	08011697 	.word	0x08011697
 8011474:	080116bb 	.word	0x080116bb
 8011478:	20002920 	.word	0x20002920

0801147c <stdio_exit_handler>:
 801147c:	4a02      	ldr	r2, [pc, #8]	@ (8011488 <stdio_exit_handler+0xc>)
 801147e:	4903      	ldr	r1, [pc, #12]	@ (801148c <stdio_exit_handler+0x10>)
 8011480:	4803      	ldr	r0, [pc, #12]	@ (8011490 <stdio_exit_handler+0x14>)
 8011482:	f000 b869 	b.w	8011558 <_fwalk_sglue>
 8011486:	bf00      	nop
 8011488:	2000003c 	.word	0x2000003c
 801148c:	0801408d 	.word	0x0801408d
 8011490:	2000004c 	.word	0x2000004c

08011494 <cleanup_stdio>:
 8011494:	6841      	ldr	r1, [r0, #4]
 8011496:	4b0c      	ldr	r3, [pc, #48]	@ (80114c8 <cleanup_stdio+0x34>)
 8011498:	4299      	cmp	r1, r3
 801149a:	b510      	push	{r4, lr}
 801149c:	4604      	mov	r4, r0
 801149e:	d001      	beq.n	80114a4 <cleanup_stdio+0x10>
 80114a0:	f002 fdf4 	bl	801408c <_fflush_r>
 80114a4:	68a1      	ldr	r1, [r4, #8]
 80114a6:	4b09      	ldr	r3, [pc, #36]	@ (80114cc <cleanup_stdio+0x38>)
 80114a8:	4299      	cmp	r1, r3
 80114aa:	d002      	beq.n	80114b2 <cleanup_stdio+0x1e>
 80114ac:	4620      	mov	r0, r4
 80114ae:	f002 fded 	bl	801408c <_fflush_r>
 80114b2:	68e1      	ldr	r1, [r4, #12]
 80114b4:	4b06      	ldr	r3, [pc, #24]	@ (80114d0 <cleanup_stdio+0x3c>)
 80114b6:	4299      	cmp	r1, r3
 80114b8:	d004      	beq.n	80114c4 <cleanup_stdio+0x30>
 80114ba:	4620      	mov	r0, r4
 80114bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114c0:	f002 bde4 	b.w	801408c <_fflush_r>
 80114c4:	bd10      	pop	{r4, pc}
 80114c6:	bf00      	nop
 80114c8:	20002920 	.word	0x20002920
 80114cc:	20002988 	.word	0x20002988
 80114d0:	200029f0 	.word	0x200029f0

080114d4 <global_stdio_init.part.0>:
 80114d4:	b510      	push	{r4, lr}
 80114d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011504 <global_stdio_init.part.0+0x30>)
 80114d8:	4c0b      	ldr	r4, [pc, #44]	@ (8011508 <global_stdio_init.part.0+0x34>)
 80114da:	4a0c      	ldr	r2, [pc, #48]	@ (801150c <global_stdio_init.part.0+0x38>)
 80114dc:	601a      	str	r2, [r3, #0]
 80114de:	4620      	mov	r0, r4
 80114e0:	2200      	movs	r2, #0
 80114e2:	2104      	movs	r1, #4
 80114e4:	f7ff ff94 	bl	8011410 <std>
 80114e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80114ec:	2201      	movs	r2, #1
 80114ee:	2109      	movs	r1, #9
 80114f0:	f7ff ff8e 	bl	8011410 <std>
 80114f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80114f8:	2202      	movs	r2, #2
 80114fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114fe:	2112      	movs	r1, #18
 8011500:	f7ff bf86 	b.w	8011410 <std>
 8011504:	20002a58 	.word	0x20002a58
 8011508:	20002920 	.word	0x20002920
 801150c:	0801147d 	.word	0x0801147d

08011510 <__sfp_lock_acquire>:
 8011510:	4801      	ldr	r0, [pc, #4]	@ (8011518 <__sfp_lock_acquire+0x8>)
 8011512:	f000 b954 	b.w	80117be <__retarget_lock_acquire_recursive>
 8011516:	bf00      	nop
 8011518:	20002a61 	.word	0x20002a61

0801151c <__sfp_lock_release>:
 801151c:	4801      	ldr	r0, [pc, #4]	@ (8011524 <__sfp_lock_release+0x8>)
 801151e:	f000 b94f 	b.w	80117c0 <__retarget_lock_release_recursive>
 8011522:	bf00      	nop
 8011524:	20002a61 	.word	0x20002a61

08011528 <__sinit>:
 8011528:	b510      	push	{r4, lr}
 801152a:	4604      	mov	r4, r0
 801152c:	f7ff fff0 	bl	8011510 <__sfp_lock_acquire>
 8011530:	6a23      	ldr	r3, [r4, #32]
 8011532:	b11b      	cbz	r3, 801153c <__sinit+0x14>
 8011534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011538:	f7ff bff0 	b.w	801151c <__sfp_lock_release>
 801153c:	4b04      	ldr	r3, [pc, #16]	@ (8011550 <__sinit+0x28>)
 801153e:	6223      	str	r3, [r4, #32]
 8011540:	4b04      	ldr	r3, [pc, #16]	@ (8011554 <__sinit+0x2c>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d1f5      	bne.n	8011534 <__sinit+0xc>
 8011548:	f7ff ffc4 	bl	80114d4 <global_stdio_init.part.0>
 801154c:	e7f2      	b.n	8011534 <__sinit+0xc>
 801154e:	bf00      	nop
 8011550:	08011495 	.word	0x08011495
 8011554:	20002a58 	.word	0x20002a58

08011558 <_fwalk_sglue>:
 8011558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801155c:	4607      	mov	r7, r0
 801155e:	4688      	mov	r8, r1
 8011560:	4614      	mov	r4, r2
 8011562:	2600      	movs	r6, #0
 8011564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011568:	f1b9 0901 	subs.w	r9, r9, #1
 801156c:	d505      	bpl.n	801157a <_fwalk_sglue+0x22>
 801156e:	6824      	ldr	r4, [r4, #0]
 8011570:	2c00      	cmp	r4, #0
 8011572:	d1f7      	bne.n	8011564 <_fwalk_sglue+0xc>
 8011574:	4630      	mov	r0, r6
 8011576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801157a:	89ab      	ldrh	r3, [r5, #12]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d907      	bls.n	8011590 <_fwalk_sglue+0x38>
 8011580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011584:	3301      	adds	r3, #1
 8011586:	d003      	beq.n	8011590 <_fwalk_sglue+0x38>
 8011588:	4629      	mov	r1, r5
 801158a:	4638      	mov	r0, r7
 801158c:	47c0      	blx	r8
 801158e:	4306      	orrs	r6, r0
 8011590:	3568      	adds	r5, #104	@ 0x68
 8011592:	e7e9      	b.n	8011568 <_fwalk_sglue+0x10>

08011594 <sniprintf>:
 8011594:	b40c      	push	{r2, r3}
 8011596:	b530      	push	{r4, r5, lr}
 8011598:	4b17      	ldr	r3, [pc, #92]	@ (80115f8 <sniprintf+0x64>)
 801159a:	1e0c      	subs	r4, r1, #0
 801159c:	681d      	ldr	r5, [r3, #0]
 801159e:	b09d      	sub	sp, #116	@ 0x74
 80115a0:	da08      	bge.n	80115b4 <sniprintf+0x20>
 80115a2:	238b      	movs	r3, #139	@ 0x8b
 80115a4:	602b      	str	r3, [r5, #0]
 80115a6:	f04f 30ff 	mov.w	r0, #4294967295
 80115aa:	b01d      	add	sp, #116	@ 0x74
 80115ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80115b0:	b002      	add	sp, #8
 80115b2:	4770      	bx	lr
 80115b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80115b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80115bc:	bf14      	ite	ne
 80115be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80115c2:	4623      	moveq	r3, r4
 80115c4:	9304      	str	r3, [sp, #16]
 80115c6:	9307      	str	r3, [sp, #28]
 80115c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80115cc:	9002      	str	r0, [sp, #8]
 80115ce:	9006      	str	r0, [sp, #24]
 80115d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80115d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80115d6:	ab21      	add	r3, sp, #132	@ 0x84
 80115d8:	a902      	add	r1, sp, #8
 80115da:	4628      	mov	r0, r5
 80115dc:	9301      	str	r3, [sp, #4]
 80115de:	f002 fbd5 	bl	8013d8c <_svfiprintf_r>
 80115e2:	1c43      	adds	r3, r0, #1
 80115e4:	bfbc      	itt	lt
 80115e6:	238b      	movlt	r3, #139	@ 0x8b
 80115e8:	602b      	strlt	r3, [r5, #0]
 80115ea:	2c00      	cmp	r4, #0
 80115ec:	d0dd      	beq.n	80115aa <sniprintf+0x16>
 80115ee:	9b02      	ldr	r3, [sp, #8]
 80115f0:	2200      	movs	r2, #0
 80115f2:	701a      	strb	r2, [r3, #0]
 80115f4:	e7d9      	b.n	80115aa <sniprintf+0x16>
 80115f6:	bf00      	nop
 80115f8:	20000048 	.word	0x20000048

080115fc <siprintf>:
 80115fc:	b40e      	push	{r1, r2, r3}
 80115fe:	b500      	push	{lr}
 8011600:	b09c      	sub	sp, #112	@ 0x70
 8011602:	ab1d      	add	r3, sp, #116	@ 0x74
 8011604:	9002      	str	r0, [sp, #8]
 8011606:	9006      	str	r0, [sp, #24]
 8011608:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801160c:	4809      	ldr	r0, [pc, #36]	@ (8011634 <siprintf+0x38>)
 801160e:	9107      	str	r1, [sp, #28]
 8011610:	9104      	str	r1, [sp, #16]
 8011612:	4909      	ldr	r1, [pc, #36]	@ (8011638 <siprintf+0x3c>)
 8011614:	f853 2b04 	ldr.w	r2, [r3], #4
 8011618:	9105      	str	r1, [sp, #20]
 801161a:	6800      	ldr	r0, [r0, #0]
 801161c:	9301      	str	r3, [sp, #4]
 801161e:	a902      	add	r1, sp, #8
 8011620:	f002 fbb4 	bl	8013d8c <_svfiprintf_r>
 8011624:	9b02      	ldr	r3, [sp, #8]
 8011626:	2200      	movs	r2, #0
 8011628:	701a      	strb	r2, [r3, #0]
 801162a:	b01c      	add	sp, #112	@ 0x70
 801162c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011630:	b003      	add	sp, #12
 8011632:	4770      	bx	lr
 8011634:	20000048 	.word	0x20000048
 8011638:	ffff0208 	.word	0xffff0208

0801163c <__sread>:
 801163c:	b510      	push	{r4, lr}
 801163e:	460c      	mov	r4, r1
 8011640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011644:	f000 f86c 	bl	8011720 <_read_r>
 8011648:	2800      	cmp	r0, #0
 801164a:	bfab      	itete	ge
 801164c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801164e:	89a3      	ldrhlt	r3, [r4, #12]
 8011650:	181b      	addge	r3, r3, r0
 8011652:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011656:	bfac      	ite	ge
 8011658:	6563      	strge	r3, [r4, #84]	@ 0x54
 801165a:	81a3      	strhlt	r3, [r4, #12]
 801165c:	bd10      	pop	{r4, pc}

0801165e <__swrite>:
 801165e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011662:	461f      	mov	r7, r3
 8011664:	898b      	ldrh	r3, [r1, #12]
 8011666:	05db      	lsls	r3, r3, #23
 8011668:	4605      	mov	r5, r0
 801166a:	460c      	mov	r4, r1
 801166c:	4616      	mov	r6, r2
 801166e:	d505      	bpl.n	801167c <__swrite+0x1e>
 8011670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011674:	2302      	movs	r3, #2
 8011676:	2200      	movs	r2, #0
 8011678:	f000 f840 	bl	80116fc <_lseek_r>
 801167c:	89a3      	ldrh	r3, [r4, #12]
 801167e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011682:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011686:	81a3      	strh	r3, [r4, #12]
 8011688:	4632      	mov	r2, r6
 801168a:	463b      	mov	r3, r7
 801168c:	4628      	mov	r0, r5
 801168e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011692:	f000 b857 	b.w	8011744 <_write_r>

08011696 <__sseek>:
 8011696:	b510      	push	{r4, lr}
 8011698:	460c      	mov	r4, r1
 801169a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801169e:	f000 f82d 	bl	80116fc <_lseek_r>
 80116a2:	1c43      	adds	r3, r0, #1
 80116a4:	89a3      	ldrh	r3, [r4, #12]
 80116a6:	bf15      	itete	ne
 80116a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80116aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80116ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80116b2:	81a3      	strheq	r3, [r4, #12]
 80116b4:	bf18      	it	ne
 80116b6:	81a3      	strhne	r3, [r4, #12]
 80116b8:	bd10      	pop	{r4, pc}

080116ba <__sclose>:
 80116ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116be:	f000 b80d 	b.w	80116dc <_close_r>

080116c2 <memset>:
 80116c2:	4402      	add	r2, r0
 80116c4:	4603      	mov	r3, r0
 80116c6:	4293      	cmp	r3, r2
 80116c8:	d100      	bne.n	80116cc <memset+0xa>
 80116ca:	4770      	bx	lr
 80116cc:	f803 1b01 	strb.w	r1, [r3], #1
 80116d0:	e7f9      	b.n	80116c6 <memset+0x4>
	...

080116d4 <_localeconv_r>:
 80116d4:	4800      	ldr	r0, [pc, #0]	@ (80116d8 <_localeconv_r+0x4>)
 80116d6:	4770      	bx	lr
 80116d8:	20000188 	.word	0x20000188

080116dc <_close_r>:
 80116dc:	b538      	push	{r3, r4, r5, lr}
 80116de:	4d06      	ldr	r5, [pc, #24]	@ (80116f8 <_close_r+0x1c>)
 80116e0:	2300      	movs	r3, #0
 80116e2:	4604      	mov	r4, r0
 80116e4:	4608      	mov	r0, r1
 80116e6:	602b      	str	r3, [r5, #0]
 80116e8:	f7f1 f87c 	bl	80027e4 <_close>
 80116ec:	1c43      	adds	r3, r0, #1
 80116ee:	d102      	bne.n	80116f6 <_close_r+0x1a>
 80116f0:	682b      	ldr	r3, [r5, #0]
 80116f2:	b103      	cbz	r3, 80116f6 <_close_r+0x1a>
 80116f4:	6023      	str	r3, [r4, #0]
 80116f6:	bd38      	pop	{r3, r4, r5, pc}
 80116f8:	20002a5c 	.word	0x20002a5c

080116fc <_lseek_r>:
 80116fc:	b538      	push	{r3, r4, r5, lr}
 80116fe:	4d07      	ldr	r5, [pc, #28]	@ (801171c <_lseek_r+0x20>)
 8011700:	4604      	mov	r4, r0
 8011702:	4608      	mov	r0, r1
 8011704:	4611      	mov	r1, r2
 8011706:	2200      	movs	r2, #0
 8011708:	602a      	str	r2, [r5, #0]
 801170a:	461a      	mov	r2, r3
 801170c:	f7f1 f891 	bl	8002832 <_lseek>
 8011710:	1c43      	adds	r3, r0, #1
 8011712:	d102      	bne.n	801171a <_lseek_r+0x1e>
 8011714:	682b      	ldr	r3, [r5, #0]
 8011716:	b103      	cbz	r3, 801171a <_lseek_r+0x1e>
 8011718:	6023      	str	r3, [r4, #0]
 801171a:	bd38      	pop	{r3, r4, r5, pc}
 801171c:	20002a5c 	.word	0x20002a5c

08011720 <_read_r>:
 8011720:	b538      	push	{r3, r4, r5, lr}
 8011722:	4d07      	ldr	r5, [pc, #28]	@ (8011740 <_read_r+0x20>)
 8011724:	4604      	mov	r4, r0
 8011726:	4608      	mov	r0, r1
 8011728:	4611      	mov	r1, r2
 801172a:	2200      	movs	r2, #0
 801172c:	602a      	str	r2, [r5, #0]
 801172e:	461a      	mov	r2, r3
 8011730:	f7f1 f81f 	bl	8002772 <_read>
 8011734:	1c43      	adds	r3, r0, #1
 8011736:	d102      	bne.n	801173e <_read_r+0x1e>
 8011738:	682b      	ldr	r3, [r5, #0]
 801173a:	b103      	cbz	r3, 801173e <_read_r+0x1e>
 801173c:	6023      	str	r3, [r4, #0]
 801173e:	bd38      	pop	{r3, r4, r5, pc}
 8011740:	20002a5c 	.word	0x20002a5c

08011744 <_write_r>:
 8011744:	b538      	push	{r3, r4, r5, lr}
 8011746:	4d07      	ldr	r5, [pc, #28]	@ (8011764 <_write_r+0x20>)
 8011748:	4604      	mov	r4, r0
 801174a:	4608      	mov	r0, r1
 801174c:	4611      	mov	r1, r2
 801174e:	2200      	movs	r2, #0
 8011750:	602a      	str	r2, [r5, #0]
 8011752:	461a      	mov	r2, r3
 8011754:	f7f1 f82a 	bl	80027ac <_write>
 8011758:	1c43      	adds	r3, r0, #1
 801175a:	d102      	bne.n	8011762 <_write_r+0x1e>
 801175c:	682b      	ldr	r3, [r5, #0]
 801175e:	b103      	cbz	r3, 8011762 <_write_r+0x1e>
 8011760:	6023      	str	r3, [r4, #0]
 8011762:	bd38      	pop	{r3, r4, r5, pc}
 8011764:	20002a5c 	.word	0x20002a5c

08011768 <__errno>:
 8011768:	4b01      	ldr	r3, [pc, #4]	@ (8011770 <__errno+0x8>)
 801176a:	6818      	ldr	r0, [r3, #0]
 801176c:	4770      	bx	lr
 801176e:	bf00      	nop
 8011770:	20000048 	.word	0x20000048

08011774 <__libc_init_array>:
 8011774:	b570      	push	{r4, r5, r6, lr}
 8011776:	4d0d      	ldr	r5, [pc, #52]	@ (80117ac <__libc_init_array+0x38>)
 8011778:	4c0d      	ldr	r4, [pc, #52]	@ (80117b0 <__libc_init_array+0x3c>)
 801177a:	1b64      	subs	r4, r4, r5
 801177c:	10a4      	asrs	r4, r4, #2
 801177e:	2600      	movs	r6, #0
 8011780:	42a6      	cmp	r6, r4
 8011782:	d109      	bne.n	8011798 <__libc_init_array+0x24>
 8011784:	4d0b      	ldr	r5, [pc, #44]	@ (80117b4 <__libc_init_array+0x40>)
 8011786:	4c0c      	ldr	r4, [pc, #48]	@ (80117b8 <__libc_init_array+0x44>)
 8011788:	f003 fb92 	bl	8014eb0 <_init>
 801178c:	1b64      	subs	r4, r4, r5
 801178e:	10a4      	asrs	r4, r4, #2
 8011790:	2600      	movs	r6, #0
 8011792:	42a6      	cmp	r6, r4
 8011794:	d105      	bne.n	80117a2 <__libc_init_array+0x2e>
 8011796:	bd70      	pop	{r4, r5, r6, pc}
 8011798:	f855 3b04 	ldr.w	r3, [r5], #4
 801179c:	4798      	blx	r3
 801179e:	3601      	adds	r6, #1
 80117a0:	e7ee      	b.n	8011780 <__libc_init_array+0xc>
 80117a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80117a6:	4798      	blx	r3
 80117a8:	3601      	adds	r6, #1
 80117aa:	e7f2      	b.n	8011792 <__libc_init_array+0x1e>
 80117ac:	08018c58 	.word	0x08018c58
 80117b0:	08018c58 	.word	0x08018c58
 80117b4:	08018c58 	.word	0x08018c58
 80117b8:	08018c5c 	.word	0x08018c5c

080117bc <__retarget_lock_init_recursive>:
 80117bc:	4770      	bx	lr

080117be <__retarget_lock_acquire_recursive>:
 80117be:	4770      	bx	lr

080117c0 <__retarget_lock_release_recursive>:
 80117c0:	4770      	bx	lr
	...

080117c4 <nanf>:
 80117c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80117cc <nanf+0x8>
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop
 80117cc:	7fc00000 	.word	0x7fc00000

080117d0 <quorem>:
 80117d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d4:	6903      	ldr	r3, [r0, #16]
 80117d6:	690c      	ldr	r4, [r1, #16]
 80117d8:	42a3      	cmp	r3, r4
 80117da:	4607      	mov	r7, r0
 80117dc:	db7e      	blt.n	80118dc <quorem+0x10c>
 80117de:	3c01      	subs	r4, #1
 80117e0:	f101 0814 	add.w	r8, r1, #20
 80117e4:	00a3      	lsls	r3, r4, #2
 80117e6:	f100 0514 	add.w	r5, r0, #20
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117f0:	9301      	str	r3, [sp, #4]
 80117f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80117f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80117fa:	3301      	adds	r3, #1
 80117fc:	429a      	cmp	r2, r3
 80117fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011802:	fbb2 f6f3 	udiv	r6, r2, r3
 8011806:	d32e      	bcc.n	8011866 <quorem+0x96>
 8011808:	f04f 0a00 	mov.w	sl, #0
 801180c:	46c4      	mov	ip, r8
 801180e:	46ae      	mov	lr, r5
 8011810:	46d3      	mov	fp, sl
 8011812:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011816:	b298      	uxth	r0, r3
 8011818:	fb06 a000 	mla	r0, r6, r0, sl
 801181c:	0c02      	lsrs	r2, r0, #16
 801181e:	0c1b      	lsrs	r3, r3, #16
 8011820:	fb06 2303 	mla	r3, r6, r3, r2
 8011824:	f8de 2000 	ldr.w	r2, [lr]
 8011828:	b280      	uxth	r0, r0
 801182a:	b292      	uxth	r2, r2
 801182c:	1a12      	subs	r2, r2, r0
 801182e:	445a      	add	r2, fp
 8011830:	f8de 0000 	ldr.w	r0, [lr]
 8011834:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011838:	b29b      	uxth	r3, r3
 801183a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801183e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011842:	b292      	uxth	r2, r2
 8011844:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011848:	45e1      	cmp	r9, ip
 801184a:	f84e 2b04 	str.w	r2, [lr], #4
 801184e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011852:	d2de      	bcs.n	8011812 <quorem+0x42>
 8011854:	9b00      	ldr	r3, [sp, #0]
 8011856:	58eb      	ldr	r3, [r5, r3]
 8011858:	b92b      	cbnz	r3, 8011866 <quorem+0x96>
 801185a:	9b01      	ldr	r3, [sp, #4]
 801185c:	3b04      	subs	r3, #4
 801185e:	429d      	cmp	r5, r3
 8011860:	461a      	mov	r2, r3
 8011862:	d32f      	bcc.n	80118c4 <quorem+0xf4>
 8011864:	613c      	str	r4, [r7, #16]
 8011866:	4638      	mov	r0, r7
 8011868:	f001 f9c2 	bl	8012bf0 <__mcmp>
 801186c:	2800      	cmp	r0, #0
 801186e:	db25      	blt.n	80118bc <quorem+0xec>
 8011870:	4629      	mov	r1, r5
 8011872:	2000      	movs	r0, #0
 8011874:	f858 2b04 	ldr.w	r2, [r8], #4
 8011878:	f8d1 c000 	ldr.w	ip, [r1]
 801187c:	fa1f fe82 	uxth.w	lr, r2
 8011880:	fa1f f38c 	uxth.w	r3, ip
 8011884:	eba3 030e 	sub.w	r3, r3, lr
 8011888:	4403      	add	r3, r0
 801188a:	0c12      	lsrs	r2, r2, #16
 801188c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011890:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011894:	b29b      	uxth	r3, r3
 8011896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801189a:	45c1      	cmp	r9, r8
 801189c:	f841 3b04 	str.w	r3, [r1], #4
 80118a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80118a4:	d2e6      	bcs.n	8011874 <quorem+0xa4>
 80118a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118ae:	b922      	cbnz	r2, 80118ba <quorem+0xea>
 80118b0:	3b04      	subs	r3, #4
 80118b2:	429d      	cmp	r5, r3
 80118b4:	461a      	mov	r2, r3
 80118b6:	d30b      	bcc.n	80118d0 <quorem+0x100>
 80118b8:	613c      	str	r4, [r7, #16]
 80118ba:	3601      	adds	r6, #1
 80118bc:	4630      	mov	r0, r6
 80118be:	b003      	add	sp, #12
 80118c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c4:	6812      	ldr	r2, [r2, #0]
 80118c6:	3b04      	subs	r3, #4
 80118c8:	2a00      	cmp	r2, #0
 80118ca:	d1cb      	bne.n	8011864 <quorem+0x94>
 80118cc:	3c01      	subs	r4, #1
 80118ce:	e7c6      	b.n	801185e <quorem+0x8e>
 80118d0:	6812      	ldr	r2, [r2, #0]
 80118d2:	3b04      	subs	r3, #4
 80118d4:	2a00      	cmp	r2, #0
 80118d6:	d1ef      	bne.n	80118b8 <quorem+0xe8>
 80118d8:	3c01      	subs	r4, #1
 80118da:	e7ea      	b.n	80118b2 <quorem+0xe2>
 80118dc:	2000      	movs	r0, #0
 80118de:	e7ee      	b.n	80118be <quorem+0xee>

080118e0 <_dtoa_r>:
 80118e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118e4:	69c7      	ldr	r7, [r0, #28]
 80118e6:	b099      	sub	sp, #100	@ 0x64
 80118e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80118ec:	ec55 4b10 	vmov	r4, r5, d0
 80118f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80118f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80118f4:	4683      	mov	fp, r0
 80118f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80118f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80118fa:	b97f      	cbnz	r7, 801191c <_dtoa_r+0x3c>
 80118fc:	2010      	movs	r0, #16
 80118fe:	f000 fdfd 	bl	80124fc <malloc>
 8011902:	4602      	mov	r2, r0
 8011904:	f8cb 001c 	str.w	r0, [fp, #28]
 8011908:	b920      	cbnz	r0, 8011914 <_dtoa_r+0x34>
 801190a:	4ba7      	ldr	r3, [pc, #668]	@ (8011ba8 <_dtoa_r+0x2c8>)
 801190c:	21ef      	movs	r1, #239	@ 0xef
 801190e:	48a7      	ldr	r0, [pc, #668]	@ (8011bac <_dtoa_r+0x2cc>)
 8011910:	f002 fc36 	bl	8014180 <__assert_func>
 8011914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011918:	6007      	str	r7, [r0, #0]
 801191a:	60c7      	str	r7, [r0, #12]
 801191c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011920:	6819      	ldr	r1, [r3, #0]
 8011922:	b159      	cbz	r1, 801193c <_dtoa_r+0x5c>
 8011924:	685a      	ldr	r2, [r3, #4]
 8011926:	604a      	str	r2, [r1, #4]
 8011928:	2301      	movs	r3, #1
 801192a:	4093      	lsls	r3, r2
 801192c:	608b      	str	r3, [r1, #8]
 801192e:	4658      	mov	r0, fp
 8011930:	f000 feda 	bl	80126e8 <_Bfree>
 8011934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011938:	2200      	movs	r2, #0
 801193a:	601a      	str	r2, [r3, #0]
 801193c:	1e2b      	subs	r3, r5, #0
 801193e:	bfb9      	ittee	lt
 8011940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011944:	9303      	strlt	r3, [sp, #12]
 8011946:	2300      	movge	r3, #0
 8011948:	6033      	strge	r3, [r6, #0]
 801194a:	9f03      	ldr	r7, [sp, #12]
 801194c:	4b98      	ldr	r3, [pc, #608]	@ (8011bb0 <_dtoa_r+0x2d0>)
 801194e:	bfbc      	itt	lt
 8011950:	2201      	movlt	r2, #1
 8011952:	6032      	strlt	r2, [r6, #0]
 8011954:	43bb      	bics	r3, r7
 8011956:	d112      	bne.n	801197e <_dtoa_r+0x9e>
 8011958:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801195a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801195e:	6013      	str	r3, [r2, #0]
 8011960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011964:	4323      	orrs	r3, r4
 8011966:	f000 854d 	beq.w	8012404 <_dtoa_r+0xb24>
 801196a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801196c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011bc4 <_dtoa_r+0x2e4>
 8011970:	2b00      	cmp	r3, #0
 8011972:	f000 854f 	beq.w	8012414 <_dtoa_r+0xb34>
 8011976:	f10a 0303 	add.w	r3, sl, #3
 801197a:	f000 bd49 	b.w	8012410 <_dtoa_r+0xb30>
 801197e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011982:	2200      	movs	r2, #0
 8011984:	ec51 0b17 	vmov	r0, r1, d7
 8011988:	2300      	movs	r3, #0
 801198a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801198e:	f7ef f8bb 	bl	8000b08 <__aeabi_dcmpeq>
 8011992:	4680      	mov	r8, r0
 8011994:	b158      	cbz	r0, 80119ae <_dtoa_r+0xce>
 8011996:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011998:	2301      	movs	r3, #1
 801199a:	6013      	str	r3, [r2, #0]
 801199c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801199e:	b113      	cbz	r3, 80119a6 <_dtoa_r+0xc6>
 80119a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80119a2:	4b84      	ldr	r3, [pc, #528]	@ (8011bb4 <_dtoa_r+0x2d4>)
 80119a4:	6013      	str	r3, [r2, #0]
 80119a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011bc8 <_dtoa_r+0x2e8>
 80119aa:	f000 bd33 	b.w	8012414 <_dtoa_r+0xb34>
 80119ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80119b2:	aa16      	add	r2, sp, #88	@ 0x58
 80119b4:	a917      	add	r1, sp, #92	@ 0x5c
 80119b6:	4658      	mov	r0, fp
 80119b8:	f001 fa3a 	bl	8012e30 <__d2b>
 80119bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80119c0:	4681      	mov	r9, r0
 80119c2:	2e00      	cmp	r6, #0
 80119c4:	d077      	beq.n	8011ab6 <_dtoa_r+0x1d6>
 80119c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80119c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80119cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80119d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80119d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80119dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80119e0:	4619      	mov	r1, r3
 80119e2:	2200      	movs	r2, #0
 80119e4:	4b74      	ldr	r3, [pc, #464]	@ (8011bb8 <_dtoa_r+0x2d8>)
 80119e6:	f7ee fc6f 	bl	80002c8 <__aeabi_dsub>
 80119ea:	a369      	add	r3, pc, #420	@ (adr r3, 8011b90 <_dtoa_r+0x2b0>)
 80119ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f0:	f7ee fe22 	bl	8000638 <__aeabi_dmul>
 80119f4:	a368      	add	r3, pc, #416	@ (adr r3, 8011b98 <_dtoa_r+0x2b8>)
 80119f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fa:	f7ee fc67 	bl	80002cc <__adddf3>
 80119fe:	4604      	mov	r4, r0
 8011a00:	4630      	mov	r0, r6
 8011a02:	460d      	mov	r5, r1
 8011a04:	f7ee fdae 	bl	8000564 <__aeabi_i2d>
 8011a08:	a365      	add	r3, pc, #404	@ (adr r3, 8011ba0 <_dtoa_r+0x2c0>)
 8011a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0e:	f7ee fe13 	bl	8000638 <__aeabi_dmul>
 8011a12:	4602      	mov	r2, r0
 8011a14:	460b      	mov	r3, r1
 8011a16:	4620      	mov	r0, r4
 8011a18:	4629      	mov	r1, r5
 8011a1a:	f7ee fc57 	bl	80002cc <__adddf3>
 8011a1e:	4604      	mov	r4, r0
 8011a20:	460d      	mov	r5, r1
 8011a22:	f7ef f8b9 	bl	8000b98 <__aeabi_d2iz>
 8011a26:	2200      	movs	r2, #0
 8011a28:	4607      	mov	r7, r0
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	4629      	mov	r1, r5
 8011a30:	f7ef f874 	bl	8000b1c <__aeabi_dcmplt>
 8011a34:	b140      	cbz	r0, 8011a48 <_dtoa_r+0x168>
 8011a36:	4638      	mov	r0, r7
 8011a38:	f7ee fd94 	bl	8000564 <__aeabi_i2d>
 8011a3c:	4622      	mov	r2, r4
 8011a3e:	462b      	mov	r3, r5
 8011a40:	f7ef f862 	bl	8000b08 <__aeabi_dcmpeq>
 8011a44:	b900      	cbnz	r0, 8011a48 <_dtoa_r+0x168>
 8011a46:	3f01      	subs	r7, #1
 8011a48:	2f16      	cmp	r7, #22
 8011a4a:	d851      	bhi.n	8011af0 <_dtoa_r+0x210>
 8011a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8011bbc <_dtoa_r+0x2dc>)
 8011a4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a5a:	f7ef f85f 	bl	8000b1c <__aeabi_dcmplt>
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	d048      	beq.n	8011af4 <_dtoa_r+0x214>
 8011a62:	3f01      	subs	r7, #1
 8011a64:	2300      	movs	r3, #0
 8011a66:	9312      	str	r3, [sp, #72]	@ 0x48
 8011a68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011a6a:	1b9b      	subs	r3, r3, r6
 8011a6c:	1e5a      	subs	r2, r3, #1
 8011a6e:	bf44      	itt	mi
 8011a70:	f1c3 0801 	rsbmi	r8, r3, #1
 8011a74:	2300      	movmi	r3, #0
 8011a76:	9208      	str	r2, [sp, #32]
 8011a78:	bf54      	ite	pl
 8011a7a:	f04f 0800 	movpl.w	r8, #0
 8011a7e:	9308      	strmi	r3, [sp, #32]
 8011a80:	2f00      	cmp	r7, #0
 8011a82:	db39      	blt.n	8011af8 <_dtoa_r+0x218>
 8011a84:	9b08      	ldr	r3, [sp, #32]
 8011a86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011a88:	443b      	add	r3, r7
 8011a8a:	9308      	str	r3, [sp, #32]
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a92:	2b09      	cmp	r3, #9
 8011a94:	d864      	bhi.n	8011b60 <_dtoa_r+0x280>
 8011a96:	2b05      	cmp	r3, #5
 8011a98:	bfc4      	itt	gt
 8011a9a:	3b04      	subgt	r3, #4
 8011a9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011aa0:	f1a3 0302 	sub.w	r3, r3, #2
 8011aa4:	bfcc      	ite	gt
 8011aa6:	2400      	movgt	r4, #0
 8011aa8:	2401      	movle	r4, #1
 8011aaa:	2b03      	cmp	r3, #3
 8011aac:	d863      	bhi.n	8011b76 <_dtoa_r+0x296>
 8011aae:	e8df f003 	tbb	[pc, r3]
 8011ab2:	372a      	.short	0x372a
 8011ab4:	5535      	.short	0x5535
 8011ab6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011aba:	441e      	add	r6, r3
 8011abc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011ac0:	2b20      	cmp	r3, #32
 8011ac2:	bfc1      	itttt	gt
 8011ac4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011ac8:	409f      	lslgt	r7, r3
 8011aca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011ace:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011ad2:	bfd6      	itet	le
 8011ad4:	f1c3 0320 	rsble	r3, r3, #32
 8011ad8:	ea47 0003 	orrgt.w	r0, r7, r3
 8011adc:	fa04 f003 	lslle.w	r0, r4, r3
 8011ae0:	f7ee fd30 	bl	8000544 <__aeabi_ui2d>
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011aea:	3e01      	subs	r6, #1
 8011aec:	9214      	str	r2, [sp, #80]	@ 0x50
 8011aee:	e777      	b.n	80119e0 <_dtoa_r+0x100>
 8011af0:	2301      	movs	r3, #1
 8011af2:	e7b8      	b.n	8011a66 <_dtoa_r+0x186>
 8011af4:	9012      	str	r0, [sp, #72]	@ 0x48
 8011af6:	e7b7      	b.n	8011a68 <_dtoa_r+0x188>
 8011af8:	427b      	negs	r3, r7
 8011afa:	930a      	str	r3, [sp, #40]	@ 0x28
 8011afc:	2300      	movs	r3, #0
 8011afe:	eba8 0807 	sub.w	r8, r8, r7
 8011b02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011b04:	e7c4      	b.n	8011a90 <_dtoa_r+0x1b0>
 8011b06:	2300      	movs	r3, #0
 8011b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	dc35      	bgt.n	8011b7c <_dtoa_r+0x29c>
 8011b10:	2301      	movs	r3, #1
 8011b12:	9300      	str	r3, [sp, #0]
 8011b14:	9307      	str	r3, [sp, #28]
 8011b16:	461a      	mov	r2, r3
 8011b18:	920e      	str	r2, [sp, #56]	@ 0x38
 8011b1a:	e00b      	b.n	8011b34 <_dtoa_r+0x254>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e7f3      	b.n	8011b08 <_dtoa_r+0x228>
 8011b20:	2300      	movs	r3, #0
 8011b22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b26:	18fb      	adds	r3, r7, r3
 8011b28:	9300      	str	r3, [sp, #0]
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	9307      	str	r3, [sp, #28]
 8011b30:	bfb8      	it	lt
 8011b32:	2301      	movlt	r3, #1
 8011b34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011b38:	2100      	movs	r1, #0
 8011b3a:	2204      	movs	r2, #4
 8011b3c:	f102 0514 	add.w	r5, r2, #20
 8011b40:	429d      	cmp	r5, r3
 8011b42:	d91f      	bls.n	8011b84 <_dtoa_r+0x2a4>
 8011b44:	6041      	str	r1, [r0, #4]
 8011b46:	4658      	mov	r0, fp
 8011b48:	f000 fd8e 	bl	8012668 <_Balloc>
 8011b4c:	4682      	mov	sl, r0
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d13c      	bne.n	8011bcc <_dtoa_r+0x2ec>
 8011b52:	4b1b      	ldr	r3, [pc, #108]	@ (8011bc0 <_dtoa_r+0x2e0>)
 8011b54:	4602      	mov	r2, r0
 8011b56:	f240 11af 	movw	r1, #431	@ 0x1af
 8011b5a:	e6d8      	b.n	801190e <_dtoa_r+0x2e>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e7e0      	b.n	8011b22 <_dtoa_r+0x242>
 8011b60:	2401      	movs	r4, #1
 8011b62:	2300      	movs	r3, #0
 8011b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011b68:	f04f 33ff 	mov.w	r3, #4294967295
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	9307      	str	r3, [sp, #28]
 8011b70:	2200      	movs	r2, #0
 8011b72:	2312      	movs	r3, #18
 8011b74:	e7d0      	b.n	8011b18 <_dtoa_r+0x238>
 8011b76:	2301      	movs	r3, #1
 8011b78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b7a:	e7f5      	b.n	8011b68 <_dtoa_r+0x288>
 8011b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	9307      	str	r3, [sp, #28]
 8011b82:	e7d7      	b.n	8011b34 <_dtoa_r+0x254>
 8011b84:	3101      	adds	r1, #1
 8011b86:	0052      	lsls	r2, r2, #1
 8011b88:	e7d8      	b.n	8011b3c <_dtoa_r+0x25c>
 8011b8a:	bf00      	nop
 8011b8c:	f3af 8000 	nop.w
 8011b90:	636f4361 	.word	0x636f4361
 8011b94:	3fd287a7 	.word	0x3fd287a7
 8011b98:	8b60c8b3 	.word	0x8b60c8b3
 8011b9c:	3fc68a28 	.word	0x3fc68a28
 8011ba0:	509f79fb 	.word	0x509f79fb
 8011ba4:	3fd34413 	.word	0x3fd34413
 8011ba8:	0801886a 	.word	0x0801886a
 8011bac:	08018881 	.word	0x08018881
 8011bb0:	7ff00000 	.word	0x7ff00000
 8011bb4:	08018835 	.word	0x08018835
 8011bb8:	3ff80000 	.word	0x3ff80000
 8011bbc:	08018978 	.word	0x08018978
 8011bc0:	080188d9 	.word	0x080188d9
 8011bc4:	08018866 	.word	0x08018866
 8011bc8:	08018834 	.word	0x08018834
 8011bcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011bd0:	6018      	str	r0, [r3, #0]
 8011bd2:	9b07      	ldr	r3, [sp, #28]
 8011bd4:	2b0e      	cmp	r3, #14
 8011bd6:	f200 80a4 	bhi.w	8011d22 <_dtoa_r+0x442>
 8011bda:	2c00      	cmp	r4, #0
 8011bdc:	f000 80a1 	beq.w	8011d22 <_dtoa_r+0x442>
 8011be0:	2f00      	cmp	r7, #0
 8011be2:	dd33      	ble.n	8011c4c <_dtoa_r+0x36c>
 8011be4:	4bad      	ldr	r3, [pc, #692]	@ (8011e9c <_dtoa_r+0x5bc>)
 8011be6:	f007 020f 	and.w	r2, r7, #15
 8011bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011bee:	ed93 7b00 	vldr	d7, [r3]
 8011bf2:	05f8      	lsls	r0, r7, #23
 8011bf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011bf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011bfc:	d516      	bpl.n	8011c2c <_dtoa_r+0x34c>
 8011bfe:	4ba8      	ldr	r3, [pc, #672]	@ (8011ea0 <_dtoa_r+0x5c0>)
 8011c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011c08:	f7ee fe40 	bl	800088c <__aeabi_ddiv>
 8011c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c10:	f004 040f 	and.w	r4, r4, #15
 8011c14:	2603      	movs	r6, #3
 8011c16:	4da2      	ldr	r5, [pc, #648]	@ (8011ea0 <_dtoa_r+0x5c0>)
 8011c18:	b954      	cbnz	r4, 8011c30 <_dtoa_r+0x350>
 8011c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c22:	f7ee fe33 	bl	800088c <__aeabi_ddiv>
 8011c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c2a:	e028      	b.n	8011c7e <_dtoa_r+0x39e>
 8011c2c:	2602      	movs	r6, #2
 8011c2e:	e7f2      	b.n	8011c16 <_dtoa_r+0x336>
 8011c30:	07e1      	lsls	r1, r4, #31
 8011c32:	d508      	bpl.n	8011c46 <_dtoa_r+0x366>
 8011c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c3c:	f7ee fcfc 	bl	8000638 <__aeabi_dmul>
 8011c40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c44:	3601      	adds	r6, #1
 8011c46:	1064      	asrs	r4, r4, #1
 8011c48:	3508      	adds	r5, #8
 8011c4a:	e7e5      	b.n	8011c18 <_dtoa_r+0x338>
 8011c4c:	f000 80d2 	beq.w	8011df4 <_dtoa_r+0x514>
 8011c50:	427c      	negs	r4, r7
 8011c52:	4b92      	ldr	r3, [pc, #584]	@ (8011e9c <_dtoa_r+0x5bc>)
 8011c54:	4d92      	ldr	r5, [pc, #584]	@ (8011ea0 <_dtoa_r+0x5c0>)
 8011c56:	f004 020f 	and.w	r2, r4, #15
 8011c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c66:	f7ee fce7 	bl	8000638 <__aeabi_dmul>
 8011c6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c6e:	1124      	asrs	r4, r4, #4
 8011c70:	2300      	movs	r3, #0
 8011c72:	2602      	movs	r6, #2
 8011c74:	2c00      	cmp	r4, #0
 8011c76:	f040 80b2 	bne.w	8011dde <_dtoa_r+0x4fe>
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d1d3      	bne.n	8011c26 <_dtoa_r+0x346>
 8011c7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f000 80b7 	beq.w	8011df8 <_dtoa_r+0x518>
 8011c8a:	4b86      	ldr	r3, [pc, #536]	@ (8011ea4 <_dtoa_r+0x5c4>)
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	4620      	mov	r0, r4
 8011c90:	4629      	mov	r1, r5
 8011c92:	f7ee ff43 	bl	8000b1c <__aeabi_dcmplt>
 8011c96:	2800      	cmp	r0, #0
 8011c98:	f000 80ae 	beq.w	8011df8 <_dtoa_r+0x518>
 8011c9c:	9b07      	ldr	r3, [sp, #28]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f000 80aa 	beq.w	8011df8 <_dtoa_r+0x518>
 8011ca4:	9b00      	ldr	r3, [sp, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	dd37      	ble.n	8011d1a <_dtoa_r+0x43a>
 8011caa:	1e7b      	subs	r3, r7, #1
 8011cac:	9304      	str	r3, [sp, #16]
 8011cae:	4620      	mov	r0, r4
 8011cb0:	4b7d      	ldr	r3, [pc, #500]	@ (8011ea8 <_dtoa_r+0x5c8>)
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	f7ee fcbf 	bl	8000638 <__aeabi_dmul>
 8011cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cbe:	9c00      	ldr	r4, [sp, #0]
 8011cc0:	3601      	adds	r6, #1
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	f7ee fc4e 	bl	8000564 <__aeabi_i2d>
 8011cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ccc:	f7ee fcb4 	bl	8000638 <__aeabi_dmul>
 8011cd0:	4b76      	ldr	r3, [pc, #472]	@ (8011eac <_dtoa_r+0x5cc>)
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	f7ee fafa 	bl	80002cc <__adddf3>
 8011cd8:	4605      	mov	r5, r0
 8011cda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011cde:	2c00      	cmp	r4, #0
 8011ce0:	f040 808d 	bne.w	8011dfe <_dtoa_r+0x51e>
 8011ce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ce8:	4b71      	ldr	r3, [pc, #452]	@ (8011eb0 <_dtoa_r+0x5d0>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	f7ee faec 	bl	80002c8 <__aeabi_dsub>
 8011cf0:	4602      	mov	r2, r0
 8011cf2:	460b      	mov	r3, r1
 8011cf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011cf8:	462a      	mov	r2, r5
 8011cfa:	4633      	mov	r3, r6
 8011cfc:	f7ee ff2c 	bl	8000b58 <__aeabi_dcmpgt>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	f040 828b 	bne.w	801221c <_dtoa_r+0x93c>
 8011d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d0a:	462a      	mov	r2, r5
 8011d0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011d10:	f7ee ff04 	bl	8000b1c <__aeabi_dcmplt>
 8011d14:	2800      	cmp	r0, #0
 8011d16:	f040 8128 	bne.w	8011f6a <_dtoa_r+0x68a>
 8011d1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011d1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011d22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	f2c0 815a 	blt.w	8011fde <_dtoa_r+0x6fe>
 8011d2a:	2f0e      	cmp	r7, #14
 8011d2c:	f300 8157 	bgt.w	8011fde <_dtoa_r+0x6fe>
 8011d30:	4b5a      	ldr	r3, [pc, #360]	@ (8011e9c <_dtoa_r+0x5bc>)
 8011d32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011d36:	ed93 7b00 	vldr	d7, [r3]
 8011d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	ed8d 7b00 	vstr	d7, [sp]
 8011d42:	da03      	bge.n	8011d4c <_dtoa_r+0x46c>
 8011d44:	9b07      	ldr	r3, [sp, #28]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f340 8101 	ble.w	8011f4e <_dtoa_r+0x66e>
 8011d4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011d50:	4656      	mov	r6, sl
 8011d52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d56:	4620      	mov	r0, r4
 8011d58:	4629      	mov	r1, r5
 8011d5a:	f7ee fd97 	bl	800088c <__aeabi_ddiv>
 8011d5e:	f7ee ff1b 	bl	8000b98 <__aeabi_d2iz>
 8011d62:	4680      	mov	r8, r0
 8011d64:	f7ee fbfe 	bl	8000564 <__aeabi_i2d>
 8011d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d6c:	f7ee fc64 	bl	8000638 <__aeabi_dmul>
 8011d70:	4602      	mov	r2, r0
 8011d72:	460b      	mov	r3, r1
 8011d74:	4620      	mov	r0, r4
 8011d76:	4629      	mov	r1, r5
 8011d78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011d7c:	f7ee faa4 	bl	80002c8 <__aeabi_dsub>
 8011d80:	f806 4b01 	strb.w	r4, [r6], #1
 8011d84:	9d07      	ldr	r5, [sp, #28]
 8011d86:	eba6 040a 	sub.w	r4, r6, sl
 8011d8a:	42a5      	cmp	r5, r4
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	460b      	mov	r3, r1
 8011d90:	f040 8117 	bne.w	8011fc2 <_dtoa_r+0x6e2>
 8011d94:	f7ee fa9a 	bl	80002cc <__adddf3>
 8011d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d9c:	4604      	mov	r4, r0
 8011d9e:	460d      	mov	r5, r1
 8011da0:	f7ee feda 	bl	8000b58 <__aeabi_dcmpgt>
 8011da4:	2800      	cmp	r0, #0
 8011da6:	f040 80f9 	bne.w	8011f9c <_dtoa_r+0x6bc>
 8011daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dae:	4620      	mov	r0, r4
 8011db0:	4629      	mov	r1, r5
 8011db2:	f7ee fea9 	bl	8000b08 <__aeabi_dcmpeq>
 8011db6:	b118      	cbz	r0, 8011dc0 <_dtoa_r+0x4e0>
 8011db8:	f018 0f01 	tst.w	r8, #1
 8011dbc:	f040 80ee 	bne.w	8011f9c <_dtoa_r+0x6bc>
 8011dc0:	4649      	mov	r1, r9
 8011dc2:	4658      	mov	r0, fp
 8011dc4:	f000 fc90 	bl	80126e8 <_Bfree>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	7033      	strb	r3, [r6, #0]
 8011dcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011dce:	3701      	adds	r7, #1
 8011dd0:	601f      	str	r7, [r3, #0]
 8011dd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f000 831d 	beq.w	8012414 <_dtoa_r+0xb34>
 8011dda:	601e      	str	r6, [r3, #0]
 8011ddc:	e31a      	b.n	8012414 <_dtoa_r+0xb34>
 8011dde:	07e2      	lsls	r2, r4, #31
 8011de0:	d505      	bpl.n	8011dee <_dtoa_r+0x50e>
 8011de2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011de6:	f7ee fc27 	bl	8000638 <__aeabi_dmul>
 8011dea:	3601      	adds	r6, #1
 8011dec:	2301      	movs	r3, #1
 8011dee:	1064      	asrs	r4, r4, #1
 8011df0:	3508      	adds	r5, #8
 8011df2:	e73f      	b.n	8011c74 <_dtoa_r+0x394>
 8011df4:	2602      	movs	r6, #2
 8011df6:	e742      	b.n	8011c7e <_dtoa_r+0x39e>
 8011df8:	9c07      	ldr	r4, [sp, #28]
 8011dfa:	9704      	str	r7, [sp, #16]
 8011dfc:	e761      	b.n	8011cc2 <_dtoa_r+0x3e2>
 8011dfe:	4b27      	ldr	r3, [pc, #156]	@ (8011e9c <_dtoa_r+0x5bc>)
 8011e00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011e02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011e0a:	4454      	add	r4, sl
 8011e0c:	2900      	cmp	r1, #0
 8011e0e:	d053      	beq.n	8011eb8 <_dtoa_r+0x5d8>
 8011e10:	4928      	ldr	r1, [pc, #160]	@ (8011eb4 <_dtoa_r+0x5d4>)
 8011e12:	2000      	movs	r0, #0
 8011e14:	f7ee fd3a 	bl	800088c <__aeabi_ddiv>
 8011e18:	4633      	mov	r3, r6
 8011e1a:	462a      	mov	r2, r5
 8011e1c:	f7ee fa54 	bl	80002c8 <__aeabi_dsub>
 8011e20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011e24:	4656      	mov	r6, sl
 8011e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e2a:	f7ee feb5 	bl	8000b98 <__aeabi_d2iz>
 8011e2e:	4605      	mov	r5, r0
 8011e30:	f7ee fb98 	bl	8000564 <__aeabi_i2d>
 8011e34:	4602      	mov	r2, r0
 8011e36:	460b      	mov	r3, r1
 8011e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e3c:	f7ee fa44 	bl	80002c8 <__aeabi_dsub>
 8011e40:	3530      	adds	r5, #48	@ 0x30
 8011e42:	4602      	mov	r2, r0
 8011e44:	460b      	mov	r3, r1
 8011e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e4a:	f806 5b01 	strb.w	r5, [r6], #1
 8011e4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011e52:	f7ee fe63 	bl	8000b1c <__aeabi_dcmplt>
 8011e56:	2800      	cmp	r0, #0
 8011e58:	d171      	bne.n	8011f3e <_dtoa_r+0x65e>
 8011e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e5e:	4911      	ldr	r1, [pc, #68]	@ (8011ea4 <_dtoa_r+0x5c4>)
 8011e60:	2000      	movs	r0, #0
 8011e62:	f7ee fa31 	bl	80002c8 <__aeabi_dsub>
 8011e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011e6a:	f7ee fe57 	bl	8000b1c <__aeabi_dcmplt>
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	f040 8095 	bne.w	8011f9e <_dtoa_r+0x6be>
 8011e74:	42a6      	cmp	r6, r4
 8011e76:	f43f af50 	beq.w	8011d1a <_dtoa_r+0x43a>
 8011e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8011ea8 <_dtoa_r+0x5c8>)
 8011e80:	2200      	movs	r2, #0
 8011e82:	f7ee fbd9 	bl	8000638 <__aeabi_dmul>
 8011e86:	4b08      	ldr	r3, [pc, #32]	@ (8011ea8 <_dtoa_r+0x5c8>)
 8011e88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e92:	f7ee fbd1 	bl	8000638 <__aeabi_dmul>
 8011e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e9a:	e7c4      	b.n	8011e26 <_dtoa_r+0x546>
 8011e9c:	08018978 	.word	0x08018978
 8011ea0:	08018950 	.word	0x08018950
 8011ea4:	3ff00000 	.word	0x3ff00000
 8011ea8:	40240000 	.word	0x40240000
 8011eac:	401c0000 	.word	0x401c0000
 8011eb0:	40140000 	.word	0x40140000
 8011eb4:	3fe00000 	.word	0x3fe00000
 8011eb8:	4631      	mov	r1, r6
 8011eba:	4628      	mov	r0, r5
 8011ebc:	f7ee fbbc 	bl	8000638 <__aeabi_dmul>
 8011ec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011ec4:	9415      	str	r4, [sp, #84]	@ 0x54
 8011ec6:	4656      	mov	r6, sl
 8011ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ecc:	f7ee fe64 	bl	8000b98 <__aeabi_d2iz>
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	f7ee fb47 	bl	8000564 <__aeabi_i2d>
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	460b      	mov	r3, r1
 8011eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ede:	f7ee f9f3 	bl	80002c8 <__aeabi_dsub>
 8011ee2:	3530      	adds	r5, #48	@ 0x30
 8011ee4:	f806 5b01 	strb.w	r5, [r6], #1
 8011ee8:	4602      	mov	r2, r0
 8011eea:	460b      	mov	r3, r1
 8011eec:	42a6      	cmp	r6, r4
 8011eee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011ef2:	f04f 0200 	mov.w	r2, #0
 8011ef6:	d124      	bne.n	8011f42 <_dtoa_r+0x662>
 8011ef8:	4bac      	ldr	r3, [pc, #688]	@ (80121ac <_dtoa_r+0x8cc>)
 8011efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011efe:	f7ee f9e5 	bl	80002cc <__adddf3>
 8011f02:	4602      	mov	r2, r0
 8011f04:	460b      	mov	r3, r1
 8011f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f0a:	f7ee fe25 	bl	8000b58 <__aeabi_dcmpgt>
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	d145      	bne.n	8011f9e <_dtoa_r+0x6be>
 8011f12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011f16:	49a5      	ldr	r1, [pc, #660]	@ (80121ac <_dtoa_r+0x8cc>)
 8011f18:	2000      	movs	r0, #0
 8011f1a:	f7ee f9d5 	bl	80002c8 <__aeabi_dsub>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	460b      	mov	r3, r1
 8011f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f26:	f7ee fdf9 	bl	8000b1c <__aeabi_dcmplt>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	f43f aef5 	beq.w	8011d1a <_dtoa_r+0x43a>
 8011f30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011f32:	1e73      	subs	r3, r6, #1
 8011f34:	9315      	str	r3, [sp, #84]	@ 0x54
 8011f36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011f3a:	2b30      	cmp	r3, #48	@ 0x30
 8011f3c:	d0f8      	beq.n	8011f30 <_dtoa_r+0x650>
 8011f3e:	9f04      	ldr	r7, [sp, #16]
 8011f40:	e73e      	b.n	8011dc0 <_dtoa_r+0x4e0>
 8011f42:	4b9b      	ldr	r3, [pc, #620]	@ (80121b0 <_dtoa_r+0x8d0>)
 8011f44:	f7ee fb78 	bl	8000638 <__aeabi_dmul>
 8011f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f4c:	e7bc      	b.n	8011ec8 <_dtoa_r+0x5e8>
 8011f4e:	d10c      	bne.n	8011f6a <_dtoa_r+0x68a>
 8011f50:	4b98      	ldr	r3, [pc, #608]	@ (80121b4 <_dtoa_r+0x8d4>)
 8011f52:	2200      	movs	r2, #0
 8011f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f58:	f7ee fb6e 	bl	8000638 <__aeabi_dmul>
 8011f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f60:	f7ee fdf0 	bl	8000b44 <__aeabi_dcmpge>
 8011f64:	2800      	cmp	r0, #0
 8011f66:	f000 8157 	beq.w	8012218 <_dtoa_r+0x938>
 8011f6a:	2400      	movs	r4, #0
 8011f6c:	4625      	mov	r5, r4
 8011f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f70:	43db      	mvns	r3, r3
 8011f72:	9304      	str	r3, [sp, #16]
 8011f74:	4656      	mov	r6, sl
 8011f76:	2700      	movs	r7, #0
 8011f78:	4621      	mov	r1, r4
 8011f7a:	4658      	mov	r0, fp
 8011f7c:	f000 fbb4 	bl	80126e8 <_Bfree>
 8011f80:	2d00      	cmp	r5, #0
 8011f82:	d0dc      	beq.n	8011f3e <_dtoa_r+0x65e>
 8011f84:	b12f      	cbz	r7, 8011f92 <_dtoa_r+0x6b2>
 8011f86:	42af      	cmp	r7, r5
 8011f88:	d003      	beq.n	8011f92 <_dtoa_r+0x6b2>
 8011f8a:	4639      	mov	r1, r7
 8011f8c:	4658      	mov	r0, fp
 8011f8e:	f000 fbab 	bl	80126e8 <_Bfree>
 8011f92:	4629      	mov	r1, r5
 8011f94:	4658      	mov	r0, fp
 8011f96:	f000 fba7 	bl	80126e8 <_Bfree>
 8011f9a:	e7d0      	b.n	8011f3e <_dtoa_r+0x65e>
 8011f9c:	9704      	str	r7, [sp, #16]
 8011f9e:	4633      	mov	r3, r6
 8011fa0:	461e      	mov	r6, r3
 8011fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011fa6:	2a39      	cmp	r2, #57	@ 0x39
 8011fa8:	d107      	bne.n	8011fba <_dtoa_r+0x6da>
 8011faa:	459a      	cmp	sl, r3
 8011fac:	d1f8      	bne.n	8011fa0 <_dtoa_r+0x6c0>
 8011fae:	9a04      	ldr	r2, [sp, #16]
 8011fb0:	3201      	adds	r2, #1
 8011fb2:	9204      	str	r2, [sp, #16]
 8011fb4:	2230      	movs	r2, #48	@ 0x30
 8011fb6:	f88a 2000 	strb.w	r2, [sl]
 8011fba:	781a      	ldrb	r2, [r3, #0]
 8011fbc:	3201      	adds	r2, #1
 8011fbe:	701a      	strb	r2, [r3, #0]
 8011fc0:	e7bd      	b.n	8011f3e <_dtoa_r+0x65e>
 8011fc2:	4b7b      	ldr	r3, [pc, #492]	@ (80121b0 <_dtoa_r+0x8d0>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	f7ee fb37 	bl	8000638 <__aeabi_dmul>
 8011fca:	2200      	movs	r2, #0
 8011fcc:	2300      	movs	r3, #0
 8011fce:	4604      	mov	r4, r0
 8011fd0:	460d      	mov	r5, r1
 8011fd2:	f7ee fd99 	bl	8000b08 <__aeabi_dcmpeq>
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	f43f aebb 	beq.w	8011d52 <_dtoa_r+0x472>
 8011fdc:	e6f0      	b.n	8011dc0 <_dtoa_r+0x4e0>
 8011fde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011fe0:	2a00      	cmp	r2, #0
 8011fe2:	f000 80db 	beq.w	801219c <_dtoa_r+0x8bc>
 8011fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fe8:	2a01      	cmp	r2, #1
 8011fea:	f300 80bf 	bgt.w	801216c <_dtoa_r+0x88c>
 8011fee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011ff0:	2a00      	cmp	r2, #0
 8011ff2:	f000 80b7 	beq.w	8012164 <_dtoa_r+0x884>
 8011ff6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011ffa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011ffc:	4646      	mov	r6, r8
 8011ffe:	9a08      	ldr	r2, [sp, #32]
 8012000:	2101      	movs	r1, #1
 8012002:	441a      	add	r2, r3
 8012004:	4658      	mov	r0, fp
 8012006:	4498      	add	r8, r3
 8012008:	9208      	str	r2, [sp, #32]
 801200a:	f000 fc6b 	bl	80128e4 <__i2b>
 801200e:	4605      	mov	r5, r0
 8012010:	b15e      	cbz	r6, 801202a <_dtoa_r+0x74a>
 8012012:	9b08      	ldr	r3, [sp, #32]
 8012014:	2b00      	cmp	r3, #0
 8012016:	dd08      	ble.n	801202a <_dtoa_r+0x74a>
 8012018:	42b3      	cmp	r3, r6
 801201a:	9a08      	ldr	r2, [sp, #32]
 801201c:	bfa8      	it	ge
 801201e:	4633      	movge	r3, r6
 8012020:	eba8 0803 	sub.w	r8, r8, r3
 8012024:	1af6      	subs	r6, r6, r3
 8012026:	1ad3      	subs	r3, r2, r3
 8012028:	9308      	str	r3, [sp, #32]
 801202a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801202c:	b1f3      	cbz	r3, 801206c <_dtoa_r+0x78c>
 801202e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012030:	2b00      	cmp	r3, #0
 8012032:	f000 80b7 	beq.w	80121a4 <_dtoa_r+0x8c4>
 8012036:	b18c      	cbz	r4, 801205c <_dtoa_r+0x77c>
 8012038:	4629      	mov	r1, r5
 801203a:	4622      	mov	r2, r4
 801203c:	4658      	mov	r0, fp
 801203e:	f000 fd11 	bl	8012a64 <__pow5mult>
 8012042:	464a      	mov	r2, r9
 8012044:	4601      	mov	r1, r0
 8012046:	4605      	mov	r5, r0
 8012048:	4658      	mov	r0, fp
 801204a:	f000 fc61 	bl	8012910 <__multiply>
 801204e:	4649      	mov	r1, r9
 8012050:	9004      	str	r0, [sp, #16]
 8012052:	4658      	mov	r0, fp
 8012054:	f000 fb48 	bl	80126e8 <_Bfree>
 8012058:	9b04      	ldr	r3, [sp, #16]
 801205a:	4699      	mov	r9, r3
 801205c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801205e:	1b1a      	subs	r2, r3, r4
 8012060:	d004      	beq.n	801206c <_dtoa_r+0x78c>
 8012062:	4649      	mov	r1, r9
 8012064:	4658      	mov	r0, fp
 8012066:	f000 fcfd 	bl	8012a64 <__pow5mult>
 801206a:	4681      	mov	r9, r0
 801206c:	2101      	movs	r1, #1
 801206e:	4658      	mov	r0, fp
 8012070:	f000 fc38 	bl	80128e4 <__i2b>
 8012074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012076:	4604      	mov	r4, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	f000 81cf 	beq.w	801241c <_dtoa_r+0xb3c>
 801207e:	461a      	mov	r2, r3
 8012080:	4601      	mov	r1, r0
 8012082:	4658      	mov	r0, fp
 8012084:	f000 fcee 	bl	8012a64 <__pow5mult>
 8012088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801208a:	2b01      	cmp	r3, #1
 801208c:	4604      	mov	r4, r0
 801208e:	f300 8095 	bgt.w	80121bc <_dtoa_r+0x8dc>
 8012092:	9b02      	ldr	r3, [sp, #8]
 8012094:	2b00      	cmp	r3, #0
 8012096:	f040 8087 	bne.w	80121a8 <_dtoa_r+0x8c8>
 801209a:	9b03      	ldr	r3, [sp, #12]
 801209c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	f040 8089 	bne.w	80121b8 <_dtoa_r+0x8d8>
 80120a6:	9b03      	ldr	r3, [sp, #12]
 80120a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80120ac:	0d1b      	lsrs	r3, r3, #20
 80120ae:	051b      	lsls	r3, r3, #20
 80120b0:	b12b      	cbz	r3, 80120be <_dtoa_r+0x7de>
 80120b2:	9b08      	ldr	r3, [sp, #32]
 80120b4:	3301      	adds	r3, #1
 80120b6:	9308      	str	r3, [sp, #32]
 80120b8:	f108 0801 	add.w	r8, r8, #1
 80120bc:	2301      	movs	r3, #1
 80120be:	930a      	str	r3, [sp, #40]	@ 0x28
 80120c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	f000 81b0 	beq.w	8012428 <_dtoa_r+0xb48>
 80120c8:	6923      	ldr	r3, [r4, #16]
 80120ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80120ce:	6918      	ldr	r0, [r3, #16]
 80120d0:	f000 fbbc 	bl	801284c <__hi0bits>
 80120d4:	f1c0 0020 	rsb	r0, r0, #32
 80120d8:	9b08      	ldr	r3, [sp, #32]
 80120da:	4418      	add	r0, r3
 80120dc:	f010 001f 	ands.w	r0, r0, #31
 80120e0:	d077      	beq.n	80121d2 <_dtoa_r+0x8f2>
 80120e2:	f1c0 0320 	rsb	r3, r0, #32
 80120e6:	2b04      	cmp	r3, #4
 80120e8:	dd6b      	ble.n	80121c2 <_dtoa_r+0x8e2>
 80120ea:	9b08      	ldr	r3, [sp, #32]
 80120ec:	f1c0 001c 	rsb	r0, r0, #28
 80120f0:	4403      	add	r3, r0
 80120f2:	4480      	add	r8, r0
 80120f4:	4406      	add	r6, r0
 80120f6:	9308      	str	r3, [sp, #32]
 80120f8:	f1b8 0f00 	cmp.w	r8, #0
 80120fc:	dd05      	ble.n	801210a <_dtoa_r+0x82a>
 80120fe:	4649      	mov	r1, r9
 8012100:	4642      	mov	r2, r8
 8012102:	4658      	mov	r0, fp
 8012104:	f000 fd08 	bl	8012b18 <__lshift>
 8012108:	4681      	mov	r9, r0
 801210a:	9b08      	ldr	r3, [sp, #32]
 801210c:	2b00      	cmp	r3, #0
 801210e:	dd05      	ble.n	801211c <_dtoa_r+0x83c>
 8012110:	4621      	mov	r1, r4
 8012112:	461a      	mov	r2, r3
 8012114:	4658      	mov	r0, fp
 8012116:	f000 fcff 	bl	8012b18 <__lshift>
 801211a:	4604      	mov	r4, r0
 801211c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801211e:	2b00      	cmp	r3, #0
 8012120:	d059      	beq.n	80121d6 <_dtoa_r+0x8f6>
 8012122:	4621      	mov	r1, r4
 8012124:	4648      	mov	r0, r9
 8012126:	f000 fd63 	bl	8012bf0 <__mcmp>
 801212a:	2800      	cmp	r0, #0
 801212c:	da53      	bge.n	80121d6 <_dtoa_r+0x8f6>
 801212e:	1e7b      	subs	r3, r7, #1
 8012130:	9304      	str	r3, [sp, #16]
 8012132:	4649      	mov	r1, r9
 8012134:	2300      	movs	r3, #0
 8012136:	220a      	movs	r2, #10
 8012138:	4658      	mov	r0, fp
 801213a:	f000 faf7 	bl	801272c <__multadd>
 801213e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012140:	4681      	mov	r9, r0
 8012142:	2b00      	cmp	r3, #0
 8012144:	f000 8172 	beq.w	801242c <_dtoa_r+0xb4c>
 8012148:	2300      	movs	r3, #0
 801214a:	4629      	mov	r1, r5
 801214c:	220a      	movs	r2, #10
 801214e:	4658      	mov	r0, fp
 8012150:	f000 faec 	bl	801272c <__multadd>
 8012154:	9b00      	ldr	r3, [sp, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	4605      	mov	r5, r0
 801215a:	dc67      	bgt.n	801222c <_dtoa_r+0x94c>
 801215c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801215e:	2b02      	cmp	r3, #2
 8012160:	dc41      	bgt.n	80121e6 <_dtoa_r+0x906>
 8012162:	e063      	b.n	801222c <_dtoa_r+0x94c>
 8012164:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012166:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801216a:	e746      	b.n	8011ffa <_dtoa_r+0x71a>
 801216c:	9b07      	ldr	r3, [sp, #28]
 801216e:	1e5c      	subs	r4, r3, #1
 8012170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012172:	42a3      	cmp	r3, r4
 8012174:	bfbf      	itttt	lt
 8012176:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012178:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801217a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801217c:	1ae3      	sublt	r3, r4, r3
 801217e:	bfb4      	ite	lt
 8012180:	18d2      	addlt	r2, r2, r3
 8012182:	1b1c      	subge	r4, r3, r4
 8012184:	9b07      	ldr	r3, [sp, #28]
 8012186:	bfbc      	itt	lt
 8012188:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801218a:	2400      	movlt	r4, #0
 801218c:	2b00      	cmp	r3, #0
 801218e:	bfb5      	itete	lt
 8012190:	eba8 0603 	sublt.w	r6, r8, r3
 8012194:	9b07      	ldrge	r3, [sp, #28]
 8012196:	2300      	movlt	r3, #0
 8012198:	4646      	movge	r6, r8
 801219a:	e730      	b.n	8011ffe <_dtoa_r+0x71e>
 801219c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801219e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80121a0:	4646      	mov	r6, r8
 80121a2:	e735      	b.n	8012010 <_dtoa_r+0x730>
 80121a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121a6:	e75c      	b.n	8012062 <_dtoa_r+0x782>
 80121a8:	2300      	movs	r3, #0
 80121aa:	e788      	b.n	80120be <_dtoa_r+0x7de>
 80121ac:	3fe00000 	.word	0x3fe00000
 80121b0:	40240000 	.word	0x40240000
 80121b4:	40140000 	.word	0x40140000
 80121b8:	9b02      	ldr	r3, [sp, #8]
 80121ba:	e780      	b.n	80120be <_dtoa_r+0x7de>
 80121bc:	2300      	movs	r3, #0
 80121be:	930a      	str	r3, [sp, #40]	@ 0x28
 80121c0:	e782      	b.n	80120c8 <_dtoa_r+0x7e8>
 80121c2:	d099      	beq.n	80120f8 <_dtoa_r+0x818>
 80121c4:	9a08      	ldr	r2, [sp, #32]
 80121c6:	331c      	adds	r3, #28
 80121c8:	441a      	add	r2, r3
 80121ca:	4498      	add	r8, r3
 80121cc:	441e      	add	r6, r3
 80121ce:	9208      	str	r2, [sp, #32]
 80121d0:	e792      	b.n	80120f8 <_dtoa_r+0x818>
 80121d2:	4603      	mov	r3, r0
 80121d4:	e7f6      	b.n	80121c4 <_dtoa_r+0x8e4>
 80121d6:	9b07      	ldr	r3, [sp, #28]
 80121d8:	9704      	str	r7, [sp, #16]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	dc20      	bgt.n	8012220 <_dtoa_r+0x940>
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	dd1e      	ble.n	8012224 <_dtoa_r+0x944>
 80121e6:	9b00      	ldr	r3, [sp, #0]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	f47f aec0 	bne.w	8011f6e <_dtoa_r+0x68e>
 80121ee:	4621      	mov	r1, r4
 80121f0:	2205      	movs	r2, #5
 80121f2:	4658      	mov	r0, fp
 80121f4:	f000 fa9a 	bl	801272c <__multadd>
 80121f8:	4601      	mov	r1, r0
 80121fa:	4604      	mov	r4, r0
 80121fc:	4648      	mov	r0, r9
 80121fe:	f000 fcf7 	bl	8012bf0 <__mcmp>
 8012202:	2800      	cmp	r0, #0
 8012204:	f77f aeb3 	ble.w	8011f6e <_dtoa_r+0x68e>
 8012208:	4656      	mov	r6, sl
 801220a:	2331      	movs	r3, #49	@ 0x31
 801220c:	f806 3b01 	strb.w	r3, [r6], #1
 8012210:	9b04      	ldr	r3, [sp, #16]
 8012212:	3301      	adds	r3, #1
 8012214:	9304      	str	r3, [sp, #16]
 8012216:	e6ae      	b.n	8011f76 <_dtoa_r+0x696>
 8012218:	9c07      	ldr	r4, [sp, #28]
 801221a:	9704      	str	r7, [sp, #16]
 801221c:	4625      	mov	r5, r4
 801221e:	e7f3      	b.n	8012208 <_dtoa_r+0x928>
 8012220:	9b07      	ldr	r3, [sp, #28]
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012226:	2b00      	cmp	r3, #0
 8012228:	f000 8104 	beq.w	8012434 <_dtoa_r+0xb54>
 801222c:	2e00      	cmp	r6, #0
 801222e:	dd05      	ble.n	801223c <_dtoa_r+0x95c>
 8012230:	4629      	mov	r1, r5
 8012232:	4632      	mov	r2, r6
 8012234:	4658      	mov	r0, fp
 8012236:	f000 fc6f 	bl	8012b18 <__lshift>
 801223a:	4605      	mov	r5, r0
 801223c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801223e:	2b00      	cmp	r3, #0
 8012240:	d05a      	beq.n	80122f8 <_dtoa_r+0xa18>
 8012242:	6869      	ldr	r1, [r5, #4]
 8012244:	4658      	mov	r0, fp
 8012246:	f000 fa0f 	bl	8012668 <_Balloc>
 801224a:	4606      	mov	r6, r0
 801224c:	b928      	cbnz	r0, 801225a <_dtoa_r+0x97a>
 801224e:	4b84      	ldr	r3, [pc, #528]	@ (8012460 <_dtoa_r+0xb80>)
 8012250:	4602      	mov	r2, r0
 8012252:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012256:	f7ff bb5a 	b.w	801190e <_dtoa_r+0x2e>
 801225a:	692a      	ldr	r2, [r5, #16]
 801225c:	3202      	adds	r2, #2
 801225e:	0092      	lsls	r2, r2, #2
 8012260:	f105 010c 	add.w	r1, r5, #12
 8012264:	300c      	adds	r0, #12
 8012266:	f001 ff75 	bl	8014154 <memcpy>
 801226a:	2201      	movs	r2, #1
 801226c:	4631      	mov	r1, r6
 801226e:	4658      	mov	r0, fp
 8012270:	f000 fc52 	bl	8012b18 <__lshift>
 8012274:	f10a 0301 	add.w	r3, sl, #1
 8012278:	9307      	str	r3, [sp, #28]
 801227a:	9b00      	ldr	r3, [sp, #0]
 801227c:	4453      	add	r3, sl
 801227e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012280:	9b02      	ldr	r3, [sp, #8]
 8012282:	f003 0301 	and.w	r3, r3, #1
 8012286:	462f      	mov	r7, r5
 8012288:	930a      	str	r3, [sp, #40]	@ 0x28
 801228a:	4605      	mov	r5, r0
 801228c:	9b07      	ldr	r3, [sp, #28]
 801228e:	4621      	mov	r1, r4
 8012290:	3b01      	subs	r3, #1
 8012292:	4648      	mov	r0, r9
 8012294:	9300      	str	r3, [sp, #0]
 8012296:	f7ff fa9b 	bl	80117d0 <quorem>
 801229a:	4639      	mov	r1, r7
 801229c:	9002      	str	r0, [sp, #8]
 801229e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80122a2:	4648      	mov	r0, r9
 80122a4:	f000 fca4 	bl	8012bf0 <__mcmp>
 80122a8:	462a      	mov	r2, r5
 80122aa:	9008      	str	r0, [sp, #32]
 80122ac:	4621      	mov	r1, r4
 80122ae:	4658      	mov	r0, fp
 80122b0:	f000 fcba 	bl	8012c28 <__mdiff>
 80122b4:	68c2      	ldr	r2, [r0, #12]
 80122b6:	4606      	mov	r6, r0
 80122b8:	bb02      	cbnz	r2, 80122fc <_dtoa_r+0xa1c>
 80122ba:	4601      	mov	r1, r0
 80122bc:	4648      	mov	r0, r9
 80122be:	f000 fc97 	bl	8012bf0 <__mcmp>
 80122c2:	4602      	mov	r2, r0
 80122c4:	4631      	mov	r1, r6
 80122c6:	4658      	mov	r0, fp
 80122c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80122ca:	f000 fa0d 	bl	80126e8 <_Bfree>
 80122ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80122d2:	9e07      	ldr	r6, [sp, #28]
 80122d4:	ea43 0102 	orr.w	r1, r3, r2
 80122d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122da:	4319      	orrs	r1, r3
 80122dc:	d110      	bne.n	8012300 <_dtoa_r+0xa20>
 80122de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80122e2:	d029      	beq.n	8012338 <_dtoa_r+0xa58>
 80122e4:	9b08      	ldr	r3, [sp, #32]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	dd02      	ble.n	80122f0 <_dtoa_r+0xa10>
 80122ea:	9b02      	ldr	r3, [sp, #8]
 80122ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80122f0:	9b00      	ldr	r3, [sp, #0]
 80122f2:	f883 8000 	strb.w	r8, [r3]
 80122f6:	e63f      	b.n	8011f78 <_dtoa_r+0x698>
 80122f8:	4628      	mov	r0, r5
 80122fa:	e7bb      	b.n	8012274 <_dtoa_r+0x994>
 80122fc:	2201      	movs	r2, #1
 80122fe:	e7e1      	b.n	80122c4 <_dtoa_r+0x9e4>
 8012300:	9b08      	ldr	r3, [sp, #32]
 8012302:	2b00      	cmp	r3, #0
 8012304:	db04      	blt.n	8012310 <_dtoa_r+0xa30>
 8012306:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012308:	430b      	orrs	r3, r1
 801230a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801230c:	430b      	orrs	r3, r1
 801230e:	d120      	bne.n	8012352 <_dtoa_r+0xa72>
 8012310:	2a00      	cmp	r2, #0
 8012312:	dded      	ble.n	80122f0 <_dtoa_r+0xa10>
 8012314:	4649      	mov	r1, r9
 8012316:	2201      	movs	r2, #1
 8012318:	4658      	mov	r0, fp
 801231a:	f000 fbfd 	bl	8012b18 <__lshift>
 801231e:	4621      	mov	r1, r4
 8012320:	4681      	mov	r9, r0
 8012322:	f000 fc65 	bl	8012bf0 <__mcmp>
 8012326:	2800      	cmp	r0, #0
 8012328:	dc03      	bgt.n	8012332 <_dtoa_r+0xa52>
 801232a:	d1e1      	bne.n	80122f0 <_dtoa_r+0xa10>
 801232c:	f018 0f01 	tst.w	r8, #1
 8012330:	d0de      	beq.n	80122f0 <_dtoa_r+0xa10>
 8012332:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012336:	d1d8      	bne.n	80122ea <_dtoa_r+0xa0a>
 8012338:	9a00      	ldr	r2, [sp, #0]
 801233a:	2339      	movs	r3, #57	@ 0x39
 801233c:	7013      	strb	r3, [r2, #0]
 801233e:	4633      	mov	r3, r6
 8012340:	461e      	mov	r6, r3
 8012342:	3b01      	subs	r3, #1
 8012344:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012348:	2a39      	cmp	r2, #57	@ 0x39
 801234a:	d052      	beq.n	80123f2 <_dtoa_r+0xb12>
 801234c:	3201      	adds	r2, #1
 801234e:	701a      	strb	r2, [r3, #0]
 8012350:	e612      	b.n	8011f78 <_dtoa_r+0x698>
 8012352:	2a00      	cmp	r2, #0
 8012354:	dd07      	ble.n	8012366 <_dtoa_r+0xa86>
 8012356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801235a:	d0ed      	beq.n	8012338 <_dtoa_r+0xa58>
 801235c:	9a00      	ldr	r2, [sp, #0]
 801235e:	f108 0301 	add.w	r3, r8, #1
 8012362:	7013      	strb	r3, [r2, #0]
 8012364:	e608      	b.n	8011f78 <_dtoa_r+0x698>
 8012366:	9b07      	ldr	r3, [sp, #28]
 8012368:	9a07      	ldr	r2, [sp, #28]
 801236a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801236e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012370:	4293      	cmp	r3, r2
 8012372:	d028      	beq.n	80123c6 <_dtoa_r+0xae6>
 8012374:	4649      	mov	r1, r9
 8012376:	2300      	movs	r3, #0
 8012378:	220a      	movs	r2, #10
 801237a:	4658      	mov	r0, fp
 801237c:	f000 f9d6 	bl	801272c <__multadd>
 8012380:	42af      	cmp	r7, r5
 8012382:	4681      	mov	r9, r0
 8012384:	f04f 0300 	mov.w	r3, #0
 8012388:	f04f 020a 	mov.w	r2, #10
 801238c:	4639      	mov	r1, r7
 801238e:	4658      	mov	r0, fp
 8012390:	d107      	bne.n	80123a2 <_dtoa_r+0xac2>
 8012392:	f000 f9cb 	bl	801272c <__multadd>
 8012396:	4607      	mov	r7, r0
 8012398:	4605      	mov	r5, r0
 801239a:	9b07      	ldr	r3, [sp, #28]
 801239c:	3301      	adds	r3, #1
 801239e:	9307      	str	r3, [sp, #28]
 80123a0:	e774      	b.n	801228c <_dtoa_r+0x9ac>
 80123a2:	f000 f9c3 	bl	801272c <__multadd>
 80123a6:	4629      	mov	r1, r5
 80123a8:	4607      	mov	r7, r0
 80123aa:	2300      	movs	r3, #0
 80123ac:	220a      	movs	r2, #10
 80123ae:	4658      	mov	r0, fp
 80123b0:	f000 f9bc 	bl	801272c <__multadd>
 80123b4:	4605      	mov	r5, r0
 80123b6:	e7f0      	b.n	801239a <_dtoa_r+0xaba>
 80123b8:	9b00      	ldr	r3, [sp, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	bfcc      	ite	gt
 80123be:	461e      	movgt	r6, r3
 80123c0:	2601      	movle	r6, #1
 80123c2:	4456      	add	r6, sl
 80123c4:	2700      	movs	r7, #0
 80123c6:	4649      	mov	r1, r9
 80123c8:	2201      	movs	r2, #1
 80123ca:	4658      	mov	r0, fp
 80123cc:	f000 fba4 	bl	8012b18 <__lshift>
 80123d0:	4621      	mov	r1, r4
 80123d2:	4681      	mov	r9, r0
 80123d4:	f000 fc0c 	bl	8012bf0 <__mcmp>
 80123d8:	2800      	cmp	r0, #0
 80123da:	dcb0      	bgt.n	801233e <_dtoa_r+0xa5e>
 80123dc:	d102      	bne.n	80123e4 <_dtoa_r+0xb04>
 80123de:	f018 0f01 	tst.w	r8, #1
 80123e2:	d1ac      	bne.n	801233e <_dtoa_r+0xa5e>
 80123e4:	4633      	mov	r3, r6
 80123e6:	461e      	mov	r6, r3
 80123e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80123ec:	2a30      	cmp	r2, #48	@ 0x30
 80123ee:	d0fa      	beq.n	80123e6 <_dtoa_r+0xb06>
 80123f0:	e5c2      	b.n	8011f78 <_dtoa_r+0x698>
 80123f2:	459a      	cmp	sl, r3
 80123f4:	d1a4      	bne.n	8012340 <_dtoa_r+0xa60>
 80123f6:	9b04      	ldr	r3, [sp, #16]
 80123f8:	3301      	adds	r3, #1
 80123fa:	9304      	str	r3, [sp, #16]
 80123fc:	2331      	movs	r3, #49	@ 0x31
 80123fe:	f88a 3000 	strb.w	r3, [sl]
 8012402:	e5b9      	b.n	8011f78 <_dtoa_r+0x698>
 8012404:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012406:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012464 <_dtoa_r+0xb84>
 801240a:	b11b      	cbz	r3, 8012414 <_dtoa_r+0xb34>
 801240c:	f10a 0308 	add.w	r3, sl, #8
 8012410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012412:	6013      	str	r3, [r2, #0]
 8012414:	4650      	mov	r0, sl
 8012416:	b019      	add	sp, #100	@ 0x64
 8012418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801241c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801241e:	2b01      	cmp	r3, #1
 8012420:	f77f ae37 	ble.w	8012092 <_dtoa_r+0x7b2>
 8012424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012426:	930a      	str	r3, [sp, #40]	@ 0x28
 8012428:	2001      	movs	r0, #1
 801242a:	e655      	b.n	80120d8 <_dtoa_r+0x7f8>
 801242c:	9b00      	ldr	r3, [sp, #0]
 801242e:	2b00      	cmp	r3, #0
 8012430:	f77f aed6 	ble.w	80121e0 <_dtoa_r+0x900>
 8012434:	4656      	mov	r6, sl
 8012436:	4621      	mov	r1, r4
 8012438:	4648      	mov	r0, r9
 801243a:	f7ff f9c9 	bl	80117d0 <quorem>
 801243e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012442:	f806 8b01 	strb.w	r8, [r6], #1
 8012446:	9b00      	ldr	r3, [sp, #0]
 8012448:	eba6 020a 	sub.w	r2, r6, sl
 801244c:	4293      	cmp	r3, r2
 801244e:	ddb3      	ble.n	80123b8 <_dtoa_r+0xad8>
 8012450:	4649      	mov	r1, r9
 8012452:	2300      	movs	r3, #0
 8012454:	220a      	movs	r2, #10
 8012456:	4658      	mov	r0, fp
 8012458:	f000 f968 	bl	801272c <__multadd>
 801245c:	4681      	mov	r9, r0
 801245e:	e7ea      	b.n	8012436 <_dtoa_r+0xb56>
 8012460:	080188d9 	.word	0x080188d9
 8012464:	0801885d 	.word	0x0801885d

08012468 <_free_r>:
 8012468:	b538      	push	{r3, r4, r5, lr}
 801246a:	4605      	mov	r5, r0
 801246c:	2900      	cmp	r1, #0
 801246e:	d041      	beq.n	80124f4 <_free_r+0x8c>
 8012470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012474:	1f0c      	subs	r4, r1, #4
 8012476:	2b00      	cmp	r3, #0
 8012478:	bfb8      	it	lt
 801247a:	18e4      	addlt	r4, r4, r3
 801247c:	f000 f8e8 	bl	8012650 <__malloc_lock>
 8012480:	4a1d      	ldr	r2, [pc, #116]	@ (80124f8 <_free_r+0x90>)
 8012482:	6813      	ldr	r3, [r2, #0]
 8012484:	b933      	cbnz	r3, 8012494 <_free_r+0x2c>
 8012486:	6063      	str	r3, [r4, #4]
 8012488:	6014      	str	r4, [r2, #0]
 801248a:	4628      	mov	r0, r5
 801248c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012490:	f000 b8e4 	b.w	801265c <__malloc_unlock>
 8012494:	42a3      	cmp	r3, r4
 8012496:	d908      	bls.n	80124aa <_free_r+0x42>
 8012498:	6820      	ldr	r0, [r4, #0]
 801249a:	1821      	adds	r1, r4, r0
 801249c:	428b      	cmp	r3, r1
 801249e:	bf01      	itttt	eq
 80124a0:	6819      	ldreq	r1, [r3, #0]
 80124a2:	685b      	ldreq	r3, [r3, #4]
 80124a4:	1809      	addeq	r1, r1, r0
 80124a6:	6021      	streq	r1, [r4, #0]
 80124a8:	e7ed      	b.n	8012486 <_free_r+0x1e>
 80124aa:	461a      	mov	r2, r3
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	b10b      	cbz	r3, 80124b4 <_free_r+0x4c>
 80124b0:	42a3      	cmp	r3, r4
 80124b2:	d9fa      	bls.n	80124aa <_free_r+0x42>
 80124b4:	6811      	ldr	r1, [r2, #0]
 80124b6:	1850      	adds	r0, r2, r1
 80124b8:	42a0      	cmp	r0, r4
 80124ba:	d10b      	bne.n	80124d4 <_free_r+0x6c>
 80124bc:	6820      	ldr	r0, [r4, #0]
 80124be:	4401      	add	r1, r0
 80124c0:	1850      	adds	r0, r2, r1
 80124c2:	4283      	cmp	r3, r0
 80124c4:	6011      	str	r1, [r2, #0]
 80124c6:	d1e0      	bne.n	801248a <_free_r+0x22>
 80124c8:	6818      	ldr	r0, [r3, #0]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	6053      	str	r3, [r2, #4]
 80124ce:	4408      	add	r0, r1
 80124d0:	6010      	str	r0, [r2, #0]
 80124d2:	e7da      	b.n	801248a <_free_r+0x22>
 80124d4:	d902      	bls.n	80124dc <_free_r+0x74>
 80124d6:	230c      	movs	r3, #12
 80124d8:	602b      	str	r3, [r5, #0]
 80124da:	e7d6      	b.n	801248a <_free_r+0x22>
 80124dc:	6820      	ldr	r0, [r4, #0]
 80124de:	1821      	adds	r1, r4, r0
 80124e0:	428b      	cmp	r3, r1
 80124e2:	bf04      	itt	eq
 80124e4:	6819      	ldreq	r1, [r3, #0]
 80124e6:	685b      	ldreq	r3, [r3, #4]
 80124e8:	6063      	str	r3, [r4, #4]
 80124ea:	bf04      	itt	eq
 80124ec:	1809      	addeq	r1, r1, r0
 80124ee:	6021      	streq	r1, [r4, #0]
 80124f0:	6054      	str	r4, [r2, #4]
 80124f2:	e7ca      	b.n	801248a <_free_r+0x22>
 80124f4:	bd38      	pop	{r3, r4, r5, pc}
 80124f6:	bf00      	nop
 80124f8:	20002a68 	.word	0x20002a68

080124fc <malloc>:
 80124fc:	4b02      	ldr	r3, [pc, #8]	@ (8012508 <malloc+0xc>)
 80124fe:	4601      	mov	r1, r0
 8012500:	6818      	ldr	r0, [r3, #0]
 8012502:	f000 b825 	b.w	8012550 <_malloc_r>
 8012506:	bf00      	nop
 8012508:	20000048 	.word	0x20000048

0801250c <sbrk_aligned>:
 801250c:	b570      	push	{r4, r5, r6, lr}
 801250e:	4e0f      	ldr	r6, [pc, #60]	@ (801254c <sbrk_aligned+0x40>)
 8012510:	460c      	mov	r4, r1
 8012512:	6831      	ldr	r1, [r6, #0]
 8012514:	4605      	mov	r5, r0
 8012516:	b911      	cbnz	r1, 801251e <sbrk_aligned+0x12>
 8012518:	f001 fe0c 	bl	8014134 <_sbrk_r>
 801251c:	6030      	str	r0, [r6, #0]
 801251e:	4621      	mov	r1, r4
 8012520:	4628      	mov	r0, r5
 8012522:	f001 fe07 	bl	8014134 <_sbrk_r>
 8012526:	1c43      	adds	r3, r0, #1
 8012528:	d103      	bne.n	8012532 <sbrk_aligned+0x26>
 801252a:	f04f 34ff 	mov.w	r4, #4294967295
 801252e:	4620      	mov	r0, r4
 8012530:	bd70      	pop	{r4, r5, r6, pc}
 8012532:	1cc4      	adds	r4, r0, #3
 8012534:	f024 0403 	bic.w	r4, r4, #3
 8012538:	42a0      	cmp	r0, r4
 801253a:	d0f8      	beq.n	801252e <sbrk_aligned+0x22>
 801253c:	1a21      	subs	r1, r4, r0
 801253e:	4628      	mov	r0, r5
 8012540:	f001 fdf8 	bl	8014134 <_sbrk_r>
 8012544:	3001      	adds	r0, #1
 8012546:	d1f2      	bne.n	801252e <sbrk_aligned+0x22>
 8012548:	e7ef      	b.n	801252a <sbrk_aligned+0x1e>
 801254a:	bf00      	nop
 801254c:	20002a64 	.word	0x20002a64

08012550 <_malloc_r>:
 8012550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012554:	1ccd      	adds	r5, r1, #3
 8012556:	f025 0503 	bic.w	r5, r5, #3
 801255a:	3508      	adds	r5, #8
 801255c:	2d0c      	cmp	r5, #12
 801255e:	bf38      	it	cc
 8012560:	250c      	movcc	r5, #12
 8012562:	2d00      	cmp	r5, #0
 8012564:	4606      	mov	r6, r0
 8012566:	db01      	blt.n	801256c <_malloc_r+0x1c>
 8012568:	42a9      	cmp	r1, r5
 801256a:	d904      	bls.n	8012576 <_malloc_r+0x26>
 801256c:	230c      	movs	r3, #12
 801256e:	6033      	str	r3, [r6, #0]
 8012570:	2000      	movs	r0, #0
 8012572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801264c <_malloc_r+0xfc>
 801257a:	f000 f869 	bl	8012650 <__malloc_lock>
 801257e:	f8d8 3000 	ldr.w	r3, [r8]
 8012582:	461c      	mov	r4, r3
 8012584:	bb44      	cbnz	r4, 80125d8 <_malloc_r+0x88>
 8012586:	4629      	mov	r1, r5
 8012588:	4630      	mov	r0, r6
 801258a:	f7ff ffbf 	bl	801250c <sbrk_aligned>
 801258e:	1c43      	adds	r3, r0, #1
 8012590:	4604      	mov	r4, r0
 8012592:	d158      	bne.n	8012646 <_malloc_r+0xf6>
 8012594:	f8d8 4000 	ldr.w	r4, [r8]
 8012598:	4627      	mov	r7, r4
 801259a:	2f00      	cmp	r7, #0
 801259c:	d143      	bne.n	8012626 <_malloc_r+0xd6>
 801259e:	2c00      	cmp	r4, #0
 80125a0:	d04b      	beq.n	801263a <_malloc_r+0xea>
 80125a2:	6823      	ldr	r3, [r4, #0]
 80125a4:	4639      	mov	r1, r7
 80125a6:	4630      	mov	r0, r6
 80125a8:	eb04 0903 	add.w	r9, r4, r3
 80125ac:	f001 fdc2 	bl	8014134 <_sbrk_r>
 80125b0:	4581      	cmp	r9, r0
 80125b2:	d142      	bne.n	801263a <_malloc_r+0xea>
 80125b4:	6821      	ldr	r1, [r4, #0]
 80125b6:	1a6d      	subs	r5, r5, r1
 80125b8:	4629      	mov	r1, r5
 80125ba:	4630      	mov	r0, r6
 80125bc:	f7ff ffa6 	bl	801250c <sbrk_aligned>
 80125c0:	3001      	adds	r0, #1
 80125c2:	d03a      	beq.n	801263a <_malloc_r+0xea>
 80125c4:	6823      	ldr	r3, [r4, #0]
 80125c6:	442b      	add	r3, r5
 80125c8:	6023      	str	r3, [r4, #0]
 80125ca:	f8d8 3000 	ldr.w	r3, [r8]
 80125ce:	685a      	ldr	r2, [r3, #4]
 80125d0:	bb62      	cbnz	r2, 801262c <_malloc_r+0xdc>
 80125d2:	f8c8 7000 	str.w	r7, [r8]
 80125d6:	e00f      	b.n	80125f8 <_malloc_r+0xa8>
 80125d8:	6822      	ldr	r2, [r4, #0]
 80125da:	1b52      	subs	r2, r2, r5
 80125dc:	d420      	bmi.n	8012620 <_malloc_r+0xd0>
 80125de:	2a0b      	cmp	r2, #11
 80125e0:	d917      	bls.n	8012612 <_malloc_r+0xc2>
 80125e2:	1961      	adds	r1, r4, r5
 80125e4:	42a3      	cmp	r3, r4
 80125e6:	6025      	str	r5, [r4, #0]
 80125e8:	bf18      	it	ne
 80125ea:	6059      	strne	r1, [r3, #4]
 80125ec:	6863      	ldr	r3, [r4, #4]
 80125ee:	bf08      	it	eq
 80125f0:	f8c8 1000 	streq.w	r1, [r8]
 80125f4:	5162      	str	r2, [r4, r5]
 80125f6:	604b      	str	r3, [r1, #4]
 80125f8:	4630      	mov	r0, r6
 80125fa:	f000 f82f 	bl	801265c <__malloc_unlock>
 80125fe:	f104 000b 	add.w	r0, r4, #11
 8012602:	1d23      	adds	r3, r4, #4
 8012604:	f020 0007 	bic.w	r0, r0, #7
 8012608:	1ac2      	subs	r2, r0, r3
 801260a:	bf1c      	itt	ne
 801260c:	1a1b      	subne	r3, r3, r0
 801260e:	50a3      	strne	r3, [r4, r2]
 8012610:	e7af      	b.n	8012572 <_malloc_r+0x22>
 8012612:	6862      	ldr	r2, [r4, #4]
 8012614:	42a3      	cmp	r3, r4
 8012616:	bf0c      	ite	eq
 8012618:	f8c8 2000 	streq.w	r2, [r8]
 801261c:	605a      	strne	r2, [r3, #4]
 801261e:	e7eb      	b.n	80125f8 <_malloc_r+0xa8>
 8012620:	4623      	mov	r3, r4
 8012622:	6864      	ldr	r4, [r4, #4]
 8012624:	e7ae      	b.n	8012584 <_malloc_r+0x34>
 8012626:	463c      	mov	r4, r7
 8012628:	687f      	ldr	r7, [r7, #4]
 801262a:	e7b6      	b.n	801259a <_malloc_r+0x4a>
 801262c:	461a      	mov	r2, r3
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	42a3      	cmp	r3, r4
 8012632:	d1fb      	bne.n	801262c <_malloc_r+0xdc>
 8012634:	2300      	movs	r3, #0
 8012636:	6053      	str	r3, [r2, #4]
 8012638:	e7de      	b.n	80125f8 <_malloc_r+0xa8>
 801263a:	230c      	movs	r3, #12
 801263c:	6033      	str	r3, [r6, #0]
 801263e:	4630      	mov	r0, r6
 8012640:	f000 f80c 	bl	801265c <__malloc_unlock>
 8012644:	e794      	b.n	8012570 <_malloc_r+0x20>
 8012646:	6005      	str	r5, [r0, #0]
 8012648:	e7d6      	b.n	80125f8 <_malloc_r+0xa8>
 801264a:	bf00      	nop
 801264c:	20002a68 	.word	0x20002a68

08012650 <__malloc_lock>:
 8012650:	4801      	ldr	r0, [pc, #4]	@ (8012658 <__malloc_lock+0x8>)
 8012652:	f7ff b8b4 	b.w	80117be <__retarget_lock_acquire_recursive>
 8012656:	bf00      	nop
 8012658:	20002a60 	.word	0x20002a60

0801265c <__malloc_unlock>:
 801265c:	4801      	ldr	r0, [pc, #4]	@ (8012664 <__malloc_unlock+0x8>)
 801265e:	f7ff b8af 	b.w	80117c0 <__retarget_lock_release_recursive>
 8012662:	bf00      	nop
 8012664:	20002a60 	.word	0x20002a60

08012668 <_Balloc>:
 8012668:	b570      	push	{r4, r5, r6, lr}
 801266a:	69c6      	ldr	r6, [r0, #28]
 801266c:	4604      	mov	r4, r0
 801266e:	460d      	mov	r5, r1
 8012670:	b976      	cbnz	r6, 8012690 <_Balloc+0x28>
 8012672:	2010      	movs	r0, #16
 8012674:	f7ff ff42 	bl	80124fc <malloc>
 8012678:	4602      	mov	r2, r0
 801267a:	61e0      	str	r0, [r4, #28]
 801267c:	b920      	cbnz	r0, 8012688 <_Balloc+0x20>
 801267e:	4b18      	ldr	r3, [pc, #96]	@ (80126e0 <_Balloc+0x78>)
 8012680:	4818      	ldr	r0, [pc, #96]	@ (80126e4 <_Balloc+0x7c>)
 8012682:	216b      	movs	r1, #107	@ 0x6b
 8012684:	f001 fd7c 	bl	8014180 <__assert_func>
 8012688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801268c:	6006      	str	r6, [r0, #0]
 801268e:	60c6      	str	r6, [r0, #12]
 8012690:	69e6      	ldr	r6, [r4, #28]
 8012692:	68f3      	ldr	r3, [r6, #12]
 8012694:	b183      	cbz	r3, 80126b8 <_Balloc+0x50>
 8012696:	69e3      	ldr	r3, [r4, #28]
 8012698:	68db      	ldr	r3, [r3, #12]
 801269a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801269e:	b9b8      	cbnz	r0, 80126d0 <_Balloc+0x68>
 80126a0:	2101      	movs	r1, #1
 80126a2:	fa01 f605 	lsl.w	r6, r1, r5
 80126a6:	1d72      	adds	r2, r6, #5
 80126a8:	0092      	lsls	r2, r2, #2
 80126aa:	4620      	mov	r0, r4
 80126ac:	f001 fd86 	bl	80141bc <_calloc_r>
 80126b0:	b160      	cbz	r0, 80126cc <_Balloc+0x64>
 80126b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80126b6:	e00e      	b.n	80126d6 <_Balloc+0x6e>
 80126b8:	2221      	movs	r2, #33	@ 0x21
 80126ba:	2104      	movs	r1, #4
 80126bc:	4620      	mov	r0, r4
 80126be:	f001 fd7d 	bl	80141bc <_calloc_r>
 80126c2:	69e3      	ldr	r3, [r4, #28]
 80126c4:	60f0      	str	r0, [r6, #12]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d1e4      	bne.n	8012696 <_Balloc+0x2e>
 80126cc:	2000      	movs	r0, #0
 80126ce:	bd70      	pop	{r4, r5, r6, pc}
 80126d0:	6802      	ldr	r2, [r0, #0]
 80126d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80126d6:	2300      	movs	r3, #0
 80126d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80126dc:	e7f7      	b.n	80126ce <_Balloc+0x66>
 80126de:	bf00      	nop
 80126e0:	0801886a 	.word	0x0801886a
 80126e4:	080188ea 	.word	0x080188ea

080126e8 <_Bfree>:
 80126e8:	b570      	push	{r4, r5, r6, lr}
 80126ea:	69c6      	ldr	r6, [r0, #28]
 80126ec:	4605      	mov	r5, r0
 80126ee:	460c      	mov	r4, r1
 80126f0:	b976      	cbnz	r6, 8012710 <_Bfree+0x28>
 80126f2:	2010      	movs	r0, #16
 80126f4:	f7ff ff02 	bl	80124fc <malloc>
 80126f8:	4602      	mov	r2, r0
 80126fa:	61e8      	str	r0, [r5, #28]
 80126fc:	b920      	cbnz	r0, 8012708 <_Bfree+0x20>
 80126fe:	4b09      	ldr	r3, [pc, #36]	@ (8012724 <_Bfree+0x3c>)
 8012700:	4809      	ldr	r0, [pc, #36]	@ (8012728 <_Bfree+0x40>)
 8012702:	218f      	movs	r1, #143	@ 0x8f
 8012704:	f001 fd3c 	bl	8014180 <__assert_func>
 8012708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801270c:	6006      	str	r6, [r0, #0]
 801270e:	60c6      	str	r6, [r0, #12]
 8012710:	b13c      	cbz	r4, 8012722 <_Bfree+0x3a>
 8012712:	69eb      	ldr	r3, [r5, #28]
 8012714:	6862      	ldr	r2, [r4, #4]
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801271c:	6021      	str	r1, [r4, #0]
 801271e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012722:	bd70      	pop	{r4, r5, r6, pc}
 8012724:	0801886a 	.word	0x0801886a
 8012728:	080188ea 	.word	0x080188ea

0801272c <__multadd>:
 801272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012730:	690d      	ldr	r5, [r1, #16]
 8012732:	4607      	mov	r7, r0
 8012734:	460c      	mov	r4, r1
 8012736:	461e      	mov	r6, r3
 8012738:	f101 0c14 	add.w	ip, r1, #20
 801273c:	2000      	movs	r0, #0
 801273e:	f8dc 3000 	ldr.w	r3, [ip]
 8012742:	b299      	uxth	r1, r3
 8012744:	fb02 6101 	mla	r1, r2, r1, r6
 8012748:	0c1e      	lsrs	r6, r3, #16
 801274a:	0c0b      	lsrs	r3, r1, #16
 801274c:	fb02 3306 	mla	r3, r2, r6, r3
 8012750:	b289      	uxth	r1, r1
 8012752:	3001      	adds	r0, #1
 8012754:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012758:	4285      	cmp	r5, r0
 801275a:	f84c 1b04 	str.w	r1, [ip], #4
 801275e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012762:	dcec      	bgt.n	801273e <__multadd+0x12>
 8012764:	b30e      	cbz	r6, 80127aa <__multadd+0x7e>
 8012766:	68a3      	ldr	r3, [r4, #8]
 8012768:	42ab      	cmp	r3, r5
 801276a:	dc19      	bgt.n	80127a0 <__multadd+0x74>
 801276c:	6861      	ldr	r1, [r4, #4]
 801276e:	4638      	mov	r0, r7
 8012770:	3101      	adds	r1, #1
 8012772:	f7ff ff79 	bl	8012668 <_Balloc>
 8012776:	4680      	mov	r8, r0
 8012778:	b928      	cbnz	r0, 8012786 <__multadd+0x5a>
 801277a:	4602      	mov	r2, r0
 801277c:	4b0c      	ldr	r3, [pc, #48]	@ (80127b0 <__multadd+0x84>)
 801277e:	480d      	ldr	r0, [pc, #52]	@ (80127b4 <__multadd+0x88>)
 8012780:	21ba      	movs	r1, #186	@ 0xba
 8012782:	f001 fcfd 	bl	8014180 <__assert_func>
 8012786:	6922      	ldr	r2, [r4, #16]
 8012788:	3202      	adds	r2, #2
 801278a:	f104 010c 	add.w	r1, r4, #12
 801278e:	0092      	lsls	r2, r2, #2
 8012790:	300c      	adds	r0, #12
 8012792:	f001 fcdf 	bl	8014154 <memcpy>
 8012796:	4621      	mov	r1, r4
 8012798:	4638      	mov	r0, r7
 801279a:	f7ff ffa5 	bl	80126e8 <_Bfree>
 801279e:	4644      	mov	r4, r8
 80127a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80127a4:	3501      	adds	r5, #1
 80127a6:	615e      	str	r6, [r3, #20]
 80127a8:	6125      	str	r5, [r4, #16]
 80127aa:	4620      	mov	r0, r4
 80127ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b0:	080188d9 	.word	0x080188d9
 80127b4:	080188ea 	.word	0x080188ea

080127b8 <__s2b>:
 80127b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127bc:	460c      	mov	r4, r1
 80127be:	4615      	mov	r5, r2
 80127c0:	461f      	mov	r7, r3
 80127c2:	2209      	movs	r2, #9
 80127c4:	3308      	adds	r3, #8
 80127c6:	4606      	mov	r6, r0
 80127c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80127cc:	2100      	movs	r1, #0
 80127ce:	2201      	movs	r2, #1
 80127d0:	429a      	cmp	r2, r3
 80127d2:	db09      	blt.n	80127e8 <__s2b+0x30>
 80127d4:	4630      	mov	r0, r6
 80127d6:	f7ff ff47 	bl	8012668 <_Balloc>
 80127da:	b940      	cbnz	r0, 80127ee <__s2b+0x36>
 80127dc:	4602      	mov	r2, r0
 80127de:	4b19      	ldr	r3, [pc, #100]	@ (8012844 <__s2b+0x8c>)
 80127e0:	4819      	ldr	r0, [pc, #100]	@ (8012848 <__s2b+0x90>)
 80127e2:	21d3      	movs	r1, #211	@ 0xd3
 80127e4:	f001 fccc 	bl	8014180 <__assert_func>
 80127e8:	0052      	lsls	r2, r2, #1
 80127ea:	3101      	adds	r1, #1
 80127ec:	e7f0      	b.n	80127d0 <__s2b+0x18>
 80127ee:	9b08      	ldr	r3, [sp, #32]
 80127f0:	6143      	str	r3, [r0, #20]
 80127f2:	2d09      	cmp	r5, #9
 80127f4:	f04f 0301 	mov.w	r3, #1
 80127f8:	6103      	str	r3, [r0, #16]
 80127fa:	dd16      	ble.n	801282a <__s2b+0x72>
 80127fc:	f104 0909 	add.w	r9, r4, #9
 8012800:	46c8      	mov	r8, r9
 8012802:	442c      	add	r4, r5
 8012804:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012808:	4601      	mov	r1, r0
 801280a:	3b30      	subs	r3, #48	@ 0x30
 801280c:	220a      	movs	r2, #10
 801280e:	4630      	mov	r0, r6
 8012810:	f7ff ff8c 	bl	801272c <__multadd>
 8012814:	45a0      	cmp	r8, r4
 8012816:	d1f5      	bne.n	8012804 <__s2b+0x4c>
 8012818:	f1a5 0408 	sub.w	r4, r5, #8
 801281c:	444c      	add	r4, r9
 801281e:	1b2d      	subs	r5, r5, r4
 8012820:	1963      	adds	r3, r4, r5
 8012822:	42bb      	cmp	r3, r7
 8012824:	db04      	blt.n	8012830 <__s2b+0x78>
 8012826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801282a:	340a      	adds	r4, #10
 801282c:	2509      	movs	r5, #9
 801282e:	e7f6      	b.n	801281e <__s2b+0x66>
 8012830:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012834:	4601      	mov	r1, r0
 8012836:	3b30      	subs	r3, #48	@ 0x30
 8012838:	220a      	movs	r2, #10
 801283a:	4630      	mov	r0, r6
 801283c:	f7ff ff76 	bl	801272c <__multadd>
 8012840:	e7ee      	b.n	8012820 <__s2b+0x68>
 8012842:	bf00      	nop
 8012844:	080188d9 	.word	0x080188d9
 8012848:	080188ea 	.word	0x080188ea

0801284c <__hi0bits>:
 801284c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012850:	4603      	mov	r3, r0
 8012852:	bf36      	itet	cc
 8012854:	0403      	lslcc	r3, r0, #16
 8012856:	2000      	movcs	r0, #0
 8012858:	2010      	movcc	r0, #16
 801285a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801285e:	bf3c      	itt	cc
 8012860:	021b      	lslcc	r3, r3, #8
 8012862:	3008      	addcc	r0, #8
 8012864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012868:	bf3c      	itt	cc
 801286a:	011b      	lslcc	r3, r3, #4
 801286c:	3004      	addcc	r0, #4
 801286e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012872:	bf3c      	itt	cc
 8012874:	009b      	lslcc	r3, r3, #2
 8012876:	3002      	addcc	r0, #2
 8012878:	2b00      	cmp	r3, #0
 801287a:	db05      	blt.n	8012888 <__hi0bits+0x3c>
 801287c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012880:	f100 0001 	add.w	r0, r0, #1
 8012884:	bf08      	it	eq
 8012886:	2020      	moveq	r0, #32
 8012888:	4770      	bx	lr

0801288a <__lo0bits>:
 801288a:	6803      	ldr	r3, [r0, #0]
 801288c:	4602      	mov	r2, r0
 801288e:	f013 0007 	ands.w	r0, r3, #7
 8012892:	d00b      	beq.n	80128ac <__lo0bits+0x22>
 8012894:	07d9      	lsls	r1, r3, #31
 8012896:	d421      	bmi.n	80128dc <__lo0bits+0x52>
 8012898:	0798      	lsls	r0, r3, #30
 801289a:	bf49      	itett	mi
 801289c:	085b      	lsrmi	r3, r3, #1
 801289e:	089b      	lsrpl	r3, r3, #2
 80128a0:	2001      	movmi	r0, #1
 80128a2:	6013      	strmi	r3, [r2, #0]
 80128a4:	bf5c      	itt	pl
 80128a6:	6013      	strpl	r3, [r2, #0]
 80128a8:	2002      	movpl	r0, #2
 80128aa:	4770      	bx	lr
 80128ac:	b299      	uxth	r1, r3
 80128ae:	b909      	cbnz	r1, 80128b4 <__lo0bits+0x2a>
 80128b0:	0c1b      	lsrs	r3, r3, #16
 80128b2:	2010      	movs	r0, #16
 80128b4:	b2d9      	uxtb	r1, r3
 80128b6:	b909      	cbnz	r1, 80128bc <__lo0bits+0x32>
 80128b8:	3008      	adds	r0, #8
 80128ba:	0a1b      	lsrs	r3, r3, #8
 80128bc:	0719      	lsls	r1, r3, #28
 80128be:	bf04      	itt	eq
 80128c0:	091b      	lsreq	r3, r3, #4
 80128c2:	3004      	addeq	r0, #4
 80128c4:	0799      	lsls	r1, r3, #30
 80128c6:	bf04      	itt	eq
 80128c8:	089b      	lsreq	r3, r3, #2
 80128ca:	3002      	addeq	r0, #2
 80128cc:	07d9      	lsls	r1, r3, #31
 80128ce:	d403      	bmi.n	80128d8 <__lo0bits+0x4e>
 80128d0:	085b      	lsrs	r3, r3, #1
 80128d2:	f100 0001 	add.w	r0, r0, #1
 80128d6:	d003      	beq.n	80128e0 <__lo0bits+0x56>
 80128d8:	6013      	str	r3, [r2, #0]
 80128da:	4770      	bx	lr
 80128dc:	2000      	movs	r0, #0
 80128de:	4770      	bx	lr
 80128e0:	2020      	movs	r0, #32
 80128e2:	4770      	bx	lr

080128e4 <__i2b>:
 80128e4:	b510      	push	{r4, lr}
 80128e6:	460c      	mov	r4, r1
 80128e8:	2101      	movs	r1, #1
 80128ea:	f7ff febd 	bl	8012668 <_Balloc>
 80128ee:	4602      	mov	r2, r0
 80128f0:	b928      	cbnz	r0, 80128fe <__i2b+0x1a>
 80128f2:	4b05      	ldr	r3, [pc, #20]	@ (8012908 <__i2b+0x24>)
 80128f4:	4805      	ldr	r0, [pc, #20]	@ (801290c <__i2b+0x28>)
 80128f6:	f240 1145 	movw	r1, #325	@ 0x145
 80128fa:	f001 fc41 	bl	8014180 <__assert_func>
 80128fe:	2301      	movs	r3, #1
 8012900:	6144      	str	r4, [r0, #20]
 8012902:	6103      	str	r3, [r0, #16]
 8012904:	bd10      	pop	{r4, pc}
 8012906:	bf00      	nop
 8012908:	080188d9 	.word	0x080188d9
 801290c:	080188ea 	.word	0x080188ea

08012910 <__multiply>:
 8012910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012914:	4614      	mov	r4, r2
 8012916:	690a      	ldr	r2, [r1, #16]
 8012918:	6923      	ldr	r3, [r4, #16]
 801291a:	429a      	cmp	r2, r3
 801291c:	bfa8      	it	ge
 801291e:	4623      	movge	r3, r4
 8012920:	460f      	mov	r7, r1
 8012922:	bfa4      	itt	ge
 8012924:	460c      	movge	r4, r1
 8012926:	461f      	movge	r7, r3
 8012928:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801292c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012930:	68a3      	ldr	r3, [r4, #8]
 8012932:	6861      	ldr	r1, [r4, #4]
 8012934:	eb0a 0609 	add.w	r6, sl, r9
 8012938:	42b3      	cmp	r3, r6
 801293a:	b085      	sub	sp, #20
 801293c:	bfb8      	it	lt
 801293e:	3101      	addlt	r1, #1
 8012940:	f7ff fe92 	bl	8012668 <_Balloc>
 8012944:	b930      	cbnz	r0, 8012954 <__multiply+0x44>
 8012946:	4602      	mov	r2, r0
 8012948:	4b44      	ldr	r3, [pc, #272]	@ (8012a5c <__multiply+0x14c>)
 801294a:	4845      	ldr	r0, [pc, #276]	@ (8012a60 <__multiply+0x150>)
 801294c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012950:	f001 fc16 	bl	8014180 <__assert_func>
 8012954:	f100 0514 	add.w	r5, r0, #20
 8012958:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801295c:	462b      	mov	r3, r5
 801295e:	2200      	movs	r2, #0
 8012960:	4543      	cmp	r3, r8
 8012962:	d321      	bcc.n	80129a8 <__multiply+0x98>
 8012964:	f107 0114 	add.w	r1, r7, #20
 8012968:	f104 0214 	add.w	r2, r4, #20
 801296c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012970:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012974:	9302      	str	r3, [sp, #8]
 8012976:	1b13      	subs	r3, r2, r4
 8012978:	3b15      	subs	r3, #21
 801297a:	f023 0303 	bic.w	r3, r3, #3
 801297e:	3304      	adds	r3, #4
 8012980:	f104 0715 	add.w	r7, r4, #21
 8012984:	42ba      	cmp	r2, r7
 8012986:	bf38      	it	cc
 8012988:	2304      	movcc	r3, #4
 801298a:	9301      	str	r3, [sp, #4]
 801298c:	9b02      	ldr	r3, [sp, #8]
 801298e:	9103      	str	r1, [sp, #12]
 8012990:	428b      	cmp	r3, r1
 8012992:	d80c      	bhi.n	80129ae <__multiply+0x9e>
 8012994:	2e00      	cmp	r6, #0
 8012996:	dd03      	ble.n	80129a0 <__multiply+0x90>
 8012998:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801299c:	2b00      	cmp	r3, #0
 801299e:	d05b      	beq.n	8012a58 <__multiply+0x148>
 80129a0:	6106      	str	r6, [r0, #16]
 80129a2:	b005      	add	sp, #20
 80129a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a8:	f843 2b04 	str.w	r2, [r3], #4
 80129ac:	e7d8      	b.n	8012960 <__multiply+0x50>
 80129ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80129b2:	f1ba 0f00 	cmp.w	sl, #0
 80129b6:	d024      	beq.n	8012a02 <__multiply+0xf2>
 80129b8:	f104 0e14 	add.w	lr, r4, #20
 80129bc:	46a9      	mov	r9, r5
 80129be:	f04f 0c00 	mov.w	ip, #0
 80129c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80129c6:	f8d9 3000 	ldr.w	r3, [r9]
 80129ca:	fa1f fb87 	uxth.w	fp, r7
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80129d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80129d8:	f8d9 7000 	ldr.w	r7, [r9]
 80129dc:	4463      	add	r3, ip
 80129de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80129e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80129e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80129f0:	4572      	cmp	r2, lr
 80129f2:	f849 3b04 	str.w	r3, [r9], #4
 80129f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80129fa:	d8e2      	bhi.n	80129c2 <__multiply+0xb2>
 80129fc:	9b01      	ldr	r3, [sp, #4]
 80129fe:	f845 c003 	str.w	ip, [r5, r3]
 8012a02:	9b03      	ldr	r3, [sp, #12]
 8012a04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012a08:	3104      	adds	r1, #4
 8012a0a:	f1b9 0f00 	cmp.w	r9, #0
 8012a0e:	d021      	beq.n	8012a54 <__multiply+0x144>
 8012a10:	682b      	ldr	r3, [r5, #0]
 8012a12:	f104 0c14 	add.w	ip, r4, #20
 8012a16:	46ae      	mov	lr, r5
 8012a18:	f04f 0a00 	mov.w	sl, #0
 8012a1c:	f8bc b000 	ldrh.w	fp, [ip]
 8012a20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012a24:	fb09 770b 	mla	r7, r9, fp, r7
 8012a28:	4457      	add	r7, sl
 8012a2a:	b29b      	uxth	r3, r3
 8012a2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012a30:	f84e 3b04 	str.w	r3, [lr], #4
 8012a34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012a38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a3c:	f8be 3000 	ldrh.w	r3, [lr]
 8012a40:	fb09 330a 	mla	r3, r9, sl, r3
 8012a44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012a48:	4562      	cmp	r2, ip
 8012a4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a4e:	d8e5      	bhi.n	8012a1c <__multiply+0x10c>
 8012a50:	9f01      	ldr	r7, [sp, #4]
 8012a52:	51eb      	str	r3, [r5, r7]
 8012a54:	3504      	adds	r5, #4
 8012a56:	e799      	b.n	801298c <__multiply+0x7c>
 8012a58:	3e01      	subs	r6, #1
 8012a5a:	e79b      	b.n	8012994 <__multiply+0x84>
 8012a5c:	080188d9 	.word	0x080188d9
 8012a60:	080188ea 	.word	0x080188ea

08012a64 <__pow5mult>:
 8012a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a68:	4615      	mov	r5, r2
 8012a6a:	f012 0203 	ands.w	r2, r2, #3
 8012a6e:	4607      	mov	r7, r0
 8012a70:	460e      	mov	r6, r1
 8012a72:	d007      	beq.n	8012a84 <__pow5mult+0x20>
 8012a74:	4c25      	ldr	r4, [pc, #148]	@ (8012b0c <__pow5mult+0xa8>)
 8012a76:	3a01      	subs	r2, #1
 8012a78:	2300      	movs	r3, #0
 8012a7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012a7e:	f7ff fe55 	bl	801272c <__multadd>
 8012a82:	4606      	mov	r6, r0
 8012a84:	10ad      	asrs	r5, r5, #2
 8012a86:	d03d      	beq.n	8012b04 <__pow5mult+0xa0>
 8012a88:	69fc      	ldr	r4, [r7, #28]
 8012a8a:	b97c      	cbnz	r4, 8012aac <__pow5mult+0x48>
 8012a8c:	2010      	movs	r0, #16
 8012a8e:	f7ff fd35 	bl	80124fc <malloc>
 8012a92:	4602      	mov	r2, r0
 8012a94:	61f8      	str	r0, [r7, #28]
 8012a96:	b928      	cbnz	r0, 8012aa4 <__pow5mult+0x40>
 8012a98:	4b1d      	ldr	r3, [pc, #116]	@ (8012b10 <__pow5mult+0xac>)
 8012a9a:	481e      	ldr	r0, [pc, #120]	@ (8012b14 <__pow5mult+0xb0>)
 8012a9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012aa0:	f001 fb6e 	bl	8014180 <__assert_func>
 8012aa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012aa8:	6004      	str	r4, [r0, #0]
 8012aaa:	60c4      	str	r4, [r0, #12]
 8012aac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012ab0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012ab4:	b94c      	cbnz	r4, 8012aca <__pow5mult+0x66>
 8012ab6:	f240 2171 	movw	r1, #625	@ 0x271
 8012aba:	4638      	mov	r0, r7
 8012abc:	f7ff ff12 	bl	80128e4 <__i2b>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ac6:	4604      	mov	r4, r0
 8012ac8:	6003      	str	r3, [r0, #0]
 8012aca:	f04f 0900 	mov.w	r9, #0
 8012ace:	07eb      	lsls	r3, r5, #31
 8012ad0:	d50a      	bpl.n	8012ae8 <__pow5mult+0x84>
 8012ad2:	4631      	mov	r1, r6
 8012ad4:	4622      	mov	r2, r4
 8012ad6:	4638      	mov	r0, r7
 8012ad8:	f7ff ff1a 	bl	8012910 <__multiply>
 8012adc:	4631      	mov	r1, r6
 8012ade:	4680      	mov	r8, r0
 8012ae0:	4638      	mov	r0, r7
 8012ae2:	f7ff fe01 	bl	80126e8 <_Bfree>
 8012ae6:	4646      	mov	r6, r8
 8012ae8:	106d      	asrs	r5, r5, #1
 8012aea:	d00b      	beq.n	8012b04 <__pow5mult+0xa0>
 8012aec:	6820      	ldr	r0, [r4, #0]
 8012aee:	b938      	cbnz	r0, 8012b00 <__pow5mult+0x9c>
 8012af0:	4622      	mov	r2, r4
 8012af2:	4621      	mov	r1, r4
 8012af4:	4638      	mov	r0, r7
 8012af6:	f7ff ff0b 	bl	8012910 <__multiply>
 8012afa:	6020      	str	r0, [r4, #0]
 8012afc:	f8c0 9000 	str.w	r9, [r0]
 8012b00:	4604      	mov	r4, r0
 8012b02:	e7e4      	b.n	8012ace <__pow5mult+0x6a>
 8012b04:	4630      	mov	r0, r6
 8012b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b0a:	bf00      	nop
 8012b0c:	08018944 	.word	0x08018944
 8012b10:	0801886a 	.word	0x0801886a
 8012b14:	080188ea 	.word	0x080188ea

08012b18 <__lshift>:
 8012b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b1c:	460c      	mov	r4, r1
 8012b1e:	6849      	ldr	r1, [r1, #4]
 8012b20:	6923      	ldr	r3, [r4, #16]
 8012b22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012b26:	68a3      	ldr	r3, [r4, #8]
 8012b28:	4607      	mov	r7, r0
 8012b2a:	4691      	mov	r9, r2
 8012b2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012b30:	f108 0601 	add.w	r6, r8, #1
 8012b34:	42b3      	cmp	r3, r6
 8012b36:	db0b      	blt.n	8012b50 <__lshift+0x38>
 8012b38:	4638      	mov	r0, r7
 8012b3a:	f7ff fd95 	bl	8012668 <_Balloc>
 8012b3e:	4605      	mov	r5, r0
 8012b40:	b948      	cbnz	r0, 8012b56 <__lshift+0x3e>
 8012b42:	4602      	mov	r2, r0
 8012b44:	4b28      	ldr	r3, [pc, #160]	@ (8012be8 <__lshift+0xd0>)
 8012b46:	4829      	ldr	r0, [pc, #164]	@ (8012bec <__lshift+0xd4>)
 8012b48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012b4c:	f001 fb18 	bl	8014180 <__assert_func>
 8012b50:	3101      	adds	r1, #1
 8012b52:	005b      	lsls	r3, r3, #1
 8012b54:	e7ee      	b.n	8012b34 <__lshift+0x1c>
 8012b56:	2300      	movs	r3, #0
 8012b58:	f100 0114 	add.w	r1, r0, #20
 8012b5c:	f100 0210 	add.w	r2, r0, #16
 8012b60:	4618      	mov	r0, r3
 8012b62:	4553      	cmp	r3, sl
 8012b64:	db33      	blt.n	8012bce <__lshift+0xb6>
 8012b66:	6920      	ldr	r0, [r4, #16]
 8012b68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b6c:	f104 0314 	add.w	r3, r4, #20
 8012b70:	f019 091f 	ands.w	r9, r9, #31
 8012b74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012b78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012b7c:	d02b      	beq.n	8012bd6 <__lshift+0xbe>
 8012b7e:	f1c9 0e20 	rsb	lr, r9, #32
 8012b82:	468a      	mov	sl, r1
 8012b84:	2200      	movs	r2, #0
 8012b86:	6818      	ldr	r0, [r3, #0]
 8012b88:	fa00 f009 	lsl.w	r0, r0, r9
 8012b8c:	4310      	orrs	r0, r2
 8012b8e:	f84a 0b04 	str.w	r0, [sl], #4
 8012b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b96:	459c      	cmp	ip, r3
 8012b98:	fa22 f20e 	lsr.w	r2, r2, lr
 8012b9c:	d8f3      	bhi.n	8012b86 <__lshift+0x6e>
 8012b9e:	ebac 0304 	sub.w	r3, ip, r4
 8012ba2:	3b15      	subs	r3, #21
 8012ba4:	f023 0303 	bic.w	r3, r3, #3
 8012ba8:	3304      	adds	r3, #4
 8012baa:	f104 0015 	add.w	r0, r4, #21
 8012bae:	4584      	cmp	ip, r0
 8012bb0:	bf38      	it	cc
 8012bb2:	2304      	movcc	r3, #4
 8012bb4:	50ca      	str	r2, [r1, r3]
 8012bb6:	b10a      	cbz	r2, 8012bbc <__lshift+0xa4>
 8012bb8:	f108 0602 	add.w	r6, r8, #2
 8012bbc:	3e01      	subs	r6, #1
 8012bbe:	4638      	mov	r0, r7
 8012bc0:	612e      	str	r6, [r5, #16]
 8012bc2:	4621      	mov	r1, r4
 8012bc4:	f7ff fd90 	bl	80126e8 <_Bfree>
 8012bc8:	4628      	mov	r0, r5
 8012bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bce:	f842 0f04 	str.w	r0, [r2, #4]!
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	e7c5      	b.n	8012b62 <__lshift+0x4a>
 8012bd6:	3904      	subs	r1, #4
 8012bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8012be0:	459c      	cmp	ip, r3
 8012be2:	d8f9      	bhi.n	8012bd8 <__lshift+0xc0>
 8012be4:	e7ea      	b.n	8012bbc <__lshift+0xa4>
 8012be6:	bf00      	nop
 8012be8:	080188d9 	.word	0x080188d9
 8012bec:	080188ea 	.word	0x080188ea

08012bf0 <__mcmp>:
 8012bf0:	690a      	ldr	r2, [r1, #16]
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	6900      	ldr	r0, [r0, #16]
 8012bf6:	1a80      	subs	r0, r0, r2
 8012bf8:	b530      	push	{r4, r5, lr}
 8012bfa:	d10e      	bne.n	8012c1a <__mcmp+0x2a>
 8012bfc:	3314      	adds	r3, #20
 8012bfe:	3114      	adds	r1, #20
 8012c00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012c04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012c10:	4295      	cmp	r5, r2
 8012c12:	d003      	beq.n	8012c1c <__mcmp+0x2c>
 8012c14:	d205      	bcs.n	8012c22 <__mcmp+0x32>
 8012c16:	f04f 30ff 	mov.w	r0, #4294967295
 8012c1a:	bd30      	pop	{r4, r5, pc}
 8012c1c:	42a3      	cmp	r3, r4
 8012c1e:	d3f3      	bcc.n	8012c08 <__mcmp+0x18>
 8012c20:	e7fb      	b.n	8012c1a <__mcmp+0x2a>
 8012c22:	2001      	movs	r0, #1
 8012c24:	e7f9      	b.n	8012c1a <__mcmp+0x2a>
	...

08012c28 <__mdiff>:
 8012c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c2c:	4689      	mov	r9, r1
 8012c2e:	4606      	mov	r6, r0
 8012c30:	4611      	mov	r1, r2
 8012c32:	4648      	mov	r0, r9
 8012c34:	4614      	mov	r4, r2
 8012c36:	f7ff ffdb 	bl	8012bf0 <__mcmp>
 8012c3a:	1e05      	subs	r5, r0, #0
 8012c3c:	d112      	bne.n	8012c64 <__mdiff+0x3c>
 8012c3e:	4629      	mov	r1, r5
 8012c40:	4630      	mov	r0, r6
 8012c42:	f7ff fd11 	bl	8012668 <_Balloc>
 8012c46:	4602      	mov	r2, r0
 8012c48:	b928      	cbnz	r0, 8012c56 <__mdiff+0x2e>
 8012c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8012d48 <__mdiff+0x120>)
 8012c4c:	f240 2137 	movw	r1, #567	@ 0x237
 8012c50:	483e      	ldr	r0, [pc, #248]	@ (8012d4c <__mdiff+0x124>)
 8012c52:	f001 fa95 	bl	8014180 <__assert_func>
 8012c56:	2301      	movs	r3, #1
 8012c58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	b003      	add	sp, #12
 8012c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c64:	bfbc      	itt	lt
 8012c66:	464b      	movlt	r3, r9
 8012c68:	46a1      	movlt	r9, r4
 8012c6a:	4630      	mov	r0, r6
 8012c6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012c70:	bfba      	itte	lt
 8012c72:	461c      	movlt	r4, r3
 8012c74:	2501      	movlt	r5, #1
 8012c76:	2500      	movge	r5, #0
 8012c78:	f7ff fcf6 	bl	8012668 <_Balloc>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	b918      	cbnz	r0, 8012c88 <__mdiff+0x60>
 8012c80:	4b31      	ldr	r3, [pc, #196]	@ (8012d48 <__mdiff+0x120>)
 8012c82:	f240 2145 	movw	r1, #581	@ 0x245
 8012c86:	e7e3      	b.n	8012c50 <__mdiff+0x28>
 8012c88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012c8c:	6926      	ldr	r6, [r4, #16]
 8012c8e:	60c5      	str	r5, [r0, #12]
 8012c90:	f109 0310 	add.w	r3, r9, #16
 8012c94:	f109 0514 	add.w	r5, r9, #20
 8012c98:	f104 0e14 	add.w	lr, r4, #20
 8012c9c:	f100 0b14 	add.w	fp, r0, #20
 8012ca0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012ca4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012ca8:	9301      	str	r3, [sp, #4]
 8012caa:	46d9      	mov	r9, fp
 8012cac:	f04f 0c00 	mov.w	ip, #0
 8012cb0:	9b01      	ldr	r3, [sp, #4]
 8012cb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012cb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	fa1f f38a 	uxth.w	r3, sl
 8012cc0:	4619      	mov	r1, r3
 8012cc2:	b283      	uxth	r3, r0
 8012cc4:	1acb      	subs	r3, r1, r3
 8012cc6:	0c00      	lsrs	r0, r0, #16
 8012cc8:	4463      	add	r3, ip
 8012cca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012cce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012cd2:	b29b      	uxth	r3, r3
 8012cd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012cd8:	4576      	cmp	r6, lr
 8012cda:	f849 3b04 	str.w	r3, [r9], #4
 8012cde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012ce2:	d8e5      	bhi.n	8012cb0 <__mdiff+0x88>
 8012ce4:	1b33      	subs	r3, r6, r4
 8012ce6:	3b15      	subs	r3, #21
 8012ce8:	f023 0303 	bic.w	r3, r3, #3
 8012cec:	3415      	adds	r4, #21
 8012cee:	3304      	adds	r3, #4
 8012cf0:	42a6      	cmp	r6, r4
 8012cf2:	bf38      	it	cc
 8012cf4:	2304      	movcc	r3, #4
 8012cf6:	441d      	add	r5, r3
 8012cf8:	445b      	add	r3, fp
 8012cfa:	461e      	mov	r6, r3
 8012cfc:	462c      	mov	r4, r5
 8012cfe:	4544      	cmp	r4, r8
 8012d00:	d30e      	bcc.n	8012d20 <__mdiff+0xf8>
 8012d02:	f108 0103 	add.w	r1, r8, #3
 8012d06:	1b49      	subs	r1, r1, r5
 8012d08:	f021 0103 	bic.w	r1, r1, #3
 8012d0c:	3d03      	subs	r5, #3
 8012d0e:	45a8      	cmp	r8, r5
 8012d10:	bf38      	it	cc
 8012d12:	2100      	movcc	r1, #0
 8012d14:	440b      	add	r3, r1
 8012d16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012d1a:	b191      	cbz	r1, 8012d42 <__mdiff+0x11a>
 8012d1c:	6117      	str	r7, [r2, #16]
 8012d1e:	e79d      	b.n	8012c5c <__mdiff+0x34>
 8012d20:	f854 1b04 	ldr.w	r1, [r4], #4
 8012d24:	46e6      	mov	lr, ip
 8012d26:	0c08      	lsrs	r0, r1, #16
 8012d28:	fa1c fc81 	uxtah	ip, ip, r1
 8012d2c:	4471      	add	r1, lr
 8012d2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012d32:	b289      	uxth	r1, r1
 8012d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012d38:	f846 1b04 	str.w	r1, [r6], #4
 8012d3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012d40:	e7dd      	b.n	8012cfe <__mdiff+0xd6>
 8012d42:	3f01      	subs	r7, #1
 8012d44:	e7e7      	b.n	8012d16 <__mdiff+0xee>
 8012d46:	bf00      	nop
 8012d48:	080188d9 	.word	0x080188d9
 8012d4c:	080188ea 	.word	0x080188ea

08012d50 <__ulp>:
 8012d50:	b082      	sub	sp, #8
 8012d52:	ed8d 0b00 	vstr	d0, [sp]
 8012d56:	9a01      	ldr	r2, [sp, #4]
 8012d58:	4b0f      	ldr	r3, [pc, #60]	@ (8012d98 <__ulp+0x48>)
 8012d5a:	4013      	ands	r3, r2
 8012d5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	dc08      	bgt.n	8012d76 <__ulp+0x26>
 8012d64:	425b      	negs	r3, r3
 8012d66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012d6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012d6e:	da04      	bge.n	8012d7a <__ulp+0x2a>
 8012d70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012d74:	4113      	asrs	r3, r2
 8012d76:	2200      	movs	r2, #0
 8012d78:	e008      	b.n	8012d8c <__ulp+0x3c>
 8012d7a:	f1a2 0314 	sub.w	r3, r2, #20
 8012d7e:	2b1e      	cmp	r3, #30
 8012d80:	bfda      	itte	le
 8012d82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012d86:	40da      	lsrle	r2, r3
 8012d88:	2201      	movgt	r2, #1
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	4610      	mov	r0, r2
 8012d90:	ec41 0b10 	vmov	d0, r0, r1
 8012d94:	b002      	add	sp, #8
 8012d96:	4770      	bx	lr
 8012d98:	7ff00000 	.word	0x7ff00000

08012d9c <__b2d>:
 8012d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012da0:	6906      	ldr	r6, [r0, #16]
 8012da2:	f100 0814 	add.w	r8, r0, #20
 8012da6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012daa:	1f37      	subs	r7, r6, #4
 8012dac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012db0:	4610      	mov	r0, r2
 8012db2:	f7ff fd4b 	bl	801284c <__hi0bits>
 8012db6:	f1c0 0320 	rsb	r3, r0, #32
 8012dba:	280a      	cmp	r0, #10
 8012dbc:	600b      	str	r3, [r1, #0]
 8012dbe:	491b      	ldr	r1, [pc, #108]	@ (8012e2c <__b2d+0x90>)
 8012dc0:	dc15      	bgt.n	8012dee <__b2d+0x52>
 8012dc2:	f1c0 0c0b 	rsb	ip, r0, #11
 8012dc6:	fa22 f30c 	lsr.w	r3, r2, ip
 8012dca:	45b8      	cmp	r8, r7
 8012dcc:	ea43 0501 	orr.w	r5, r3, r1
 8012dd0:	bf34      	ite	cc
 8012dd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012dd6:	2300      	movcs	r3, #0
 8012dd8:	3015      	adds	r0, #21
 8012dda:	fa02 f000 	lsl.w	r0, r2, r0
 8012dde:	fa23 f30c 	lsr.w	r3, r3, ip
 8012de2:	4303      	orrs	r3, r0
 8012de4:	461c      	mov	r4, r3
 8012de6:	ec45 4b10 	vmov	d0, r4, r5
 8012dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dee:	45b8      	cmp	r8, r7
 8012df0:	bf3a      	itte	cc
 8012df2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012df6:	f1a6 0708 	subcc.w	r7, r6, #8
 8012dfa:	2300      	movcs	r3, #0
 8012dfc:	380b      	subs	r0, #11
 8012dfe:	d012      	beq.n	8012e26 <__b2d+0x8a>
 8012e00:	f1c0 0120 	rsb	r1, r0, #32
 8012e04:	fa23 f401 	lsr.w	r4, r3, r1
 8012e08:	4082      	lsls	r2, r0
 8012e0a:	4322      	orrs	r2, r4
 8012e0c:	4547      	cmp	r7, r8
 8012e0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012e12:	bf8c      	ite	hi
 8012e14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012e18:	2200      	movls	r2, #0
 8012e1a:	4083      	lsls	r3, r0
 8012e1c:	40ca      	lsrs	r2, r1
 8012e1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012e22:	4313      	orrs	r3, r2
 8012e24:	e7de      	b.n	8012de4 <__b2d+0x48>
 8012e26:	ea42 0501 	orr.w	r5, r2, r1
 8012e2a:	e7db      	b.n	8012de4 <__b2d+0x48>
 8012e2c:	3ff00000 	.word	0x3ff00000

08012e30 <__d2b>:
 8012e30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e34:	460f      	mov	r7, r1
 8012e36:	2101      	movs	r1, #1
 8012e38:	ec59 8b10 	vmov	r8, r9, d0
 8012e3c:	4616      	mov	r6, r2
 8012e3e:	f7ff fc13 	bl	8012668 <_Balloc>
 8012e42:	4604      	mov	r4, r0
 8012e44:	b930      	cbnz	r0, 8012e54 <__d2b+0x24>
 8012e46:	4602      	mov	r2, r0
 8012e48:	4b23      	ldr	r3, [pc, #140]	@ (8012ed8 <__d2b+0xa8>)
 8012e4a:	4824      	ldr	r0, [pc, #144]	@ (8012edc <__d2b+0xac>)
 8012e4c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012e50:	f001 f996 	bl	8014180 <__assert_func>
 8012e54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012e58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e5c:	b10d      	cbz	r5, 8012e62 <__d2b+0x32>
 8012e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012e62:	9301      	str	r3, [sp, #4]
 8012e64:	f1b8 0300 	subs.w	r3, r8, #0
 8012e68:	d023      	beq.n	8012eb2 <__d2b+0x82>
 8012e6a:	4668      	mov	r0, sp
 8012e6c:	9300      	str	r3, [sp, #0]
 8012e6e:	f7ff fd0c 	bl	801288a <__lo0bits>
 8012e72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012e76:	b1d0      	cbz	r0, 8012eae <__d2b+0x7e>
 8012e78:	f1c0 0320 	rsb	r3, r0, #32
 8012e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8012e80:	430b      	orrs	r3, r1
 8012e82:	40c2      	lsrs	r2, r0
 8012e84:	6163      	str	r3, [r4, #20]
 8012e86:	9201      	str	r2, [sp, #4]
 8012e88:	9b01      	ldr	r3, [sp, #4]
 8012e8a:	61a3      	str	r3, [r4, #24]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	bf0c      	ite	eq
 8012e90:	2201      	moveq	r2, #1
 8012e92:	2202      	movne	r2, #2
 8012e94:	6122      	str	r2, [r4, #16]
 8012e96:	b1a5      	cbz	r5, 8012ec2 <__d2b+0x92>
 8012e98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012e9c:	4405      	add	r5, r0
 8012e9e:	603d      	str	r5, [r7, #0]
 8012ea0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012ea4:	6030      	str	r0, [r6, #0]
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	b003      	add	sp, #12
 8012eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eae:	6161      	str	r1, [r4, #20]
 8012eb0:	e7ea      	b.n	8012e88 <__d2b+0x58>
 8012eb2:	a801      	add	r0, sp, #4
 8012eb4:	f7ff fce9 	bl	801288a <__lo0bits>
 8012eb8:	9b01      	ldr	r3, [sp, #4]
 8012eba:	6163      	str	r3, [r4, #20]
 8012ebc:	3020      	adds	r0, #32
 8012ebe:	2201      	movs	r2, #1
 8012ec0:	e7e8      	b.n	8012e94 <__d2b+0x64>
 8012ec2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012ec6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012eca:	6038      	str	r0, [r7, #0]
 8012ecc:	6918      	ldr	r0, [r3, #16]
 8012ece:	f7ff fcbd 	bl	801284c <__hi0bits>
 8012ed2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012ed6:	e7e5      	b.n	8012ea4 <__d2b+0x74>
 8012ed8:	080188d9 	.word	0x080188d9
 8012edc:	080188ea 	.word	0x080188ea

08012ee0 <__ratio>:
 8012ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee4:	b085      	sub	sp, #20
 8012ee6:	e9cd 1000 	strd	r1, r0, [sp]
 8012eea:	a902      	add	r1, sp, #8
 8012eec:	f7ff ff56 	bl	8012d9c <__b2d>
 8012ef0:	9800      	ldr	r0, [sp, #0]
 8012ef2:	a903      	add	r1, sp, #12
 8012ef4:	ec55 4b10 	vmov	r4, r5, d0
 8012ef8:	f7ff ff50 	bl	8012d9c <__b2d>
 8012efc:	9b01      	ldr	r3, [sp, #4]
 8012efe:	6919      	ldr	r1, [r3, #16]
 8012f00:	9b00      	ldr	r3, [sp, #0]
 8012f02:	691b      	ldr	r3, [r3, #16]
 8012f04:	1ac9      	subs	r1, r1, r3
 8012f06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012f0a:	1a9b      	subs	r3, r3, r2
 8012f0c:	ec5b ab10 	vmov	sl, fp, d0
 8012f10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	bfce      	itee	gt
 8012f18:	462a      	movgt	r2, r5
 8012f1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012f1e:	465a      	movle	r2, fp
 8012f20:	462f      	mov	r7, r5
 8012f22:	46d9      	mov	r9, fp
 8012f24:	bfcc      	ite	gt
 8012f26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012f2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012f2e:	464b      	mov	r3, r9
 8012f30:	4652      	mov	r2, sl
 8012f32:	4620      	mov	r0, r4
 8012f34:	4639      	mov	r1, r7
 8012f36:	f7ed fca9 	bl	800088c <__aeabi_ddiv>
 8012f3a:	ec41 0b10 	vmov	d0, r0, r1
 8012f3e:	b005      	add	sp, #20
 8012f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f44 <__copybits>:
 8012f44:	3901      	subs	r1, #1
 8012f46:	b570      	push	{r4, r5, r6, lr}
 8012f48:	1149      	asrs	r1, r1, #5
 8012f4a:	6914      	ldr	r4, [r2, #16]
 8012f4c:	3101      	adds	r1, #1
 8012f4e:	f102 0314 	add.w	r3, r2, #20
 8012f52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012f56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012f5a:	1f05      	subs	r5, r0, #4
 8012f5c:	42a3      	cmp	r3, r4
 8012f5e:	d30c      	bcc.n	8012f7a <__copybits+0x36>
 8012f60:	1aa3      	subs	r3, r4, r2
 8012f62:	3b11      	subs	r3, #17
 8012f64:	f023 0303 	bic.w	r3, r3, #3
 8012f68:	3211      	adds	r2, #17
 8012f6a:	42a2      	cmp	r2, r4
 8012f6c:	bf88      	it	hi
 8012f6e:	2300      	movhi	r3, #0
 8012f70:	4418      	add	r0, r3
 8012f72:	2300      	movs	r3, #0
 8012f74:	4288      	cmp	r0, r1
 8012f76:	d305      	bcc.n	8012f84 <__copybits+0x40>
 8012f78:	bd70      	pop	{r4, r5, r6, pc}
 8012f7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8012f7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8012f82:	e7eb      	b.n	8012f5c <__copybits+0x18>
 8012f84:	f840 3b04 	str.w	r3, [r0], #4
 8012f88:	e7f4      	b.n	8012f74 <__copybits+0x30>

08012f8a <__any_on>:
 8012f8a:	f100 0214 	add.w	r2, r0, #20
 8012f8e:	6900      	ldr	r0, [r0, #16]
 8012f90:	114b      	asrs	r3, r1, #5
 8012f92:	4298      	cmp	r0, r3
 8012f94:	b510      	push	{r4, lr}
 8012f96:	db11      	blt.n	8012fbc <__any_on+0x32>
 8012f98:	dd0a      	ble.n	8012fb0 <__any_on+0x26>
 8012f9a:	f011 011f 	ands.w	r1, r1, #31
 8012f9e:	d007      	beq.n	8012fb0 <__any_on+0x26>
 8012fa0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012fa4:	fa24 f001 	lsr.w	r0, r4, r1
 8012fa8:	fa00 f101 	lsl.w	r1, r0, r1
 8012fac:	428c      	cmp	r4, r1
 8012fae:	d10b      	bne.n	8012fc8 <__any_on+0x3e>
 8012fb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d803      	bhi.n	8012fc0 <__any_on+0x36>
 8012fb8:	2000      	movs	r0, #0
 8012fba:	bd10      	pop	{r4, pc}
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	e7f7      	b.n	8012fb0 <__any_on+0x26>
 8012fc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012fc4:	2900      	cmp	r1, #0
 8012fc6:	d0f5      	beq.n	8012fb4 <__any_on+0x2a>
 8012fc8:	2001      	movs	r0, #1
 8012fca:	e7f6      	b.n	8012fba <__any_on+0x30>

08012fcc <sulp>:
 8012fcc:	b570      	push	{r4, r5, r6, lr}
 8012fce:	4604      	mov	r4, r0
 8012fd0:	460d      	mov	r5, r1
 8012fd2:	ec45 4b10 	vmov	d0, r4, r5
 8012fd6:	4616      	mov	r6, r2
 8012fd8:	f7ff feba 	bl	8012d50 <__ulp>
 8012fdc:	ec51 0b10 	vmov	r0, r1, d0
 8012fe0:	b17e      	cbz	r6, 8013002 <sulp+0x36>
 8012fe2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012fe6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	dd09      	ble.n	8013002 <sulp+0x36>
 8012fee:	051b      	lsls	r3, r3, #20
 8012ff0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012ff4:	2400      	movs	r4, #0
 8012ff6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012ffa:	4622      	mov	r2, r4
 8012ffc:	462b      	mov	r3, r5
 8012ffe:	f7ed fb1b 	bl	8000638 <__aeabi_dmul>
 8013002:	ec41 0b10 	vmov	d0, r0, r1
 8013006:	bd70      	pop	{r4, r5, r6, pc}

08013008 <_strtod_l>:
 8013008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801300c:	b09f      	sub	sp, #124	@ 0x7c
 801300e:	460c      	mov	r4, r1
 8013010:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013012:	2200      	movs	r2, #0
 8013014:	921a      	str	r2, [sp, #104]	@ 0x68
 8013016:	9005      	str	r0, [sp, #20]
 8013018:	f04f 0a00 	mov.w	sl, #0
 801301c:	f04f 0b00 	mov.w	fp, #0
 8013020:	460a      	mov	r2, r1
 8013022:	9219      	str	r2, [sp, #100]	@ 0x64
 8013024:	7811      	ldrb	r1, [r2, #0]
 8013026:	292b      	cmp	r1, #43	@ 0x2b
 8013028:	d04a      	beq.n	80130c0 <_strtod_l+0xb8>
 801302a:	d838      	bhi.n	801309e <_strtod_l+0x96>
 801302c:	290d      	cmp	r1, #13
 801302e:	d832      	bhi.n	8013096 <_strtod_l+0x8e>
 8013030:	2908      	cmp	r1, #8
 8013032:	d832      	bhi.n	801309a <_strtod_l+0x92>
 8013034:	2900      	cmp	r1, #0
 8013036:	d03b      	beq.n	80130b0 <_strtod_l+0xa8>
 8013038:	2200      	movs	r2, #0
 801303a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801303c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801303e:	782a      	ldrb	r2, [r5, #0]
 8013040:	2a30      	cmp	r2, #48	@ 0x30
 8013042:	f040 80b3 	bne.w	80131ac <_strtod_l+0x1a4>
 8013046:	786a      	ldrb	r2, [r5, #1]
 8013048:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801304c:	2a58      	cmp	r2, #88	@ 0x58
 801304e:	d16e      	bne.n	801312e <_strtod_l+0x126>
 8013050:	9302      	str	r3, [sp, #8]
 8013052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013054:	9301      	str	r3, [sp, #4]
 8013056:	ab1a      	add	r3, sp, #104	@ 0x68
 8013058:	9300      	str	r3, [sp, #0]
 801305a:	4a8e      	ldr	r2, [pc, #568]	@ (8013294 <_strtod_l+0x28c>)
 801305c:	9805      	ldr	r0, [sp, #20]
 801305e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013060:	a919      	add	r1, sp, #100	@ 0x64
 8013062:	f001 f927 	bl	80142b4 <__gethex>
 8013066:	f010 060f 	ands.w	r6, r0, #15
 801306a:	4604      	mov	r4, r0
 801306c:	d005      	beq.n	801307a <_strtod_l+0x72>
 801306e:	2e06      	cmp	r6, #6
 8013070:	d128      	bne.n	80130c4 <_strtod_l+0xbc>
 8013072:	3501      	adds	r5, #1
 8013074:	2300      	movs	r3, #0
 8013076:	9519      	str	r5, [sp, #100]	@ 0x64
 8013078:	930b      	str	r3, [sp, #44]	@ 0x2c
 801307a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801307c:	2b00      	cmp	r3, #0
 801307e:	f040 858e 	bne.w	8013b9e <_strtod_l+0xb96>
 8013082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013084:	b1cb      	cbz	r3, 80130ba <_strtod_l+0xb2>
 8013086:	4652      	mov	r2, sl
 8013088:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801308c:	ec43 2b10 	vmov	d0, r2, r3
 8013090:	b01f      	add	sp, #124	@ 0x7c
 8013092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013096:	2920      	cmp	r1, #32
 8013098:	d1ce      	bne.n	8013038 <_strtod_l+0x30>
 801309a:	3201      	adds	r2, #1
 801309c:	e7c1      	b.n	8013022 <_strtod_l+0x1a>
 801309e:	292d      	cmp	r1, #45	@ 0x2d
 80130a0:	d1ca      	bne.n	8013038 <_strtod_l+0x30>
 80130a2:	2101      	movs	r1, #1
 80130a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80130a6:	1c51      	adds	r1, r2, #1
 80130a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80130aa:	7852      	ldrb	r2, [r2, #1]
 80130ac:	2a00      	cmp	r2, #0
 80130ae:	d1c5      	bne.n	801303c <_strtod_l+0x34>
 80130b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80130b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	f040 8570 	bne.w	8013b9a <_strtod_l+0xb92>
 80130ba:	4652      	mov	r2, sl
 80130bc:	465b      	mov	r3, fp
 80130be:	e7e5      	b.n	801308c <_strtod_l+0x84>
 80130c0:	2100      	movs	r1, #0
 80130c2:	e7ef      	b.n	80130a4 <_strtod_l+0x9c>
 80130c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80130c6:	b13a      	cbz	r2, 80130d8 <_strtod_l+0xd0>
 80130c8:	2135      	movs	r1, #53	@ 0x35
 80130ca:	a81c      	add	r0, sp, #112	@ 0x70
 80130cc:	f7ff ff3a 	bl	8012f44 <__copybits>
 80130d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80130d2:	9805      	ldr	r0, [sp, #20]
 80130d4:	f7ff fb08 	bl	80126e8 <_Bfree>
 80130d8:	3e01      	subs	r6, #1
 80130da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80130dc:	2e04      	cmp	r6, #4
 80130de:	d806      	bhi.n	80130ee <_strtod_l+0xe6>
 80130e0:	e8df f006 	tbb	[pc, r6]
 80130e4:	201d0314 	.word	0x201d0314
 80130e8:	14          	.byte	0x14
 80130e9:	00          	.byte	0x00
 80130ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80130ee:	05e1      	lsls	r1, r4, #23
 80130f0:	bf48      	it	mi
 80130f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80130f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80130fa:	0d1b      	lsrs	r3, r3, #20
 80130fc:	051b      	lsls	r3, r3, #20
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d1bb      	bne.n	801307a <_strtod_l+0x72>
 8013102:	f7fe fb31 	bl	8011768 <__errno>
 8013106:	2322      	movs	r3, #34	@ 0x22
 8013108:	6003      	str	r3, [r0, #0]
 801310a:	e7b6      	b.n	801307a <_strtod_l+0x72>
 801310c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013110:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013114:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013118:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801311c:	e7e7      	b.n	80130ee <_strtod_l+0xe6>
 801311e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801329c <_strtod_l+0x294>
 8013122:	e7e4      	b.n	80130ee <_strtod_l+0xe6>
 8013124:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013128:	f04f 3aff 	mov.w	sl, #4294967295
 801312c:	e7df      	b.n	80130ee <_strtod_l+0xe6>
 801312e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013130:	1c5a      	adds	r2, r3, #1
 8013132:	9219      	str	r2, [sp, #100]	@ 0x64
 8013134:	785b      	ldrb	r3, [r3, #1]
 8013136:	2b30      	cmp	r3, #48	@ 0x30
 8013138:	d0f9      	beq.n	801312e <_strtod_l+0x126>
 801313a:	2b00      	cmp	r3, #0
 801313c:	d09d      	beq.n	801307a <_strtod_l+0x72>
 801313e:	2301      	movs	r3, #1
 8013140:	9309      	str	r3, [sp, #36]	@ 0x24
 8013142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013144:	930c      	str	r3, [sp, #48]	@ 0x30
 8013146:	2300      	movs	r3, #0
 8013148:	9308      	str	r3, [sp, #32]
 801314a:	930a      	str	r3, [sp, #40]	@ 0x28
 801314c:	461f      	mov	r7, r3
 801314e:	220a      	movs	r2, #10
 8013150:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013152:	7805      	ldrb	r5, [r0, #0]
 8013154:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013158:	b2d9      	uxtb	r1, r3
 801315a:	2909      	cmp	r1, #9
 801315c:	d928      	bls.n	80131b0 <_strtod_l+0x1a8>
 801315e:	494e      	ldr	r1, [pc, #312]	@ (8013298 <_strtod_l+0x290>)
 8013160:	2201      	movs	r2, #1
 8013162:	f000 ffd5 	bl	8014110 <strncmp>
 8013166:	2800      	cmp	r0, #0
 8013168:	d032      	beq.n	80131d0 <_strtod_l+0x1c8>
 801316a:	2000      	movs	r0, #0
 801316c:	462a      	mov	r2, r5
 801316e:	4681      	mov	r9, r0
 8013170:	463d      	mov	r5, r7
 8013172:	4603      	mov	r3, r0
 8013174:	2a65      	cmp	r2, #101	@ 0x65
 8013176:	d001      	beq.n	801317c <_strtod_l+0x174>
 8013178:	2a45      	cmp	r2, #69	@ 0x45
 801317a:	d114      	bne.n	80131a6 <_strtod_l+0x19e>
 801317c:	b91d      	cbnz	r5, 8013186 <_strtod_l+0x17e>
 801317e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013180:	4302      	orrs	r2, r0
 8013182:	d095      	beq.n	80130b0 <_strtod_l+0xa8>
 8013184:	2500      	movs	r5, #0
 8013186:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013188:	1c62      	adds	r2, r4, #1
 801318a:	9219      	str	r2, [sp, #100]	@ 0x64
 801318c:	7862      	ldrb	r2, [r4, #1]
 801318e:	2a2b      	cmp	r2, #43	@ 0x2b
 8013190:	d077      	beq.n	8013282 <_strtod_l+0x27a>
 8013192:	2a2d      	cmp	r2, #45	@ 0x2d
 8013194:	d07b      	beq.n	801328e <_strtod_l+0x286>
 8013196:	f04f 0c00 	mov.w	ip, #0
 801319a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801319e:	2909      	cmp	r1, #9
 80131a0:	f240 8082 	bls.w	80132a8 <_strtod_l+0x2a0>
 80131a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80131a6:	f04f 0800 	mov.w	r8, #0
 80131aa:	e0a2      	b.n	80132f2 <_strtod_l+0x2ea>
 80131ac:	2300      	movs	r3, #0
 80131ae:	e7c7      	b.n	8013140 <_strtod_l+0x138>
 80131b0:	2f08      	cmp	r7, #8
 80131b2:	bfd5      	itete	le
 80131b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80131b6:	9908      	ldrgt	r1, [sp, #32]
 80131b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80131bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80131c0:	f100 0001 	add.w	r0, r0, #1
 80131c4:	bfd4      	ite	le
 80131c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80131c8:	9308      	strgt	r3, [sp, #32]
 80131ca:	3701      	adds	r7, #1
 80131cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80131ce:	e7bf      	b.n	8013150 <_strtod_l+0x148>
 80131d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80131d2:	1c5a      	adds	r2, r3, #1
 80131d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80131d6:	785a      	ldrb	r2, [r3, #1]
 80131d8:	b37f      	cbz	r7, 801323a <_strtod_l+0x232>
 80131da:	4681      	mov	r9, r0
 80131dc:	463d      	mov	r5, r7
 80131de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80131e2:	2b09      	cmp	r3, #9
 80131e4:	d912      	bls.n	801320c <_strtod_l+0x204>
 80131e6:	2301      	movs	r3, #1
 80131e8:	e7c4      	b.n	8013174 <_strtod_l+0x16c>
 80131ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80131ec:	1c5a      	adds	r2, r3, #1
 80131ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80131f0:	785a      	ldrb	r2, [r3, #1]
 80131f2:	3001      	adds	r0, #1
 80131f4:	2a30      	cmp	r2, #48	@ 0x30
 80131f6:	d0f8      	beq.n	80131ea <_strtod_l+0x1e2>
 80131f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80131fc:	2b08      	cmp	r3, #8
 80131fe:	f200 84d3 	bhi.w	8013ba8 <_strtod_l+0xba0>
 8013202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013204:	930c      	str	r3, [sp, #48]	@ 0x30
 8013206:	4681      	mov	r9, r0
 8013208:	2000      	movs	r0, #0
 801320a:	4605      	mov	r5, r0
 801320c:	3a30      	subs	r2, #48	@ 0x30
 801320e:	f100 0301 	add.w	r3, r0, #1
 8013212:	d02a      	beq.n	801326a <_strtod_l+0x262>
 8013214:	4499      	add	r9, r3
 8013216:	eb00 0c05 	add.w	ip, r0, r5
 801321a:	462b      	mov	r3, r5
 801321c:	210a      	movs	r1, #10
 801321e:	4563      	cmp	r3, ip
 8013220:	d10d      	bne.n	801323e <_strtod_l+0x236>
 8013222:	1c69      	adds	r1, r5, #1
 8013224:	4401      	add	r1, r0
 8013226:	4428      	add	r0, r5
 8013228:	2808      	cmp	r0, #8
 801322a:	dc16      	bgt.n	801325a <_strtod_l+0x252>
 801322c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801322e:	230a      	movs	r3, #10
 8013230:	fb03 2300 	mla	r3, r3, r0, r2
 8013234:	930a      	str	r3, [sp, #40]	@ 0x28
 8013236:	2300      	movs	r3, #0
 8013238:	e018      	b.n	801326c <_strtod_l+0x264>
 801323a:	4638      	mov	r0, r7
 801323c:	e7da      	b.n	80131f4 <_strtod_l+0x1ec>
 801323e:	2b08      	cmp	r3, #8
 8013240:	f103 0301 	add.w	r3, r3, #1
 8013244:	dc03      	bgt.n	801324e <_strtod_l+0x246>
 8013246:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013248:	434e      	muls	r6, r1
 801324a:	960a      	str	r6, [sp, #40]	@ 0x28
 801324c:	e7e7      	b.n	801321e <_strtod_l+0x216>
 801324e:	2b10      	cmp	r3, #16
 8013250:	bfde      	ittt	le
 8013252:	9e08      	ldrle	r6, [sp, #32]
 8013254:	434e      	mulle	r6, r1
 8013256:	9608      	strle	r6, [sp, #32]
 8013258:	e7e1      	b.n	801321e <_strtod_l+0x216>
 801325a:	280f      	cmp	r0, #15
 801325c:	dceb      	bgt.n	8013236 <_strtod_l+0x22e>
 801325e:	9808      	ldr	r0, [sp, #32]
 8013260:	230a      	movs	r3, #10
 8013262:	fb03 2300 	mla	r3, r3, r0, r2
 8013266:	9308      	str	r3, [sp, #32]
 8013268:	e7e5      	b.n	8013236 <_strtod_l+0x22e>
 801326a:	4629      	mov	r1, r5
 801326c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801326e:	1c50      	adds	r0, r2, #1
 8013270:	9019      	str	r0, [sp, #100]	@ 0x64
 8013272:	7852      	ldrb	r2, [r2, #1]
 8013274:	4618      	mov	r0, r3
 8013276:	460d      	mov	r5, r1
 8013278:	e7b1      	b.n	80131de <_strtod_l+0x1d6>
 801327a:	f04f 0900 	mov.w	r9, #0
 801327e:	2301      	movs	r3, #1
 8013280:	e77d      	b.n	801317e <_strtod_l+0x176>
 8013282:	f04f 0c00 	mov.w	ip, #0
 8013286:	1ca2      	adds	r2, r4, #2
 8013288:	9219      	str	r2, [sp, #100]	@ 0x64
 801328a:	78a2      	ldrb	r2, [r4, #2]
 801328c:	e785      	b.n	801319a <_strtod_l+0x192>
 801328e:	f04f 0c01 	mov.w	ip, #1
 8013292:	e7f8      	b.n	8013286 <_strtod_l+0x27e>
 8013294:	08018a58 	.word	0x08018a58
 8013298:	08018a40 	.word	0x08018a40
 801329c:	7ff00000 	.word	0x7ff00000
 80132a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80132a2:	1c51      	adds	r1, r2, #1
 80132a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80132a6:	7852      	ldrb	r2, [r2, #1]
 80132a8:	2a30      	cmp	r2, #48	@ 0x30
 80132aa:	d0f9      	beq.n	80132a0 <_strtod_l+0x298>
 80132ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80132b0:	2908      	cmp	r1, #8
 80132b2:	f63f af78 	bhi.w	80131a6 <_strtod_l+0x19e>
 80132b6:	3a30      	subs	r2, #48	@ 0x30
 80132b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80132ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80132bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80132be:	f04f 080a 	mov.w	r8, #10
 80132c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80132c4:	1c56      	adds	r6, r2, #1
 80132c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80132c8:	7852      	ldrb	r2, [r2, #1]
 80132ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80132ce:	f1be 0f09 	cmp.w	lr, #9
 80132d2:	d939      	bls.n	8013348 <_strtod_l+0x340>
 80132d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80132d6:	1a76      	subs	r6, r6, r1
 80132d8:	2e08      	cmp	r6, #8
 80132da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80132de:	dc03      	bgt.n	80132e8 <_strtod_l+0x2e0>
 80132e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80132e2:	4588      	cmp	r8, r1
 80132e4:	bfa8      	it	ge
 80132e6:	4688      	movge	r8, r1
 80132e8:	f1bc 0f00 	cmp.w	ip, #0
 80132ec:	d001      	beq.n	80132f2 <_strtod_l+0x2ea>
 80132ee:	f1c8 0800 	rsb	r8, r8, #0
 80132f2:	2d00      	cmp	r5, #0
 80132f4:	d14e      	bne.n	8013394 <_strtod_l+0x38c>
 80132f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80132f8:	4308      	orrs	r0, r1
 80132fa:	f47f aebe 	bne.w	801307a <_strtod_l+0x72>
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f47f aed6 	bne.w	80130b0 <_strtod_l+0xa8>
 8013304:	2a69      	cmp	r2, #105	@ 0x69
 8013306:	d028      	beq.n	801335a <_strtod_l+0x352>
 8013308:	dc25      	bgt.n	8013356 <_strtod_l+0x34e>
 801330a:	2a49      	cmp	r2, #73	@ 0x49
 801330c:	d025      	beq.n	801335a <_strtod_l+0x352>
 801330e:	2a4e      	cmp	r2, #78	@ 0x4e
 8013310:	f47f aece 	bne.w	80130b0 <_strtod_l+0xa8>
 8013314:	499b      	ldr	r1, [pc, #620]	@ (8013584 <_strtod_l+0x57c>)
 8013316:	a819      	add	r0, sp, #100	@ 0x64
 8013318:	f001 f9ee 	bl	80146f8 <__match>
 801331c:	2800      	cmp	r0, #0
 801331e:	f43f aec7 	beq.w	80130b0 <_strtod_l+0xa8>
 8013322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	2b28      	cmp	r3, #40	@ 0x28
 8013328:	d12e      	bne.n	8013388 <_strtod_l+0x380>
 801332a:	4997      	ldr	r1, [pc, #604]	@ (8013588 <_strtod_l+0x580>)
 801332c:	aa1c      	add	r2, sp, #112	@ 0x70
 801332e:	a819      	add	r0, sp, #100	@ 0x64
 8013330:	f001 f9f6 	bl	8014720 <__hexnan>
 8013334:	2805      	cmp	r0, #5
 8013336:	d127      	bne.n	8013388 <_strtod_l+0x380>
 8013338:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801333a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801333e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013342:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013346:	e698      	b.n	801307a <_strtod_l+0x72>
 8013348:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801334a:	fb08 2101 	mla	r1, r8, r1, r2
 801334e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013352:	920e      	str	r2, [sp, #56]	@ 0x38
 8013354:	e7b5      	b.n	80132c2 <_strtod_l+0x2ba>
 8013356:	2a6e      	cmp	r2, #110	@ 0x6e
 8013358:	e7da      	b.n	8013310 <_strtod_l+0x308>
 801335a:	498c      	ldr	r1, [pc, #560]	@ (801358c <_strtod_l+0x584>)
 801335c:	a819      	add	r0, sp, #100	@ 0x64
 801335e:	f001 f9cb 	bl	80146f8 <__match>
 8013362:	2800      	cmp	r0, #0
 8013364:	f43f aea4 	beq.w	80130b0 <_strtod_l+0xa8>
 8013368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801336a:	4989      	ldr	r1, [pc, #548]	@ (8013590 <_strtod_l+0x588>)
 801336c:	3b01      	subs	r3, #1
 801336e:	a819      	add	r0, sp, #100	@ 0x64
 8013370:	9319      	str	r3, [sp, #100]	@ 0x64
 8013372:	f001 f9c1 	bl	80146f8 <__match>
 8013376:	b910      	cbnz	r0, 801337e <_strtod_l+0x376>
 8013378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801337a:	3301      	adds	r3, #1
 801337c:	9319      	str	r3, [sp, #100]	@ 0x64
 801337e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80135a0 <_strtod_l+0x598>
 8013382:	f04f 0a00 	mov.w	sl, #0
 8013386:	e678      	b.n	801307a <_strtod_l+0x72>
 8013388:	4882      	ldr	r0, [pc, #520]	@ (8013594 <_strtod_l+0x58c>)
 801338a:	f000 fef1 	bl	8014170 <nan>
 801338e:	ec5b ab10 	vmov	sl, fp, d0
 8013392:	e672      	b.n	801307a <_strtod_l+0x72>
 8013394:	eba8 0309 	sub.w	r3, r8, r9
 8013398:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801339a:	9309      	str	r3, [sp, #36]	@ 0x24
 801339c:	2f00      	cmp	r7, #0
 801339e:	bf08      	it	eq
 80133a0:	462f      	moveq	r7, r5
 80133a2:	2d10      	cmp	r5, #16
 80133a4:	462c      	mov	r4, r5
 80133a6:	bfa8      	it	ge
 80133a8:	2410      	movge	r4, #16
 80133aa:	f7ed f8cb 	bl	8000544 <__aeabi_ui2d>
 80133ae:	2d09      	cmp	r5, #9
 80133b0:	4682      	mov	sl, r0
 80133b2:	468b      	mov	fp, r1
 80133b4:	dc13      	bgt.n	80133de <_strtod_l+0x3d6>
 80133b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	f43f ae5e 	beq.w	801307a <_strtod_l+0x72>
 80133be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133c0:	dd78      	ble.n	80134b4 <_strtod_l+0x4ac>
 80133c2:	2b16      	cmp	r3, #22
 80133c4:	dc5f      	bgt.n	8013486 <_strtod_l+0x47e>
 80133c6:	4974      	ldr	r1, [pc, #464]	@ (8013598 <_strtod_l+0x590>)
 80133c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80133cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133d0:	4652      	mov	r2, sl
 80133d2:	465b      	mov	r3, fp
 80133d4:	f7ed f930 	bl	8000638 <__aeabi_dmul>
 80133d8:	4682      	mov	sl, r0
 80133da:	468b      	mov	fp, r1
 80133dc:	e64d      	b.n	801307a <_strtod_l+0x72>
 80133de:	4b6e      	ldr	r3, [pc, #440]	@ (8013598 <_strtod_l+0x590>)
 80133e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80133e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80133e8:	f7ed f926 	bl	8000638 <__aeabi_dmul>
 80133ec:	4682      	mov	sl, r0
 80133ee:	9808      	ldr	r0, [sp, #32]
 80133f0:	468b      	mov	fp, r1
 80133f2:	f7ed f8a7 	bl	8000544 <__aeabi_ui2d>
 80133f6:	4602      	mov	r2, r0
 80133f8:	460b      	mov	r3, r1
 80133fa:	4650      	mov	r0, sl
 80133fc:	4659      	mov	r1, fp
 80133fe:	f7ec ff65 	bl	80002cc <__adddf3>
 8013402:	2d0f      	cmp	r5, #15
 8013404:	4682      	mov	sl, r0
 8013406:	468b      	mov	fp, r1
 8013408:	ddd5      	ble.n	80133b6 <_strtod_l+0x3ae>
 801340a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801340c:	1b2c      	subs	r4, r5, r4
 801340e:	441c      	add	r4, r3
 8013410:	2c00      	cmp	r4, #0
 8013412:	f340 8096 	ble.w	8013542 <_strtod_l+0x53a>
 8013416:	f014 030f 	ands.w	r3, r4, #15
 801341a:	d00a      	beq.n	8013432 <_strtod_l+0x42a>
 801341c:	495e      	ldr	r1, [pc, #376]	@ (8013598 <_strtod_l+0x590>)
 801341e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013422:	4652      	mov	r2, sl
 8013424:	465b      	mov	r3, fp
 8013426:	e9d1 0100 	ldrd	r0, r1, [r1]
 801342a:	f7ed f905 	bl	8000638 <__aeabi_dmul>
 801342e:	4682      	mov	sl, r0
 8013430:	468b      	mov	fp, r1
 8013432:	f034 040f 	bics.w	r4, r4, #15
 8013436:	d073      	beq.n	8013520 <_strtod_l+0x518>
 8013438:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801343c:	dd48      	ble.n	80134d0 <_strtod_l+0x4c8>
 801343e:	2400      	movs	r4, #0
 8013440:	46a0      	mov	r8, r4
 8013442:	940a      	str	r4, [sp, #40]	@ 0x28
 8013444:	46a1      	mov	r9, r4
 8013446:	9a05      	ldr	r2, [sp, #20]
 8013448:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80135a0 <_strtod_l+0x598>
 801344c:	2322      	movs	r3, #34	@ 0x22
 801344e:	6013      	str	r3, [r2, #0]
 8013450:	f04f 0a00 	mov.w	sl, #0
 8013454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013456:	2b00      	cmp	r3, #0
 8013458:	f43f ae0f 	beq.w	801307a <_strtod_l+0x72>
 801345c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801345e:	9805      	ldr	r0, [sp, #20]
 8013460:	f7ff f942 	bl	80126e8 <_Bfree>
 8013464:	9805      	ldr	r0, [sp, #20]
 8013466:	4649      	mov	r1, r9
 8013468:	f7ff f93e 	bl	80126e8 <_Bfree>
 801346c:	9805      	ldr	r0, [sp, #20]
 801346e:	4641      	mov	r1, r8
 8013470:	f7ff f93a 	bl	80126e8 <_Bfree>
 8013474:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013476:	9805      	ldr	r0, [sp, #20]
 8013478:	f7ff f936 	bl	80126e8 <_Bfree>
 801347c:	9805      	ldr	r0, [sp, #20]
 801347e:	4621      	mov	r1, r4
 8013480:	f7ff f932 	bl	80126e8 <_Bfree>
 8013484:	e5f9      	b.n	801307a <_strtod_l+0x72>
 8013486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013488:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801348c:	4293      	cmp	r3, r2
 801348e:	dbbc      	blt.n	801340a <_strtod_l+0x402>
 8013490:	4c41      	ldr	r4, [pc, #260]	@ (8013598 <_strtod_l+0x590>)
 8013492:	f1c5 050f 	rsb	r5, r5, #15
 8013496:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801349a:	4652      	mov	r2, sl
 801349c:	465b      	mov	r3, fp
 801349e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134a2:	f7ed f8c9 	bl	8000638 <__aeabi_dmul>
 80134a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134a8:	1b5d      	subs	r5, r3, r5
 80134aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80134ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80134b2:	e78f      	b.n	80133d4 <_strtod_l+0x3cc>
 80134b4:	3316      	adds	r3, #22
 80134b6:	dba8      	blt.n	801340a <_strtod_l+0x402>
 80134b8:	4b37      	ldr	r3, [pc, #220]	@ (8013598 <_strtod_l+0x590>)
 80134ba:	eba9 0808 	sub.w	r8, r9, r8
 80134be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80134c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80134c6:	4650      	mov	r0, sl
 80134c8:	4659      	mov	r1, fp
 80134ca:	f7ed f9df 	bl	800088c <__aeabi_ddiv>
 80134ce:	e783      	b.n	80133d8 <_strtod_l+0x3d0>
 80134d0:	4b32      	ldr	r3, [pc, #200]	@ (801359c <_strtod_l+0x594>)
 80134d2:	9308      	str	r3, [sp, #32]
 80134d4:	2300      	movs	r3, #0
 80134d6:	1124      	asrs	r4, r4, #4
 80134d8:	4650      	mov	r0, sl
 80134da:	4659      	mov	r1, fp
 80134dc:	461e      	mov	r6, r3
 80134de:	2c01      	cmp	r4, #1
 80134e0:	dc21      	bgt.n	8013526 <_strtod_l+0x51e>
 80134e2:	b10b      	cbz	r3, 80134e8 <_strtod_l+0x4e0>
 80134e4:	4682      	mov	sl, r0
 80134e6:	468b      	mov	fp, r1
 80134e8:	492c      	ldr	r1, [pc, #176]	@ (801359c <_strtod_l+0x594>)
 80134ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80134ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80134f2:	4652      	mov	r2, sl
 80134f4:	465b      	mov	r3, fp
 80134f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134fa:	f7ed f89d 	bl	8000638 <__aeabi_dmul>
 80134fe:	4b28      	ldr	r3, [pc, #160]	@ (80135a0 <_strtod_l+0x598>)
 8013500:	460a      	mov	r2, r1
 8013502:	400b      	ands	r3, r1
 8013504:	4927      	ldr	r1, [pc, #156]	@ (80135a4 <_strtod_l+0x59c>)
 8013506:	428b      	cmp	r3, r1
 8013508:	4682      	mov	sl, r0
 801350a:	d898      	bhi.n	801343e <_strtod_l+0x436>
 801350c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013510:	428b      	cmp	r3, r1
 8013512:	bf86      	itte	hi
 8013514:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80135a8 <_strtod_l+0x5a0>
 8013518:	f04f 3aff 	movhi.w	sl, #4294967295
 801351c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013520:	2300      	movs	r3, #0
 8013522:	9308      	str	r3, [sp, #32]
 8013524:	e07a      	b.n	801361c <_strtod_l+0x614>
 8013526:	07e2      	lsls	r2, r4, #31
 8013528:	d505      	bpl.n	8013536 <_strtod_l+0x52e>
 801352a:	9b08      	ldr	r3, [sp, #32]
 801352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013530:	f7ed f882 	bl	8000638 <__aeabi_dmul>
 8013534:	2301      	movs	r3, #1
 8013536:	9a08      	ldr	r2, [sp, #32]
 8013538:	3208      	adds	r2, #8
 801353a:	3601      	adds	r6, #1
 801353c:	1064      	asrs	r4, r4, #1
 801353e:	9208      	str	r2, [sp, #32]
 8013540:	e7cd      	b.n	80134de <_strtod_l+0x4d6>
 8013542:	d0ed      	beq.n	8013520 <_strtod_l+0x518>
 8013544:	4264      	negs	r4, r4
 8013546:	f014 020f 	ands.w	r2, r4, #15
 801354a:	d00a      	beq.n	8013562 <_strtod_l+0x55a>
 801354c:	4b12      	ldr	r3, [pc, #72]	@ (8013598 <_strtod_l+0x590>)
 801354e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013552:	4650      	mov	r0, sl
 8013554:	4659      	mov	r1, fp
 8013556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355a:	f7ed f997 	bl	800088c <__aeabi_ddiv>
 801355e:	4682      	mov	sl, r0
 8013560:	468b      	mov	fp, r1
 8013562:	1124      	asrs	r4, r4, #4
 8013564:	d0dc      	beq.n	8013520 <_strtod_l+0x518>
 8013566:	2c1f      	cmp	r4, #31
 8013568:	dd20      	ble.n	80135ac <_strtod_l+0x5a4>
 801356a:	2400      	movs	r4, #0
 801356c:	46a0      	mov	r8, r4
 801356e:	940a      	str	r4, [sp, #40]	@ 0x28
 8013570:	46a1      	mov	r9, r4
 8013572:	9a05      	ldr	r2, [sp, #20]
 8013574:	2322      	movs	r3, #34	@ 0x22
 8013576:	f04f 0a00 	mov.w	sl, #0
 801357a:	f04f 0b00 	mov.w	fp, #0
 801357e:	6013      	str	r3, [r2, #0]
 8013580:	e768      	b.n	8013454 <_strtod_l+0x44c>
 8013582:	bf00      	nop
 8013584:	08018831 	.word	0x08018831
 8013588:	08018a44 	.word	0x08018a44
 801358c:	08018829 	.word	0x08018829
 8013590:	08018860 	.word	0x08018860
 8013594:	08018bed 	.word	0x08018bed
 8013598:	08018978 	.word	0x08018978
 801359c:	08018950 	.word	0x08018950
 80135a0:	7ff00000 	.word	0x7ff00000
 80135a4:	7ca00000 	.word	0x7ca00000
 80135a8:	7fefffff 	.word	0x7fefffff
 80135ac:	f014 0310 	ands.w	r3, r4, #16
 80135b0:	bf18      	it	ne
 80135b2:	236a      	movne	r3, #106	@ 0x6a
 80135b4:	4ea9      	ldr	r6, [pc, #676]	@ (801385c <_strtod_l+0x854>)
 80135b6:	9308      	str	r3, [sp, #32]
 80135b8:	4650      	mov	r0, sl
 80135ba:	4659      	mov	r1, fp
 80135bc:	2300      	movs	r3, #0
 80135be:	07e2      	lsls	r2, r4, #31
 80135c0:	d504      	bpl.n	80135cc <_strtod_l+0x5c4>
 80135c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80135c6:	f7ed f837 	bl	8000638 <__aeabi_dmul>
 80135ca:	2301      	movs	r3, #1
 80135cc:	1064      	asrs	r4, r4, #1
 80135ce:	f106 0608 	add.w	r6, r6, #8
 80135d2:	d1f4      	bne.n	80135be <_strtod_l+0x5b6>
 80135d4:	b10b      	cbz	r3, 80135da <_strtod_l+0x5d2>
 80135d6:	4682      	mov	sl, r0
 80135d8:	468b      	mov	fp, r1
 80135da:	9b08      	ldr	r3, [sp, #32]
 80135dc:	b1b3      	cbz	r3, 801360c <_strtod_l+0x604>
 80135de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80135e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	4659      	mov	r1, fp
 80135ea:	dd0f      	ble.n	801360c <_strtod_l+0x604>
 80135ec:	2b1f      	cmp	r3, #31
 80135ee:	dd55      	ble.n	801369c <_strtod_l+0x694>
 80135f0:	2b34      	cmp	r3, #52	@ 0x34
 80135f2:	bfde      	ittt	le
 80135f4:	f04f 33ff 	movle.w	r3, #4294967295
 80135f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80135fc:	4093      	lslle	r3, r2
 80135fe:	f04f 0a00 	mov.w	sl, #0
 8013602:	bfcc      	ite	gt
 8013604:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013608:	ea03 0b01 	andle.w	fp, r3, r1
 801360c:	2200      	movs	r2, #0
 801360e:	2300      	movs	r3, #0
 8013610:	4650      	mov	r0, sl
 8013612:	4659      	mov	r1, fp
 8013614:	f7ed fa78 	bl	8000b08 <__aeabi_dcmpeq>
 8013618:	2800      	cmp	r0, #0
 801361a:	d1a6      	bne.n	801356a <_strtod_l+0x562>
 801361c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801361e:	9300      	str	r3, [sp, #0]
 8013620:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013622:	9805      	ldr	r0, [sp, #20]
 8013624:	462b      	mov	r3, r5
 8013626:	463a      	mov	r2, r7
 8013628:	f7ff f8c6 	bl	80127b8 <__s2b>
 801362c:	900a      	str	r0, [sp, #40]	@ 0x28
 801362e:	2800      	cmp	r0, #0
 8013630:	f43f af05 	beq.w	801343e <_strtod_l+0x436>
 8013634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013636:	2a00      	cmp	r2, #0
 8013638:	eba9 0308 	sub.w	r3, r9, r8
 801363c:	bfa8      	it	ge
 801363e:	2300      	movge	r3, #0
 8013640:	9312      	str	r3, [sp, #72]	@ 0x48
 8013642:	2400      	movs	r4, #0
 8013644:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013648:	9316      	str	r3, [sp, #88]	@ 0x58
 801364a:	46a0      	mov	r8, r4
 801364c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801364e:	9805      	ldr	r0, [sp, #20]
 8013650:	6859      	ldr	r1, [r3, #4]
 8013652:	f7ff f809 	bl	8012668 <_Balloc>
 8013656:	4681      	mov	r9, r0
 8013658:	2800      	cmp	r0, #0
 801365a:	f43f aef4 	beq.w	8013446 <_strtod_l+0x43e>
 801365e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013660:	691a      	ldr	r2, [r3, #16]
 8013662:	3202      	adds	r2, #2
 8013664:	f103 010c 	add.w	r1, r3, #12
 8013668:	0092      	lsls	r2, r2, #2
 801366a:	300c      	adds	r0, #12
 801366c:	f000 fd72 	bl	8014154 <memcpy>
 8013670:	ec4b ab10 	vmov	d0, sl, fp
 8013674:	9805      	ldr	r0, [sp, #20]
 8013676:	aa1c      	add	r2, sp, #112	@ 0x70
 8013678:	a91b      	add	r1, sp, #108	@ 0x6c
 801367a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801367e:	f7ff fbd7 	bl	8012e30 <__d2b>
 8013682:	901a      	str	r0, [sp, #104]	@ 0x68
 8013684:	2800      	cmp	r0, #0
 8013686:	f43f aede 	beq.w	8013446 <_strtod_l+0x43e>
 801368a:	9805      	ldr	r0, [sp, #20]
 801368c:	2101      	movs	r1, #1
 801368e:	f7ff f929 	bl	80128e4 <__i2b>
 8013692:	4680      	mov	r8, r0
 8013694:	b948      	cbnz	r0, 80136aa <_strtod_l+0x6a2>
 8013696:	f04f 0800 	mov.w	r8, #0
 801369a:	e6d4      	b.n	8013446 <_strtod_l+0x43e>
 801369c:	f04f 32ff 	mov.w	r2, #4294967295
 80136a0:	fa02 f303 	lsl.w	r3, r2, r3
 80136a4:	ea03 0a0a 	and.w	sl, r3, sl
 80136a8:	e7b0      	b.n	801360c <_strtod_l+0x604>
 80136aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80136ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80136ae:	2d00      	cmp	r5, #0
 80136b0:	bfab      	itete	ge
 80136b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80136b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80136b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80136b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80136ba:	bfac      	ite	ge
 80136bc:	18ef      	addge	r7, r5, r3
 80136be:	1b5e      	sublt	r6, r3, r5
 80136c0:	9b08      	ldr	r3, [sp, #32]
 80136c2:	1aed      	subs	r5, r5, r3
 80136c4:	4415      	add	r5, r2
 80136c6:	4b66      	ldr	r3, [pc, #408]	@ (8013860 <_strtod_l+0x858>)
 80136c8:	3d01      	subs	r5, #1
 80136ca:	429d      	cmp	r5, r3
 80136cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80136d0:	da50      	bge.n	8013774 <_strtod_l+0x76c>
 80136d2:	1b5b      	subs	r3, r3, r5
 80136d4:	2b1f      	cmp	r3, #31
 80136d6:	eba2 0203 	sub.w	r2, r2, r3
 80136da:	f04f 0101 	mov.w	r1, #1
 80136de:	dc3d      	bgt.n	801375c <_strtod_l+0x754>
 80136e0:	fa01 f303 	lsl.w	r3, r1, r3
 80136e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80136e6:	2300      	movs	r3, #0
 80136e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80136ea:	18bd      	adds	r5, r7, r2
 80136ec:	9b08      	ldr	r3, [sp, #32]
 80136ee:	42af      	cmp	r7, r5
 80136f0:	4416      	add	r6, r2
 80136f2:	441e      	add	r6, r3
 80136f4:	463b      	mov	r3, r7
 80136f6:	bfa8      	it	ge
 80136f8:	462b      	movge	r3, r5
 80136fa:	42b3      	cmp	r3, r6
 80136fc:	bfa8      	it	ge
 80136fe:	4633      	movge	r3, r6
 8013700:	2b00      	cmp	r3, #0
 8013702:	bfc2      	ittt	gt
 8013704:	1aed      	subgt	r5, r5, r3
 8013706:	1af6      	subgt	r6, r6, r3
 8013708:	1aff      	subgt	r7, r7, r3
 801370a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801370c:	2b00      	cmp	r3, #0
 801370e:	dd16      	ble.n	801373e <_strtod_l+0x736>
 8013710:	4641      	mov	r1, r8
 8013712:	9805      	ldr	r0, [sp, #20]
 8013714:	461a      	mov	r2, r3
 8013716:	f7ff f9a5 	bl	8012a64 <__pow5mult>
 801371a:	4680      	mov	r8, r0
 801371c:	2800      	cmp	r0, #0
 801371e:	d0ba      	beq.n	8013696 <_strtod_l+0x68e>
 8013720:	4601      	mov	r1, r0
 8013722:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013724:	9805      	ldr	r0, [sp, #20]
 8013726:	f7ff f8f3 	bl	8012910 <__multiply>
 801372a:	900e      	str	r0, [sp, #56]	@ 0x38
 801372c:	2800      	cmp	r0, #0
 801372e:	f43f ae8a 	beq.w	8013446 <_strtod_l+0x43e>
 8013732:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013734:	9805      	ldr	r0, [sp, #20]
 8013736:	f7fe ffd7 	bl	80126e8 <_Bfree>
 801373a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801373c:	931a      	str	r3, [sp, #104]	@ 0x68
 801373e:	2d00      	cmp	r5, #0
 8013740:	dc1d      	bgt.n	801377e <_strtod_l+0x776>
 8013742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013744:	2b00      	cmp	r3, #0
 8013746:	dd23      	ble.n	8013790 <_strtod_l+0x788>
 8013748:	4649      	mov	r1, r9
 801374a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801374c:	9805      	ldr	r0, [sp, #20]
 801374e:	f7ff f989 	bl	8012a64 <__pow5mult>
 8013752:	4681      	mov	r9, r0
 8013754:	b9e0      	cbnz	r0, 8013790 <_strtod_l+0x788>
 8013756:	f04f 0900 	mov.w	r9, #0
 801375a:	e674      	b.n	8013446 <_strtod_l+0x43e>
 801375c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013760:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013764:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013768:	35e2      	adds	r5, #226	@ 0xe2
 801376a:	fa01 f305 	lsl.w	r3, r1, r5
 801376e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013770:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013772:	e7ba      	b.n	80136ea <_strtod_l+0x6e2>
 8013774:	2300      	movs	r3, #0
 8013776:	9310      	str	r3, [sp, #64]	@ 0x40
 8013778:	2301      	movs	r3, #1
 801377a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801377c:	e7b5      	b.n	80136ea <_strtod_l+0x6e2>
 801377e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013780:	9805      	ldr	r0, [sp, #20]
 8013782:	462a      	mov	r2, r5
 8013784:	f7ff f9c8 	bl	8012b18 <__lshift>
 8013788:	901a      	str	r0, [sp, #104]	@ 0x68
 801378a:	2800      	cmp	r0, #0
 801378c:	d1d9      	bne.n	8013742 <_strtod_l+0x73a>
 801378e:	e65a      	b.n	8013446 <_strtod_l+0x43e>
 8013790:	2e00      	cmp	r6, #0
 8013792:	dd07      	ble.n	80137a4 <_strtod_l+0x79c>
 8013794:	4649      	mov	r1, r9
 8013796:	9805      	ldr	r0, [sp, #20]
 8013798:	4632      	mov	r2, r6
 801379a:	f7ff f9bd 	bl	8012b18 <__lshift>
 801379e:	4681      	mov	r9, r0
 80137a0:	2800      	cmp	r0, #0
 80137a2:	d0d8      	beq.n	8013756 <_strtod_l+0x74e>
 80137a4:	2f00      	cmp	r7, #0
 80137a6:	dd08      	ble.n	80137ba <_strtod_l+0x7b2>
 80137a8:	4641      	mov	r1, r8
 80137aa:	9805      	ldr	r0, [sp, #20]
 80137ac:	463a      	mov	r2, r7
 80137ae:	f7ff f9b3 	bl	8012b18 <__lshift>
 80137b2:	4680      	mov	r8, r0
 80137b4:	2800      	cmp	r0, #0
 80137b6:	f43f ae46 	beq.w	8013446 <_strtod_l+0x43e>
 80137ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80137bc:	9805      	ldr	r0, [sp, #20]
 80137be:	464a      	mov	r2, r9
 80137c0:	f7ff fa32 	bl	8012c28 <__mdiff>
 80137c4:	4604      	mov	r4, r0
 80137c6:	2800      	cmp	r0, #0
 80137c8:	f43f ae3d 	beq.w	8013446 <_strtod_l+0x43e>
 80137cc:	68c3      	ldr	r3, [r0, #12]
 80137ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80137d0:	2300      	movs	r3, #0
 80137d2:	60c3      	str	r3, [r0, #12]
 80137d4:	4641      	mov	r1, r8
 80137d6:	f7ff fa0b 	bl	8012bf0 <__mcmp>
 80137da:	2800      	cmp	r0, #0
 80137dc:	da46      	bge.n	801386c <_strtod_l+0x864>
 80137de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137e0:	ea53 030a 	orrs.w	r3, r3, sl
 80137e4:	d16c      	bne.n	80138c0 <_strtod_l+0x8b8>
 80137e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d168      	bne.n	80138c0 <_strtod_l+0x8b8>
 80137ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80137f2:	0d1b      	lsrs	r3, r3, #20
 80137f4:	051b      	lsls	r3, r3, #20
 80137f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80137fa:	d961      	bls.n	80138c0 <_strtod_l+0x8b8>
 80137fc:	6963      	ldr	r3, [r4, #20]
 80137fe:	b913      	cbnz	r3, 8013806 <_strtod_l+0x7fe>
 8013800:	6923      	ldr	r3, [r4, #16]
 8013802:	2b01      	cmp	r3, #1
 8013804:	dd5c      	ble.n	80138c0 <_strtod_l+0x8b8>
 8013806:	4621      	mov	r1, r4
 8013808:	2201      	movs	r2, #1
 801380a:	9805      	ldr	r0, [sp, #20]
 801380c:	f7ff f984 	bl	8012b18 <__lshift>
 8013810:	4641      	mov	r1, r8
 8013812:	4604      	mov	r4, r0
 8013814:	f7ff f9ec 	bl	8012bf0 <__mcmp>
 8013818:	2800      	cmp	r0, #0
 801381a:	dd51      	ble.n	80138c0 <_strtod_l+0x8b8>
 801381c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013820:	9a08      	ldr	r2, [sp, #32]
 8013822:	0d1b      	lsrs	r3, r3, #20
 8013824:	051b      	lsls	r3, r3, #20
 8013826:	2a00      	cmp	r2, #0
 8013828:	d06b      	beq.n	8013902 <_strtod_l+0x8fa>
 801382a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801382e:	d868      	bhi.n	8013902 <_strtod_l+0x8fa>
 8013830:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013834:	f67f ae9d 	bls.w	8013572 <_strtod_l+0x56a>
 8013838:	4b0a      	ldr	r3, [pc, #40]	@ (8013864 <_strtod_l+0x85c>)
 801383a:	4650      	mov	r0, sl
 801383c:	4659      	mov	r1, fp
 801383e:	2200      	movs	r2, #0
 8013840:	f7ec fefa 	bl	8000638 <__aeabi_dmul>
 8013844:	4b08      	ldr	r3, [pc, #32]	@ (8013868 <_strtod_l+0x860>)
 8013846:	400b      	ands	r3, r1
 8013848:	4682      	mov	sl, r0
 801384a:	468b      	mov	fp, r1
 801384c:	2b00      	cmp	r3, #0
 801384e:	f47f ae05 	bne.w	801345c <_strtod_l+0x454>
 8013852:	9a05      	ldr	r2, [sp, #20]
 8013854:	2322      	movs	r3, #34	@ 0x22
 8013856:	6013      	str	r3, [r2, #0]
 8013858:	e600      	b.n	801345c <_strtod_l+0x454>
 801385a:	bf00      	nop
 801385c:	08018a70 	.word	0x08018a70
 8013860:	fffffc02 	.word	0xfffffc02
 8013864:	39500000 	.word	0x39500000
 8013868:	7ff00000 	.word	0x7ff00000
 801386c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013870:	d165      	bne.n	801393e <_strtod_l+0x936>
 8013872:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013874:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013878:	b35a      	cbz	r2, 80138d2 <_strtod_l+0x8ca>
 801387a:	4a9f      	ldr	r2, [pc, #636]	@ (8013af8 <_strtod_l+0xaf0>)
 801387c:	4293      	cmp	r3, r2
 801387e:	d12b      	bne.n	80138d8 <_strtod_l+0x8d0>
 8013880:	9b08      	ldr	r3, [sp, #32]
 8013882:	4651      	mov	r1, sl
 8013884:	b303      	cbz	r3, 80138c8 <_strtod_l+0x8c0>
 8013886:	4b9d      	ldr	r3, [pc, #628]	@ (8013afc <_strtod_l+0xaf4>)
 8013888:	465a      	mov	r2, fp
 801388a:	4013      	ands	r3, r2
 801388c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013890:	f04f 32ff 	mov.w	r2, #4294967295
 8013894:	d81b      	bhi.n	80138ce <_strtod_l+0x8c6>
 8013896:	0d1b      	lsrs	r3, r3, #20
 8013898:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801389c:	fa02 f303 	lsl.w	r3, r2, r3
 80138a0:	4299      	cmp	r1, r3
 80138a2:	d119      	bne.n	80138d8 <_strtod_l+0x8d0>
 80138a4:	4b96      	ldr	r3, [pc, #600]	@ (8013b00 <_strtod_l+0xaf8>)
 80138a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138a8:	429a      	cmp	r2, r3
 80138aa:	d102      	bne.n	80138b2 <_strtod_l+0x8aa>
 80138ac:	3101      	adds	r1, #1
 80138ae:	f43f adca 	beq.w	8013446 <_strtod_l+0x43e>
 80138b2:	4b92      	ldr	r3, [pc, #584]	@ (8013afc <_strtod_l+0xaf4>)
 80138b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138b6:	401a      	ands	r2, r3
 80138b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80138bc:	f04f 0a00 	mov.w	sl, #0
 80138c0:	9b08      	ldr	r3, [sp, #32]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d1b8      	bne.n	8013838 <_strtod_l+0x830>
 80138c6:	e5c9      	b.n	801345c <_strtod_l+0x454>
 80138c8:	f04f 33ff 	mov.w	r3, #4294967295
 80138cc:	e7e8      	b.n	80138a0 <_strtod_l+0x898>
 80138ce:	4613      	mov	r3, r2
 80138d0:	e7e6      	b.n	80138a0 <_strtod_l+0x898>
 80138d2:	ea53 030a 	orrs.w	r3, r3, sl
 80138d6:	d0a1      	beq.n	801381c <_strtod_l+0x814>
 80138d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80138da:	b1db      	cbz	r3, 8013914 <_strtod_l+0x90c>
 80138dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138de:	4213      	tst	r3, r2
 80138e0:	d0ee      	beq.n	80138c0 <_strtod_l+0x8b8>
 80138e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138e4:	9a08      	ldr	r2, [sp, #32]
 80138e6:	4650      	mov	r0, sl
 80138e8:	4659      	mov	r1, fp
 80138ea:	b1bb      	cbz	r3, 801391c <_strtod_l+0x914>
 80138ec:	f7ff fb6e 	bl	8012fcc <sulp>
 80138f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80138f4:	ec53 2b10 	vmov	r2, r3, d0
 80138f8:	f7ec fce8 	bl	80002cc <__adddf3>
 80138fc:	4682      	mov	sl, r0
 80138fe:	468b      	mov	fp, r1
 8013900:	e7de      	b.n	80138c0 <_strtod_l+0x8b8>
 8013902:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013906:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801390a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801390e:	f04f 3aff 	mov.w	sl, #4294967295
 8013912:	e7d5      	b.n	80138c0 <_strtod_l+0x8b8>
 8013914:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013916:	ea13 0f0a 	tst.w	r3, sl
 801391a:	e7e1      	b.n	80138e0 <_strtod_l+0x8d8>
 801391c:	f7ff fb56 	bl	8012fcc <sulp>
 8013920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013924:	ec53 2b10 	vmov	r2, r3, d0
 8013928:	f7ec fcce 	bl	80002c8 <__aeabi_dsub>
 801392c:	2200      	movs	r2, #0
 801392e:	2300      	movs	r3, #0
 8013930:	4682      	mov	sl, r0
 8013932:	468b      	mov	fp, r1
 8013934:	f7ed f8e8 	bl	8000b08 <__aeabi_dcmpeq>
 8013938:	2800      	cmp	r0, #0
 801393a:	d0c1      	beq.n	80138c0 <_strtod_l+0x8b8>
 801393c:	e619      	b.n	8013572 <_strtod_l+0x56a>
 801393e:	4641      	mov	r1, r8
 8013940:	4620      	mov	r0, r4
 8013942:	f7ff facd 	bl	8012ee0 <__ratio>
 8013946:	ec57 6b10 	vmov	r6, r7, d0
 801394a:	2200      	movs	r2, #0
 801394c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013950:	4630      	mov	r0, r6
 8013952:	4639      	mov	r1, r7
 8013954:	f7ed f8ec 	bl	8000b30 <__aeabi_dcmple>
 8013958:	2800      	cmp	r0, #0
 801395a:	d06f      	beq.n	8013a3c <_strtod_l+0xa34>
 801395c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801395e:	2b00      	cmp	r3, #0
 8013960:	d17a      	bne.n	8013a58 <_strtod_l+0xa50>
 8013962:	f1ba 0f00 	cmp.w	sl, #0
 8013966:	d158      	bne.n	8013a1a <_strtod_l+0xa12>
 8013968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801396a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801396e:	2b00      	cmp	r3, #0
 8013970:	d15a      	bne.n	8013a28 <_strtod_l+0xa20>
 8013972:	4b64      	ldr	r3, [pc, #400]	@ (8013b04 <_strtod_l+0xafc>)
 8013974:	2200      	movs	r2, #0
 8013976:	4630      	mov	r0, r6
 8013978:	4639      	mov	r1, r7
 801397a:	f7ed f8cf 	bl	8000b1c <__aeabi_dcmplt>
 801397e:	2800      	cmp	r0, #0
 8013980:	d159      	bne.n	8013a36 <_strtod_l+0xa2e>
 8013982:	4630      	mov	r0, r6
 8013984:	4639      	mov	r1, r7
 8013986:	4b60      	ldr	r3, [pc, #384]	@ (8013b08 <_strtod_l+0xb00>)
 8013988:	2200      	movs	r2, #0
 801398a:	f7ec fe55 	bl	8000638 <__aeabi_dmul>
 801398e:	4606      	mov	r6, r0
 8013990:	460f      	mov	r7, r1
 8013992:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013996:	9606      	str	r6, [sp, #24]
 8013998:	9307      	str	r3, [sp, #28]
 801399a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801399e:	4d57      	ldr	r5, [pc, #348]	@ (8013afc <_strtod_l+0xaf4>)
 80139a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80139a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139a6:	401d      	ands	r5, r3
 80139a8:	4b58      	ldr	r3, [pc, #352]	@ (8013b0c <_strtod_l+0xb04>)
 80139aa:	429d      	cmp	r5, r3
 80139ac:	f040 80b2 	bne.w	8013b14 <_strtod_l+0xb0c>
 80139b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80139b6:	ec4b ab10 	vmov	d0, sl, fp
 80139ba:	f7ff f9c9 	bl	8012d50 <__ulp>
 80139be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80139c2:	ec51 0b10 	vmov	r0, r1, d0
 80139c6:	f7ec fe37 	bl	8000638 <__aeabi_dmul>
 80139ca:	4652      	mov	r2, sl
 80139cc:	465b      	mov	r3, fp
 80139ce:	f7ec fc7d 	bl	80002cc <__adddf3>
 80139d2:	460b      	mov	r3, r1
 80139d4:	4949      	ldr	r1, [pc, #292]	@ (8013afc <_strtod_l+0xaf4>)
 80139d6:	4a4e      	ldr	r2, [pc, #312]	@ (8013b10 <_strtod_l+0xb08>)
 80139d8:	4019      	ands	r1, r3
 80139da:	4291      	cmp	r1, r2
 80139dc:	4682      	mov	sl, r0
 80139de:	d942      	bls.n	8013a66 <_strtod_l+0xa5e>
 80139e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80139e2:	4b47      	ldr	r3, [pc, #284]	@ (8013b00 <_strtod_l+0xaf8>)
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d103      	bne.n	80139f0 <_strtod_l+0x9e8>
 80139e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139ea:	3301      	adds	r3, #1
 80139ec:	f43f ad2b 	beq.w	8013446 <_strtod_l+0x43e>
 80139f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013b00 <_strtod_l+0xaf8>
 80139f4:	f04f 3aff 	mov.w	sl, #4294967295
 80139f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80139fa:	9805      	ldr	r0, [sp, #20]
 80139fc:	f7fe fe74 	bl	80126e8 <_Bfree>
 8013a00:	9805      	ldr	r0, [sp, #20]
 8013a02:	4649      	mov	r1, r9
 8013a04:	f7fe fe70 	bl	80126e8 <_Bfree>
 8013a08:	9805      	ldr	r0, [sp, #20]
 8013a0a:	4641      	mov	r1, r8
 8013a0c:	f7fe fe6c 	bl	80126e8 <_Bfree>
 8013a10:	9805      	ldr	r0, [sp, #20]
 8013a12:	4621      	mov	r1, r4
 8013a14:	f7fe fe68 	bl	80126e8 <_Bfree>
 8013a18:	e618      	b.n	801364c <_strtod_l+0x644>
 8013a1a:	f1ba 0f01 	cmp.w	sl, #1
 8013a1e:	d103      	bne.n	8013a28 <_strtod_l+0xa20>
 8013a20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	f43f ada5 	beq.w	8013572 <_strtod_l+0x56a>
 8013a28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013ad8 <_strtod_l+0xad0>
 8013a2c:	4f35      	ldr	r7, [pc, #212]	@ (8013b04 <_strtod_l+0xafc>)
 8013a2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013a32:	2600      	movs	r6, #0
 8013a34:	e7b1      	b.n	801399a <_strtod_l+0x992>
 8013a36:	4f34      	ldr	r7, [pc, #208]	@ (8013b08 <_strtod_l+0xb00>)
 8013a38:	2600      	movs	r6, #0
 8013a3a:	e7aa      	b.n	8013992 <_strtod_l+0x98a>
 8013a3c:	4b32      	ldr	r3, [pc, #200]	@ (8013b08 <_strtod_l+0xb00>)
 8013a3e:	4630      	mov	r0, r6
 8013a40:	4639      	mov	r1, r7
 8013a42:	2200      	movs	r2, #0
 8013a44:	f7ec fdf8 	bl	8000638 <__aeabi_dmul>
 8013a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a4a:	4606      	mov	r6, r0
 8013a4c:	460f      	mov	r7, r1
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d09f      	beq.n	8013992 <_strtod_l+0x98a>
 8013a52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013a56:	e7a0      	b.n	801399a <_strtod_l+0x992>
 8013a58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013ae0 <_strtod_l+0xad8>
 8013a5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013a60:	ec57 6b17 	vmov	r6, r7, d7
 8013a64:	e799      	b.n	801399a <_strtod_l+0x992>
 8013a66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013a6a:	9b08      	ldr	r3, [sp, #32]
 8013a6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d1c1      	bne.n	80139f8 <_strtod_l+0x9f0>
 8013a74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013a78:	0d1b      	lsrs	r3, r3, #20
 8013a7a:	051b      	lsls	r3, r3, #20
 8013a7c:	429d      	cmp	r5, r3
 8013a7e:	d1bb      	bne.n	80139f8 <_strtod_l+0x9f0>
 8013a80:	4630      	mov	r0, r6
 8013a82:	4639      	mov	r1, r7
 8013a84:	f7ed f938 	bl	8000cf8 <__aeabi_d2lz>
 8013a88:	f7ec fda8 	bl	80005dc <__aeabi_l2d>
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	460b      	mov	r3, r1
 8013a90:	4630      	mov	r0, r6
 8013a92:	4639      	mov	r1, r7
 8013a94:	f7ec fc18 	bl	80002c8 <__aeabi_dsub>
 8013a98:	460b      	mov	r3, r1
 8013a9a:	4602      	mov	r2, r0
 8013a9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013aa0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013aa6:	ea46 060a 	orr.w	r6, r6, sl
 8013aaa:	431e      	orrs	r6, r3
 8013aac:	d06f      	beq.n	8013b8e <_strtod_l+0xb86>
 8013aae:	a30e      	add	r3, pc, #56	@ (adr r3, 8013ae8 <_strtod_l+0xae0>)
 8013ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab4:	f7ed f832 	bl	8000b1c <__aeabi_dcmplt>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	f47f accf 	bne.w	801345c <_strtod_l+0x454>
 8013abe:	a30c      	add	r3, pc, #48	@ (adr r3, 8013af0 <_strtod_l+0xae8>)
 8013ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013ac8:	f7ed f846 	bl	8000b58 <__aeabi_dcmpgt>
 8013acc:	2800      	cmp	r0, #0
 8013ace:	d093      	beq.n	80139f8 <_strtod_l+0x9f0>
 8013ad0:	e4c4      	b.n	801345c <_strtod_l+0x454>
 8013ad2:	bf00      	nop
 8013ad4:	f3af 8000 	nop.w
 8013ad8:	00000000 	.word	0x00000000
 8013adc:	bff00000 	.word	0xbff00000
 8013ae0:	00000000 	.word	0x00000000
 8013ae4:	3ff00000 	.word	0x3ff00000
 8013ae8:	94a03595 	.word	0x94a03595
 8013aec:	3fdfffff 	.word	0x3fdfffff
 8013af0:	35afe535 	.word	0x35afe535
 8013af4:	3fe00000 	.word	0x3fe00000
 8013af8:	000fffff 	.word	0x000fffff
 8013afc:	7ff00000 	.word	0x7ff00000
 8013b00:	7fefffff 	.word	0x7fefffff
 8013b04:	3ff00000 	.word	0x3ff00000
 8013b08:	3fe00000 	.word	0x3fe00000
 8013b0c:	7fe00000 	.word	0x7fe00000
 8013b10:	7c9fffff 	.word	0x7c9fffff
 8013b14:	9b08      	ldr	r3, [sp, #32]
 8013b16:	b323      	cbz	r3, 8013b62 <_strtod_l+0xb5a>
 8013b18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013b1c:	d821      	bhi.n	8013b62 <_strtod_l+0xb5a>
 8013b1e:	a328      	add	r3, pc, #160	@ (adr r3, 8013bc0 <_strtod_l+0xbb8>)
 8013b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b24:	4630      	mov	r0, r6
 8013b26:	4639      	mov	r1, r7
 8013b28:	f7ed f802 	bl	8000b30 <__aeabi_dcmple>
 8013b2c:	b1a0      	cbz	r0, 8013b58 <_strtod_l+0xb50>
 8013b2e:	4639      	mov	r1, r7
 8013b30:	4630      	mov	r0, r6
 8013b32:	f7ed f859 	bl	8000be8 <__aeabi_d2uiz>
 8013b36:	2801      	cmp	r0, #1
 8013b38:	bf38      	it	cc
 8013b3a:	2001      	movcc	r0, #1
 8013b3c:	f7ec fd02 	bl	8000544 <__aeabi_ui2d>
 8013b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b42:	4606      	mov	r6, r0
 8013b44:	460f      	mov	r7, r1
 8013b46:	b9fb      	cbnz	r3, 8013b88 <_strtod_l+0xb80>
 8013b48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013b4c:	9014      	str	r0, [sp, #80]	@ 0x50
 8013b4e:	9315      	str	r3, [sp, #84]	@ 0x54
 8013b50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013b54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013b58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013b5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013b5e:	1b5b      	subs	r3, r3, r5
 8013b60:	9311      	str	r3, [sp, #68]	@ 0x44
 8013b62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013b66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013b6a:	f7ff f8f1 	bl	8012d50 <__ulp>
 8013b6e:	4650      	mov	r0, sl
 8013b70:	ec53 2b10 	vmov	r2, r3, d0
 8013b74:	4659      	mov	r1, fp
 8013b76:	f7ec fd5f 	bl	8000638 <__aeabi_dmul>
 8013b7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013b7e:	f7ec fba5 	bl	80002cc <__adddf3>
 8013b82:	4682      	mov	sl, r0
 8013b84:	468b      	mov	fp, r1
 8013b86:	e770      	b.n	8013a6a <_strtod_l+0xa62>
 8013b88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013b8c:	e7e0      	b.n	8013b50 <_strtod_l+0xb48>
 8013b8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8013bc8 <_strtod_l+0xbc0>)
 8013b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b94:	f7ec ffc2 	bl	8000b1c <__aeabi_dcmplt>
 8013b98:	e798      	b.n	8013acc <_strtod_l+0xac4>
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013ba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ba2:	6013      	str	r3, [r2, #0]
 8013ba4:	f7ff ba6d 	b.w	8013082 <_strtod_l+0x7a>
 8013ba8:	2a65      	cmp	r2, #101	@ 0x65
 8013baa:	f43f ab66 	beq.w	801327a <_strtod_l+0x272>
 8013bae:	2a45      	cmp	r2, #69	@ 0x45
 8013bb0:	f43f ab63 	beq.w	801327a <_strtod_l+0x272>
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	f7ff bb9e 	b.w	80132f6 <_strtod_l+0x2ee>
 8013bba:	bf00      	nop
 8013bbc:	f3af 8000 	nop.w
 8013bc0:	ffc00000 	.word	0xffc00000
 8013bc4:	41dfffff 	.word	0x41dfffff
 8013bc8:	94a03595 	.word	0x94a03595
 8013bcc:	3fcfffff 	.word	0x3fcfffff

08013bd0 <_strtod_r>:
 8013bd0:	4b01      	ldr	r3, [pc, #4]	@ (8013bd8 <_strtod_r+0x8>)
 8013bd2:	f7ff ba19 	b.w	8013008 <_strtod_l>
 8013bd6:	bf00      	nop
 8013bd8:	20000098 	.word	0x20000098

08013bdc <_strtol_l.constprop.0>:
 8013bdc:	2b24      	cmp	r3, #36	@ 0x24
 8013bde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013be2:	4686      	mov	lr, r0
 8013be4:	4690      	mov	r8, r2
 8013be6:	d801      	bhi.n	8013bec <_strtol_l.constprop.0+0x10>
 8013be8:	2b01      	cmp	r3, #1
 8013bea:	d106      	bne.n	8013bfa <_strtol_l.constprop.0+0x1e>
 8013bec:	f7fd fdbc 	bl	8011768 <__errno>
 8013bf0:	2316      	movs	r3, #22
 8013bf2:	6003      	str	r3, [r0, #0]
 8013bf4:	2000      	movs	r0, #0
 8013bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bfa:	4834      	ldr	r0, [pc, #208]	@ (8013ccc <_strtol_l.constprop.0+0xf0>)
 8013bfc:	460d      	mov	r5, r1
 8013bfe:	462a      	mov	r2, r5
 8013c00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c04:	5d06      	ldrb	r6, [r0, r4]
 8013c06:	f016 0608 	ands.w	r6, r6, #8
 8013c0a:	d1f8      	bne.n	8013bfe <_strtol_l.constprop.0+0x22>
 8013c0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8013c0e:	d12d      	bne.n	8013c6c <_strtol_l.constprop.0+0x90>
 8013c10:	782c      	ldrb	r4, [r5, #0]
 8013c12:	2601      	movs	r6, #1
 8013c14:	1c95      	adds	r5, r2, #2
 8013c16:	f033 0210 	bics.w	r2, r3, #16
 8013c1a:	d109      	bne.n	8013c30 <_strtol_l.constprop.0+0x54>
 8013c1c:	2c30      	cmp	r4, #48	@ 0x30
 8013c1e:	d12a      	bne.n	8013c76 <_strtol_l.constprop.0+0x9a>
 8013c20:	782a      	ldrb	r2, [r5, #0]
 8013c22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013c26:	2a58      	cmp	r2, #88	@ 0x58
 8013c28:	d125      	bne.n	8013c76 <_strtol_l.constprop.0+0x9a>
 8013c2a:	786c      	ldrb	r4, [r5, #1]
 8013c2c:	2310      	movs	r3, #16
 8013c2e:	3502      	adds	r5, #2
 8013c30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013c34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013c38:	2200      	movs	r2, #0
 8013c3a:	fbbc f9f3 	udiv	r9, ip, r3
 8013c3e:	4610      	mov	r0, r2
 8013c40:	fb03 ca19 	mls	sl, r3, r9, ip
 8013c44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013c48:	2f09      	cmp	r7, #9
 8013c4a:	d81b      	bhi.n	8013c84 <_strtol_l.constprop.0+0xa8>
 8013c4c:	463c      	mov	r4, r7
 8013c4e:	42a3      	cmp	r3, r4
 8013c50:	dd27      	ble.n	8013ca2 <_strtol_l.constprop.0+0xc6>
 8013c52:	1c57      	adds	r7, r2, #1
 8013c54:	d007      	beq.n	8013c66 <_strtol_l.constprop.0+0x8a>
 8013c56:	4581      	cmp	r9, r0
 8013c58:	d320      	bcc.n	8013c9c <_strtol_l.constprop.0+0xc0>
 8013c5a:	d101      	bne.n	8013c60 <_strtol_l.constprop.0+0x84>
 8013c5c:	45a2      	cmp	sl, r4
 8013c5e:	db1d      	blt.n	8013c9c <_strtol_l.constprop.0+0xc0>
 8013c60:	fb00 4003 	mla	r0, r0, r3, r4
 8013c64:	2201      	movs	r2, #1
 8013c66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c6a:	e7eb      	b.n	8013c44 <_strtol_l.constprop.0+0x68>
 8013c6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8013c6e:	bf04      	itt	eq
 8013c70:	782c      	ldrbeq	r4, [r5, #0]
 8013c72:	1c95      	addeq	r5, r2, #2
 8013c74:	e7cf      	b.n	8013c16 <_strtol_l.constprop.0+0x3a>
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1da      	bne.n	8013c30 <_strtol_l.constprop.0+0x54>
 8013c7a:	2c30      	cmp	r4, #48	@ 0x30
 8013c7c:	bf0c      	ite	eq
 8013c7e:	2308      	moveq	r3, #8
 8013c80:	230a      	movne	r3, #10
 8013c82:	e7d5      	b.n	8013c30 <_strtol_l.constprop.0+0x54>
 8013c84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013c88:	2f19      	cmp	r7, #25
 8013c8a:	d801      	bhi.n	8013c90 <_strtol_l.constprop.0+0xb4>
 8013c8c:	3c37      	subs	r4, #55	@ 0x37
 8013c8e:	e7de      	b.n	8013c4e <_strtol_l.constprop.0+0x72>
 8013c90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013c94:	2f19      	cmp	r7, #25
 8013c96:	d804      	bhi.n	8013ca2 <_strtol_l.constprop.0+0xc6>
 8013c98:	3c57      	subs	r4, #87	@ 0x57
 8013c9a:	e7d8      	b.n	8013c4e <_strtol_l.constprop.0+0x72>
 8013c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8013ca0:	e7e1      	b.n	8013c66 <_strtol_l.constprop.0+0x8a>
 8013ca2:	1c53      	adds	r3, r2, #1
 8013ca4:	d108      	bne.n	8013cb8 <_strtol_l.constprop.0+0xdc>
 8013ca6:	2322      	movs	r3, #34	@ 0x22
 8013ca8:	f8ce 3000 	str.w	r3, [lr]
 8013cac:	4660      	mov	r0, ip
 8013cae:	f1b8 0f00 	cmp.w	r8, #0
 8013cb2:	d0a0      	beq.n	8013bf6 <_strtol_l.constprop.0+0x1a>
 8013cb4:	1e69      	subs	r1, r5, #1
 8013cb6:	e006      	b.n	8013cc6 <_strtol_l.constprop.0+0xea>
 8013cb8:	b106      	cbz	r6, 8013cbc <_strtol_l.constprop.0+0xe0>
 8013cba:	4240      	negs	r0, r0
 8013cbc:	f1b8 0f00 	cmp.w	r8, #0
 8013cc0:	d099      	beq.n	8013bf6 <_strtol_l.constprop.0+0x1a>
 8013cc2:	2a00      	cmp	r2, #0
 8013cc4:	d1f6      	bne.n	8013cb4 <_strtol_l.constprop.0+0xd8>
 8013cc6:	f8c8 1000 	str.w	r1, [r8]
 8013cca:	e794      	b.n	8013bf6 <_strtol_l.constprop.0+0x1a>
 8013ccc:	08018a99 	.word	0x08018a99

08013cd0 <_strtol_r>:
 8013cd0:	f7ff bf84 	b.w	8013bdc <_strtol_l.constprop.0>

08013cd4 <__ssputs_r>:
 8013cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cd8:	688e      	ldr	r6, [r1, #8]
 8013cda:	461f      	mov	r7, r3
 8013cdc:	42be      	cmp	r6, r7
 8013cde:	680b      	ldr	r3, [r1, #0]
 8013ce0:	4682      	mov	sl, r0
 8013ce2:	460c      	mov	r4, r1
 8013ce4:	4690      	mov	r8, r2
 8013ce6:	d82d      	bhi.n	8013d44 <__ssputs_r+0x70>
 8013ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013cec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013cf0:	d026      	beq.n	8013d40 <__ssputs_r+0x6c>
 8013cf2:	6965      	ldr	r5, [r4, #20]
 8013cf4:	6909      	ldr	r1, [r1, #16]
 8013cf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013cfa:	eba3 0901 	sub.w	r9, r3, r1
 8013cfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d02:	1c7b      	adds	r3, r7, #1
 8013d04:	444b      	add	r3, r9
 8013d06:	106d      	asrs	r5, r5, #1
 8013d08:	429d      	cmp	r5, r3
 8013d0a:	bf38      	it	cc
 8013d0c:	461d      	movcc	r5, r3
 8013d0e:	0553      	lsls	r3, r2, #21
 8013d10:	d527      	bpl.n	8013d62 <__ssputs_r+0x8e>
 8013d12:	4629      	mov	r1, r5
 8013d14:	f7fe fc1c 	bl	8012550 <_malloc_r>
 8013d18:	4606      	mov	r6, r0
 8013d1a:	b360      	cbz	r0, 8013d76 <__ssputs_r+0xa2>
 8013d1c:	6921      	ldr	r1, [r4, #16]
 8013d1e:	464a      	mov	r2, r9
 8013d20:	f000 fa18 	bl	8014154 <memcpy>
 8013d24:	89a3      	ldrh	r3, [r4, #12]
 8013d26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d2e:	81a3      	strh	r3, [r4, #12]
 8013d30:	6126      	str	r6, [r4, #16]
 8013d32:	6165      	str	r5, [r4, #20]
 8013d34:	444e      	add	r6, r9
 8013d36:	eba5 0509 	sub.w	r5, r5, r9
 8013d3a:	6026      	str	r6, [r4, #0]
 8013d3c:	60a5      	str	r5, [r4, #8]
 8013d3e:	463e      	mov	r6, r7
 8013d40:	42be      	cmp	r6, r7
 8013d42:	d900      	bls.n	8013d46 <__ssputs_r+0x72>
 8013d44:	463e      	mov	r6, r7
 8013d46:	6820      	ldr	r0, [r4, #0]
 8013d48:	4632      	mov	r2, r6
 8013d4a:	4641      	mov	r1, r8
 8013d4c:	f000 f9c6 	bl	80140dc <memmove>
 8013d50:	68a3      	ldr	r3, [r4, #8]
 8013d52:	1b9b      	subs	r3, r3, r6
 8013d54:	60a3      	str	r3, [r4, #8]
 8013d56:	6823      	ldr	r3, [r4, #0]
 8013d58:	4433      	add	r3, r6
 8013d5a:	6023      	str	r3, [r4, #0]
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d62:	462a      	mov	r2, r5
 8013d64:	f000 fd89 	bl	801487a <_realloc_r>
 8013d68:	4606      	mov	r6, r0
 8013d6a:	2800      	cmp	r0, #0
 8013d6c:	d1e0      	bne.n	8013d30 <__ssputs_r+0x5c>
 8013d6e:	6921      	ldr	r1, [r4, #16]
 8013d70:	4650      	mov	r0, sl
 8013d72:	f7fe fb79 	bl	8012468 <_free_r>
 8013d76:	230c      	movs	r3, #12
 8013d78:	f8ca 3000 	str.w	r3, [sl]
 8013d7c:	89a3      	ldrh	r3, [r4, #12]
 8013d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d82:	81a3      	strh	r3, [r4, #12]
 8013d84:	f04f 30ff 	mov.w	r0, #4294967295
 8013d88:	e7e9      	b.n	8013d5e <__ssputs_r+0x8a>
	...

08013d8c <_svfiprintf_r>:
 8013d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d90:	4698      	mov	r8, r3
 8013d92:	898b      	ldrh	r3, [r1, #12]
 8013d94:	061b      	lsls	r3, r3, #24
 8013d96:	b09d      	sub	sp, #116	@ 0x74
 8013d98:	4607      	mov	r7, r0
 8013d9a:	460d      	mov	r5, r1
 8013d9c:	4614      	mov	r4, r2
 8013d9e:	d510      	bpl.n	8013dc2 <_svfiprintf_r+0x36>
 8013da0:	690b      	ldr	r3, [r1, #16]
 8013da2:	b973      	cbnz	r3, 8013dc2 <_svfiprintf_r+0x36>
 8013da4:	2140      	movs	r1, #64	@ 0x40
 8013da6:	f7fe fbd3 	bl	8012550 <_malloc_r>
 8013daa:	6028      	str	r0, [r5, #0]
 8013dac:	6128      	str	r0, [r5, #16]
 8013dae:	b930      	cbnz	r0, 8013dbe <_svfiprintf_r+0x32>
 8013db0:	230c      	movs	r3, #12
 8013db2:	603b      	str	r3, [r7, #0]
 8013db4:	f04f 30ff 	mov.w	r0, #4294967295
 8013db8:	b01d      	add	sp, #116	@ 0x74
 8013dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dbe:	2340      	movs	r3, #64	@ 0x40
 8013dc0:	616b      	str	r3, [r5, #20]
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013dc6:	2320      	movs	r3, #32
 8013dc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013dd0:	2330      	movs	r3, #48	@ 0x30
 8013dd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013f70 <_svfiprintf_r+0x1e4>
 8013dd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013dda:	f04f 0901 	mov.w	r9, #1
 8013dde:	4623      	mov	r3, r4
 8013de0:	469a      	mov	sl, r3
 8013de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013de6:	b10a      	cbz	r2, 8013dec <_svfiprintf_r+0x60>
 8013de8:	2a25      	cmp	r2, #37	@ 0x25
 8013dea:	d1f9      	bne.n	8013de0 <_svfiprintf_r+0x54>
 8013dec:	ebba 0b04 	subs.w	fp, sl, r4
 8013df0:	d00b      	beq.n	8013e0a <_svfiprintf_r+0x7e>
 8013df2:	465b      	mov	r3, fp
 8013df4:	4622      	mov	r2, r4
 8013df6:	4629      	mov	r1, r5
 8013df8:	4638      	mov	r0, r7
 8013dfa:	f7ff ff6b 	bl	8013cd4 <__ssputs_r>
 8013dfe:	3001      	adds	r0, #1
 8013e00:	f000 80a7 	beq.w	8013f52 <_svfiprintf_r+0x1c6>
 8013e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e06:	445a      	add	r2, fp
 8013e08:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	f000 809f 	beq.w	8013f52 <_svfiprintf_r+0x1c6>
 8013e14:	2300      	movs	r3, #0
 8013e16:	f04f 32ff 	mov.w	r2, #4294967295
 8013e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e1e:	f10a 0a01 	add.w	sl, sl, #1
 8013e22:	9304      	str	r3, [sp, #16]
 8013e24:	9307      	str	r3, [sp, #28]
 8013e26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e2c:	4654      	mov	r4, sl
 8013e2e:	2205      	movs	r2, #5
 8013e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e34:	484e      	ldr	r0, [pc, #312]	@ (8013f70 <_svfiprintf_r+0x1e4>)
 8013e36:	f7ec f9eb 	bl	8000210 <memchr>
 8013e3a:	9a04      	ldr	r2, [sp, #16]
 8013e3c:	b9d8      	cbnz	r0, 8013e76 <_svfiprintf_r+0xea>
 8013e3e:	06d0      	lsls	r0, r2, #27
 8013e40:	bf44      	itt	mi
 8013e42:	2320      	movmi	r3, #32
 8013e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e48:	0711      	lsls	r1, r2, #28
 8013e4a:	bf44      	itt	mi
 8013e4c:	232b      	movmi	r3, #43	@ 0x2b
 8013e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e52:	f89a 3000 	ldrb.w	r3, [sl]
 8013e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e58:	d015      	beq.n	8013e86 <_svfiprintf_r+0xfa>
 8013e5a:	9a07      	ldr	r2, [sp, #28]
 8013e5c:	4654      	mov	r4, sl
 8013e5e:	2000      	movs	r0, #0
 8013e60:	f04f 0c0a 	mov.w	ip, #10
 8013e64:	4621      	mov	r1, r4
 8013e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e6a:	3b30      	subs	r3, #48	@ 0x30
 8013e6c:	2b09      	cmp	r3, #9
 8013e6e:	d94b      	bls.n	8013f08 <_svfiprintf_r+0x17c>
 8013e70:	b1b0      	cbz	r0, 8013ea0 <_svfiprintf_r+0x114>
 8013e72:	9207      	str	r2, [sp, #28]
 8013e74:	e014      	b.n	8013ea0 <_svfiprintf_r+0x114>
 8013e76:	eba0 0308 	sub.w	r3, r0, r8
 8013e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8013e7e:	4313      	orrs	r3, r2
 8013e80:	9304      	str	r3, [sp, #16]
 8013e82:	46a2      	mov	sl, r4
 8013e84:	e7d2      	b.n	8013e2c <_svfiprintf_r+0xa0>
 8013e86:	9b03      	ldr	r3, [sp, #12]
 8013e88:	1d19      	adds	r1, r3, #4
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	9103      	str	r1, [sp, #12]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	bfbb      	ittet	lt
 8013e92:	425b      	neglt	r3, r3
 8013e94:	f042 0202 	orrlt.w	r2, r2, #2
 8013e98:	9307      	strge	r3, [sp, #28]
 8013e9a:	9307      	strlt	r3, [sp, #28]
 8013e9c:	bfb8      	it	lt
 8013e9e:	9204      	strlt	r2, [sp, #16]
 8013ea0:	7823      	ldrb	r3, [r4, #0]
 8013ea2:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ea4:	d10a      	bne.n	8013ebc <_svfiprintf_r+0x130>
 8013ea6:	7863      	ldrb	r3, [r4, #1]
 8013ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013eaa:	d132      	bne.n	8013f12 <_svfiprintf_r+0x186>
 8013eac:	9b03      	ldr	r3, [sp, #12]
 8013eae:	1d1a      	adds	r2, r3, #4
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	9203      	str	r2, [sp, #12]
 8013eb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013eb8:	3402      	adds	r4, #2
 8013eba:	9305      	str	r3, [sp, #20]
 8013ebc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013f80 <_svfiprintf_r+0x1f4>
 8013ec0:	7821      	ldrb	r1, [r4, #0]
 8013ec2:	2203      	movs	r2, #3
 8013ec4:	4650      	mov	r0, sl
 8013ec6:	f7ec f9a3 	bl	8000210 <memchr>
 8013eca:	b138      	cbz	r0, 8013edc <_svfiprintf_r+0x150>
 8013ecc:	9b04      	ldr	r3, [sp, #16]
 8013ece:	eba0 000a 	sub.w	r0, r0, sl
 8013ed2:	2240      	movs	r2, #64	@ 0x40
 8013ed4:	4082      	lsls	r2, r0
 8013ed6:	4313      	orrs	r3, r2
 8013ed8:	3401      	adds	r4, #1
 8013eda:	9304      	str	r3, [sp, #16]
 8013edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ee0:	4824      	ldr	r0, [pc, #144]	@ (8013f74 <_svfiprintf_r+0x1e8>)
 8013ee2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013ee6:	2206      	movs	r2, #6
 8013ee8:	f7ec f992 	bl	8000210 <memchr>
 8013eec:	2800      	cmp	r0, #0
 8013eee:	d036      	beq.n	8013f5e <_svfiprintf_r+0x1d2>
 8013ef0:	4b21      	ldr	r3, [pc, #132]	@ (8013f78 <_svfiprintf_r+0x1ec>)
 8013ef2:	bb1b      	cbnz	r3, 8013f3c <_svfiprintf_r+0x1b0>
 8013ef4:	9b03      	ldr	r3, [sp, #12]
 8013ef6:	3307      	adds	r3, #7
 8013ef8:	f023 0307 	bic.w	r3, r3, #7
 8013efc:	3308      	adds	r3, #8
 8013efe:	9303      	str	r3, [sp, #12]
 8013f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f02:	4433      	add	r3, r6
 8013f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f06:	e76a      	b.n	8013dde <_svfiprintf_r+0x52>
 8013f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f0c:	460c      	mov	r4, r1
 8013f0e:	2001      	movs	r0, #1
 8013f10:	e7a8      	b.n	8013e64 <_svfiprintf_r+0xd8>
 8013f12:	2300      	movs	r3, #0
 8013f14:	3401      	adds	r4, #1
 8013f16:	9305      	str	r3, [sp, #20]
 8013f18:	4619      	mov	r1, r3
 8013f1a:	f04f 0c0a 	mov.w	ip, #10
 8013f1e:	4620      	mov	r0, r4
 8013f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f24:	3a30      	subs	r2, #48	@ 0x30
 8013f26:	2a09      	cmp	r2, #9
 8013f28:	d903      	bls.n	8013f32 <_svfiprintf_r+0x1a6>
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d0c6      	beq.n	8013ebc <_svfiprintf_r+0x130>
 8013f2e:	9105      	str	r1, [sp, #20]
 8013f30:	e7c4      	b.n	8013ebc <_svfiprintf_r+0x130>
 8013f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f36:	4604      	mov	r4, r0
 8013f38:	2301      	movs	r3, #1
 8013f3a:	e7f0      	b.n	8013f1e <_svfiprintf_r+0x192>
 8013f3c:	ab03      	add	r3, sp, #12
 8013f3e:	9300      	str	r3, [sp, #0]
 8013f40:	462a      	mov	r2, r5
 8013f42:	4b0e      	ldr	r3, [pc, #56]	@ (8013f7c <_svfiprintf_r+0x1f0>)
 8013f44:	a904      	add	r1, sp, #16
 8013f46:	4638      	mov	r0, r7
 8013f48:	f7fc fc96 	bl	8010878 <_printf_float>
 8013f4c:	1c42      	adds	r2, r0, #1
 8013f4e:	4606      	mov	r6, r0
 8013f50:	d1d6      	bne.n	8013f00 <_svfiprintf_r+0x174>
 8013f52:	89ab      	ldrh	r3, [r5, #12]
 8013f54:	065b      	lsls	r3, r3, #25
 8013f56:	f53f af2d 	bmi.w	8013db4 <_svfiprintf_r+0x28>
 8013f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013f5c:	e72c      	b.n	8013db8 <_svfiprintf_r+0x2c>
 8013f5e:	ab03      	add	r3, sp, #12
 8013f60:	9300      	str	r3, [sp, #0]
 8013f62:	462a      	mov	r2, r5
 8013f64:	4b05      	ldr	r3, [pc, #20]	@ (8013f7c <_svfiprintf_r+0x1f0>)
 8013f66:	a904      	add	r1, sp, #16
 8013f68:	4638      	mov	r0, r7
 8013f6a:	f7fc ff1d 	bl	8010da8 <_printf_i>
 8013f6e:	e7ed      	b.n	8013f4c <_svfiprintf_r+0x1c0>
 8013f70:	08018b99 	.word	0x08018b99
 8013f74:	08018ba3 	.word	0x08018ba3
 8013f78:	08010879 	.word	0x08010879
 8013f7c:	08013cd5 	.word	0x08013cd5
 8013f80:	08018b9f 	.word	0x08018b9f

08013f84 <__sflush_r>:
 8013f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f8c:	0716      	lsls	r6, r2, #28
 8013f8e:	4605      	mov	r5, r0
 8013f90:	460c      	mov	r4, r1
 8013f92:	d454      	bmi.n	801403e <__sflush_r+0xba>
 8013f94:	684b      	ldr	r3, [r1, #4]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	dc02      	bgt.n	8013fa0 <__sflush_r+0x1c>
 8013f9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	dd48      	ble.n	8014032 <__sflush_r+0xae>
 8013fa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013fa2:	2e00      	cmp	r6, #0
 8013fa4:	d045      	beq.n	8014032 <__sflush_r+0xae>
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013fac:	682f      	ldr	r7, [r5, #0]
 8013fae:	6a21      	ldr	r1, [r4, #32]
 8013fb0:	602b      	str	r3, [r5, #0]
 8013fb2:	d030      	beq.n	8014016 <__sflush_r+0x92>
 8013fb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013fb6:	89a3      	ldrh	r3, [r4, #12]
 8013fb8:	0759      	lsls	r1, r3, #29
 8013fba:	d505      	bpl.n	8013fc8 <__sflush_r+0x44>
 8013fbc:	6863      	ldr	r3, [r4, #4]
 8013fbe:	1ad2      	subs	r2, r2, r3
 8013fc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013fc2:	b10b      	cbz	r3, 8013fc8 <__sflush_r+0x44>
 8013fc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013fc6:	1ad2      	subs	r2, r2, r3
 8013fc8:	2300      	movs	r3, #0
 8013fca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013fcc:	6a21      	ldr	r1, [r4, #32]
 8013fce:	4628      	mov	r0, r5
 8013fd0:	47b0      	blx	r6
 8013fd2:	1c43      	adds	r3, r0, #1
 8013fd4:	89a3      	ldrh	r3, [r4, #12]
 8013fd6:	d106      	bne.n	8013fe6 <__sflush_r+0x62>
 8013fd8:	6829      	ldr	r1, [r5, #0]
 8013fda:	291d      	cmp	r1, #29
 8013fdc:	d82b      	bhi.n	8014036 <__sflush_r+0xb2>
 8013fde:	4a2a      	ldr	r2, [pc, #168]	@ (8014088 <__sflush_r+0x104>)
 8013fe0:	410a      	asrs	r2, r1
 8013fe2:	07d6      	lsls	r6, r2, #31
 8013fe4:	d427      	bmi.n	8014036 <__sflush_r+0xb2>
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	6062      	str	r2, [r4, #4]
 8013fea:	04d9      	lsls	r1, r3, #19
 8013fec:	6922      	ldr	r2, [r4, #16]
 8013fee:	6022      	str	r2, [r4, #0]
 8013ff0:	d504      	bpl.n	8013ffc <__sflush_r+0x78>
 8013ff2:	1c42      	adds	r2, r0, #1
 8013ff4:	d101      	bne.n	8013ffa <__sflush_r+0x76>
 8013ff6:	682b      	ldr	r3, [r5, #0]
 8013ff8:	b903      	cbnz	r3, 8013ffc <__sflush_r+0x78>
 8013ffa:	6560      	str	r0, [r4, #84]	@ 0x54
 8013ffc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ffe:	602f      	str	r7, [r5, #0]
 8014000:	b1b9      	cbz	r1, 8014032 <__sflush_r+0xae>
 8014002:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014006:	4299      	cmp	r1, r3
 8014008:	d002      	beq.n	8014010 <__sflush_r+0x8c>
 801400a:	4628      	mov	r0, r5
 801400c:	f7fe fa2c 	bl	8012468 <_free_r>
 8014010:	2300      	movs	r3, #0
 8014012:	6363      	str	r3, [r4, #52]	@ 0x34
 8014014:	e00d      	b.n	8014032 <__sflush_r+0xae>
 8014016:	2301      	movs	r3, #1
 8014018:	4628      	mov	r0, r5
 801401a:	47b0      	blx	r6
 801401c:	4602      	mov	r2, r0
 801401e:	1c50      	adds	r0, r2, #1
 8014020:	d1c9      	bne.n	8013fb6 <__sflush_r+0x32>
 8014022:	682b      	ldr	r3, [r5, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d0c6      	beq.n	8013fb6 <__sflush_r+0x32>
 8014028:	2b1d      	cmp	r3, #29
 801402a:	d001      	beq.n	8014030 <__sflush_r+0xac>
 801402c:	2b16      	cmp	r3, #22
 801402e:	d11e      	bne.n	801406e <__sflush_r+0xea>
 8014030:	602f      	str	r7, [r5, #0]
 8014032:	2000      	movs	r0, #0
 8014034:	e022      	b.n	801407c <__sflush_r+0xf8>
 8014036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801403a:	b21b      	sxth	r3, r3
 801403c:	e01b      	b.n	8014076 <__sflush_r+0xf2>
 801403e:	690f      	ldr	r7, [r1, #16]
 8014040:	2f00      	cmp	r7, #0
 8014042:	d0f6      	beq.n	8014032 <__sflush_r+0xae>
 8014044:	0793      	lsls	r3, r2, #30
 8014046:	680e      	ldr	r6, [r1, #0]
 8014048:	bf08      	it	eq
 801404a:	694b      	ldreq	r3, [r1, #20]
 801404c:	600f      	str	r7, [r1, #0]
 801404e:	bf18      	it	ne
 8014050:	2300      	movne	r3, #0
 8014052:	eba6 0807 	sub.w	r8, r6, r7
 8014056:	608b      	str	r3, [r1, #8]
 8014058:	f1b8 0f00 	cmp.w	r8, #0
 801405c:	dde9      	ble.n	8014032 <__sflush_r+0xae>
 801405e:	6a21      	ldr	r1, [r4, #32]
 8014060:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014062:	4643      	mov	r3, r8
 8014064:	463a      	mov	r2, r7
 8014066:	4628      	mov	r0, r5
 8014068:	47b0      	blx	r6
 801406a:	2800      	cmp	r0, #0
 801406c:	dc08      	bgt.n	8014080 <__sflush_r+0xfc>
 801406e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014076:	81a3      	strh	r3, [r4, #12]
 8014078:	f04f 30ff 	mov.w	r0, #4294967295
 801407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014080:	4407      	add	r7, r0
 8014082:	eba8 0800 	sub.w	r8, r8, r0
 8014086:	e7e7      	b.n	8014058 <__sflush_r+0xd4>
 8014088:	dfbffffe 	.word	0xdfbffffe

0801408c <_fflush_r>:
 801408c:	b538      	push	{r3, r4, r5, lr}
 801408e:	690b      	ldr	r3, [r1, #16]
 8014090:	4605      	mov	r5, r0
 8014092:	460c      	mov	r4, r1
 8014094:	b913      	cbnz	r3, 801409c <_fflush_r+0x10>
 8014096:	2500      	movs	r5, #0
 8014098:	4628      	mov	r0, r5
 801409a:	bd38      	pop	{r3, r4, r5, pc}
 801409c:	b118      	cbz	r0, 80140a6 <_fflush_r+0x1a>
 801409e:	6a03      	ldr	r3, [r0, #32]
 80140a0:	b90b      	cbnz	r3, 80140a6 <_fflush_r+0x1a>
 80140a2:	f7fd fa41 	bl	8011528 <__sinit>
 80140a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d0f3      	beq.n	8014096 <_fflush_r+0xa>
 80140ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80140b0:	07d0      	lsls	r0, r2, #31
 80140b2:	d404      	bmi.n	80140be <_fflush_r+0x32>
 80140b4:	0599      	lsls	r1, r3, #22
 80140b6:	d402      	bmi.n	80140be <_fflush_r+0x32>
 80140b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80140ba:	f7fd fb80 	bl	80117be <__retarget_lock_acquire_recursive>
 80140be:	4628      	mov	r0, r5
 80140c0:	4621      	mov	r1, r4
 80140c2:	f7ff ff5f 	bl	8013f84 <__sflush_r>
 80140c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80140c8:	07da      	lsls	r2, r3, #31
 80140ca:	4605      	mov	r5, r0
 80140cc:	d4e4      	bmi.n	8014098 <_fflush_r+0xc>
 80140ce:	89a3      	ldrh	r3, [r4, #12]
 80140d0:	059b      	lsls	r3, r3, #22
 80140d2:	d4e1      	bmi.n	8014098 <_fflush_r+0xc>
 80140d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80140d6:	f7fd fb73 	bl	80117c0 <__retarget_lock_release_recursive>
 80140da:	e7dd      	b.n	8014098 <_fflush_r+0xc>

080140dc <memmove>:
 80140dc:	4288      	cmp	r0, r1
 80140de:	b510      	push	{r4, lr}
 80140e0:	eb01 0402 	add.w	r4, r1, r2
 80140e4:	d902      	bls.n	80140ec <memmove+0x10>
 80140e6:	4284      	cmp	r4, r0
 80140e8:	4623      	mov	r3, r4
 80140ea:	d807      	bhi.n	80140fc <memmove+0x20>
 80140ec:	1e43      	subs	r3, r0, #1
 80140ee:	42a1      	cmp	r1, r4
 80140f0:	d008      	beq.n	8014104 <memmove+0x28>
 80140f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80140fa:	e7f8      	b.n	80140ee <memmove+0x12>
 80140fc:	4402      	add	r2, r0
 80140fe:	4601      	mov	r1, r0
 8014100:	428a      	cmp	r2, r1
 8014102:	d100      	bne.n	8014106 <memmove+0x2a>
 8014104:	bd10      	pop	{r4, pc}
 8014106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801410a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801410e:	e7f7      	b.n	8014100 <memmove+0x24>

08014110 <strncmp>:
 8014110:	b510      	push	{r4, lr}
 8014112:	b16a      	cbz	r2, 8014130 <strncmp+0x20>
 8014114:	3901      	subs	r1, #1
 8014116:	1884      	adds	r4, r0, r2
 8014118:	f810 2b01 	ldrb.w	r2, [r0], #1
 801411c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014120:	429a      	cmp	r2, r3
 8014122:	d103      	bne.n	801412c <strncmp+0x1c>
 8014124:	42a0      	cmp	r0, r4
 8014126:	d001      	beq.n	801412c <strncmp+0x1c>
 8014128:	2a00      	cmp	r2, #0
 801412a:	d1f5      	bne.n	8014118 <strncmp+0x8>
 801412c:	1ad0      	subs	r0, r2, r3
 801412e:	bd10      	pop	{r4, pc}
 8014130:	4610      	mov	r0, r2
 8014132:	e7fc      	b.n	801412e <strncmp+0x1e>

08014134 <_sbrk_r>:
 8014134:	b538      	push	{r3, r4, r5, lr}
 8014136:	4d06      	ldr	r5, [pc, #24]	@ (8014150 <_sbrk_r+0x1c>)
 8014138:	2300      	movs	r3, #0
 801413a:	4604      	mov	r4, r0
 801413c:	4608      	mov	r0, r1
 801413e:	602b      	str	r3, [r5, #0]
 8014140:	f7ee fb84 	bl	800284c <_sbrk>
 8014144:	1c43      	adds	r3, r0, #1
 8014146:	d102      	bne.n	801414e <_sbrk_r+0x1a>
 8014148:	682b      	ldr	r3, [r5, #0]
 801414a:	b103      	cbz	r3, 801414e <_sbrk_r+0x1a>
 801414c:	6023      	str	r3, [r4, #0]
 801414e:	bd38      	pop	{r3, r4, r5, pc}
 8014150:	20002a5c 	.word	0x20002a5c

08014154 <memcpy>:
 8014154:	440a      	add	r2, r1
 8014156:	4291      	cmp	r1, r2
 8014158:	f100 33ff 	add.w	r3, r0, #4294967295
 801415c:	d100      	bne.n	8014160 <memcpy+0xc>
 801415e:	4770      	bx	lr
 8014160:	b510      	push	{r4, lr}
 8014162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014166:	f803 4f01 	strb.w	r4, [r3, #1]!
 801416a:	4291      	cmp	r1, r2
 801416c:	d1f9      	bne.n	8014162 <memcpy+0xe>
 801416e:	bd10      	pop	{r4, pc}

08014170 <nan>:
 8014170:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014178 <nan+0x8>
 8014174:	4770      	bx	lr
 8014176:	bf00      	nop
 8014178:	00000000 	.word	0x00000000
 801417c:	7ff80000 	.word	0x7ff80000

08014180 <__assert_func>:
 8014180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014182:	4614      	mov	r4, r2
 8014184:	461a      	mov	r2, r3
 8014186:	4b09      	ldr	r3, [pc, #36]	@ (80141ac <__assert_func+0x2c>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	4605      	mov	r5, r0
 801418c:	68d8      	ldr	r0, [r3, #12]
 801418e:	b954      	cbnz	r4, 80141a6 <__assert_func+0x26>
 8014190:	4b07      	ldr	r3, [pc, #28]	@ (80141b0 <__assert_func+0x30>)
 8014192:	461c      	mov	r4, r3
 8014194:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014198:	9100      	str	r1, [sp, #0]
 801419a:	462b      	mov	r3, r5
 801419c:	4905      	ldr	r1, [pc, #20]	@ (80141b4 <__assert_func+0x34>)
 801419e:	f000 fba7 	bl	80148f0 <fiprintf>
 80141a2:	f000 fbb7 	bl	8014914 <abort>
 80141a6:	4b04      	ldr	r3, [pc, #16]	@ (80141b8 <__assert_func+0x38>)
 80141a8:	e7f4      	b.n	8014194 <__assert_func+0x14>
 80141aa:	bf00      	nop
 80141ac:	20000048 	.word	0x20000048
 80141b0:	08018bed 	.word	0x08018bed
 80141b4:	08018bbf 	.word	0x08018bbf
 80141b8:	08018bb2 	.word	0x08018bb2

080141bc <_calloc_r>:
 80141bc:	b570      	push	{r4, r5, r6, lr}
 80141be:	fba1 5402 	umull	r5, r4, r1, r2
 80141c2:	b93c      	cbnz	r4, 80141d4 <_calloc_r+0x18>
 80141c4:	4629      	mov	r1, r5
 80141c6:	f7fe f9c3 	bl	8012550 <_malloc_r>
 80141ca:	4606      	mov	r6, r0
 80141cc:	b928      	cbnz	r0, 80141da <_calloc_r+0x1e>
 80141ce:	2600      	movs	r6, #0
 80141d0:	4630      	mov	r0, r6
 80141d2:	bd70      	pop	{r4, r5, r6, pc}
 80141d4:	220c      	movs	r2, #12
 80141d6:	6002      	str	r2, [r0, #0]
 80141d8:	e7f9      	b.n	80141ce <_calloc_r+0x12>
 80141da:	462a      	mov	r2, r5
 80141dc:	4621      	mov	r1, r4
 80141de:	f7fd fa70 	bl	80116c2 <memset>
 80141e2:	e7f5      	b.n	80141d0 <_calloc_r+0x14>

080141e4 <rshift>:
 80141e4:	6903      	ldr	r3, [r0, #16]
 80141e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80141ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80141f2:	f100 0414 	add.w	r4, r0, #20
 80141f6:	dd45      	ble.n	8014284 <rshift+0xa0>
 80141f8:	f011 011f 	ands.w	r1, r1, #31
 80141fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014200:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014204:	d10c      	bne.n	8014220 <rshift+0x3c>
 8014206:	f100 0710 	add.w	r7, r0, #16
 801420a:	4629      	mov	r1, r5
 801420c:	42b1      	cmp	r1, r6
 801420e:	d334      	bcc.n	801427a <rshift+0x96>
 8014210:	1a9b      	subs	r3, r3, r2
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	1eea      	subs	r2, r5, #3
 8014216:	4296      	cmp	r6, r2
 8014218:	bf38      	it	cc
 801421a:	2300      	movcc	r3, #0
 801421c:	4423      	add	r3, r4
 801421e:	e015      	b.n	801424c <rshift+0x68>
 8014220:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014224:	f1c1 0820 	rsb	r8, r1, #32
 8014228:	40cf      	lsrs	r7, r1
 801422a:	f105 0e04 	add.w	lr, r5, #4
 801422e:	46a1      	mov	r9, r4
 8014230:	4576      	cmp	r6, lr
 8014232:	46f4      	mov	ip, lr
 8014234:	d815      	bhi.n	8014262 <rshift+0x7e>
 8014236:	1a9a      	subs	r2, r3, r2
 8014238:	0092      	lsls	r2, r2, #2
 801423a:	3a04      	subs	r2, #4
 801423c:	3501      	adds	r5, #1
 801423e:	42ae      	cmp	r6, r5
 8014240:	bf38      	it	cc
 8014242:	2200      	movcc	r2, #0
 8014244:	18a3      	adds	r3, r4, r2
 8014246:	50a7      	str	r7, [r4, r2]
 8014248:	b107      	cbz	r7, 801424c <rshift+0x68>
 801424a:	3304      	adds	r3, #4
 801424c:	1b1a      	subs	r2, r3, r4
 801424e:	42a3      	cmp	r3, r4
 8014250:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014254:	bf08      	it	eq
 8014256:	2300      	moveq	r3, #0
 8014258:	6102      	str	r2, [r0, #16]
 801425a:	bf08      	it	eq
 801425c:	6143      	streq	r3, [r0, #20]
 801425e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014262:	f8dc c000 	ldr.w	ip, [ip]
 8014266:	fa0c fc08 	lsl.w	ip, ip, r8
 801426a:	ea4c 0707 	orr.w	r7, ip, r7
 801426e:	f849 7b04 	str.w	r7, [r9], #4
 8014272:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014276:	40cf      	lsrs	r7, r1
 8014278:	e7da      	b.n	8014230 <rshift+0x4c>
 801427a:	f851 cb04 	ldr.w	ip, [r1], #4
 801427e:	f847 cf04 	str.w	ip, [r7, #4]!
 8014282:	e7c3      	b.n	801420c <rshift+0x28>
 8014284:	4623      	mov	r3, r4
 8014286:	e7e1      	b.n	801424c <rshift+0x68>

08014288 <__hexdig_fun>:
 8014288:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801428c:	2b09      	cmp	r3, #9
 801428e:	d802      	bhi.n	8014296 <__hexdig_fun+0xe>
 8014290:	3820      	subs	r0, #32
 8014292:	b2c0      	uxtb	r0, r0
 8014294:	4770      	bx	lr
 8014296:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801429a:	2b05      	cmp	r3, #5
 801429c:	d801      	bhi.n	80142a2 <__hexdig_fun+0x1a>
 801429e:	3847      	subs	r0, #71	@ 0x47
 80142a0:	e7f7      	b.n	8014292 <__hexdig_fun+0xa>
 80142a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80142a6:	2b05      	cmp	r3, #5
 80142a8:	d801      	bhi.n	80142ae <__hexdig_fun+0x26>
 80142aa:	3827      	subs	r0, #39	@ 0x27
 80142ac:	e7f1      	b.n	8014292 <__hexdig_fun+0xa>
 80142ae:	2000      	movs	r0, #0
 80142b0:	4770      	bx	lr
	...

080142b4 <__gethex>:
 80142b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b8:	b085      	sub	sp, #20
 80142ba:	468a      	mov	sl, r1
 80142bc:	9302      	str	r3, [sp, #8]
 80142be:	680b      	ldr	r3, [r1, #0]
 80142c0:	9001      	str	r0, [sp, #4]
 80142c2:	4690      	mov	r8, r2
 80142c4:	1c9c      	adds	r4, r3, #2
 80142c6:	46a1      	mov	r9, r4
 80142c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80142cc:	2830      	cmp	r0, #48	@ 0x30
 80142ce:	d0fa      	beq.n	80142c6 <__gethex+0x12>
 80142d0:	eba9 0303 	sub.w	r3, r9, r3
 80142d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80142d8:	f7ff ffd6 	bl	8014288 <__hexdig_fun>
 80142dc:	4605      	mov	r5, r0
 80142de:	2800      	cmp	r0, #0
 80142e0:	d168      	bne.n	80143b4 <__gethex+0x100>
 80142e2:	49a0      	ldr	r1, [pc, #640]	@ (8014564 <__gethex+0x2b0>)
 80142e4:	2201      	movs	r2, #1
 80142e6:	4648      	mov	r0, r9
 80142e8:	f7ff ff12 	bl	8014110 <strncmp>
 80142ec:	4607      	mov	r7, r0
 80142ee:	2800      	cmp	r0, #0
 80142f0:	d167      	bne.n	80143c2 <__gethex+0x10e>
 80142f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80142f6:	4626      	mov	r6, r4
 80142f8:	f7ff ffc6 	bl	8014288 <__hexdig_fun>
 80142fc:	2800      	cmp	r0, #0
 80142fe:	d062      	beq.n	80143c6 <__gethex+0x112>
 8014300:	4623      	mov	r3, r4
 8014302:	7818      	ldrb	r0, [r3, #0]
 8014304:	2830      	cmp	r0, #48	@ 0x30
 8014306:	4699      	mov	r9, r3
 8014308:	f103 0301 	add.w	r3, r3, #1
 801430c:	d0f9      	beq.n	8014302 <__gethex+0x4e>
 801430e:	f7ff ffbb 	bl	8014288 <__hexdig_fun>
 8014312:	fab0 f580 	clz	r5, r0
 8014316:	096d      	lsrs	r5, r5, #5
 8014318:	f04f 0b01 	mov.w	fp, #1
 801431c:	464a      	mov	r2, r9
 801431e:	4616      	mov	r6, r2
 8014320:	3201      	adds	r2, #1
 8014322:	7830      	ldrb	r0, [r6, #0]
 8014324:	f7ff ffb0 	bl	8014288 <__hexdig_fun>
 8014328:	2800      	cmp	r0, #0
 801432a:	d1f8      	bne.n	801431e <__gethex+0x6a>
 801432c:	498d      	ldr	r1, [pc, #564]	@ (8014564 <__gethex+0x2b0>)
 801432e:	2201      	movs	r2, #1
 8014330:	4630      	mov	r0, r6
 8014332:	f7ff feed 	bl	8014110 <strncmp>
 8014336:	2800      	cmp	r0, #0
 8014338:	d13f      	bne.n	80143ba <__gethex+0x106>
 801433a:	b944      	cbnz	r4, 801434e <__gethex+0x9a>
 801433c:	1c74      	adds	r4, r6, #1
 801433e:	4622      	mov	r2, r4
 8014340:	4616      	mov	r6, r2
 8014342:	3201      	adds	r2, #1
 8014344:	7830      	ldrb	r0, [r6, #0]
 8014346:	f7ff ff9f 	bl	8014288 <__hexdig_fun>
 801434a:	2800      	cmp	r0, #0
 801434c:	d1f8      	bne.n	8014340 <__gethex+0x8c>
 801434e:	1ba4      	subs	r4, r4, r6
 8014350:	00a7      	lsls	r7, r4, #2
 8014352:	7833      	ldrb	r3, [r6, #0]
 8014354:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014358:	2b50      	cmp	r3, #80	@ 0x50
 801435a:	d13e      	bne.n	80143da <__gethex+0x126>
 801435c:	7873      	ldrb	r3, [r6, #1]
 801435e:	2b2b      	cmp	r3, #43	@ 0x2b
 8014360:	d033      	beq.n	80143ca <__gethex+0x116>
 8014362:	2b2d      	cmp	r3, #45	@ 0x2d
 8014364:	d034      	beq.n	80143d0 <__gethex+0x11c>
 8014366:	1c71      	adds	r1, r6, #1
 8014368:	2400      	movs	r4, #0
 801436a:	7808      	ldrb	r0, [r1, #0]
 801436c:	f7ff ff8c 	bl	8014288 <__hexdig_fun>
 8014370:	1e43      	subs	r3, r0, #1
 8014372:	b2db      	uxtb	r3, r3
 8014374:	2b18      	cmp	r3, #24
 8014376:	d830      	bhi.n	80143da <__gethex+0x126>
 8014378:	f1a0 0210 	sub.w	r2, r0, #16
 801437c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014380:	f7ff ff82 	bl	8014288 <__hexdig_fun>
 8014384:	f100 3cff 	add.w	ip, r0, #4294967295
 8014388:	fa5f fc8c 	uxtb.w	ip, ip
 801438c:	f1bc 0f18 	cmp.w	ip, #24
 8014390:	f04f 030a 	mov.w	r3, #10
 8014394:	d91e      	bls.n	80143d4 <__gethex+0x120>
 8014396:	b104      	cbz	r4, 801439a <__gethex+0xe6>
 8014398:	4252      	negs	r2, r2
 801439a:	4417      	add	r7, r2
 801439c:	f8ca 1000 	str.w	r1, [sl]
 80143a0:	b1ed      	cbz	r5, 80143de <__gethex+0x12a>
 80143a2:	f1bb 0f00 	cmp.w	fp, #0
 80143a6:	bf0c      	ite	eq
 80143a8:	2506      	moveq	r5, #6
 80143aa:	2500      	movne	r5, #0
 80143ac:	4628      	mov	r0, r5
 80143ae:	b005      	add	sp, #20
 80143b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143b4:	2500      	movs	r5, #0
 80143b6:	462c      	mov	r4, r5
 80143b8:	e7b0      	b.n	801431c <__gethex+0x68>
 80143ba:	2c00      	cmp	r4, #0
 80143bc:	d1c7      	bne.n	801434e <__gethex+0x9a>
 80143be:	4627      	mov	r7, r4
 80143c0:	e7c7      	b.n	8014352 <__gethex+0x9e>
 80143c2:	464e      	mov	r6, r9
 80143c4:	462f      	mov	r7, r5
 80143c6:	2501      	movs	r5, #1
 80143c8:	e7c3      	b.n	8014352 <__gethex+0x9e>
 80143ca:	2400      	movs	r4, #0
 80143cc:	1cb1      	adds	r1, r6, #2
 80143ce:	e7cc      	b.n	801436a <__gethex+0xb6>
 80143d0:	2401      	movs	r4, #1
 80143d2:	e7fb      	b.n	80143cc <__gethex+0x118>
 80143d4:	fb03 0002 	mla	r0, r3, r2, r0
 80143d8:	e7ce      	b.n	8014378 <__gethex+0xc4>
 80143da:	4631      	mov	r1, r6
 80143dc:	e7de      	b.n	801439c <__gethex+0xe8>
 80143de:	eba6 0309 	sub.w	r3, r6, r9
 80143e2:	3b01      	subs	r3, #1
 80143e4:	4629      	mov	r1, r5
 80143e6:	2b07      	cmp	r3, #7
 80143e8:	dc0a      	bgt.n	8014400 <__gethex+0x14c>
 80143ea:	9801      	ldr	r0, [sp, #4]
 80143ec:	f7fe f93c 	bl	8012668 <_Balloc>
 80143f0:	4604      	mov	r4, r0
 80143f2:	b940      	cbnz	r0, 8014406 <__gethex+0x152>
 80143f4:	4b5c      	ldr	r3, [pc, #368]	@ (8014568 <__gethex+0x2b4>)
 80143f6:	4602      	mov	r2, r0
 80143f8:	21e4      	movs	r1, #228	@ 0xe4
 80143fa:	485c      	ldr	r0, [pc, #368]	@ (801456c <__gethex+0x2b8>)
 80143fc:	f7ff fec0 	bl	8014180 <__assert_func>
 8014400:	3101      	adds	r1, #1
 8014402:	105b      	asrs	r3, r3, #1
 8014404:	e7ef      	b.n	80143e6 <__gethex+0x132>
 8014406:	f100 0a14 	add.w	sl, r0, #20
 801440a:	2300      	movs	r3, #0
 801440c:	4655      	mov	r5, sl
 801440e:	469b      	mov	fp, r3
 8014410:	45b1      	cmp	r9, r6
 8014412:	d337      	bcc.n	8014484 <__gethex+0x1d0>
 8014414:	f845 bb04 	str.w	fp, [r5], #4
 8014418:	eba5 050a 	sub.w	r5, r5, sl
 801441c:	10ad      	asrs	r5, r5, #2
 801441e:	6125      	str	r5, [r4, #16]
 8014420:	4658      	mov	r0, fp
 8014422:	f7fe fa13 	bl	801284c <__hi0bits>
 8014426:	016d      	lsls	r5, r5, #5
 8014428:	f8d8 6000 	ldr.w	r6, [r8]
 801442c:	1a2d      	subs	r5, r5, r0
 801442e:	42b5      	cmp	r5, r6
 8014430:	dd54      	ble.n	80144dc <__gethex+0x228>
 8014432:	1bad      	subs	r5, r5, r6
 8014434:	4629      	mov	r1, r5
 8014436:	4620      	mov	r0, r4
 8014438:	f7fe fda7 	bl	8012f8a <__any_on>
 801443c:	4681      	mov	r9, r0
 801443e:	b178      	cbz	r0, 8014460 <__gethex+0x1ac>
 8014440:	1e6b      	subs	r3, r5, #1
 8014442:	1159      	asrs	r1, r3, #5
 8014444:	f003 021f 	and.w	r2, r3, #31
 8014448:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801444c:	f04f 0901 	mov.w	r9, #1
 8014450:	fa09 f202 	lsl.w	r2, r9, r2
 8014454:	420a      	tst	r2, r1
 8014456:	d003      	beq.n	8014460 <__gethex+0x1ac>
 8014458:	454b      	cmp	r3, r9
 801445a:	dc36      	bgt.n	80144ca <__gethex+0x216>
 801445c:	f04f 0902 	mov.w	r9, #2
 8014460:	4629      	mov	r1, r5
 8014462:	4620      	mov	r0, r4
 8014464:	f7ff febe 	bl	80141e4 <rshift>
 8014468:	442f      	add	r7, r5
 801446a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801446e:	42bb      	cmp	r3, r7
 8014470:	da42      	bge.n	80144f8 <__gethex+0x244>
 8014472:	9801      	ldr	r0, [sp, #4]
 8014474:	4621      	mov	r1, r4
 8014476:	f7fe f937 	bl	80126e8 <_Bfree>
 801447a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801447c:	2300      	movs	r3, #0
 801447e:	6013      	str	r3, [r2, #0]
 8014480:	25a3      	movs	r5, #163	@ 0xa3
 8014482:	e793      	b.n	80143ac <__gethex+0xf8>
 8014484:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014488:	2a2e      	cmp	r2, #46	@ 0x2e
 801448a:	d012      	beq.n	80144b2 <__gethex+0x1fe>
 801448c:	2b20      	cmp	r3, #32
 801448e:	d104      	bne.n	801449a <__gethex+0x1e6>
 8014490:	f845 bb04 	str.w	fp, [r5], #4
 8014494:	f04f 0b00 	mov.w	fp, #0
 8014498:	465b      	mov	r3, fp
 801449a:	7830      	ldrb	r0, [r6, #0]
 801449c:	9303      	str	r3, [sp, #12]
 801449e:	f7ff fef3 	bl	8014288 <__hexdig_fun>
 80144a2:	9b03      	ldr	r3, [sp, #12]
 80144a4:	f000 000f 	and.w	r0, r0, #15
 80144a8:	4098      	lsls	r0, r3
 80144aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80144ae:	3304      	adds	r3, #4
 80144b0:	e7ae      	b.n	8014410 <__gethex+0x15c>
 80144b2:	45b1      	cmp	r9, r6
 80144b4:	d8ea      	bhi.n	801448c <__gethex+0x1d8>
 80144b6:	492b      	ldr	r1, [pc, #172]	@ (8014564 <__gethex+0x2b0>)
 80144b8:	9303      	str	r3, [sp, #12]
 80144ba:	2201      	movs	r2, #1
 80144bc:	4630      	mov	r0, r6
 80144be:	f7ff fe27 	bl	8014110 <strncmp>
 80144c2:	9b03      	ldr	r3, [sp, #12]
 80144c4:	2800      	cmp	r0, #0
 80144c6:	d1e1      	bne.n	801448c <__gethex+0x1d8>
 80144c8:	e7a2      	b.n	8014410 <__gethex+0x15c>
 80144ca:	1ea9      	subs	r1, r5, #2
 80144cc:	4620      	mov	r0, r4
 80144ce:	f7fe fd5c 	bl	8012f8a <__any_on>
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d0c2      	beq.n	801445c <__gethex+0x1a8>
 80144d6:	f04f 0903 	mov.w	r9, #3
 80144da:	e7c1      	b.n	8014460 <__gethex+0x1ac>
 80144dc:	da09      	bge.n	80144f2 <__gethex+0x23e>
 80144de:	1b75      	subs	r5, r6, r5
 80144e0:	4621      	mov	r1, r4
 80144e2:	9801      	ldr	r0, [sp, #4]
 80144e4:	462a      	mov	r2, r5
 80144e6:	f7fe fb17 	bl	8012b18 <__lshift>
 80144ea:	1b7f      	subs	r7, r7, r5
 80144ec:	4604      	mov	r4, r0
 80144ee:	f100 0a14 	add.w	sl, r0, #20
 80144f2:	f04f 0900 	mov.w	r9, #0
 80144f6:	e7b8      	b.n	801446a <__gethex+0x1b6>
 80144f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80144fc:	42bd      	cmp	r5, r7
 80144fe:	dd6f      	ble.n	80145e0 <__gethex+0x32c>
 8014500:	1bed      	subs	r5, r5, r7
 8014502:	42ae      	cmp	r6, r5
 8014504:	dc34      	bgt.n	8014570 <__gethex+0x2bc>
 8014506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801450a:	2b02      	cmp	r3, #2
 801450c:	d022      	beq.n	8014554 <__gethex+0x2a0>
 801450e:	2b03      	cmp	r3, #3
 8014510:	d024      	beq.n	801455c <__gethex+0x2a8>
 8014512:	2b01      	cmp	r3, #1
 8014514:	d115      	bne.n	8014542 <__gethex+0x28e>
 8014516:	42ae      	cmp	r6, r5
 8014518:	d113      	bne.n	8014542 <__gethex+0x28e>
 801451a:	2e01      	cmp	r6, #1
 801451c:	d10b      	bne.n	8014536 <__gethex+0x282>
 801451e:	9a02      	ldr	r2, [sp, #8]
 8014520:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014524:	6013      	str	r3, [r2, #0]
 8014526:	2301      	movs	r3, #1
 8014528:	6123      	str	r3, [r4, #16]
 801452a:	f8ca 3000 	str.w	r3, [sl]
 801452e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014530:	2562      	movs	r5, #98	@ 0x62
 8014532:	601c      	str	r4, [r3, #0]
 8014534:	e73a      	b.n	80143ac <__gethex+0xf8>
 8014536:	1e71      	subs	r1, r6, #1
 8014538:	4620      	mov	r0, r4
 801453a:	f7fe fd26 	bl	8012f8a <__any_on>
 801453e:	2800      	cmp	r0, #0
 8014540:	d1ed      	bne.n	801451e <__gethex+0x26a>
 8014542:	9801      	ldr	r0, [sp, #4]
 8014544:	4621      	mov	r1, r4
 8014546:	f7fe f8cf 	bl	80126e8 <_Bfree>
 801454a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801454c:	2300      	movs	r3, #0
 801454e:	6013      	str	r3, [r2, #0]
 8014550:	2550      	movs	r5, #80	@ 0x50
 8014552:	e72b      	b.n	80143ac <__gethex+0xf8>
 8014554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014556:	2b00      	cmp	r3, #0
 8014558:	d1f3      	bne.n	8014542 <__gethex+0x28e>
 801455a:	e7e0      	b.n	801451e <__gethex+0x26a>
 801455c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801455e:	2b00      	cmp	r3, #0
 8014560:	d1dd      	bne.n	801451e <__gethex+0x26a>
 8014562:	e7ee      	b.n	8014542 <__gethex+0x28e>
 8014564:	08018a40 	.word	0x08018a40
 8014568:	080188d9 	.word	0x080188d9
 801456c:	08018bee 	.word	0x08018bee
 8014570:	1e6f      	subs	r7, r5, #1
 8014572:	f1b9 0f00 	cmp.w	r9, #0
 8014576:	d130      	bne.n	80145da <__gethex+0x326>
 8014578:	b127      	cbz	r7, 8014584 <__gethex+0x2d0>
 801457a:	4639      	mov	r1, r7
 801457c:	4620      	mov	r0, r4
 801457e:	f7fe fd04 	bl	8012f8a <__any_on>
 8014582:	4681      	mov	r9, r0
 8014584:	117a      	asrs	r2, r7, #5
 8014586:	2301      	movs	r3, #1
 8014588:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801458c:	f007 071f 	and.w	r7, r7, #31
 8014590:	40bb      	lsls	r3, r7
 8014592:	4213      	tst	r3, r2
 8014594:	4629      	mov	r1, r5
 8014596:	4620      	mov	r0, r4
 8014598:	bf18      	it	ne
 801459a:	f049 0902 	orrne.w	r9, r9, #2
 801459e:	f7ff fe21 	bl	80141e4 <rshift>
 80145a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80145a6:	1b76      	subs	r6, r6, r5
 80145a8:	2502      	movs	r5, #2
 80145aa:	f1b9 0f00 	cmp.w	r9, #0
 80145ae:	d047      	beq.n	8014640 <__gethex+0x38c>
 80145b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80145b4:	2b02      	cmp	r3, #2
 80145b6:	d015      	beq.n	80145e4 <__gethex+0x330>
 80145b8:	2b03      	cmp	r3, #3
 80145ba:	d017      	beq.n	80145ec <__gethex+0x338>
 80145bc:	2b01      	cmp	r3, #1
 80145be:	d109      	bne.n	80145d4 <__gethex+0x320>
 80145c0:	f019 0f02 	tst.w	r9, #2
 80145c4:	d006      	beq.n	80145d4 <__gethex+0x320>
 80145c6:	f8da 3000 	ldr.w	r3, [sl]
 80145ca:	ea49 0903 	orr.w	r9, r9, r3
 80145ce:	f019 0f01 	tst.w	r9, #1
 80145d2:	d10e      	bne.n	80145f2 <__gethex+0x33e>
 80145d4:	f045 0510 	orr.w	r5, r5, #16
 80145d8:	e032      	b.n	8014640 <__gethex+0x38c>
 80145da:	f04f 0901 	mov.w	r9, #1
 80145de:	e7d1      	b.n	8014584 <__gethex+0x2d0>
 80145e0:	2501      	movs	r5, #1
 80145e2:	e7e2      	b.n	80145aa <__gethex+0x2f6>
 80145e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145e6:	f1c3 0301 	rsb	r3, r3, #1
 80145ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80145ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d0f0      	beq.n	80145d4 <__gethex+0x320>
 80145f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80145f6:	f104 0314 	add.w	r3, r4, #20
 80145fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80145fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014602:	f04f 0c00 	mov.w	ip, #0
 8014606:	4618      	mov	r0, r3
 8014608:	f853 2b04 	ldr.w	r2, [r3], #4
 801460c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014610:	d01b      	beq.n	801464a <__gethex+0x396>
 8014612:	3201      	adds	r2, #1
 8014614:	6002      	str	r2, [r0, #0]
 8014616:	2d02      	cmp	r5, #2
 8014618:	f104 0314 	add.w	r3, r4, #20
 801461c:	d13c      	bne.n	8014698 <__gethex+0x3e4>
 801461e:	f8d8 2000 	ldr.w	r2, [r8]
 8014622:	3a01      	subs	r2, #1
 8014624:	42b2      	cmp	r2, r6
 8014626:	d109      	bne.n	801463c <__gethex+0x388>
 8014628:	1171      	asrs	r1, r6, #5
 801462a:	2201      	movs	r2, #1
 801462c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014630:	f006 061f 	and.w	r6, r6, #31
 8014634:	fa02 f606 	lsl.w	r6, r2, r6
 8014638:	421e      	tst	r6, r3
 801463a:	d13a      	bne.n	80146b2 <__gethex+0x3fe>
 801463c:	f045 0520 	orr.w	r5, r5, #32
 8014640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014642:	601c      	str	r4, [r3, #0]
 8014644:	9b02      	ldr	r3, [sp, #8]
 8014646:	601f      	str	r7, [r3, #0]
 8014648:	e6b0      	b.n	80143ac <__gethex+0xf8>
 801464a:	4299      	cmp	r1, r3
 801464c:	f843 cc04 	str.w	ip, [r3, #-4]
 8014650:	d8d9      	bhi.n	8014606 <__gethex+0x352>
 8014652:	68a3      	ldr	r3, [r4, #8]
 8014654:	459b      	cmp	fp, r3
 8014656:	db17      	blt.n	8014688 <__gethex+0x3d4>
 8014658:	6861      	ldr	r1, [r4, #4]
 801465a:	9801      	ldr	r0, [sp, #4]
 801465c:	3101      	adds	r1, #1
 801465e:	f7fe f803 	bl	8012668 <_Balloc>
 8014662:	4681      	mov	r9, r0
 8014664:	b918      	cbnz	r0, 801466e <__gethex+0x3ba>
 8014666:	4b1a      	ldr	r3, [pc, #104]	@ (80146d0 <__gethex+0x41c>)
 8014668:	4602      	mov	r2, r0
 801466a:	2184      	movs	r1, #132	@ 0x84
 801466c:	e6c5      	b.n	80143fa <__gethex+0x146>
 801466e:	6922      	ldr	r2, [r4, #16]
 8014670:	3202      	adds	r2, #2
 8014672:	f104 010c 	add.w	r1, r4, #12
 8014676:	0092      	lsls	r2, r2, #2
 8014678:	300c      	adds	r0, #12
 801467a:	f7ff fd6b 	bl	8014154 <memcpy>
 801467e:	4621      	mov	r1, r4
 8014680:	9801      	ldr	r0, [sp, #4]
 8014682:	f7fe f831 	bl	80126e8 <_Bfree>
 8014686:	464c      	mov	r4, r9
 8014688:	6923      	ldr	r3, [r4, #16]
 801468a:	1c5a      	adds	r2, r3, #1
 801468c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014690:	6122      	str	r2, [r4, #16]
 8014692:	2201      	movs	r2, #1
 8014694:	615a      	str	r2, [r3, #20]
 8014696:	e7be      	b.n	8014616 <__gethex+0x362>
 8014698:	6922      	ldr	r2, [r4, #16]
 801469a:	455a      	cmp	r2, fp
 801469c:	dd0b      	ble.n	80146b6 <__gethex+0x402>
 801469e:	2101      	movs	r1, #1
 80146a0:	4620      	mov	r0, r4
 80146a2:	f7ff fd9f 	bl	80141e4 <rshift>
 80146a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80146aa:	3701      	adds	r7, #1
 80146ac:	42bb      	cmp	r3, r7
 80146ae:	f6ff aee0 	blt.w	8014472 <__gethex+0x1be>
 80146b2:	2501      	movs	r5, #1
 80146b4:	e7c2      	b.n	801463c <__gethex+0x388>
 80146b6:	f016 061f 	ands.w	r6, r6, #31
 80146ba:	d0fa      	beq.n	80146b2 <__gethex+0x3fe>
 80146bc:	4453      	add	r3, sl
 80146be:	f1c6 0620 	rsb	r6, r6, #32
 80146c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80146c6:	f7fe f8c1 	bl	801284c <__hi0bits>
 80146ca:	42b0      	cmp	r0, r6
 80146cc:	dbe7      	blt.n	801469e <__gethex+0x3ea>
 80146ce:	e7f0      	b.n	80146b2 <__gethex+0x3fe>
 80146d0:	080188d9 	.word	0x080188d9

080146d4 <L_shift>:
 80146d4:	f1c2 0208 	rsb	r2, r2, #8
 80146d8:	0092      	lsls	r2, r2, #2
 80146da:	b570      	push	{r4, r5, r6, lr}
 80146dc:	f1c2 0620 	rsb	r6, r2, #32
 80146e0:	6843      	ldr	r3, [r0, #4]
 80146e2:	6804      	ldr	r4, [r0, #0]
 80146e4:	fa03 f506 	lsl.w	r5, r3, r6
 80146e8:	432c      	orrs	r4, r5
 80146ea:	40d3      	lsrs	r3, r2
 80146ec:	6004      	str	r4, [r0, #0]
 80146ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80146f2:	4288      	cmp	r0, r1
 80146f4:	d3f4      	bcc.n	80146e0 <L_shift+0xc>
 80146f6:	bd70      	pop	{r4, r5, r6, pc}

080146f8 <__match>:
 80146f8:	b530      	push	{r4, r5, lr}
 80146fa:	6803      	ldr	r3, [r0, #0]
 80146fc:	3301      	adds	r3, #1
 80146fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014702:	b914      	cbnz	r4, 801470a <__match+0x12>
 8014704:	6003      	str	r3, [r0, #0]
 8014706:	2001      	movs	r0, #1
 8014708:	bd30      	pop	{r4, r5, pc}
 801470a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801470e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014712:	2d19      	cmp	r5, #25
 8014714:	bf98      	it	ls
 8014716:	3220      	addls	r2, #32
 8014718:	42a2      	cmp	r2, r4
 801471a:	d0f0      	beq.n	80146fe <__match+0x6>
 801471c:	2000      	movs	r0, #0
 801471e:	e7f3      	b.n	8014708 <__match+0x10>

08014720 <__hexnan>:
 8014720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014724:	680b      	ldr	r3, [r1, #0]
 8014726:	6801      	ldr	r1, [r0, #0]
 8014728:	115e      	asrs	r6, r3, #5
 801472a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801472e:	f013 031f 	ands.w	r3, r3, #31
 8014732:	b087      	sub	sp, #28
 8014734:	bf18      	it	ne
 8014736:	3604      	addne	r6, #4
 8014738:	2500      	movs	r5, #0
 801473a:	1f37      	subs	r7, r6, #4
 801473c:	4682      	mov	sl, r0
 801473e:	4690      	mov	r8, r2
 8014740:	9301      	str	r3, [sp, #4]
 8014742:	f846 5c04 	str.w	r5, [r6, #-4]
 8014746:	46b9      	mov	r9, r7
 8014748:	463c      	mov	r4, r7
 801474a:	9502      	str	r5, [sp, #8]
 801474c:	46ab      	mov	fp, r5
 801474e:	784a      	ldrb	r2, [r1, #1]
 8014750:	1c4b      	adds	r3, r1, #1
 8014752:	9303      	str	r3, [sp, #12]
 8014754:	b342      	cbz	r2, 80147a8 <__hexnan+0x88>
 8014756:	4610      	mov	r0, r2
 8014758:	9105      	str	r1, [sp, #20]
 801475a:	9204      	str	r2, [sp, #16]
 801475c:	f7ff fd94 	bl	8014288 <__hexdig_fun>
 8014760:	2800      	cmp	r0, #0
 8014762:	d151      	bne.n	8014808 <__hexnan+0xe8>
 8014764:	9a04      	ldr	r2, [sp, #16]
 8014766:	9905      	ldr	r1, [sp, #20]
 8014768:	2a20      	cmp	r2, #32
 801476a:	d818      	bhi.n	801479e <__hexnan+0x7e>
 801476c:	9b02      	ldr	r3, [sp, #8]
 801476e:	459b      	cmp	fp, r3
 8014770:	dd13      	ble.n	801479a <__hexnan+0x7a>
 8014772:	454c      	cmp	r4, r9
 8014774:	d206      	bcs.n	8014784 <__hexnan+0x64>
 8014776:	2d07      	cmp	r5, #7
 8014778:	dc04      	bgt.n	8014784 <__hexnan+0x64>
 801477a:	462a      	mov	r2, r5
 801477c:	4649      	mov	r1, r9
 801477e:	4620      	mov	r0, r4
 8014780:	f7ff ffa8 	bl	80146d4 <L_shift>
 8014784:	4544      	cmp	r4, r8
 8014786:	d952      	bls.n	801482e <__hexnan+0x10e>
 8014788:	2300      	movs	r3, #0
 801478a:	f1a4 0904 	sub.w	r9, r4, #4
 801478e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014792:	f8cd b008 	str.w	fp, [sp, #8]
 8014796:	464c      	mov	r4, r9
 8014798:	461d      	mov	r5, r3
 801479a:	9903      	ldr	r1, [sp, #12]
 801479c:	e7d7      	b.n	801474e <__hexnan+0x2e>
 801479e:	2a29      	cmp	r2, #41	@ 0x29
 80147a0:	d157      	bne.n	8014852 <__hexnan+0x132>
 80147a2:	3102      	adds	r1, #2
 80147a4:	f8ca 1000 	str.w	r1, [sl]
 80147a8:	f1bb 0f00 	cmp.w	fp, #0
 80147ac:	d051      	beq.n	8014852 <__hexnan+0x132>
 80147ae:	454c      	cmp	r4, r9
 80147b0:	d206      	bcs.n	80147c0 <__hexnan+0xa0>
 80147b2:	2d07      	cmp	r5, #7
 80147b4:	dc04      	bgt.n	80147c0 <__hexnan+0xa0>
 80147b6:	462a      	mov	r2, r5
 80147b8:	4649      	mov	r1, r9
 80147ba:	4620      	mov	r0, r4
 80147bc:	f7ff ff8a 	bl	80146d4 <L_shift>
 80147c0:	4544      	cmp	r4, r8
 80147c2:	d936      	bls.n	8014832 <__hexnan+0x112>
 80147c4:	f1a8 0204 	sub.w	r2, r8, #4
 80147c8:	4623      	mov	r3, r4
 80147ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80147ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80147d2:	429f      	cmp	r7, r3
 80147d4:	d2f9      	bcs.n	80147ca <__hexnan+0xaa>
 80147d6:	1b3b      	subs	r3, r7, r4
 80147d8:	f023 0303 	bic.w	r3, r3, #3
 80147dc:	3304      	adds	r3, #4
 80147de:	3401      	adds	r4, #1
 80147e0:	3e03      	subs	r6, #3
 80147e2:	42b4      	cmp	r4, r6
 80147e4:	bf88      	it	hi
 80147e6:	2304      	movhi	r3, #4
 80147e8:	4443      	add	r3, r8
 80147ea:	2200      	movs	r2, #0
 80147ec:	f843 2b04 	str.w	r2, [r3], #4
 80147f0:	429f      	cmp	r7, r3
 80147f2:	d2fb      	bcs.n	80147ec <__hexnan+0xcc>
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	b91b      	cbnz	r3, 8014800 <__hexnan+0xe0>
 80147f8:	4547      	cmp	r7, r8
 80147fa:	d128      	bne.n	801484e <__hexnan+0x12e>
 80147fc:	2301      	movs	r3, #1
 80147fe:	603b      	str	r3, [r7, #0]
 8014800:	2005      	movs	r0, #5
 8014802:	b007      	add	sp, #28
 8014804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014808:	3501      	adds	r5, #1
 801480a:	2d08      	cmp	r5, #8
 801480c:	f10b 0b01 	add.w	fp, fp, #1
 8014810:	dd06      	ble.n	8014820 <__hexnan+0x100>
 8014812:	4544      	cmp	r4, r8
 8014814:	d9c1      	bls.n	801479a <__hexnan+0x7a>
 8014816:	2300      	movs	r3, #0
 8014818:	f844 3c04 	str.w	r3, [r4, #-4]
 801481c:	2501      	movs	r5, #1
 801481e:	3c04      	subs	r4, #4
 8014820:	6822      	ldr	r2, [r4, #0]
 8014822:	f000 000f 	and.w	r0, r0, #15
 8014826:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801482a:	6020      	str	r0, [r4, #0]
 801482c:	e7b5      	b.n	801479a <__hexnan+0x7a>
 801482e:	2508      	movs	r5, #8
 8014830:	e7b3      	b.n	801479a <__hexnan+0x7a>
 8014832:	9b01      	ldr	r3, [sp, #4]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d0dd      	beq.n	80147f4 <__hexnan+0xd4>
 8014838:	f1c3 0320 	rsb	r3, r3, #32
 801483c:	f04f 32ff 	mov.w	r2, #4294967295
 8014840:	40da      	lsrs	r2, r3
 8014842:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014846:	4013      	ands	r3, r2
 8014848:	f846 3c04 	str.w	r3, [r6, #-4]
 801484c:	e7d2      	b.n	80147f4 <__hexnan+0xd4>
 801484e:	3f04      	subs	r7, #4
 8014850:	e7d0      	b.n	80147f4 <__hexnan+0xd4>
 8014852:	2004      	movs	r0, #4
 8014854:	e7d5      	b.n	8014802 <__hexnan+0xe2>

08014856 <__ascii_mbtowc>:
 8014856:	b082      	sub	sp, #8
 8014858:	b901      	cbnz	r1, 801485c <__ascii_mbtowc+0x6>
 801485a:	a901      	add	r1, sp, #4
 801485c:	b142      	cbz	r2, 8014870 <__ascii_mbtowc+0x1a>
 801485e:	b14b      	cbz	r3, 8014874 <__ascii_mbtowc+0x1e>
 8014860:	7813      	ldrb	r3, [r2, #0]
 8014862:	600b      	str	r3, [r1, #0]
 8014864:	7812      	ldrb	r2, [r2, #0]
 8014866:	1e10      	subs	r0, r2, #0
 8014868:	bf18      	it	ne
 801486a:	2001      	movne	r0, #1
 801486c:	b002      	add	sp, #8
 801486e:	4770      	bx	lr
 8014870:	4610      	mov	r0, r2
 8014872:	e7fb      	b.n	801486c <__ascii_mbtowc+0x16>
 8014874:	f06f 0001 	mvn.w	r0, #1
 8014878:	e7f8      	b.n	801486c <__ascii_mbtowc+0x16>

0801487a <_realloc_r>:
 801487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801487e:	4680      	mov	r8, r0
 8014880:	4615      	mov	r5, r2
 8014882:	460c      	mov	r4, r1
 8014884:	b921      	cbnz	r1, 8014890 <_realloc_r+0x16>
 8014886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801488a:	4611      	mov	r1, r2
 801488c:	f7fd be60 	b.w	8012550 <_malloc_r>
 8014890:	b92a      	cbnz	r2, 801489e <_realloc_r+0x24>
 8014892:	f7fd fde9 	bl	8012468 <_free_r>
 8014896:	2400      	movs	r4, #0
 8014898:	4620      	mov	r0, r4
 801489a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801489e:	f000 f840 	bl	8014922 <_malloc_usable_size_r>
 80148a2:	4285      	cmp	r5, r0
 80148a4:	4606      	mov	r6, r0
 80148a6:	d802      	bhi.n	80148ae <_realloc_r+0x34>
 80148a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80148ac:	d8f4      	bhi.n	8014898 <_realloc_r+0x1e>
 80148ae:	4629      	mov	r1, r5
 80148b0:	4640      	mov	r0, r8
 80148b2:	f7fd fe4d 	bl	8012550 <_malloc_r>
 80148b6:	4607      	mov	r7, r0
 80148b8:	2800      	cmp	r0, #0
 80148ba:	d0ec      	beq.n	8014896 <_realloc_r+0x1c>
 80148bc:	42b5      	cmp	r5, r6
 80148be:	462a      	mov	r2, r5
 80148c0:	4621      	mov	r1, r4
 80148c2:	bf28      	it	cs
 80148c4:	4632      	movcs	r2, r6
 80148c6:	f7ff fc45 	bl	8014154 <memcpy>
 80148ca:	4621      	mov	r1, r4
 80148cc:	4640      	mov	r0, r8
 80148ce:	f7fd fdcb 	bl	8012468 <_free_r>
 80148d2:	463c      	mov	r4, r7
 80148d4:	e7e0      	b.n	8014898 <_realloc_r+0x1e>

080148d6 <__ascii_wctomb>:
 80148d6:	4603      	mov	r3, r0
 80148d8:	4608      	mov	r0, r1
 80148da:	b141      	cbz	r1, 80148ee <__ascii_wctomb+0x18>
 80148dc:	2aff      	cmp	r2, #255	@ 0xff
 80148de:	d904      	bls.n	80148ea <__ascii_wctomb+0x14>
 80148e0:	228a      	movs	r2, #138	@ 0x8a
 80148e2:	601a      	str	r2, [r3, #0]
 80148e4:	f04f 30ff 	mov.w	r0, #4294967295
 80148e8:	4770      	bx	lr
 80148ea:	700a      	strb	r2, [r1, #0]
 80148ec:	2001      	movs	r0, #1
 80148ee:	4770      	bx	lr

080148f0 <fiprintf>:
 80148f0:	b40e      	push	{r1, r2, r3}
 80148f2:	b503      	push	{r0, r1, lr}
 80148f4:	4601      	mov	r1, r0
 80148f6:	ab03      	add	r3, sp, #12
 80148f8:	4805      	ldr	r0, [pc, #20]	@ (8014910 <fiprintf+0x20>)
 80148fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80148fe:	6800      	ldr	r0, [r0, #0]
 8014900:	9301      	str	r3, [sp, #4]
 8014902:	f000 f83f 	bl	8014984 <_vfiprintf_r>
 8014906:	b002      	add	sp, #8
 8014908:	f85d eb04 	ldr.w	lr, [sp], #4
 801490c:	b003      	add	sp, #12
 801490e:	4770      	bx	lr
 8014910:	20000048 	.word	0x20000048

08014914 <abort>:
 8014914:	b508      	push	{r3, lr}
 8014916:	2006      	movs	r0, #6
 8014918:	f000 fa08 	bl	8014d2c <raise>
 801491c:	2001      	movs	r0, #1
 801491e:	f7ed ff1d 	bl	800275c <_exit>

08014922 <_malloc_usable_size_r>:
 8014922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014926:	1f18      	subs	r0, r3, #4
 8014928:	2b00      	cmp	r3, #0
 801492a:	bfbc      	itt	lt
 801492c:	580b      	ldrlt	r3, [r1, r0]
 801492e:	18c0      	addlt	r0, r0, r3
 8014930:	4770      	bx	lr

08014932 <__sfputc_r>:
 8014932:	6893      	ldr	r3, [r2, #8]
 8014934:	3b01      	subs	r3, #1
 8014936:	2b00      	cmp	r3, #0
 8014938:	b410      	push	{r4}
 801493a:	6093      	str	r3, [r2, #8]
 801493c:	da08      	bge.n	8014950 <__sfputc_r+0x1e>
 801493e:	6994      	ldr	r4, [r2, #24]
 8014940:	42a3      	cmp	r3, r4
 8014942:	db01      	blt.n	8014948 <__sfputc_r+0x16>
 8014944:	290a      	cmp	r1, #10
 8014946:	d103      	bne.n	8014950 <__sfputc_r+0x1e>
 8014948:	f85d 4b04 	ldr.w	r4, [sp], #4
 801494c:	f000 b932 	b.w	8014bb4 <__swbuf_r>
 8014950:	6813      	ldr	r3, [r2, #0]
 8014952:	1c58      	adds	r0, r3, #1
 8014954:	6010      	str	r0, [r2, #0]
 8014956:	7019      	strb	r1, [r3, #0]
 8014958:	4608      	mov	r0, r1
 801495a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801495e:	4770      	bx	lr

08014960 <__sfputs_r>:
 8014960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014962:	4606      	mov	r6, r0
 8014964:	460f      	mov	r7, r1
 8014966:	4614      	mov	r4, r2
 8014968:	18d5      	adds	r5, r2, r3
 801496a:	42ac      	cmp	r4, r5
 801496c:	d101      	bne.n	8014972 <__sfputs_r+0x12>
 801496e:	2000      	movs	r0, #0
 8014970:	e007      	b.n	8014982 <__sfputs_r+0x22>
 8014972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014976:	463a      	mov	r2, r7
 8014978:	4630      	mov	r0, r6
 801497a:	f7ff ffda 	bl	8014932 <__sfputc_r>
 801497e:	1c43      	adds	r3, r0, #1
 8014980:	d1f3      	bne.n	801496a <__sfputs_r+0xa>
 8014982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014984 <_vfiprintf_r>:
 8014984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014988:	460d      	mov	r5, r1
 801498a:	b09d      	sub	sp, #116	@ 0x74
 801498c:	4614      	mov	r4, r2
 801498e:	4698      	mov	r8, r3
 8014990:	4606      	mov	r6, r0
 8014992:	b118      	cbz	r0, 801499c <_vfiprintf_r+0x18>
 8014994:	6a03      	ldr	r3, [r0, #32]
 8014996:	b90b      	cbnz	r3, 801499c <_vfiprintf_r+0x18>
 8014998:	f7fc fdc6 	bl	8011528 <__sinit>
 801499c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801499e:	07d9      	lsls	r1, r3, #31
 80149a0:	d405      	bmi.n	80149ae <_vfiprintf_r+0x2a>
 80149a2:	89ab      	ldrh	r3, [r5, #12]
 80149a4:	059a      	lsls	r2, r3, #22
 80149a6:	d402      	bmi.n	80149ae <_vfiprintf_r+0x2a>
 80149a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80149aa:	f7fc ff08 	bl	80117be <__retarget_lock_acquire_recursive>
 80149ae:	89ab      	ldrh	r3, [r5, #12]
 80149b0:	071b      	lsls	r3, r3, #28
 80149b2:	d501      	bpl.n	80149b8 <_vfiprintf_r+0x34>
 80149b4:	692b      	ldr	r3, [r5, #16]
 80149b6:	b99b      	cbnz	r3, 80149e0 <_vfiprintf_r+0x5c>
 80149b8:	4629      	mov	r1, r5
 80149ba:	4630      	mov	r0, r6
 80149bc:	f000 f938 	bl	8014c30 <__swsetup_r>
 80149c0:	b170      	cbz	r0, 80149e0 <_vfiprintf_r+0x5c>
 80149c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80149c4:	07dc      	lsls	r4, r3, #31
 80149c6:	d504      	bpl.n	80149d2 <_vfiprintf_r+0x4e>
 80149c8:	f04f 30ff 	mov.w	r0, #4294967295
 80149cc:	b01d      	add	sp, #116	@ 0x74
 80149ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149d2:	89ab      	ldrh	r3, [r5, #12]
 80149d4:	0598      	lsls	r0, r3, #22
 80149d6:	d4f7      	bmi.n	80149c8 <_vfiprintf_r+0x44>
 80149d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80149da:	f7fc fef1 	bl	80117c0 <__retarget_lock_release_recursive>
 80149de:	e7f3      	b.n	80149c8 <_vfiprintf_r+0x44>
 80149e0:	2300      	movs	r3, #0
 80149e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80149e4:	2320      	movs	r3, #32
 80149e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80149ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80149ee:	2330      	movs	r3, #48	@ 0x30
 80149f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ba0 <_vfiprintf_r+0x21c>
 80149f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80149f8:	f04f 0901 	mov.w	r9, #1
 80149fc:	4623      	mov	r3, r4
 80149fe:	469a      	mov	sl, r3
 8014a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a04:	b10a      	cbz	r2, 8014a0a <_vfiprintf_r+0x86>
 8014a06:	2a25      	cmp	r2, #37	@ 0x25
 8014a08:	d1f9      	bne.n	80149fe <_vfiprintf_r+0x7a>
 8014a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8014a0e:	d00b      	beq.n	8014a28 <_vfiprintf_r+0xa4>
 8014a10:	465b      	mov	r3, fp
 8014a12:	4622      	mov	r2, r4
 8014a14:	4629      	mov	r1, r5
 8014a16:	4630      	mov	r0, r6
 8014a18:	f7ff ffa2 	bl	8014960 <__sfputs_r>
 8014a1c:	3001      	adds	r0, #1
 8014a1e:	f000 80a7 	beq.w	8014b70 <_vfiprintf_r+0x1ec>
 8014a22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a24:	445a      	add	r2, fp
 8014a26:	9209      	str	r2, [sp, #36]	@ 0x24
 8014a28:	f89a 3000 	ldrb.w	r3, [sl]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	f000 809f 	beq.w	8014b70 <_vfiprintf_r+0x1ec>
 8014a32:	2300      	movs	r3, #0
 8014a34:	f04f 32ff 	mov.w	r2, #4294967295
 8014a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a3c:	f10a 0a01 	add.w	sl, sl, #1
 8014a40:	9304      	str	r3, [sp, #16]
 8014a42:	9307      	str	r3, [sp, #28]
 8014a44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014a48:	931a      	str	r3, [sp, #104]	@ 0x68
 8014a4a:	4654      	mov	r4, sl
 8014a4c:	2205      	movs	r2, #5
 8014a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a52:	4853      	ldr	r0, [pc, #332]	@ (8014ba0 <_vfiprintf_r+0x21c>)
 8014a54:	f7eb fbdc 	bl	8000210 <memchr>
 8014a58:	9a04      	ldr	r2, [sp, #16]
 8014a5a:	b9d8      	cbnz	r0, 8014a94 <_vfiprintf_r+0x110>
 8014a5c:	06d1      	lsls	r1, r2, #27
 8014a5e:	bf44      	itt	mi
 8014a60:	2320      	movmi	r3, #32
 8014a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014a66:	0713      	lsls	r3, r2, #28
 8014a68:	bf44      	itt	mi
 8014a6a:	232b      	movmi	r3, #43	@ 0x2b
 8014a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014a70:	f89a 3000 	ldrb.w	r3, [sl]
 8014a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8014a76:	d015      	beq.n	8014aa4 <_vfiprintf_r+0x120>
 8014a78:	9a07      	ldr	r2, [sp, #28]
 8014a7a:	4654      	mov	r4, sl
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	f04f 0c0a 	mov.w	ip, #10
 8014a82:	4621      	mov	r1, r4
 8014a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a88:	3b30      	subs	r3, #48	@ 0x30
 8014a8a:	2b09      	cmp	r3, #9
 8014a8c:	d94b      	bls.n	8014b26 <_vfiprintf_r+0x1a2>
 8014a8e:	b1b0      	cbz	r0, 8014abe <_vfiprintf_r+0x13a>
 8014a90:	9207      	str	r2, [sp, #28]
 8014a92:	e014      	b.n	8014abe <_vfiprintf_r+0x13a>
 8014a94:	eba0 0308 	sub.w	r3, r0, r8
 8014a98:	fa09 f303 	lsl.w	r3, r9, r3
 8014a9c:	4313      	orrs	r3, r2
 8014a9e:	9304      	str	r3, [sp, #16]
 8014aa0:	46a2      	mov	sl, r4
 8014aa2:	e7d2      	b.n	8014a4a <_vfiprintf_r+0xc6>
 8014aa4:	9b03      	ldr	r3, [sp, #12]
 8014aa6:	1d19      	adds	r1, r3, #4
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	9103      	str	r1, [sp, #12]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	bfbb      	ittet	lt
 8014ab0:	425b      	neglt	r3, r3
 8014ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8014ab6:	9307      	strge	r3, [sp, #28]
 8014ab8:	9307      	strlt	r3, [sp, #28]
 8014aba:	bfb8      	it	lt
 8014abc:	9204      	strlt	r2, [sp, #16]
 8014abe:	7823      	ldrb	r3, [r4, #0]
 8014ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8014ac2:	d10a      	bne.n	8014ada <_vfiprintf_r+0x156>
 8014ac4:	7863      	ldrb	r3, [r4, #1]
 8014ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ac8:	d132      	bne.n	8014b30 <_vfiprintf_r+0x1ac>
 8014aca:	9b03      	ldr	r3, [sp, #12]
 8014acc:	1d1a      	adds	r2, r3, #4
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	9203      	str	r2, [sp, #12]
 8014ad2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014ad6:	3402      	adds	r4, #2
 8014ad8:	9305      	str	r3, [sp, #20]
 8014ada:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014bb0 <_vfiprintf_r+0x22c>
 8014ade:	7821      	ldrb	r1, [r4, #0]
 8014ae0:	2203      	movs	r2, #3
 8014ae2:	4650      	mov	r0, sl
 8014ae4:	f7eb fb94 	bl	8000210 <memchr>
 8014ae8:	b138      	cbz	r0, 8014afa <_vfiprintf_r+0x176>
 8014aea:	9b04      	ldr	r3, [sp, #16]
 8014aec:	eba0 000a 	sub.w	r0, r0, sl
 8014af0:	2240      	movs	r2, #64	@ 0x40
 8014af2:	4082      	lsls	r2, r0
 8014af4:	4313      	orrs	r3, r2
 8014af6:	3401      	adds	r4, #1
 8014af8:	9304      	str	r3, [sp, #16]
 8014afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014afe:	4829      	ldr	r0, [pc, #164]	@ (8014ba4 <_vfiprintf_r+0x220>)
 8014b00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014b04:	2206      	movs	r2, #6
 8014b06:	f7eb fb83 	bl	8000210 <memchr>
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	d03f      	beq.n	8014b8e <_vfiprintf_r+0x20a>
 8014b0e:	4b26      	ldr	r3, [pc, #152]	@ (8014ba8 <_vfiprintf_r+0x224>)
 8014b10:	bb1b      	cbnz	r3, 8014b5a <_vfiprintf_r+0x1d6>
 8014b12:	9b03      	ldr	r3, [sp, #12]
 8014b14:	3307      	adds	r3, #7
 8014b16:	f023 0307 	bic.w	r3, r3, #7
 8014b1a:	3308      	adds	r3, #8
 8014b1c:	9303      	str	r3, [sp, #12]
 8014b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b20:	443b      	add	r3, r7
 8014b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b24:	e76a      	b.n	80149fc <_vfiprintf_r+0x78>
 8014b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b2a:	460c      	mov	r4, r1
 8014b2c:	2001      	movs	r0, #1
 8014b2e:	e7a8      	b.n	8014a82 <_vfiprintf_r+0xfe>
 8014b30:	2300      	movs	r3, #0
 8014b32:	3401      	adds	r4, #1
 8014b34:	9305      	str	r3, [sp, #20]
 8014b36:	4619      	mov	r1, r3
 8014b38:	f04f 0c0a 	mov.w	ip, #10
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b42:	3a30      	subs	r2, #48	@ 0x30
 8014b44:	2a09      	cmp	r2, #9
 8014b46:	d903      	bls.n	8014b50 <_vfiprintf_r+0x1cc>
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d0c6      	beq.n	8014ada <_vfiprintf_r+0x156>
 8014b4c:	9105      	str	r1, [sp, #20]
 8014b4e:	e7c4      	b.n	8014ada <_vfiprintf_r+0x156>
 8014b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b54:	4604      	mov	r4, r0
 8014b56:	2301      	movs	r3, #1
 8014b58:	e7f0      	b.n	8014b3c <_vfiprintf_r+0x1b8>
 8014b5a:	ab03      	add	r3, sp, #12
 8014b5c:	9300      	str	r3, [sp, #0]
 8014b5e:	462a      	mov	r2, r5
 8014b60:	4b12      	ldr	r3, [pc, #72]	@ (8014bac <_vfiprintf_r+0x228>)
 8014b62:	a904      	add	r1, sp, #16
 8014b64:	4630      	mov	r0, r6
 8014b66:	f7fb fe87 	bl	8010878 <_printf_float>
 8014b6a:	4607      	mov	r7, r0
 8014b6c:	1c78      	adds	r0, r7, #1
 8014b6e:	d1d6      	bne.n	8014b1e <_vfiprintf_r+0x19a>
 8014b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b72:	07d9      	lsls	r1, r3, #31
 8014b74:	d405      	bmi.n	8014b82 <_vfiprintf_r+0x1fe>
 8014b76:	89ab      	ldrh	r3, [r5, #12]
 8014b78:	059a      	lsls	r2, r3, #22
 8014b7a:	d402      	bmi.n	8014b82 <_vfiprintf_r+0x1fe>
 8014b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b7e:	f7fc fe1f 	bl	80117c0 <__retarget_lock_release_recursive>
 8014b82:	89ab      	ldrh	r3, [r5, #12]
 8014b84:	065b      	lsls	r3, r3, #25
 8014b86:	f53f af1f 	bmi.w	80149c8 <_vfiprintf_r+0x44>
 8014b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014b8c:	e71e      	b.n	80149cc <_vfiprintf_r+0x48>
 8014b8e:	ab03      	add	r3, sp, #12
 8014b90:	9300      	str	r3, [sp, #0]
 8014b92:	462a      	mov	r2, r5
 8014b94:	4b05      	ldr	r3, [pc, #20]	@ (8014bac <_vfiprintf_r+0x228>)
 8014b96:	a904      	add	r1, sp, #16
 8014b98:	4630      	mov	r0, r6
 8014b9a:	f7fc f905 	bl	8010da8 <_printf_i>
 8014b9e:	e7e4      	b.n	8014b6a <_vfiprintf_r+0x1e6>
 8014ba0:	08018b99 	.word	0x08018b99
 8014ba4:	08018ba3 	.word	0x08018ba3
 8014ba8:	08010879 	.word	0x08010879
 8014bac:	08014961 	.word	0x08014961
 8014bb0:	08018b9f 	.word	0x08018b9f

08014bb4 <__swbuf_r>:
 8014bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bb6:	460e      	mov	r6, r1
 8014bb8:	4614      	mov	r4, r2
 8014bba:	4605      	mov	r5, r0
 8014bbc:	b118      	cbz	r0, 8014bc6 <__swbuf_r+0x12>
 8014bbe:	6a03      	ldr	r3, [r0, #32]
 8014bc0:	b90b      	cbnz	r3, 8014bc6 <__swbuf_r+0x12>
 8014bc2:	f7fc fcb1 	bl	8011528 <__sinit>
 8014bc6:	69a3      	ldr	r3, [r4, #24]
 8014bc8:	60a3      	str	r3, [r4, #8]
 8014bca:	89a3      	ldrh	r3, [r4, #12]
 8014bcc:	071a      	lsls	r2, r3, #28
 8014bce:	d501      	bpl.n	8014bd4 <__swbuf_r+0x20>
 8014bd0:	6923      	ldr	r3, [r4, #16]
 8014bd2:	b943      	cbnz	r3, 8014be6 <__swbuf_r+0x32>
 8014bd4:	4621      	mov	r1, r4
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	f000 f82a 	bl	8014c30 <__swsetup_r>
 8014bdc:	b118      	cbz	r0, 8014be6 <__swbuf_r+0x32>
 8014bde:	f04f 37ff 	mov.w	r7, #4294967295
 8014be2:	4638      	mov	r0, r7
 8014be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014be6:	6823      	ldr	r3, [r4, #0]
 8014be8:	6922      	ldr	r2, [r4, #16]
 8014bea:	1a98      	subs	r0, r3, r2
 8014bec:	6963      	ldr	r3, [r4, #20]
 8014bee:	b2f6      	uxtb	r6, r6
 8014bf0:	4283      	cmp	r3, r0
 8014bf2:	4637      	mov	r7, r6
 8014bf4:	dc05      	bgt.n	8014c02 <__swbuf_r+0x4e>
 8014bf6:	4621      	mov	r1, r4
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	f7ff fa47 	bl	801408c <_fflush_r>
 8014bfe:	2800      	cmp	r0, #0
 8014c00:	d1ed      	bne.n	8014bde <__swbuf_r+0x2a>
 8014c02:	68a3      	ldr	r3, [r4, #8]
 8014c04:	3b01      	subs	r3, #1
 8014c06:	60a3      	str	r3, [r4, #8]
 8014c08:	6823      	ldr	r3, [r4, #0]
 8014c0a:	1c5a      	adds	r2, r3, #1
 8014c0c:	6022      	str	r2, [r4, #0]
 8014c0e:	701e      	strb	r6, [r3, #0]
 8014c10:	6962      	ldr	r2, [r4, #20]
 8014c12:	1c43      	adds	r3, r0, #1
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d004      	beq.n	8014c22 <__swbuf_r+0x6e>
 8014c18:	89a3      	ldrh	r3, [r4, #12]
 8014c1a:	07db      	lsls	r3, r3, #31
 8014c1c:	d5e1      	bpl.n	8014be2 <__swbuf_r+0x2e>
 8014c1e:	2e0a      	cmp	r6, #10
 8014c20:	d1df      	bne.n	8014be2 <__swbuf_r+0x2e>
 8014c22:	4621      	mov	r1, r4
 8014c24:	4628      	mov	r0, r5
 8014c26:	f7ff fa31 	bl	801408c <_fflush_r>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	d0d9      	beq.n	8014be2 <__swbuf_r+0x2e>
 8014c2e:	e7d6      	b.n	8014bde <__swbuf_r+0x2a>

08014c30 <__swsetup_r>:
 8014c30:	b538      	push	{r3, r4, r5, lr}
 8014c32:	4b29      	ldr	r3, [pc, #164]	@ (8014cd8 <__swsetup_r+0xa8>)
 8014c34:	4605      	mov	r5, r0
 8014c36:	6818      	ldr	r0, [r3, #0]
 8014c38:	460c      	mov	r4, r1
 8014c3a:	b118      	cbz	r0, 8014c44 <__swsetup_r+0x14>
 8014c3c:	6a03      	ldr	r3, [r0, #32]
 8014c3e:	b90b      	cbnz	r3, 8014c44 <__swsetup_r+0x14>
 8014c40:	f7fc fc72 	bl	8011528 <__sinit>
 8014c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c48:	0719      	lsls	r1, r3, #28
 8014c4a:	d422      	bmi.n	8014c92 <__swsetup_r+0x62>
 8014c4c:	06da      	lsls	r2, r3, #27
 8014c4e:	d407      	bmi.n	8014c60 <__swsetup_r+0x30>
 8014c50:	2209      	movs	r2, #9
 8014c52:	602a      	str	r2, [r5, #0]
 8014c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c58:	81a3      	strh	r3, [r4, #12]
 8014c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c5e:	e033      	b.n	8014cc8 <__swsetup_r+0x98>
 8014c60:	0758      	lsls	r0, r3, #29
 8014c62:	d512      	bpl.n	8014c8a <__swsetup_r+0x5a>
 8014c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014c66:	b141      	cbz	r1, 8014c7a <__swsetup_r+0x4a>
 8014c68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014c6c:	4299      	cmp	r1, r3
 8014c6e:	d002      	beq.n	8014c76 <__swsetup_r+0x46>
 8014c70:	4628      	mov	r0, r5
 8014c72:	f7fd fbf9 	bl	8012468 <_free_r>
 8014c76:	2300      	movs	r3, #0
 8014c78:	6363      	str	r3, [r4, #52]	@ 0x34
 8014c7a:	89a3      	ldrh	r3, [r4, #12]
 8014c7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014c80:	81a3      	strh	r3, [r4, #12]
 8014c82:	2300      	movs	r3, #0
 8014c84:	6063      	str	r3, [r4, #4]
 8014c86:	6923      	ldr	r3, [r4, #16]
 8014c88:	6023      	str	r3, [r4, #0]
 8014c8a:	89a3      	ldrh	r3, [r4, #12]
 8014c8c:	f043 0308 	orr.w	r3, r3, #8
 8014c90:	81a3      	strh	r3, [r4, #12]
 8014c92:	6923      	ldr	r3, [r4, #16]
 8014c94:	b94b      	cbnz	r3, 8014caa <__swsetup_r+0x7a>
 8014c96:	89a3      	ldrh	r3, [r4, #12]
 8014c98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ca0:	d003      	beq.n	8014caa <__swsetup_r+0x7a>
 8014ca2:	4621      	mov	r1, r4
 8014ca4:	4628      	mov	r0, r5
 8014ca6:	f000 f883 	bl	8014db0 <__smakebuf_r>
 8014caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cae:	f013 0201 	ands.w	r2, r3, #1
 8014cb2:	d00a      	beq.n	8014cca <__swsetup_r+0x9a>
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	60a2      	str	r2, [r4, #8]
 8014cb8:	6962      	ldr	r2, [r4, #20]
 8014cba:	4252      	negs	r2, r2
 8014cbc:	61a2      	str	r2, [r4, #24]
 8014cbe:	6922      	ldr	r2, [r4, #16]
 8014cc0:	b942      	cbnz	r2, 8014cd4 <__swsetup_r+0xa4>
 8014cc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014cc6:	d1c5      	bne.n	8014c54 <__swsetup_r+0x24>
 8014cc8:	bd38      	pop	{r3, r4, r5, pc}
 8014cca:	0799      	lsls	r1, r3, #30
 8014ccc:	bf58      	it	pl
 8014cce:	6962      	ldrpl	r2, [r4, #20]
 8014cd0:	60a2      	str	r2, [r4, #8]
 8014cd2:	e7f4      	b.n	8014cbe <__swsetup_r+0x8e>
 8014cd4:	2000      	movs	r0, #0
 8014cd6:	e7f7      	b.n	8014cc8 <__swsetup_r+0x98>
 8014cd8:	20000048 	.word	0x20000048

08014cdc <_raise_r>:
 8014cdc:	291f      	cmp	r1, #31
 8014cde:	b538      	push	{r3, r4, r5, lr}
 8014ce0:	4605      	mov	r5, r0
 8014ce2:	460c      	mov	r4, r1
 8014ce4:	d904      	bls.n	8014cf0 <_raise_r+0x14>
 8014ce6:	2316      	movs	r3, #22
 8014ce8:	6003      	str	r3, [r0, #0]
 8014cea:	f04f 30ff 	mov.w	r0, #4294967295
 8014cee:	bd38      	pop	{r3, r4, r5, pc}
 8014cf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014cf2:	b112      	cbz	r2, 8014cfa <_raise_r+0x1e>
 8014cf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014cf8:	b94b      	cbnz	r3, 8014d0e <_raise_r+0x32>
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	f000 f830 	bl	8014d60 <_getpid_r>
 8014d00:	4622      	mov	r2, r4
 8014d02:	4601      	mov	r1, r0
 8014d04:	4628      	mov	r0, r5
 8014d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d0a:	f000 b817 	b.w	8014d3c <_kill_r>
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d00a      	beq.n	8014d28 <_raise_r+0x4c>
 8014d12:	1c59      	adds	r1, r3, #1
 8014d14:	d103      	bne.n	8014d1e <_raise_r+0x42>
 8014d16:	2316      	movs	r3, #22
 8014d18:	6003      	str	r3, [r0, #0]
 8014d1a:	2001      	movs	r0, #1
 8014d1c:	e7e7      	b.n	8014cee <_raise_r+0x12>
 8014d1e:	2100      	movs	r1, #0
 8014d20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014d24:	4620      	mov	r0, r4
 8014d26:	4798      	blx	r3
 8014d28:	2000      	movs	r0, #0
 8014d2a:	e7e0      	b.n	8014cee <_raise_r+0x12>

08014d2c <raise>:
 8014d2c:	4b02      	ldr	r3, [pc, #8]	@ (8014d38 <raise+0xc>)
 8014d2e:	4601      	mov	r1, r0
 8014d30:	6818      	ldr	r0, [r3, #0]
 8014d32:	f7ff bfd3 	b.w	8014cdc <_raise_r>
 8014d36:	bf00      	nop
 8014d38:	20000048 	.word	0x20000048

08014d3c <_kill_r>:
 8014d3c:	b538      	push	{r3, r4, r5, lr}
 8014d3e:	4d07      	ldr	r5, [pc, #28]	@ (8014d5c <_kill_r+0x20>)
 8014d40:	2300      	movs	r3, #0
 8014d42:	4604      	mov	r4, r0
 8014d44:	4608      	mov	r0, r1
 8014d46:	4611      	mov	r1, r2
 8014d48:	602b      	str	r3, [r5, #0]
 8014d4a:	f7ed fcf7 	bl	800273c <_kill>
 8014d4e:	1c43      	adds	r3, r0, #1
 8014d50:	d102      	bne.n	8014d58 <_kill_r+0x1c>
 8014d52:	682b      	ldr	r3, [r5, #0]
 8014d54:	b103      	cbz	r3, 8014d58 <_kill_r+0x1c>
 8014d56:	6023      	str	r3, [r4, #0]
 8014d58:	bd38      	pop	{r3, r4, r5, pc}
 8014d5a:	bf00      	nop
 8014d5c:	20002a5c 	.word	0x20002a5c

08014d60 <_getpid_r>:
 8014d60:	f7ed bce4 	b.w	800272c <_getpid>

08014d64 <__swhatbuf_r>:
 8014d64:	b570      	push	{r4, r5, r6, lr}
 8014d66:	460c      	mov	r4, r1
 8014d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d6c:	2900      	cmp	r1, #0
 8014d6e:	b096      	sub	sp, #88	@ 0x58
 8014d70:	4615      	mov	r5, r2
 8014d72:	461e      	mov	r6, r3
 8014d74:	da0d      	bge.n	8014d92 <__swhatbuf_r+0x2e>
 8014d76:	89a3      	ldrh	r3, [r4, #12]
 8014d78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014d7c:	f04f 0100 	mov.w	r1, #0
 8014d80:	bf14      	ite	ne
 8014d82:	2340      	movne	r3, #64	@ 0x40
 8014d84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014d88:	2000      	movs	r0, #0
 8014d8a:	6031      	str	r1, [r6, #0]
 8014d8c:	602b      	str	r3, [r5, #0]
 8014d8e:	b016      	add	sp, #88	@ 0x58
 8014d90:	bd70      	pop	{r4, r5, r6, pc}
 8014d92:	466a      	mov	r2, sp
 8014d94:	f000 f848 	bl	8014e28 <_fstat_r>
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	dbec      	blt.n	8014d76 <__swhatbuf_r+0x12>
 8014d9c:	9901      	ldr	r1, [sp, #4]
 8014d9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014da2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014da6:	4259      	negs	r1, r3
 8014da8:	4159      	adcs	r1, r3
 8014daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014dae:	e7eb      	b.n	8014d88 <__swhatbuf_r+0x24>

08014db0 <__smakebuf_r>:
 8014db0:	898b      	ldrh	r3, [r1, #12]
 8014db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014db4:	079d      	lsls	r5, r3, #30
 8014db6:	4606      	mov	r6, r0
 8014db8:	460c      	mov	r4, r1
 8014dba:	d507      	bpl.n	8014dcc <__smakebuf_r+0x1c>
 8014dbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014dc0:	6023      	str	r3, [r4, #0]
 8014dc2:	6123      	str	r3, [r4, #16]
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	6163      	str	r3, [r4, #20]
 8014dc8:	b003      	add	sp, #12
 8014dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dcc:	ab01      	add	r3, sp, #4
 8014dce:	466a      	mov	r2, sp
 8014dd0:	f7ff ffc8 	bl	8014d64 <__swhatbuf_r>
 8014dd4:	9f00      	ldr	r7, [sp, #0]
 8014dd6:	4605      	mov	r5, r0
 8014dd8:	4639      	mov	r1, r7
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f7fd fbb8 	bl	8012550 <_malloc_r>
 8014de0:	b948      	cbnz	r0, 8014df6 <__smakebuf_r+0x46>
 8014de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014de6:	059a      	lsls	r2, r3, #22
 8014de8:	d4ee      	bmi.n	8014dc8 <__smakebuf_r+0x18>
 8014dea:	f023 0303 	bic.w	r3, r3, #3
 8014dee:	f043 0302 	orr.w	r3, r3, #2
 8014df2:	81a3      	strh	r3, [r4, #12]
 8014df4:	e7e2      	b.n	8014dbc <__smakebuf_r+0xc>
 8014df6:	89a3      	ldrh	r3, [r4, #12]
 8014df8:	6020      	str	r0, [r4, #0]
 8014dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014dfe:	81a3      	strh	r3, [r4, #12]
 8014e00:	9b01      	ldr	r3, [sp, #4]
 8014e02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014e06:	b15b      	cbz	r3, 8014e20 <__smakebuf_r+0x70>
 8014e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e0c:	4630      	mov	r0, r6
 8014e0e:	f000 f81d 	bl	8014e4c <_isatty_r>
 8014e12:	b128      	cbz	r0, 8014e20 <__smakebuf_r+0x70>
 8014e14:	89a3      	ldrh	r3, [r4, #12]
 8014e16:	f023 0303 	bic.w	r3, r3, #3
 8014e1a:	f043 0301 	orr.w	r3, r3, #1
 8014e1e:	81a3      	strh	r3, [r4, #12]
 8014e20:	89a3      	ldrh	r3, [r4, #12]
 8014e22:	431d      	orrs	r5, r3
 8014e24:	81a5      	strh	r5, [r4, #12]
 8014e26:	e7cf      	b.n	8014dc8 <__smakebuf_r+0x18>

08014e28 <_fstat_r>:
 8014e28:	b538      	push	{r3, r4, r5, lr}
 8014e2a:	4d07      	ldr	r5, [pc, #28]	@ (8014e48 <_fstat_r+0x20>)
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	4604      	mov	r4, r0
 8014e30:	4608      	mov	r0, r1
 8014e32:	4611      	mov	r1, r2
 8014e34:	602b      	str	r3, [r5, #0]
 8014e36:	f7ed fce1 	bl	80027fc <_fstat>
 8014e3a:	1c43      	adds	r3, r0, #1
 8014e3c:	d102      	bne.n	8014e44 <_fstat_r+0x1c>
 8014e3e:	682b      	ldr	r3, [r5, #0]
 8014e40:	b103      	cbz	r3, 8014e44 <_fstat_r+0x1c>
 8014e42:	6023      	str	r3, [r4, #0]
 8014e44:	bd38      	pop	{r3, r4, r5, pc}
 8014e46:	bf00      	nop
 8014e48:	20002a5c 	.word	0x20002a5c

08014e4c <_isatty_r>:
 8014e4c:	b538      	push	{r3, r4, r5, lr}
 8014e4e:	4d06      	ldr	r5, [pc, #24]	@ (8014e68 <_isatty_r+0x1c>)
 8014e50:	2300      	movs	r3, #0
 8014e52:	4604      	mov	r4, r0
 8014e54:	4608      	mov	r0, r1
 8014e56:	602b      	str	r3, [r5, #0]
 8014e58:	f7ed fce0 	bl	800281c <_isatty>
 8014e5c:	1c43      	adds	r3, r0, #1
 8014e5e:	d102      	bne.n	8014e66 <_isatty_r+0x1a>
 8014e60:	682b      	ldr	r3, [r5, #0]
 8014e62:	b103      	cbz	r3, 8014e66 <_isatty_r+0x1a>
 8014e64:	6023      	str	r3, [r4, #0]
 8014e66:	bd38      	pop	{r3, r4, r5, pc}
 8014e68:	20002a5c 	.word	0x20002a5c

08014e6c <sqrtf>:
 8014e6c:	b508      	push	{r3, lr}
 8014e6e:	ed2d 8b02 	vpush	{d8}
 8014e72:	eeb0 8a40 	vmov.f32	s16, s0
 8014e76:	f000 f817 	bl	8014ea8 <__ieee754_sqrtf>
 8014e7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8014e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e82:	d60c      	bvs.n	8014e9e <sqrtf+0x32>
 8014e84:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014ea4 <sqrtf+0x38>
 8014e88:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e90:	d505      	bpl.n	8014e9e <sqrtf+0x32>
 8014e92:	f7fc fc69 	bl	8011768 <__errno>
 8014e96:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014e9a:	2321      	movs	r3, #33	@ 0x21
 8014e9c:	6003      	str	r3, [r0, #0]
 8014e9e:	ecbd 8b02 	vpop	{d8}
 8014ea2:	bd08      	pop	{r3, pc}
 8014ea4:	00000000 	.word	0x00000000

08014ea8 <__ieee754_sqrtf>:
 8014ea8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014eac:	4770      	bx	lr
	...

08014eb0 <_init>:
 8014eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eb2:	bf00      	nop
 8014eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eb6:	bc08      	pop	{r3}
 8014eb8:	469e      	mov	lr, r3
 8014eba:	4770      	bx	lr

08014ebc <_fini>:
 8014ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ebe:	bf00      	nop
 8014ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ec2:	bc08      	pop	{r3}
 8014ec4:	469e      	mov	lr, r3
 8014ec6:	4770      	bx	lr
