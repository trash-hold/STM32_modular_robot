
NUCLEO-F446RE_prototypes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800367c  0800367c  0000467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003694  08003694  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003694  08003694  00004694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800369c  0800369c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800369c  0800369c  0000469c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036a0  080036a0  000046a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  080036b0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080036b0  000050f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b934  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfe  00000000  00000000  00010970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00012770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bb  00000000  00000000  00013160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fa8  00000000  00000000  0001391b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e932  00000000  00000000  000348c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7298  00000000  00000000  000431f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a48d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000282c  00000000  00000000  0010a4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010ccfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003664 	.word	0x08003664

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003664 	.word	0x08003664

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <AccAdd_I2CHandler>:
I2C_HandleTypeDef *acc_i2c;
int16_t read_buff[3];
uint8_t data_buffer[6];

void AccAdd_I2CHandler(I2C_HandleTypeDef* handler)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	acc_i2c = handler;
 80004fc:	4a04      	ldr	r2, [pc, #16]	@ (8000510 <AccAdd_I2CHandler+0x1c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6013      	str	r3, [r2, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000028 	.word	0x20000028

08000514 <AccCmd>:

ReturnCode AccCmd(uint8_t reg, uint8_t value)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buffer[] = {reg, value};
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	733b      	strb	r3, [r7, #12]
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(acc_i2c, ACC_ALT_ADDRESS, tx_buffer, 2, 200);
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <AccCmd+0x44>)
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	f107 020c 	add.w	r2, r7, #12
 8000534:	23c8      	movs	r3, #200	@ 0xc8
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2302      	movs	r3, #2
 800053a:	21a6      	movs	r1, #166	@ 0xa6
 800053c:	f001 f8ea 	bl	8001714 <HAL_I2C_Master_Transmit>
 8000540:	4603      	mov	r3, r0
 8000542:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <AccCmd+0x3a>
		return G_ERROR;
 800054a:	2300      	movs	r3, #0
 800054c:	e000      	b.n	8000550 <AccCmd+0x3c>

	return G_SUCCESS;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000028 	.word	0x20000028

0800055c <AccRead>:

// Perform single or sequential blocking read
ReturnCode AccRead(uint8_t* buffer, uint8_t address, uint8_t bytes_number)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af04      	add	r7, sp, #16
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
 8000568:	4613      	mov	r3, r2
 800056a:	70bb      	strb	r3, [r7, #2]
	// HAL doc 524
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(acc_i2c, ACC_ALT_ADDRESS, address, 1, buffer, bytes_number, ACC_I2C_TIMEOUT);
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <AccRead+0x48>)
 800056e:	6818      	ldr	r0, [r3, #0]
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	b29a      	uxth	r2, r3
 8000574:	78bb      	ldrb	r3, [r7, #2]
 8000576:	b29b      	uxth	r3, r3
 8000578:	2164      	movs	r1, #100	@ 0x64
 800057a:	9102      	str	r1, [sp, #8]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	21a6      	movs	r1, #166	@ 0xa6
 8000586:	f001 f9c3 	bl	8001910 <HAL_I2C_Mem_Read>
 800058a:	4603      	mov	r3, r0
 800058c:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <AccRead+0x3c>
		return G_ERROR;
 8000594:	2300      	movs	r3, #0
 8000596:	e000      	b.n	800059a <AccRead+0x3e>

	return G_SUCCESS;
 8000598:	2301      	movs	r3, #1
}
 800059a:	4618      	mov	r0, r3
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000028 	.word	0x20000028

080005a8 <AccRawMeasurment>:

// Perform read of XYZ entry
ReturnCode AccRawMeasurment(int16_t* xyz_buffer)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	ReturnCode status = AccRead(&data_buffer, ACC_X0_REG, 6);
 80005b0:	2206      	movs	r2, #6
 80005b2:	2132      	movs	r1, #50	@ 0x32
 80005b4:	4818      	ldr	r0, [pc, #96]	@ (8000618 <AccRawMeasurment+0x70>)
 80005b6:	f7ff ffd1 	bl	800055c <AccRead>
 80005ba:	4603      	mov	r3, r0
 80005bc:	73fb      	strb	r3, [r7, #15]

	if(status != G_SUCCESS)
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d001      	beq.n	80005c8 <AccRawMeasurment+0x20>
		return G_ERROR;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e023      	b.n	8000610 <AccRawMeasurment+0x68>

	// Combine readings
	*(xyz_buffer) = ((data_buffer[1] << 8) | data_buffer[0]);
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <AccRawMeasurment+0x70>)
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	021b      	lsls	r3, r3, #8
 80005ce:	b21a      	sxth	r2, r3
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <AccRawMeasurment+0x70>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b21a      	sxth	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 1) = ((data_buffer[3] << 8) | data_buffer[2]);
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <AccRawMeasurment+0x70>)
 80005e0:	78db      	ldrb	r3, [r3, #3]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	b219      	sxth	r1, r3
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <AccRawMeasurment+0x70>)
 80005e8:	789b      	ldrb	r3, [r3, #2]
 80005ea:	b21a      	sxth	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3302      	adds	r3, #2
 80005f0:	430a      	orrs	r2, r1
 80005f2:	b212      	sxth	r2, r2
 80005f4:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 2) = ((data_buffer[5] << 8) | data_buffer[4]);
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <AccRawMeasurment+0x70>)
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	b219      	sxth	r1, r3
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <AccRawMeasurment+0x70>)
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	b21a      	sxth	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3304      	adds	r3, #4
 8000608:	430a      	orrs	r2, r1
 800060a:	b212      	sxth	r2, r2
 800060c:	801a      	strh	r2, [r3, #0]

	return G_SUCCESS;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000034 	.word	0x20000034

0800061c <AccAvgMeasurment>:

ReturnCode AccAvgMeasurment(int16_t *xyz_buffer, uint32_t samples)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	int32_t avg_x = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
	int32_t avg_y = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
	int32_t avg_z = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]

	// Get sum of
	for(uint16_t i = 1; i <= samples; i++)
 8000632:	2301      	movs	r3, #1
 8000634:	817b      	strh	r3, [r7, #10]
 8000636:	e024      	b.n	8000682 <AccAvgMeasurment+0x66>
	{
		ReturnCode status = AccRawMeasurment(read_buff);
 8000638:	4822      	ldr	r0, [pc, #136]	@ (80006c4 <AccAvgMeasurment+0xa8>)
 800063a:	f7ff ffb5 	bl	80005a8 <AccRawMeasurment>
 800063e:	4603      	mov	r3, r0
 8000640:	727b      	strb	r3, [r7, #9]

		if(status != G_SUCCESS)
 8000642:	7a7b      	ldrb	r3, [r7, #9]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d001      	beq.n	800064c <AccAvgMeasurment+0x30>
			return G_ERROR;
 8000648:	2300      	movs	r3, #0
 800064a:	e036      	b.n	80006ba <AccAvgMeasurment+0x9e>

		avg_x += read_buff[0];
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <AccAvgMeasurment+0xa8>)
 800064e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000652:	461a      	mov	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	4413      	add	r3, r2
 8000658:	617b      	str	r3, [r7, #20]
		avg_y += read_buff[1];
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <AccAvgMeasurment+0xa8>)
 800065c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000660:	461a      	mov	r2, r3
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	4413      	add	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
		avg_z += read_buff[2];
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <AccAvgMeasurment+0xa8>)
 800066a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800066e:	461a      	mov	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4413      	add	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]

		// Feedback from accelometer - wait to collect data
		HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	@ 0x64
 8000678:	f000 fc50 	bl	8000f1c <HAL_Delay>
	for(uint16_t i = 1; i <= samples; i++)
 800067c:	897b      	ldrh	r3, [r7, #10]
 800067e:	3301      	adds	r3, #1
 8000680:	817b      	strh	r3, [r7, #10]
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	d2d6      	bcs.n	8000638 <AccAvgMeasurment+0x1c>
	}

	// Get average
	*(xyz_buffer) = avg_x / samples;
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	b21a      	sxth	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 1) = avg_y / samples;
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	fbb2 f2f3 	udiv	r2, r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3302      	adds	r3, #2
 80006a4:	b212      	sxth	r2, r2
 80006a6:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 2) = avg_z / samples;
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3304      	adds	r3, #4
 80006b4:	b212      	sxth	r2, r2
 80006b6:	801a      	strh	r2, [r3, #0]

	return G_SUCCESS;
 80006b8:	2301      	movs	r3, #1
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000002c 	.word	0x2000002c

080006c8 <AccSelfTest>:


ReturnCode AccSelfTest(int16_t* result_buffer)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	ReturnCode status;

	// Turn on power
	status = AccCmd(ACC_PWR_CTRL_REG, 0x00);
 80006d0:	2100      	movs	r1, #0
 80006d2:	202d      	movs	r0, #45	@ 0x2d
 80006d4:	f7ff ff1e 	bl	8000514 <AccCmd>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
	if(status != G_SUCCESS)
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d001      	beq.n	80006e6 <AccSelfTest+0x1e>
		return G_ERROR;
 80006e2:	2300      	movs	r3, #0
 80006e4:	e0d4      	b.n	8000890 <AccSelfTest+0x1c8>
	HAL_Delay(5);
 80006e6:	2005      	movs	r0, #5
 80006e8:	f000 fc18 	bl	8000f1c <HAL_Delay>

	// Change data format to 16g, full res (13bit)
	status = AccCmd(ACC_DATA_FORMAT_REG, 0x0B);
 80006ec:	210b      	movs	r1, #11
 80006ee:	2031      	movs	r0, #49	@ 0x31
 80006f0:	f7ff ff10 	bl	8000514 <AccCmd>
 80006f4:	4603      	mov	r3, r0
 80006f6:	73fb      	strb	r3, [r7, #15]
	if(status != G_SUCCESS)
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d001      	beq.n	8000702 <AccSelfTest+0x3a>
		return G_ERROR;
 80006fe:	2300      	movs	r3, #0
 8000700:	e0c6      	b.n	8000890 <AccSelfTest+0x1c8>
	// Back to measurment mode
	status = AccCmd(ACC_PWR_CTRL_REG, 0x08);
 8000702:	2108      	movs	r1, #8
 8000704:	202d      	movs	r0, #45	@ 0x2d
 8000706:	f7ff ff05 	bl	8000514 <AccCmd>
 800070a:	4603      	mov	r3, r0
 800070c:	73fb      	strb	r3, [r7, #15]
	if(status != G_SUCCESS)
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d001      	beq.n	8000718 <AccSelfTest+0x50>
		return G_ERROR;
 8000714:	2300      	movs	r3, #0
 8000716:	e0bb      	b.n	8000890 <AccSelfTest+0x1c8>

	// Begin self test
	status = AccAvgMeasurment(read_buff, 64);
 8000718:	2140      	movs	r1, #64	@ 0x40
 800071a:	485f      	ldr	r0, [pc, #380]	@ (8000898 <AccSelfTest+0x1d0>)
 800071c:	f7ff ff7e 	bl	800061c <AccAvgMeasurment>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
	if(status != G_SUCCESS)
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d001      	beq.n	800072e <AccSelfTest+0x66>
		return G_ERROR;
 800072a:	2300      	movs	r3, #0
 800072c:	e0b0      	b.n	8000890 <AccSelfTest+0x1c8>
	*(result_buffer) = (-read_buff[0]);
 800072e:	4b5a      	ldr	r3, [pc, #360]	@ (8000898 <AccSelfTest+0x1d0>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	b29b      	uxth	r3, r3
 8000736:	425b      	negs	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	b21a      	sxth	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	801a      	strh	r2, [r3, #0]
	*(result_buffer + 1) = (-read_buff[1]);
 8000740:	4b55      	ldr	r3, [pc, #340]	@ (8000898 <AccSelfTest+0x1d0>)
 8000742:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000746:	b29b      	uxth	r3, r3
 8000748:	425b      	negs	r3, r3
 800074a:	b29a      	uxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3302      	adds	r3, #2
 8000750:	b212      	sxth	r2, r2
 8000752:	801a      	strh	r2, [r3, #0]
	*(result_buffer + 2) = (-read_buff[2]);
 8000754:	4b50      	ldr	r3, [pc, #320]	@ (8000898 <AccSelfTest+0x1d0>)
 8000756:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800075a:	b29b      	uxth	r3, r3
 800075c:	425b      	negs	r3, r3
 800075e:	b29a      	uxth	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3304      	adds	r3, #4
 8000764:	b212      	sxth	r2, r2
 8000766:	801a      	strh	r2, [r3, #0]

	// Turn on self-test
	status = AccCmd(ACC_DATA_FORMAT_REG, 0x8B);
 8000768:	218b      	movs	r1, #139	@ 0x8b
 800076a:	2031      	movs	r0, #49	@ 0x31
 800076c:	f7ff fed2 	bl	8000514 <AccCmd>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]
	if(status != G_SUCCESS)
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d001      	beq.n	800077e <AccSelfTest+0xb6>
		return G_ERROR;
 800077a:	2300      	movs	r3, #0
 800077c:	e088      	b.n	8000890 <AccSelfTest+0x1c8>
	HAL_Delay(5);
 800077e:	2005      	movs	r0, #5
 8000780:	f000 fbcc 	bl	8000f1c <HAL_Delay>

	status = AccAvgMeasurment(read_buff, 64);
 8000784:	2140      	movs	r1, #64	@ 0x40
 8000786:	4844      	ldr	r0, [pc, #272]	@ (8000898 <AccSelfTest+0x1d0>)
 8000788:	f7ff ff48 	bl	800061c <AccAvgMeasurment>
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]
	if(status != G_SUCCESS)
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d001      	beq.n	800079a <AccSelfTest+0xd2>
		return G_ERROR;
 8000796:	2300      	movs	r3, #0
 8000798:	e07a      	b.n	8000890 <AccSelfTest+0x1c8>
	*(result_buffer) += read_buff[0];
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000898 <AccSelfTest+0x1d0>)
 80007a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	4413      	add	r3, r2
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	801a      	strh	r2, [r3, #0]
	*(result_buffer + 1) += read_buff[1];
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3302      	adds	r3, #2
 80007b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <AccSelfTest+0x1d0>)
 80007c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4413      	add	r3, r2
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3302      	adds	r3, #2
 80007ce:	b212      	sxth	r2, r2
 80007d0:	801a      	strh	r2, [r3, #0]
	*(result_buffer + 2) += read_buff[2];
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3304      	adds	r3, #4
 80007d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000898 <AccSelfTest+0x1d0>)
 80007de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4413      	add	r3, r2
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3304      	adds	r3, #4
 80007ec:	b212      	sxth	r2, r2
 80007ee:	801a      	strh	r2, [r3, #0]


	// Turn of self-test
	status = AccCmd(ACC_DATA_FORMAT_REG, 0x01);
 80007f0:	2101      	movs	r1, #1
 80007f2:	2031      	movs	r0, #49	@ 0x31
 80007f4:	f7ff fe8e 	bl	8000514 <AccCmd>
 80007f8:	4603      	mov	r3, r0
 80007fa:	73fb      	strb	r3, [r7, #15]
	if(status != G_SUCCESS)
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d001      	beq.n	8000806 <AccSelfTest+0x13e>
		return G_ERROR;
 8000802:	2300      	movs	r3, #0
 8000804:	e044      	b.n	8000890 <AccSelfTest+0x1c8>

	// Check results of the test

	// First check if signs are correct
	if((*(result_buffer) < 0) || (*(result_buffer + 1) > 0) || (*(result_buffer + 2) < 0))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db0b      	blt.n	8000828 <AccSelfTest+0x160>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3302      	adds	r3, #2
 8000814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dc05      	bgt.n	8000828 <AccSelfTest+0x160>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3304      	adds	r3, #4
 8000820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000824:	2b00      	cmp	r3, #0
 8000826:	da01      	bge.n	800082c <AccSelfTest+0x164>
		return G_ERROR;
 8000828:	2300      	movs	r3, #0
 800082a:	e031      	b.n	8000890 <AccSelfTest+0x1c8>

	uint16_t x, y, z;

	x = (*(result_buffer) & 0x00FF);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000832:	b29b      	uxth	r3, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	81bb      	strh	r3, [r7, #12]
	y = ~(*(result_buffer + 1));	// Taking absolute value of y
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3302      	adds	r3, #2
 800083c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000840:	b29b      	uxth	r3, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	817b      	strh	r3, [r7, #10]
	y = (y & 0x00FF) + 0x01;
 8000846:	897b      	ldrh	r3, [r7, #10]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b29b      	uxth	r3, r3
 800084c:	3301      	adds	r3, #1
 800084e:	817b      	strh	r3, [r7, #10]
	z = (*(result_buffer + 2) & 0x00FF);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3304      	adds	r3, #4
 8000854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000858:	b29b      	uxth	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	813b      	strh	r3, [r7, #8]

	// OX condition
	if( (x < 6) || (x > 67) )
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	2b05      	cmp	r3, #5
 8000862:	d902      	bls.n	800086a <AccSelfTest+0x1a2>
 8000864:	89bb      	ldrh	r3, [r7, #12]
 8000866:	2b43      	cmp	r3, #67	@ 0x43
 8000868:	d901      	bls.n	800086e <AccSelfTest+0x1a6>
		return G_ERROR;
 800086a:	2300      	movs	r3, #0
 800086c:	e010      	b.n	8000890 <AccSelfTest+0x1c8>

	// OY condition
	if( (y < 6) || (y > 67) )
 800086e:	897b      	ldrh	r3, [r7, #10]
 8000870:	2b05      	cmp	r3, #5
 8000872:	d902      	bls.n	800087a <AccSelfTest+0x1b2>
 8000874:	897b      	ldrh	r3, [r7, #10]
 8000876:	2b43      	cmp	r3, #67	@ 0x43
 8000878:	d901      	bls.n	800087e <AccSelfTest+0x1b6>
			return G_ERROR;
 800087a:	2300      	movs	r3, #0
 800087c:	e008      	b.n	8000890 <AccSelfTest+0x1c8>
	// OZ condition
	if( (z < 10) || (z > 110) )
 800087e:	893b      	ldrh	r3, [r7, #8]
 8000880:	2b09      	cmp	r3, #9
 8000882:	d902      	bls.n	800088a <AccSelfTest+0x1c2>
 8000884:	893b      	ldrh	r3, [r7, #8]
 8000886:	2b6e      	cmp	r3, #110	@ 0x6e
 8000888:	d901      	bls.n	800088e <AccSelfTest+0x1c6>
			return G_ERROR;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <AccSelfTest+0x1c8>

	return G_SUCCESS;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000002c 	.word	0x2000002c

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b33      	ldr	r3, [pc, #204]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a32      	ldr	r2, [pc, #200]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b30      	ldr	r3, [pc, #192]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b29      	ldr	r3, [pc, #164]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b25      	ldr	r3, [pc, #148]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a24      	ldr	r2, [pc, #144]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <MX_GPIO_Init+0xe8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a1d      	ldr	r2, [pc, #116]	@ (8000984 <MX_GPIO_Init+0xe8>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_GPIO_Init+0xe8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	4818      	ldr	r0, [pc, #96]	@ (8000988 <MX_GPIO_Init+0xec>)
 8000928:	f000 fd96 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000932:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4812      	ldr	r0, [pc, #72]	@ (800098c <MX_GPIO_Init+0xf0>)
 8000944:	f000 fbf4 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000948:	2320      	movs	r3, #32
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	480a      	ldr	r0, [pc, #40]	@ (8000988 <MX_GPIO_Init+0xec>)
 8000960:	f000 fbe6 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000964:	2330      	movs	r3, #48	@ 0x30
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_GPIO_Init+0xf4>)
 8000978:	f000 fbda 	bl	8001130 <HAL_GPIO_Init>

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	@ 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000
 800098c:	40020800 	.word	0x40020800
 8000990:	40020400 	.word	0x40020400

08000994 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_I2C1_Init+0x50>)
 800099a:	4a13      	ldr	r2, [pc, #76]	@ (80009e8 <MX_I2C1_Init+0x54>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009a0:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MX_I2C1_Init+0x58>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009d2:	f000 fd5b 	bl	800148c <HAL_I2C_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009dc:	f000 f920 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000003c 	.word	0x2000003c
 80009e8:	40005400 	.word	0x40005400
 80009ec:	00061a80 	.word	0x00061a80

080009f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	@ (8000a74 <HAL_I2C_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12b      	bne.n	8000a6a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a2e:	23c0      	movs	r3, #192	@ 0xc0
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a32:	2312      	movs	r3, #18
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <HAL_I2C_MspInit+0x8c>)
 8000a4a:	f000 fb71 	bl	8001130 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	@ 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a86:	f000 f9d7 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f85b 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f7ff ff05 	bl	800089c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a92:	f000 f935 	bl	8000d00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a96:	f7ff ff7d 	bl	8000994 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Change ADXL345 operation mode into measurement
  AccAdd_I2CHandler(&hi2c1);
 8000a9a:	4826      	ldr	r0, [pc, #152]	@ (8000b34 <main+0xb4>)
 8000a9c:	f7ff fd2a 	bl	80004f4 <AccAdd_I2CHandler>
  i2c_tx_buff[0] = PWR_CTR_REG;
 8000aa0:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <main+0xb8>)
 8000aa2:	222d      	movs	r2, #45	@ 0x2d
 8000aa4:	701a      	strb	r2, [r3, #0]
  i2c_tx_buff[1] = 0x00;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <main+0xb8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	705a      	strb	r2, [r3, #1]

  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ALT_ADR, i2c_tx_buff, 2, 500);
 8000aac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	4a20      	ldr	r2, [pc, #128]	@ (8000b38 <main+0xb8>)
 8000ab6:	21a6      	movs	r1, #166	@ 0xa6
 8000ab8:	481e      	ldr	r0, [pc, #120]	@ (8000b34 <main+0xb4>)
 8000aba:	f000 fe2b 	bl	8001714 <HAL_I2C_Master_Transmit>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  i2c_tx_buff[0] = PWR_CTR_REG;
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <main+0xb8>)
 8000ac4:	222d      	movs	r2, #45	@ 0x2d
 8000ac6:	701a      	strb	r2, [r3, #0]
  i2c_tx_buff[1] = 0x08;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <main+0xb8>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	705a      	strb	r2, [r3, #1]

  status = HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ALT_ADR, i2c_tx_buff, 2, 500);
 8000ace:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	4a18      	ldr	r2, [pc, #96]	@ (8000b38 <main+0xb8>)
 8000ad8:	21a6      	movs	r1, #166	@ 0xa6
 8000ada:	4816      	ldr	r0, [pc, #88]	@ (8000b34 <main+0xb4>)
 8000adc:	f000 fe1a 	bl	8001714 <HAL_I2C_Master_Transmit>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]

  i2c_tx_buff[0] = 0x31;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <main+0xb8>)
 8000ae6:	2231      	movs	r2, #49	@ 0x31
 8000ae8:	701a      	strb	r2, [r3, #0]
  i2c_tx_buff[1] = 0x01;
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <main+0xb8>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	705a      	strb	r2, [r3, #1]

  status = HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ALT_ADR, i2c_tx_buff, 2, 500);
 8000af0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2302      	movs	r3, #2
 8000af8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <main+0xb8>)
 8000afa:	21a6      	movs	r1, #166	@ 0xa6
 8000afc:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <main+0xb4>)
 8000afe:	f000 fe09 	bl	8001714 <HAL_I2C_Master_Transmit>
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Manual measurement
	  HAL_I2C_Mem_Read(&hi2c1, ADXL345_ALT_ADR, 0x32, 1, rx_buff, 6, 200);
 8000b06:	23c8      	movs	r3, #200	@ 0xc8
 8000b08:	9302      	str	r3, [sp, #8]
 8000b0a:	2306      	movs	r3, #6
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <main+0xbc>)
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	2232      	movs	r2, #50	@ 0x32
 8000b16:	21a6      	movs	r1, #166	@ 0xa6
 8000b18:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <main+0xb4>)
 8000b1a:	f000 fef9 	bl	8001910 <HAL_I2C_Mem_Read>

	  // Avg measurment
	  //AccAvgMeasurment(i2c_rx_buff, 32);
	  ReturnCode ret = AccSelfTest(i2c_rx_buff);
 8000b1e:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <main+0xc0>)
 8000b20:	f7ff fdd2 	bl	80006c8 <AccSelfTest>
 8000b24:	4603      	mov	r3, r0
 8000b26:	71bb      	strb	r3, [r7, #6]

	  HAL_Delay(1000);
 8000b28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b2c:	f000 f9f6 	bl	8000f1c <HAL_Delay>
  {
 8000b30:	bf00      	nop
 8000b32:	e7e8      	b.n	8000b06 <main+0x86>
 8000b34:	2000003c 	.word	0x2000003c
 8000b38:	20000090 	.word	0x20000090
 8000b3c:	20000094 	.word	0x20000094
 8000b40:	2000009c 	.word	0x2000009c

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	@ 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2234      	movs	r2, #52	@ 0x34
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fd5a 	bl	800360c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <SystemClock_Config+0xd4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	4a29      	ldr	r2, [pc, #164]	@ (8000c18 <SystemClock_Config+0xd4>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b78:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <SystemClock_Config+0xd4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <SystemClock_Config+0xd8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b90:	4a22      	ldr	r2, [pc, #136]	@ (8000c1c <SystemClock_Config+0xd8>)
 8000b92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <SystemClock_Config+0xd8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bac:	2310      	movs	r3, #16
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bbc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bc0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 ffb8 	bl	8002b48 <HAL_RCC_OscConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bde:	f000 f81f 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	230f      	movs	r3, #15
 8000be4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fc58 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c0a:	f000 f809 	bl	8000c20 <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3750      	adds	r7, #80	@ 0x50
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40007000 	.word	0x40007000

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <Error_Handler+0x8>

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c6a:	2007      	movs	r0, #7
 8000c6c:	f000 fa2c 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 f903 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	@ (8000d50 <MX_USART2_UART_Init+0x50>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d38:	f002 f9a4 	bl	8003084 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d42:	f7ff ff6d 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000a4 	.word	0x200000a4
 8000d50:	40004400 	.word	0x40004400

08000d54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	@ (8000dd8 <HAL_UART_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12b      	bne.n	8000dce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a17      	ldr	r2, [pc, #92]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_UART_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dae:	230c      	movs	r3, #12
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <HAL_UART_MspInit+0x8c>)
 8000dca:	f000 f9b1 	bl	8001130 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	@ 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de8:	f7ff ff78 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f002 fc03 	bl	800361c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fe33 	bl	8000a80 <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e28:	080036a4 	.word	0x080036a4
  ldr r2, =_sbss
 8000e2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e30:	200000f0 	.word	0x200000f0

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f931 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fede 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f93b 	bl	8001116 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f911 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	200000ec 	.word	0x200000ec

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200000ec 	.word	0x200000ec

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	@ (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff47 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff5c 	bl	8000fac <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffb0 	bl	8001084 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e165      	b.n	8001418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 8154 	bne.w	8001412 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	2b02      	cmp	r3, #2
 8001180:	d130      	bne.n	80011e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 0201 	and.w	r2, r3, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d017      	beq.n	8001220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80ae 	beq.w	8001412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001430 <HAL_GPIO_Init+0x300>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	4a5c      	ldr	r2, [pc, #368]	@ (8001430 <HAL_GPIO_Init+0x300>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001430 <HAL_GPIO_Init+0x300>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d2:	4a58      	ldr	r2, [pc, #352]	@ (8001434 <HAL_GPIO_Init+0x304>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001438 <HAL_GPIO_Init+0x308>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d025      	beq.n	800134a <HAL_GPIO_Init+0x21a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_GPIO_Init+0x30c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01f      	beq.n	8001346 <HAL_GPIO_Init+0x216>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	@ (8001440 <HAL_GPIO_Init+0x310>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x212>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	@ (8001444 <HAL_GPIO_Init+0x314>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x20e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <HAL_GPIO_Init+0x318>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x20a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4a      	ldr	r2, [pc, #296]	@ (800144c <HAL_GPIO_Init+0x31c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x206>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a49      	ldr	r2, [pc, #292]	@ (8001450 <HAL_GPIO_Init+0x320>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x202>
 800132e:	2306      	movs	r3, #6
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x21c>
 8001332:	2307      	movs	r3, #7
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x21c>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x21c>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x21c>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x21c>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x21c>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x21c>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	@ (8001434 <HAL_GPIO_Init+0x304>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b3a      	ldr	r3, [pc, #232]	@ (8001454 <HAL_GPIO_Init+0x324>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a31      	ldr	r2, [pc, #196]	@ (8001454 <HAL_GPIO_Init+0x324>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <HAL_GPIO_Init+0x324>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <HAL_GPIO_Init+0x324>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <HAL_GPIO_Init+0x324>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <HAL_GPIO_Init+0x324>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <HAL_GPIO_Init+0x324>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_GPIO_Init+0x324>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae96 	bls.w	800114c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40013c00 	.word	0x40013c00

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001474:	e003      	b.n	800147e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	041a      	lsls	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e12b      	b.n	80016f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fa9c 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2224      	movs	r2, #36	@ 0x24
 80014bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014f0:	f001 f8d2 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 80014f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4a81      	ldr	r2, [pc, #516]	@ (8001700 <HAL_I2C_Init+0x274>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d807      	bhi.n	8001510 <HAL_I2C_Init+0x84>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4a80      	ldr	r2, [pc, #512]	@ (8001704 <HAL_I2C_Init+0x278>)
 8001504:	4293      	cmp	r3, r2
 8001506:	bf94      	ite	ls
 8001508:	2301      	movls	r3, #1
 800150a:	2300      	movhi	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	e006      	b.n	800151e <HAL_I2C_Init+0x92>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a7d      	ldr	r2, [pc, #500]	@ (8001708 <HAL_I2C_Init+0x27c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	bf94      	ite	ls
 8001518:	2301      	movls	r3, #1
 800151a:	2300      	movhi	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0e7      	b.n	80016f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4a78      	ldr	r2, [pc, #480]	@ (800170c <HAL_I2C_Init+0x280>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0c9b      	lsrs	r3, r3, #18
 8001530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a6a      	ldr	r2, [pc, #424]	@ (8001700 <HAL_I2C_Init+0x274>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d802      	bhi.n	8001560 <HAL_I2C_Init+0xd4>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3301      	adds	r3, #1
 800155e:	e009      	b.n	8001574 <HAL_I2C_Init+0xe8>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a69      	ldr	r2, [pc, #420]	@ (8001710 <HAL_I2C_Init+0x284>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	3301      	adds	r3, #1
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	430b      	orrs	r3, r1
 800157a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001586:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	495c      	ldr	r1, [pc, #368]	@ (8001700 <HAL_I2C_Init+0x274>)
 8001590:	428b      	cmp	r3, r1
 8001592:	d819      	bhi.n	80015c8 <HAL_I2C_Init+0x13c>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e59      	subs	r1, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015a8:	400b      	ands	r3, r1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00a      	beq.n	80015c4 <HAL_I2C_Init+0x138>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1e59      	subs	r1, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c2:	e051      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e04f      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d111      	bne.n	80015f4 <HAL_I2C_Init+0x168>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	440b      	add	r3, r1
 80015de:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e2:	3301      	adds	r3, #1
 80015e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	e012      	b.n	800161a <HAL_I2C_Init+0x18e>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	0099      	lsls	r1, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Init+0x196>
 800161e:	2301      	movs	r3, #1
 8001620:	e022      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10e      	bne.n	8001648 <HAL_I2C_Init+0x1bc>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1e58      	subs	r0, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6859      	ldr	r1, [r3, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	440b      	add	r3, r1
 8001638:	fbb0 f3f3 	udiv	r3, r0, r3
 800163c:	3301      	adds	r3, #1
 800163e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001646:	e00f      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	0099      	lsls	r1, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	fbb0 f3f3 	udiv	r3, r0, r3
 800165e:	3301      	adds	r3, #1
 8001660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	4313      	orrs	r3, r2
 800166e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69da      	ldr	r2, [r3, #28]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001696:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6911      	ldr	r1, [r2, #16]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68d2      	ldr	r2, [r2, #12]
 80016a2:	4311      	orrs	r1, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2220      	movs	r2, #32
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	000186a0 	.word	0x000186a0
 8001704:	001e847f 	.word	0x001e847f
 8001708:	003d08ff 	.word	0x003d08ff
 800170c:	431bde83 	.word	0x431bde83
 8001710:	10624dd3 	.word	0x10624dd3

08001714 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af02      	add	r7, sp, #8
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	461a      	mov	r2, r3
 8001720:	460b      	mov	r3, r1
 8001722:	817b      	strh	r3, [r7, #10]
 8001724:	4613      	mov	r3, r2
 8001726:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fbec 	bl	8000f04 <HAL_GetTick>
 800172c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b20      	cmp	r3, #32
 8001738:	f040 80e0 	bne.w	80018fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2319      	movs	r3, #25
 8001742:	2201      	movs	r2, #1
 8001744:	4970      	ldr	r1, [pc, #448]	@ (8001908 <HAL_I2C_Master_Transmit+0x1f4>)
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fc7e 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001752:	2302      	movs	r3, #2
 8001754:	e0d3      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_I2C_Master_Transmit+0x50>
 8001760:	2302      	movs	r3, #2
 8001762:	e0cc      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b01      	cmp	r3, #1
 8001778:	d007      	beq.n	800178a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001798:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2221      	movs	r2, #33	@ 0x21
 800179e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2210      	movs	r2, #16
 80017a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	893a      	ldrh	r2, [r7, #8]
 80017ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4a50      	ldr	r2, [pc, #320]	@ (800190c <HAL_I2C_Master_Transmit+0x1f8>)
 80017ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017cc:	8979      	ldrh	r1, [r7, #10]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 face 	bl	8001d74 <I2C_MasterRequestWrite>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e08d      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017f8:	e066      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	6a39      	ldr	r1, [r7, #32]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 fd3c 	bl	800227c <I2C_WaitOnTXEFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00d      	beq.n	8001826 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	2b04      	cmp	r3, #4
 8001810:	d107      	bne.n	8001822 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001820:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06b      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d11b      	bne.n	800189c <HAL_I2C_Master_Transmit+0x188>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	d017      	beq.n	800189c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	781a      	ldrb	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	6a39      	ldr	r1, [r7, #32]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fd33 	bl	800230c <I2C_WaitOnBTFFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00d      	beq.n	80018c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d107      	bne.n	80018c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e01a      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d194      	bne.n	80017fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018fc:	2302      	movs	r3, #2
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	00100002 	.word	0x00100002
 800190c:	ffff0000 	.word	0xffff0000

08001910 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	@ 0x30
 8001914:	af02      	add	r7, sp, #8
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4603      	mov	r3, r0
 8001920:	817b      	strh	r3, [r7, #10]
 8001922:	460b      	mov	r3, r1
 8001924:	813b      	strh	r3, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800192a:	f7ff faeb 	bl	8000f04 <HAL_GetTick>
 800192e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b20      	cmp	r3, #32
 800193a:	f040 8214 	bne.w	8001d66 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2319      	movs	r3, #25
 8001944:	2201      	movs	r2, #1
 8001946:	497b      	ldr	r1, [pc, #492]	@ (8001b34 <HAL_I2C_Mem_Read+0x224>)
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fb7d 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001954:	2302      	movs	r3, #2
 8001956:	e207      	b.n	8001d68 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_I2C_Mem_Read+0x56>
 8001962:	2302      	movs	r3, #2
 8001964:	e200      	b.n	8001d68 <HAL_I2C_Mem_Read+0x458>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d007      	beq.n	800198c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800199a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2222      	movs	r2, #34	@ 0x22
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2240      	movs	r2, #64	@ 0x40
 80019a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001b38 <HAL_I2C_Mem_Read+0x228>)
 80019cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019ce:	88f8      	ldrh	r0, [r7, #6]
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	8979      	ldrh	r1, [r7, #10]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	4603      	mov	r3, r0
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fa4a 	bl	8001e78 <I2C_RequestMemoryRead>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1bc      	b.n	8001d68 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d113      	bne.n	8001a1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	623b      	str	r3, [r7, #32]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e190      	b.n	8001d40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d11b      	bne.n	8001a5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e170      	b.n	8001d40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d11b      	bne.n	8001a9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	e150      	b.n	8001d40 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ab4:	e144      	b.n	8001d40 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	f200 80f1 	bhi.w	8001ca2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d123      	bne.n	8001b10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fc65 	bl	800239c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e145      	b.n	8001d68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b0e:	e117      	b.n	8001d40 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d14e      	bne.n	8001bb6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4906      	ldr	r1, [pc, #24]	@ (8001b3c <HAL_I2C_Mem_Read+0x22c>)
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fa90 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e11a      	b.n	8001d68 <HAL_I2C_Mem_Read+0x458>
 8001b32:	bf00      	nop
 8001b34:	00100002 	.word	0x00100002
 8001b38:	ffff0000 	.word	0xffff0000
 8001b3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bb4:	e0c4      	b.n	8001d40 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	496c      	ldr	r1, [pc, #432]	@ (8001d70 <HAL_I2C_Mem_Read+0x460>)
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fa41 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0cb      	b.n	8001d68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4955      	ldr	r1, [pc, #340]	@ (8001d70 <HAL_I2C_Mem_Read+0x460>)
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 fa13 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e09d      	b.n	8001d68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ca0:	e04e      	b.n	8001d40 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fb78 	bl	800239c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e058      	b.n	8001d68 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d124      	bne.n	8001d40 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d107      	bne.n	8001d0e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d0c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f47f aeb6 	bne.w	8001ab6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001d66:	2302      	movs	r3, #2
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3728      	adds	r7, #40	@ 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	00010004 	.word	0x00010004

08001d74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	460b      	mov	r3, r1
 8001d82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d006      	beq.n	8001d9e <I2C_MasterRequestWrite+0x2a>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d003      	beq.n	8001d9e <I2C_MasterRequestWrite+0x2a>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d9c:	d108      	bne.n	8001db0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e00b      	b.n	8001dc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	2b12      	cmp	r3, #18
 8001db6:	d107      	bne.n	8001dc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f937 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00d      	beq.n	8001dfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dee:	d103      	bne.n	8001df8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e035      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e04:	d108      	bne.n	8001e18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	e01b      	b.n	8001e50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e18:	897b      	ldrh	r3, [r7, #10]
 8001e1a:	11db      	asrs	r3, r3, #7
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 0306 	and.w	r3, r3, #6
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f063 030f 	orn	r3, r3, #15
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	490e      	ldr	r1, [pc, #56]	@ (8001e70 <I2C_MasterRequestWrite+0xfc>)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f980 	bl	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e010      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4907      	ldr	r1, [pc, #28]	@ (8001e74 <I2C_MasterRequestWrite+0x100>)
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f970 	bl	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	00010008 	.word	0x00010008
 8001e74:	00010002 	.word	0x00010002

08001e78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	4608      	mov	r0, r1
 8001e82:	4611      	mov	r1, r2
 8001e84:	461a      	mov	r2, r3
 8001e86:	4603      	mov	r3, r0
 8001e88:	817b      	strh	r3, [r7, #10]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	813b      	strh	r3, [r7, #8]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ea0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f8c2 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00d      	beq.n	8001ee6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ed8:	d103      	bne.n	8001ee2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0aa      	b.n	800203c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ee6:	897b      	ldrh	r3, [r7, #10]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ef4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	6a3a      	ldr	r2, [r7, #32]
 8001efa:	4952      	ldr	r1, [pc, #328]	@ (8002044 <I2C_RequestMemoryRead+0x1cc>)
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f91d 	bl	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e097      	b.n	800203c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f24:	6a39      	ldr	r1, [r7, #32]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f9a8 	bl	800227c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d107      	bne.n	8001f4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e076      	b.n	800203c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f54:	893b      	ldrh	r3, [r7, #8]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	e021      	b.n	8001fa4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f60:	893b      	ldrh	r3, [r7, #8]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f70:	6a39      	ldr	r1, [r7, #32]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f982 	bl	800227c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00d      	beq.n	8001f9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d107      	bne.n	8001f96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e050      	b.n	800203c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f9a:	893b      	ldrh	r3, [r7, #8]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa6:	6a39      	ldr	r1, [r7, #32]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f967 	bl	800227c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00d      	beq.n	8001fd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d107      	bne.n	8001fcc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e035      	b.n	800203c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f82b 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00d      	beq.n	8002014 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002006:	d103      	bne.n	8002010 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e013      	b.n	800203c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002014:	897b      	ldrh	r3, [r7, #10]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	6a3a      	ldr	r2, [r7, #32]
 8002028:	4906      	ldr	r1, [pc, #24]	@ (8002044 <I2C_RequestMemoryRead+0x1cc>)
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f886 	bl	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	00010002 	.word	0x00010002

08002048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002058:	e048      	b.n	80020ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d044      	beq.n	80020ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7fe ff4f 	bl	8000f04 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d139      	bne.n	80020ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	0c1b      	lsrs	r3, r3, #16
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10d      	bne.n	800209e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	43da      	mvns	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4013      	ands	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	e00c      	b.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	43da      	mvns	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4013      	ands	r3, r2
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d116      	bne.n	80020ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e023      	b.n	8002134 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10d      	bne.n	8002112 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	43da      	mvns	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4013      	ands	r3, r2
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	e00c      	b.n	800212c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	43da      	mvns	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4013      	ands	r3, r2
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	429a      	cmp	r2, r3
 8002130:	d093      	beq.n	800205a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800214a:	e071      	b.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d123      	bne.n	80021a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002174:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f043 0204 	orr.w	r2, r3, #4
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e067      	b.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021aa:	d041      	beq.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7fe feaa 	bl	8000f04 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d302      	bcc.n	80021c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d136      	bne.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d10c      	bne.n	80021e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf14      	ite	ne
 80021de:	2301      	movne	r3, #1
 80021e0:	2300      	moveq	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	e00b      	b.n	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	43da      	mvns	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4013      	ands	r3, r2
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e021      	b.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	0c1b      	lsrs	r3, r3, #16
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d10c      	bne.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	43da      	mvns	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4013      	ands	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e00b      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4013      	ands	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	f47f af6d 	bne.w	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002288:	e034      	b.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8e3 	bl	8002456 <I2C_IsAcknowledgeFailed>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e034      	b.n	8002304 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d028      	beq.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7fe fe2f 	bl	8000f04 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11d      	bne.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c2:	2b80      	cmp	r3, #128	@ 0x80
 80022c4:	d016      	beq.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	f043 0220 	orr.w	r2, r3, #32
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e007      	b.n	8002304 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fe:	2b80      	cmp	r3, #128	@ 0x80
 8002300:	d1c3      	bne.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002318:	e034      	b.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f89b 	bl	8002456 <I2C_IsAcknowledgeFailed>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e034      	b.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d028      	beq.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002332:	f7fe fde7 	bl	8000f04 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11d      	bne.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d016      	beq.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f043 0220 	orr.w	r2, r3, #32
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e007      	b.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d1c3      	bne.n	800231a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023a8:	e049      	b.n	800243e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d119      	bne.n	80023ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0210 	mvn.w	r2, #16
 80023c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e030      	b.n	800244e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ec:	f7fe fd8a 	bl	8000f04 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d302      	bcc.n	8002402 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11d      	bne.n	800243e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240c:	2b40      	cmp	r3, #64	@ 0x40
 800240e:	d016      	beq.n	800243e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f043 0220 	orr.w	r2, r3, #32
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e007      	b.n	800244e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002448:	2b40      	cmp	r3, #64	@ 0x40
 800244a:	d1ae      	bne.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800246c:	d11b      	bne.n	80024a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002476:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f043 0204 	orr.w	r2, r3, #4
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0cc      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b68      	ldr	r3, [pc, #416]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d90c      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b8      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b59      	ldr	r3, [pc, #356]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a58      	ldr	r2, [pc, #352]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800252a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b50      	ldr	r3, [pc, #320]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494d      	ldr	r1, [pc, #308]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d044      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d119      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256e:	2b03      	cmp	r3, #3
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b3f      	ldr	r3, [pc, #252]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e067      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b37      	ldr	r3, [pc, #220]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4934      	ldr	r1, [pc, #208]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fcae 	bl	8000f04 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7fe fcaa 	bl	8000f04 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e04f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d20c      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4916      	ldr	r1, [pc, #88]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f855 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	490a      	ldr	r1, [pc, #40]	@ (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	4a09      	ldr	r2, [pc, #36]	@ (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fc0e 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023800 	.word	0x40023800
 8002674:	0800367c 	.word	0x0800367c
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a9b      	lsrs	r3, r3, #10
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4903      	ldr	r1, [pc, #12]	@ (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	0800368c 	.word	0x0800368c

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026c4:	f7ff ffdc 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0b5b      	lsrs	r3, r3, #13
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	@ (80026e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	0800368c 	.word	0x0800368c

080026e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ec:	b0ae      	sub	sp, #184	@ 0xb8
 80026ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270e:	4bcb      	ldr	r3, [pc, #812]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b0c      	cmp	r3, #12
 8002718:	f200 8206 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x440>
 800271c:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <HAL_RCC_GetSysClockFreq+0x3c>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002759 	.word	0x08002759
 8002728:	08002b29 	.word	0x08002b29
 800272c:	08002b29 	.word	0x08002b29
 8002730:	08002b29 	.word	0x08002b29
 8002734:	08002761 	.word	0x08002761
 8002738:	08002b29 	.word	0x08002b29
 800273c:	08002b29 	.word	0x08002b29
 8002740:	08002b29 	.word	0x08002b29
 8002744:	08002769 	.word	0x08002769
 8002748:	08002b29 	.word	0x08002b29
 800274c:	08002b29 	.word	0x08002b29
 8002750:	08002b29 	.word	0x08002b29
 8002754:	08002959 	.word	0x08002959
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4bb9      	ldr	r3, [pc, #740]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x358>)
 800275a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800275e:	e1e7      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002760:	4bb8      	ldr	r3, [pc, #736]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002762:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002766:	e1e3      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002768:	4bb4      	ldr	r3, [pc, #720]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002770:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002774:	4bb1      	ldr	r3, [pc, #708]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d071      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4bae      	ldr	r3, [pc, #696]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800278c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002790:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027a6:	4622      	mov	r2, r4
 80027a8:	462b      	mov	r3, r5
 80027aa:	f04f 0000 	mov.w	r0, #0
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	0159      	lsls	r1, r3, #5
 80027b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b8:	0150      	lsls	r0, r2, #5
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4621      	mov	r1, r4
 80027c0:	1a51      	subs	r1, r2, r1
 80027c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80027c4:	4629      	mov	r1, r5
 80027c6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80027d8:	4649      	mov	r1, r9
 80027da:	018b      	lsls	r3, r1, #6
 80027dc:	4641      	mov	r1, r8
 80027de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027e2:	4641      	mov	r1, r8
 80027e4:	018a      	lsls	r2, r1, #6
 80027e6:	4641      	mov	r1, r8
 80027e8:	1a51      	subs	r1, r2, r1
 80027ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027ec:	4649      	mov	r1, r9
 80027ee:	eb63 0301 	sbc.w	r3, r3, r1
 80027f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002800:	4649      	mov	r1, r9
 8002802:	00cb      	lsls	r3, r1, #3
 8002804:	4641      	mov	r1, r8
 8002806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280a:	4641      	mov	r1, r8
 800280c:	00ca      	lsls	r2, r1, #3
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	4603      	mov	r3, r0
 8002814:	4622      	mov	r2, r4
 8002816:	189b      	adds	r3, r3, r2
 8002818:	633b      	str	r3, [r7, #48]	@ 0x30
 800281a:	462b      	mov	r3, r5
 800281c:	460a      	mov	r2, r1
 800281e:	eb42 0303 	adc.w	r3, r2, r3
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002830:	4629      	mov	r1, r5
 8002832:	024b      	lsls	r3, r1, #9
 8002834:	4621      	mov	r1, r4
 8002836:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800283a:	4621      	mov	r1, r4
 800283c:	024a      	lsls	r2, r1, #9
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002846:	2200      	movs	r2, #0
 8002848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800284c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002850:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002854:	f7fd fcd6 	bl	8000204 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002862:	e067      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002864:	4b75      	ldr	r3, [pc, #468]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002870:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002874:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800287e:	2300      	movs	r3, #0
 8002880:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002882:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002886:	4622      	mov	r2, r4
 8002888:	462b      	mov	r3, r5
 800288a:	f04f 0000 	mov.w	r0, #0
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	0159      	lsls	r1, r3, #5
 8002894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002898:	0150      	lsls	r0, r2, #5
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4621      	mov	r1, r4
 80028a0:	1a51      	subs	r1, r2, r1
 80028a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80028a4:	4629      	mov	r1, r5
 80028a6:	eb63 0301 	sbc.w	r3, r3, r1
 80028aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80028b8:	4649      	mov	r1, r9
 80028ba:	018b      	lsls	r3, r1, #6
 80028bc:	4641      	mov	r1, r8
 80028be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028c2:	4641      	mov	r1, r8
 80028c4:	018a      	lsls	r2, r1, #6
 80028c6:	4641      	mov	r1, r8
 80028c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80028cc:	4649      	mov	r1, r9
 80028ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028e6:	4692      	mov	sl, r2
 80028e8:	469b      	mov	fp, r3
 80028ea:	4623      	mov	r3, r4
 80028ec:	eb1a 0303 	adds.w	r3, sl, r3
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	462b      	mov	r3, r5
 80028f4:	eb4b 0303 	adc.w	r3, fp, r3
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002906:	4629      	mov	r1, r5
 8002908:	028b      	lsls	r3, r1, #10
 800290a:	4621      	mov	r1, r4
 800290c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002910:	4621      	mov	r1, r4
 8002912:	028a      	lsls	r2, r1, #10
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800291c:	2200      	movs	r2, #0
 800291e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002920:	677a      	str	r2, [r7, #116]	@ 0x74
 8002922:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002926:	f7fd fc6d 	bl	8000204 <__aeabi_uldivmod>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4613      	mov	r3, r2
 8002930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002934:	4b41      	ldr	r3, [pc, #260]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	3301      	adds	r3, #1
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800294a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002956:	e0eb      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002958:	4b38      	ldr	r3, [pc, #224]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002964:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d06b      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002970:	4b32      	ldr	r3, [pc, #200]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	2200      	movs	r2, #0
 8002978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800297a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800297c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	663b      	str	r3, [r7, #96]	@ 0x60
 8002984:	2300      	movs	r3, #0
 8002986:	667b      	str	r3, [r7, #100]	@ 0x64
 8002988:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800298c:	4622      	mov	r2, r4
 800298e:	462b      	mov	r3, r5
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	0159      	lsls	r1, r3, #5
 800299a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299e:	0150      	lsls	r0, r2, #5
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4621      	mov	r1, r4
 80029a6:	1a51      	subs	r1, r2, r1
 80029a8:	61b9      	str	r1, [r7, #24]
 80029aa:	4629      	mov	r1, r5
 80029ac:	eb63 0301 	sbc.w	r3, r3, r1
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80029be:	4659      	mov	r1, fp
 80029c0:	018b      	lsls	r3, r1, #6
 80029c2:	4651      	mov	r1, sl
 80029c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029c8:	4651      	mov	r1, sl
 80029ca:	018a      	lsls	r2, r1, #6
 80029cc:	4651      	mov	r1, sl
 80029ce:	ebb2 0801 	subs.w	r8, r2, r1
 80029d2:	4659      	mov	r1, fp
 80029d4:	eb63 0901 	sbc.w	r9, r3, r1
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029ec:	4690      	mov	r8, r2
 80029ee:	4699      	mov	r9, r3
 80029f0:	4623      	mov	r3, r4
 80029f2:	eb18 0303 	adds.w	r3, r8, r3
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	462b      	mov	r3, r5
 80029fa:	eb49 0303 	adc.w	r3, r9, r3
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	024b      	lsls	r3, r1, #9
 8002a10:	4621      	mov	r1, r4
 8002a12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a16:	4621      	mov	r1, r4
 8002a18:	024a      	lsls	r2, r1, #9
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a22:	2200      	movs	r2, #0
 8002a24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a26:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a2c:	f7fd fbea 	bl	8000204 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a3a:	e065      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x420>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a48:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	4611      	mov	r1, r2
 8002a54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a58:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a62:	4642      	mov	r2, r8
 8002a64:	464b      	mov	r3, r9
 8002a66:	f04f 0000 	mov.w	r0, #0
 8002a6a:	f04f 0100 	mov.w	r1, #0
 8002a6e:	0159      	lsls	r1, r3, #5
 8002a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a74:	0150      	lsls	r0, r2, #5
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4641      	mov	r1, r8
 8002a7c:	1a51      	subs	r1, r2, r1
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	4649      	mov	r1, r9
 8002a82:	eb63 0301 	sbc.w	r3, r3, r1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a94:	4659      	mov	r1, fp
 8002a96:	018b      	lsls	r3, r1, #6
 8002a98:	4651      	mov	r1, sl
 8002a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	018a      	lsls	r2, r1, #6
 8002aa2:	4651      	mov	r1, sl
 8002aa4:	1a54      	subs	r4, r2, r1
 8002aa6:	4659      	mov	r1, fp
 8002aa8:	eb63 0501 	sbc.w	r5, r3, r1
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	00eb      	lsls	r3, r5, #3
 8002ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aba:	00e2      	lsls	r2, r4, #3
 8002abc:	4614      	mov	r4, r2
 8002abe:	461d      	mov	r5, r3
 8002ac0:	4643      	mov	r3, r8
 8002ac2:	18e3      	adds	r3, r4, r3
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	eb45 0303 	adc.w	r3, r5, r3
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ada:	4629      	mov	r1, r5
 8002adc:	028b      	lsls	r3, r1, #10
 8002ade:	4621      	mov	r1, r4
 8002ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	028a      	lsls	r2, r1, #10
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002af0:	2200      	movs	r2, #0
 8002af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002af4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002af6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002afa:	f7fd fb83 	bl	8000204 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4613      	mov	r3, r2
 8002b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b08:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0f1b      	lsrs	r3, r3, #28
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002b16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b26:	e003      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	37b8      	adds	r7, #184	@ 0xb8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	00f42400 	.word	0x00f42400

08002b48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e28d      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8083 	beq.w	8002c6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b68:	4b94      	ldr	r3, [pc, #592]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d019      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b74:	4b91      	ldr	r3, [pc, #580]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b80:	4b8e      	ldr	r3, [pc, #568]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b8b      	ldr	r3, [pc, #556]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b88      	ldr	r3, [pc, #544]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b84      	ldr	r3, [pc, #528]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x124>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e25a      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x90>
 8002bca:	4b7c      	ldr	r3, [pc, #496]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7b      	ldr	r2, [pc, #492]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xcc>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0xb4>
 8002be2:	4b76      	ldr	r3, [pc, #472]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a75      	ldr	r2, [pc, #468]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b73      	ldr	r3, [pc, #460]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a72      	ldr	r2, [pc, #456]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xcc>
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6e      	ldr	r2, [pc, #440]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b6c      	ldr	r3, [pc, #432]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6b      	ldr	r2, [pc, #428]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f972 	bl	8000f04 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe f96e 	bl	8000f04 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e21f      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b61      	ldr	r3, [pc, #388]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xdc>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe f95e 	bl	8000f04 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe f95a 	bl	8000f04 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	@ 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e20b      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b57      	ldr	r3, [pc, #348]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x104>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d06f      	beq.n	8002d5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c7a:	4b50      	ldr	r3, [pc, #320]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c86:	4b4d      	ldr	r3, [pc, #308]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d105      	bne.n	8002c9e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c92:	4b4a      	ldr	r3, [pc, #296]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9e:	4b47      	ldr	r3, [pc, #284]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d11c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002caa:	4b44      	ldr	r3, [pc, #272]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d116      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	4b41      	ldr	r3, [pc, #260]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x186>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e1d3      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cce:	4b3b      	ldr	r3, [pc, #236]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4937      	ldr	r1, [pc, #220]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	e03a      	b.n	8002d5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cec:	4b34      	ldr	r3, [pc, #208]	@ (8002dc0 <HAL_RCC_OscConfig+0x278>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f907 	bl	8000f04 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7fe f903 	bl	8000f04 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e1b4      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b28      	ldr	r3, [pc, #160]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4925      	ldr	r1, [pc, #148]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2e:	4b24      	ldr	r3, [pc, #144]	@ (8002dc0 <HAL_RCC_OscConfig+0x278>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe f8e6 	bl	8000f04 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fe f8e2 	bl	8000f04 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e193      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d036      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d016      	beq.n	8002d9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6e:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe f8c6 	bl	8000f04 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fe f8c2 	bl	8000f04 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e173      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x234>
 8002d9a:	e01b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9c:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe f8af 	bl	8000f04 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	e00e      	b.n	8002dc8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002daa:	f7fe f8ab 	bl	8000f04 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d907      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e15c      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	42470000 	.word	0x42470000
 8002dc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ea      	bne.n	8002daa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8097 	beq.w	8002f10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b83      	ldr	r3, [pc, #524]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e02:	4b7c      	ldr	r3, [pc, #496]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b79      	ldr	r3, [pc, #484]	@ (8002ff8 <HAL_RCC_OscConfig+0x4b0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	4b76      	ldr	r3, [pc, #472]	@ (8002ff8 <HAL_RCC_OscConfig+0x4b0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a75      	ldr	r2, [pc, #468]	@ (8002ff8 <HAL_RCC_OscConfig+0x4b0>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe f86b 	bl	8000f04 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe f867 	bl	8000f04 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e118      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	4b6c      	ldr	r3, [pc, #432]	@ (8002ff8 <HAL_RCC_OscConfig+0x4b0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x31e>
 8002e58:	4b66      	ldr	r3, [pc, #408]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5c:	4a65      	ldr	r2, [pc, #404]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e64:	e01c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x358>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x340>
 8002e6e:	4b61      	ldr	r3, [pc, #388]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e72:	4a60      	ldr	r2, [pc, #384]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x358>
 8002e88:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8c:	4a59      	ldr	r2, [pc, #356]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e94:	4b57      	ldr	r3, [pc, #348]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	4a56      	ldr	r2, [pc, #344]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe f82c 	bl	8000f04 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fe f828 	bl	8000f04 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0d7      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ee      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x368>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe f816 	bl	8000f04 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fe f812 	bl	8000f04 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0c1      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef2:	4b40      	ldr	r3, [pc, #256]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1ee      	bne.n	8002edc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f04:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	4a3a      	ldr	r2, [pc, #232]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80ad 	beq.w	8003074 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f1a:	4b36      	ldr	r3, [pc, #216]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d060      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d145      	bne.n	8002fba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b33      	ldr	r3, [pc, #204]	@ (8002ffc <HAL_RCC_OscConfig+0x4b4>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fd ffe6 	bl	8000f04 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fd ffe2 	bl	8000f04 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e093      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	3b01      	subs	r3, #1
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	491b      	ldr	r1, [pc, #108]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <HAL_RCC_OscConfig+0x4b4>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fd ffb7 	bl	8000f04 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fd ffb3 	bl	8000f04 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e064      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x452>
 8002fb8:	e05c      	b.n	8003074 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <HAL_RCC_OscConfig+0x4b4>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fd ffa0 	bl	8000f04 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fd ff9c 	bl	8000f04 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e04d      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x480>
 8002fe6:	e045      	b.n	8003074 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e040      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003000:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <HAL_RCC_OscConfig+0x538>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d030      	beq.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d129      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d122      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003038:	4293      	cmp	r3, r2
 800303a:	d119      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	3b01      	subs	r3, #1
 800304a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d10f      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e042      	b.n	800311c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fe52 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	@ 0x24
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f82b 	bl	8003124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b0c0      	sub	sp, #256	@ 0x100
 800312a:	af00      	add	r7, sp, #0
 800312c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	ea40 0301 	orr.w	r3, r0, r1
 800314c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	431a      	orrs	r2, r3
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	431a      	orrs	r2, r3
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800317c:	f021 010c 	bic.w	r1, r1, #12
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800318a:	430b      	orrs	r3, r1
 800318c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319e:	6999      	ldr	r1, [r3, #24]
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	ea40 0301 	orr.w	r3, r0, r1
 80031aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b8f      	ldr	r3, [pc, #572]	@ (80033f0 <UART_SetConfig+0x2cc>)
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d005      	beq.n	80031c4 <UART_SetConfig+0xa0>
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b8d      	ldr	r3, [pc, #564]	@ (80033f4 <UART_SetConfig+0x2d0>)
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d104      	bne.n	80031ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031c4:	f7ff fa7c 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 80031c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031cc:	e003      	b.n	80031d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ce:	f7ff fa63 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 80031d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e0:	f040 810c 	bne.w	80033fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031f6:	4622      	mov	r2, r4
 80031f8:	462b      	mov	r3, r5
 80031fa:	1891      	adds	r1, r2, r2
 80031fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031fe:	415b      	adcs	r3, r3
 8003200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003206:	4621      	mov	r1, r4
 8003208:	eb12 0801 	adds.w	r8, r2, r1
 800320c:	4629      	mov	r1, r5
 800320e:	eb43 0901 	adc.w	r9, r3, r1
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800321e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003226:	4690      	mov	r8, r2
 8003228:	4699      	mov	r9, r3
 800322a:	4623      	mov	r3, r4
 800322c:	eb18 0303 	adds.w	r3, r8, r3
 8003230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003234:	462b      	mov	r3, r5
 8003236:	eb49 0303 	adc.w	r3, r9, r3
 800323a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800324a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800324e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003252:	460b      	mov	r3, r1
 8003254:	18db      	adds	r3, r3, r3
 8003256:	653b      	str	r3, [r7, #80]	@ 0x50
 8003258:	4613      	mov	r3, r2
 800325a:	eb42 0303 	adc.w	r3, r2, r3
 800325e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003268:	f7fc ffcc 	bl	8000204 <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4b61      	ldr	r3, [pc, #388]	@ (80033f8 <UART_SetConfig+0x2d4>)
 8003272:	fba3 2302 	umull	r2, r3, r3, r2
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	011c      	lsls	r4, r3, #4
 800327a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003284:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	1891      	adds	r1, r2, r2
 8003292:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003294:	415b      	adcs	r3, r3
 8003296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800329c:	4641      	mov	r1, r8
 800329e:	eb12 0a01 	adds.w	sl, r2, r1
 80032a2:	4649      	mov	r1, r9
 80032a4:	eb43 0b01 	adc.w	fp, r3, r1
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032bc:	4692      	mov	sl, r2
 80032be:	469b      	mov	fp, r3
 80032c0:	4643      	mov	r3, r8
 80032c2:	eb1a 0303 	adds.w	r3, sl, r3
 80032c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032ca:	464b      	mov	r3, r9
 80032cc:	eb4b 0303 	adc.w	r3, fp, r3
 80032d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032e8:	460b      	mov	r3, r1
 80032ea:	18db      	adds	r3, r3, r3
 80032ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ee:	4613      	mov	r3, r2
 80032f0:	eb42 0303 	adc.w	r3, r2, r3
 80032f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032fe:	f7fc ff81 	bl	8000204 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4611      	mov	r1, r2
 8003308:	4b3b      	ldr	r3, [pc, #236]	@ (80033f8 <UART_SetConfig+0x2d4>)
 800330a:	fba3 2301 	umull	r2, r3, r3, r1
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2264      	movs	r2, #100	@ 0x64
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	1acb      	subs	r3, r1, r3
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800331e:	4b36      	ldr	r3, [pc, #216]	@ (80033f8 <UART_SetConfig+0x2d4>)
 8003320:	fba3 2302 	umull	r2, r3, r3, r2
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800332c:	441c      	add	r4, r3
 800332e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003332:	2200      	movs	r2, #0
 8003334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003338:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800333c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	1891      	adds	r1, r2, r2
 8003346:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003348:	415b      	adcs	r3, r3
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800334c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003350:	4641      	mov	r1, r8
 8003352:	1851      	adds	r1, r2, r1
 8003354:	6339      	str	r1, [r7, #48]	@ 0x30
 8003356:	4649      	mov	r1, r9
 8003358:	414b      	adcs	r3, r1
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003368:	4659      	mov	r1, fp
 800336a:	00cb      	lsls	r3, r1, #3
 800336c:	4651      	mov	r1, sl
 800336e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003372:	4651      	mov	r1, sl
 8003374:	00ca      	lsls	r2, r1, #3
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	4603      	mov	r3, r0
 800337c:	4642      	mov	r2, r8
 800337e:	189b      	adds	r3, r3, r2
 8003380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003384:	464b      	mov	r3, r9
 8003386:	460a      	mov	r2, r1
 8003388:	eb42 0303 	adc.w	r3, r2, r3
 800338c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800339c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033a4:	460b      	mov	r3, r1
 80033a6:	18db      	adds	r3, r3, r3
 80033a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033aa:	4613      	mov	r3, r2
 80033ac:	eb42 0303 	adc.w	r3, r2, r3
 80033b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033ba:	f7fc ff23 	bl	8000204 <__aeabi_uldivmod>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <UART_SetConfig+0x2d4>)
 80033c4:	fba3 1302 	umull	r1, r3, r3, r2
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	2164      	movs	r1, #100	@ 0x64
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	3332      	adds	r3, #50	@ 0x32
 80033d6:	4a08      	ldr	r2, [pc, #32]	@ (80033f8 <UART_SetConfig+0x2d4>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	f003 0207 	and.w	r2, r3, #7
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4422      	add	r2, r4
 80033ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033ec:	e106      	b.n	80035fc <UART_SetConfig+0x4d8>
 80033ee:	bf00      	nop
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40011400 	.word	0x40011400
 80033f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003400:	2200      	movs	r2, #0
 8003402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003406:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800340a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800340e:	4642      	mov	r2, r8
 8003410:	464b      	mov	r3, r9
 8003412:	1891      	adds	r1, r2, r2
 8003414:	6239      	str	r1, [r7, #32]
 8003416:	415b      	adcs	r3, r3
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
 800341a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800341e:	4641      	mov	r1, r8
 8003420:	1854      	adds	r4, r2, r1
 8003422:	4649      	mov	r1, r9
 8003424:	eb43 0501 	adc.w	r5, r3, r1
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	00eb      	lsls	r3, r5, #3
 8003432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003436:	00e2      	lsls	r2, r4, #3
 8003438:	4614      	mov	r4, r2
 800343a:	461d      	mov	r5, r3
 800343c:	4643      	mov	r3, r8
 800343e:	18e3      	adds	r3, r4, r3
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003444:	464b      	mov	r3, r9
 8003446:	eb45 0303 	adc.w	r3, r5, r3
 800344a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800345a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800346a:	4629      	mov	r1, r5
 800346c:	008b      	lsls	r3, r1, #2
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003474:	4621      	mov	r1, r4
 8003476:	008a      	lsls	r2, r1, #2
 8003478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800347c:	f7fc fec2 	bl	8000204 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4b60      	ldr	r3, [pc, #384]	@ (8003608 <UART_SetConfig+0x4e4>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011c      	lsls	r4, r3, #4
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003498:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800349c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	61b9      	str	r1, [r7, #24]
 80034a8:	415b      	adcs	r3, r3
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b0:	4641      	mov	r1, r8
 80034b2:	1851      	adds	r1, r2, r1
 80034b4:	6139      	str	r1, [r7, #16]
 80034b6:	4649      	mov	r1, r9
 80034b8:	414b      	adcs	r3, r1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c8:	4659      	mov	r1, fp
 80034ca:	00cb      	lsls	r3, r1, #3
 80034cc:	4651      	mov	r1, sl
 80034ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d2:	4651      	mov	r1, sl
 80034d4:	00ca      	lsls	r2, r1, #3
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	4642      	mov	r2, r8
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034e4:	464b      	mov	r3, r9
 80034e6:	460a      	mov	r2, r1
 80034e8:	eb42 0303 	adc.w	r3, r2, r3
 80034ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003508:	4649      	mov	r1, r9
 800350a:	008b      	lsls	r3, r1, #2
 800350c:	4641      	mov	r1, r8
 800350e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003512:	4641      	mov	r1, r8
 8003514:	008a      	lsls	r2, r1, #2
 8003516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800351a:	f7fc fe73 	bl	8000204 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4611      	mov	r1, r2
 8003524:	4b38      	ldr	r3, [pc, #224]	@ (8003608 <UART_SetConfig+0x4e4>)
 8003526:	fba3 2301 	umull	r2, r3, r3, r1
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2264      	movs	r2, #100	@ 0x64
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	1acb      	subs	r3, r1, r3
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	3332      	adds	r3, #50	@ 0x32
 8003538:	4a33      	ldr	r2, [pc, #204]	@ (8003608 <UART_SetConfig+0x4e4>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003544:	441c      	add	r4, r3
 8003546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354a:	2200      	movs	r2, #0
 800354c:	673b      	str	r3, [r7, #112]	@ 0x70
 800354e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	1891      	adds	r1, r2, r2
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	415b      	adcs	r3, r3
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003564:	4641      	mov	r1, r8
 8003566:	1851      	adds	r1, r2, r1
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	4649      	mov	r1, r9
 800356c:	414b      	adcs	r3, r1
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800357c:	4659      	mov	r1, fp
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4651      	mov	r1, sl
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4642      	mov	r2, r8
 8003592:	189b      	adds	r3, r3, r2
 8003594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003596:	464b      	mov	r3, r9
 8003598:	460a      	mov	r2, r1
 800359a:	eb42 0303 	adc.w	r3, r2, r3
 800359e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035b8:	4649      	mov	r1, r9
 80035ba:	008b      	lsls	r3, r1, #2
 80035bc:	4641      	mov	r1, r8
 80035be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c2:	4641      	mov	r1, r8
 80035c4:	008a      	lsls	r2, r1, #2
 80035c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035ca:	f7fc fe1b 	bl	8000204 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <UART_SetConfig+0x4e4>)
 80035d4:	fba3 1302 	umull	r1, r3, r3, r2
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	2164      	movs	r1, #100	@ 0x64
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	3332      	adds	r3, #50	@ 0x32
 80035e6:	4a08      	ldr	r2, [pc, #32]	@ (8003608 <UART_SetConfig+0x4e4>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4422      	add	r2, r4
 80035fa:	609a      	str	r2, [r3, #8]
}
 80035fc:	bf00      	nop
 80035fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003602:	46bd      	mov	sp, r7
 8003604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003608:	51eb851f 	.word	0x51eb851f

0800360c <memset>:
 800360c:	4402      	add	r2, r0
 800360e:	4603      	mov	r3, r0
 8003610:	4293      	cmp	r3, r2
 8003612:	d100      	bne.n	8003616 <memset+0xa>
 8003614:	4770      	bx	lr
 8003616:	f803 1b01 	strb.w	r1, [r3], #1
 800361a:	e7f9      	b.n	8003610 <memset+0x4>

0800361c <__libc_init_array>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	4d0d      	ldr	r5, [pc, #52]	@ (8003654 <__libc_init_array+0x38>)
 8003620:	4c0d      	ldr	r4, [pc, #52]	@ (8003658 <__libc_init_array+0x3c>)
 8003622:	1b64      	subs	r4, r4, r5
 8003624:	10a4      	asrs	r4, r4, #2
 8003626:	2600      	movs	r6, #0
 8003628:	42a6      	cmp	r6, r4
 800362a:	d109      	bne.n	8003640 <__libc_init_array+0x24>
 800362c:	4d0b      	ldr	r5, [pc, #44]	@ (800365c <__libc_init_array+0x40>)
 800362e:	4c0c      	ldr	r4, [pc, #48]	@ (8003660 <__libc_init_array+0x44>)
 8003630:	f000 f818 	bl	8003664 <_init>
 8003634:	1b64      	subs	r4, r4, r5
 8003636:	10a4      	asrs	r4, r4, #2
 8003638:	2600      	movs	r6, #0
 800363a:	42a6      	cmp	r6, r4
 800363c:	d105      	bne.n	800364a <__libc_init_array+0x2e>
 800363e:	bd70      	pop	{r4, r5, r6, pc}
 8003640:	f855 3b04 	ldr.w	r3, [r5], #4
 8003644:	4798      	blx	r3
 8003646:	3601      	adds	r6, #1
 8003648:	e7ee      	b.n	8003628 <__libc_init_array+0xc>
 800364a:	f855 3b04 	ldr.w	r3, [r5], #4
 800364e:	4798      	blx	r3
 8003650:	3601      	adds	r6, #1
 8003652:	e7f2      	b.n	800363a <__libc_init_array+0x1e>
 8003654:	0800369c 	.word	0x0800369c
 8003658:	0800369c 	.word	0x0800369c
 800365c:	0800369c 	.word	0x0800369c
 8003660:	080036a0 	.word	0x080036a0

08003664 <_init>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr

08003670 <_fini>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr
