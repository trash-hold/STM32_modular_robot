
NUCLEO-F446RE_prototypes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08003928  08003928  00004928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aac  08003aac  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003aac  08003aac  00004aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ab4  08003ab4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab4  08003ab4  00004ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ab8  08003ab8  00004ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003abc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  08003b18  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003b18  00005294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1ed  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f94  00000000  00000000  00011279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00013210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080b  00000000  00000000  00013c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212ef  00000000  00000000  00014473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f217  00000000  00000000  00035762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cae70  00000000  00000000  00044979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f7e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b6c  00000000  00000000  0010f82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00112398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003910 	.word	0x08003910

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08003910 	.word	0x08003910

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Acc_AddController>:
acc_config acc1;
int16_t read_buff[3];
uint8_t data_buffer[6];

ReturnCode Acc_AddController(I2C_HandleTypeDef* handler, uint32_t pin, uint32_t port, uint8_t line)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
 8000500:	70fb      	strb	r3, [r7, #3]
	switch(line)
 8000502:	78fb      	ldrb	r3, [r7, #3]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d002      	beq.n	800050e <Acc_AddController+0x1a>
 8000508:	2b01      	cmp	r3, #1
 800050a:	d00a      	beq.n	8000522 <Acc_AddController+0x2e>
 800050c:	e013      	b.n	8000536 <Acc_AddController+0x42>
	{
		case ACC0_LINE:
			acc0.handle = handler;
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <Acc_AddController+0x54>)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	6013      	str	r3, [r2, #0]
			acc0.pin = pin;
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <Acc_AddController+0x54>)
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	6053      	str	r3, [r2, #4]
			acc0.port = port;
 800051a:	4a0b      	ldr	r2, [pc, #44]	@ (8000548 <Acc_AddController+0x54>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6093      	str	r3, [r2, #8]
			break;
 8000520:	e00b      	b.n	800053a <Acc_AddController+0x46>
		case ACC1_LINE:
			acc1.handle = handler;
 8000522:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <Acc_AddController+0x58>)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	6013      	str	r3, [r2, #0]
			acc1.pin = pin;
 8000528:	4a08      	ldr	r2, [pc, #32]	@ (800054c <Acc_AddController+0x58>)
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	6053      	str	r3, [r2, #4]
			acc1.port = port;
 800052e:	4a07      	ldr	r2, [pc, #28]	@ (800054c <Acc_AddController+0x58>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6093      	str	r3, [r2, #8]
			break;
 8000534:	e001      	b.n	800053a <Acc_AddController+0x46>
		default:
			return C_ACC_HANDLE;
 8000536:	230e      	movs	r3, #14
 8000538:	e000      	b.n	800053c <Acc_AddController+0x48>
	}

	return G_SUCCESS;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	20000078 	.word	0x20000078
 800054c:	20000084 	.word	0x20000084

08000550 <Acc_Cmd>:

static ReturnCode Acc_Cmd(I2C_HandleTypeDef* handler, uint8_t reg, uint8_t value)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af02      	add	r7, sp, #8
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
 800055c:	4613      	mov	r3, r2
 800055e:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buffer[] = {reg, value};
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	733b      	strb	r3, [r7, #12]
 8000564:	78bb      	ldrb	r3, [r7, #2]
 8000566:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(handler, ACC_ALT_ADDRESS, tx_buffer, 2, 200);
 8000568:	f107 020c 	add.w	r2, r7, #12
 800056c:	23c8      	movs	r3, #200	@ 0xc8
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2302      	movs	r3, #2
 8000572:	21a6      	movs	r1, #166	@ 0xa6
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f001 f9fb 	bl	8001970 <HAL_I2C_Master_Transmit>
 800057a:	4603      	mov	r3, r0
 800057c:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <Acc_Cmd+0x38>
		return C_I2C_TRANSMIT;
 8000584:	230f      	movs	r3, #15
 8000586:	e000      	b.n	800058a <Acc_Cmd+0x3a>

	return G_SUCCESS;
 8000588:	2301      	movs	r3, #1
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <Acc_Read>:

// Perform single or sequential blocking read
static ReturnCode Acc_Read(I2C_HandleTypeDef* handler, uint8_t* buffer, uint8_t address, uint8_t bytes_number)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b08a      	sub	sp, #40	@ 0x28
 8000596:	af04      	add	r7, sp, #16
 8000598:	60f8      	str	r0, [r7, #12]
 800059a:	60b9      	str	r1, [r7, #8]
 800059c:	4611      	mov	r1, r2
 800059e:	461a      	mov	r2, r3
 80005a0:	460b      	mov	r3, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71bb      	strb	r3, [r7, #6]
	// HAL doc 524
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handler, ACC_ALT_ADDRESS, address, 1, buffer, bytes_number, ACC_I2C_TIMEOUT);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	2164      	movs	r1, #100	@ 0x64
 80005b2:	9102      	str	r1, [sp, #8]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	21a6      	movs	r1, #166	@ 0xa6
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 fad4 	bl	8001b6c <HAL_I2C_Mem_Read>
 80005c4:	4603      	mov	r3, r0
 80005c6:	75fb      	strb	r3, [r7, #23]

	if(status != HAL_OK)
 80005c8:	7dfb      	ldrb	r3, [r7, #23]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <Acc_Read+0x40>
		return C_I2C_RECEIVE;
 80005ce:	2310      	movs	r3, #16
 80005d0:	e000      	b.n	80005d4 <Acc_Read+0x42>

	return G_SUCCESS;
 80005d2:	2301      	movs	r3, #1
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <Acc_Config>:

ReturnCode Acc_Config(uint8_t line)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	if(line > ACC1_LINE)
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d901      	bls.n	80005f0 <Acc_Config+0x14>
		return C_ACC_HANDLE;
 80005ec:	230e      	movs	r3, #14
 80005ee:	e039      	b.n	8000664 <Acc_Config+0x88>

	I2C_HandleTypeDef* acc_i2c = (line == ACC0_LINE ? acc0.handle : acc1.handle);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d102      	bne.n	80005fc <Acc_Config+0x20>
 80005f6:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <Acc_Config+0x90>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	e001      	b.n	8000600 <Acc_Config+0x24>
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <Acc_Config+0x94>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]

	// Put accelometer to measure with 3200Hz baudrate
	ReturnCode status = Acc_Cmd(acc_i2c, ACC_BW_RATE_REG, 0x0F);
 8000602:	220f      	movs	r2, #15
 8000604:	212c      	movs	r1, #44	@ 0x2c
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f7ff ffa2 	bl	8000550 <Acc_Cmd>
 800060c:	4603      	mov	r3, r0
 800060e:	72fb      	strb	r3, [r7, #11]
	if (status != G_SUCCESS)
 8000610:	7afb      	ldrb	r3, [r7, #11]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d001      	beq.n	800061a <Acc_Config+0x3e>
		return status;
 8000616:	7afb      	ldrb	r3, [r7, #11]
 8000618:	e024      	b.n	8000664 <Acc_Config+0x88>

	// Get acc to measurment mode
	status = Acc_Cmd(acc_i2c, ACC_PWR_CTRL_REG, 0x08);
 800061a:	2208      	movs	r2, #8
 800061c:	212d      	movs	r1, #45	@ 0x2d
 800061e:	68f8      	ldr	r0, [r7, #12]
 8000620:	f7ff ff96 	bl	8000550 <Acc_Cmd>
 8000624:	4603      	mov	r3, r0
 8000626:	72fb      	strb	r3, [r7, #11]
	if (status != G_SUCCESS)
 8000628:	7afb      	ldrb	r3, [r7, #11]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d001      	beq.n	8000632 <Acc_Config+0x56>
		return status;
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	e018      	b.n	8000664 <Acc_Config+0x88>

	// Change Fifo mode to stream, and change watermark to 0x0F = 11|0|01111
	status = Acc_Cmd(acc_i2c, ACC_FIFO_CTL_REG, 0xCF);
 8000632:	22cf      	movs	r2, #207	@ 0xcf
 8000634:	2138      	movs	r1, #56	@ 0x38
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f7ff ff8a 	bl	8000550 <Acc_Cmd>
 800063c:	4603      	mov	r3, r0
 800063e:	72fb      	strb	r3, [r7, #11]
	if (status != G_SUCCESS)
 8000640:	7afb      	ldrb	r3, [r7, #11]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d001      	beq.n	800064a <Acc_Config+0x6e>
		return status;
 8000646:	7afb      	ldrb	r3, [r7, #11]
 8000648:	e00c      	b.n	8000664 <Acc_Config+0x88>

	// Enable watermark intterrupt
	status = Acc_Cmd(acc_i2c, ACC_INT_ENB_REG, 0x02);
 800064a:	2202      	movs	r2, #2
 800064c:	212e      	movs	r1, #46	@ 0x2e
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f7ff ff7e 	bl	8000550 <Acc_Cmd>
 8000654:	4603      	mov	r3, r0
 8000656:	72fb      	strb	r3, [r7, #11]
	if (status != G_SUCCESS)
 8000658:	7afb      	ldrb	r3, [r7, #11]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d001      	beq.n	8000662 <Acc_Config+0x86>
		return status;
 800065e:	7afb      	ldrb	r3, [r7, #11]
 8000660:	e000      	b.n	8000664 <Acc_Config+0x88>

	return G_SUCCESS;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000078 	.word	0x20000078
 8000670:	20000084 	.word	0x20000084

08000674 <Acc_RawMeasurment>:

// Perform read of XYZ entry
ReturnCode Acc_RawMeasurment(int16_t* xyz_buffer, uint8_t line)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	if(line > ACC1_LINE)
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d901      	bls.n	800068a <Acc_RawMeasurment+0x16>
		return C_ACC_HANDLE;
 8000686:	230e      	movs	r3, #14
 8000688:	e037      	b.n	80006fa <Acc_RawMeasurment+0x86>

	ReturnCode status = Acc_Read( (line == ACC0_LINE ? acc0.handle : acc1.handle), data_buffer, ACC_X0_REG, 6);
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <Acc_RawMeasurment+0x22>
 8000690:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <Acc_RawMeasurment+0x90>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	e001      	b.n	800069a <Acc_RawMeasurment+0x26>
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <Acc_RawMeasurment+0x94>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	2306      	movs	r3, #6
 800069c:	2232      	movs	r2, #50	@ 0x32
 800069e:	491b      	ldr	r1, [pc, #108]	@ (800070c <Acc_RawMeasurment+0x98>)
 80006a0:	f7ff ff77 	bl	8000592 <Acc_Read>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]

	if(status != G_SUCCESS)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d001      	beq.n	80006b2 <Acc_RawMeasurment+0x3e>
		return status;
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	e023      	b.n	80006fa <Acc_RawMeasurment+0x86>

	// Combine readings
	*(xyz_buffer) = ((data_buffer[1] << 8) | data_buffer[0]);
 80006b2:	4b16      	ldr	r3, [pc, #88]	@ (800070c <Acc_RawMeasurment+0x98>)
 80006b4:	785b      	ldrb	r3, [r3, #1]
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	4b14      	ldr	r3, [pc, #80]	@ (800070c <Acc_RawMeasurment+0x98>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b21b      	sxth	r3, r3
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 1) = ((data_buffer[3] << 8) | data_buffer[2]);
 80006c8:	4b10      	ldr	r3, [pc, #64]	@ (800070c <Acc_RawMeasurment+0x98>)
 80006ca:	78db      	ldrb	r3, [r3, #3]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b219      	sxth	r1, r3
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <Acc_RawMeasurment+0x98>)
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3302      	adds	r3, #2
 80006da:	430a      	orrs	r2, r1
 80006dc:	b212      	sxth	r2, r2
 80006de:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 2) = ((data_buffer[5] << 8) | data_buffer[4]);
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <Acc_RawMeasurment+0x98>)
 80006e2:	795b      	ldrb	r3, [r3, #5]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b219      	sxth	r1, r3
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <Acc_RawMeasurment+0x98>)
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	b21a      	sxth	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3304      	adds	r3, #4
 80006f2:	430a      	orrs	r2, r1
 80006f4:	b212      	sxth	r2, r2
 80006f6:	801a      	strh	r2, [r3, #0]

	return G_SUCCESS;
 80006f8:	2301      	movs	r3, #1
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000078 	.word	0x20000078
 8000708:	20000084 	.word	0x20000084
 800070c:	20000098 	.word	0x20000098

08000710 <Acc_AvgMeasurment>:

ReturnCode Acc_AvgMeasurment(int16_t *xyz_buffer, uint32_t samples, uint8_t line)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	@ 0x30
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	4613      	mov	r3, r2
 800071c:	71fb      	strb	r3, [r7, #7]
	if(line > ACC1_LINE)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d901      	bls.n	8000728 <Acc_AvgMeasurment+0x18>
		return C_ACC_HANDLE;
 8000724:	230e      	movs	r3, #14
 8000726:	e085      	b.n	8000834 <Acc_AvgMeasurment+0x124>

	acc_config *acc = line == 0x00 ? &acc0 : &acc1;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <Acc_AvgMeasurment+0x22>
 800072e:	4b43      	ldr	r3, [pc, #268]	@ (800083c <Acc_AvgMeasurment+0x12c>)
 8000730:	e000      	b.n	8000734 <Acc_AvgMeasurment+0x24>
 8000732:	4b43      	ldr	r3, [pc, #268]	@ (8000840 <Acc_AvgMeasurment+0x130>)
 8000734:	61fb      	str	r3, [r7, #28]

	int32_t avg_x = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t avg_y = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t avg_z = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24

	// Empty the buffer
	ReturnCode status = Acc_Cmd(acc->handle, ACC_FIFO_CTL_REG, 0x00);
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2200      	movs	r2, #0
 8000748:	2138      	movs	r1, #56	@ 0x38
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff00 	bl	8000550 <Acc_Cmd>
 8000750:	4603      	mov	r3, r0
 8000752:	76fb      	strb	r3, [r7, #27]
	if(status != G_SUCCESS)
 8000754:	7efb      	ldrb	r3, [r7, #27]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d001      	beq.n	800075e <Acc_AvgMeasurment+0x4e>
		return status;
 800075a:	7efb      	ldrb	r3, [r7, #27]
 800075c:	e06a      	b.n	8000834 <Acc_AvgMeasurment+0x124>
	// Reconfig buffer
	status = Acc_Cmd(acc->handle, ACC_FIFO_CTL_REG, 0xCF);
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	22cf      	movs	r2, #207	@ 0xcf
 8000764:	2138      	movs	r1, #56	@ 0x38
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fef2 	bl	8000550 <Acc_Cmd>
 800076c:	4603      	mov	r3, r0
 800076e:	76fb      	strb	r3, [r7, #27]
	if(status != G_SUCCESS)
 8000770:	7efb      	ldrb	r3, [r7, #27]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d001      	beq.n	800077a <Acc_AvgMeasurment+0x6a>
		return status;
 8000776:	7efb      	ldrb	r3, [r7, #27]
 8000778:	e05c      	b.n	8000834 <Acc_AvgMeasurment+0x124>

	// Get sum
	uint32_t start_time;
	for(uint16_t i = 1; i <= samples; i++)
 800077a:	2301      	movs	r3, #1
 800077c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800077e:	e03d      	b.n	80007fc <Acc_AvgMeasurment+0xec>
	{
		start_time = HAL_GetTick();
 8000780:	f000 fcd6 	bl	8001130 <HAL_GetTick>
 8000784:	6178      	str	r0, [r7, #20]
		// Feedback from accelometer - wait to collect data
		while( HAL_GPIO_ReadPin(acc->port, acc->pin) != GPIO_PIN_SET )
 8000786:	e008      	b.n	800079a <Acc_AvgMeasurment+0x8a>
		{
			if (HAL_GetTick() - start_time > ACC_I2C_TIMEOUT)
 8000788:	f000 fcd2 	bl	8001130 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	2b64      	cmp	r3, #100	@ 0x64
 8000794:	d901      	bls.n	800079a <Acc_AvgMeasurment+0x8a>
				return G_ACC_READ;
 8000796:	2311      	movs	r3, #17
 8000798:	e04c      	b.n	8000834 <Acc_AvgMeasurment+0x124>
		while( HAL_GPIO_ReadPin(acc->port, acc->pin) != GPIO_PIN_SET )
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	461a      	mov	r2, r3
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	4610      	mov	r0, r2
 80007aa:	f000 ff6b 	bl	8001684 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d1e9      	bne.n	8000788 <Acc_AvgMeasurment+0x78>
		}
		status = Acc_RawMeasurment(read_buff, line);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4822      	ldr	r0, [pc, #136]	@ (8000844 <Acc_AvgMeasurment+0x134>)
 80007ba:	f7ff ff5b 	bl	8000674 <Acc_RawMeasurment>
 80007be:	4603      	mov	r3, r0
 80007c0:	76fb      	strb	r3, [r7, #27]

		if(status != G_SUCCESS)
 80007c2:	7efb      	ldrb	r3, [r7, #27]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d001      	beq.n	80007cc <Acc_AvgMeasurment+0xbc>
			return status;
 80007c8:	7efb      	ldrb	r3, [r7, #27]
 80007ca:	e033      	b.n	8000834 <Acc_AvgMeasurment+0x124>

		avg_x += read_buff[0];
 80007cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <Acc_AvgMeasurment+0x134>)
 80007ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d6:	4413      	add	r3, r2
 80007d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		avg_y += read_buff[1];
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <Acc_AvgMeasurment+0x134>)
 80007dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007e0:	461a      	mov	r2, r3
 80007e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007e4:	4413      	add	r3, r2
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
		avg_z += read_buff[2];
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <Acc_AvgMeasurment+0x134>)
 80007ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007ee:	461a      	mov	r2, r3
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	4413      	add	r3, r2
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
	for(uint16_t i = 1; i <= samples; i++)
 80007f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80007f8:	3301      	adds	r3, #1
 80007fa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80007fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	429a      	cmp	r2, r3
 8000802:	d2bd      	bcs.n	8000780 <Acc_AvgMeasurment+0x70>
	}

	// Get average
	*(xyz_buffer) = avg_x / samples;
 8000804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	fbb2 f3f3 	udiv	r3, r2, r3
 800080c:	b21a      	sxth	r2, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 1) = avg_y / samples;
 8000812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	fbb2 f2f3 	udiv	r2, r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3302      	adds	r3, #2
 800081e:	b212      	sxth	r2, r2
 8000820:	801a      	strh	r2, [r3, #0]
	*(xyz_buffer + 2) = avg_z / samples;
 8000822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	fbb2 f2f3 	udiv	r2, r2, r3
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3304      	adds	r3, #4
 800082e:	b212      	sxth	r2, r2
 8000830:	801a      	strh	r2, [r3, #0]

	return G_SUCCESS;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3730      	adds	r7, #48	@ 0x30
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000078 	.word	0x20000078
 8000840:	20000084 	.word	0x20000084
 8000844:	20000090 	.word	0x20000090

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b39      	ldr	r3, [pc, #228]	@ (8000948 <MX_GPIO_Init+0x100>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a38      	ldr	r2, [pc, #224]	@ (8000948 <MX_GPIO_Init+0x100>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b36      	ldr	r3, [pc, #216]	@ (8000948 <MX_GPIO_Init+0x100>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b32      	ldr	r3, [pc, #200]	@ (8000948 <MX_GPIO_Init+0x100>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a31      	ldr	r2, [pc, #196]	@ (8000948 <MX_GPIO_Init+0x100>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b2f      	ldr	r3, [pc, #188]	@ (8000948 <MX_GPIO_Init+0x100>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <MX_GPIO_Init+0x100>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a2a      	ldr	r2, [pc, #168]	@ (8000948 <MX_GPIO_Init+0x100>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b28      	ldr	r3, [pc, #160]	@ (8000948 <MX_GPIO_Init+0x100>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <MX_GPIO_Init+0x100>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a23      	ldr	r2, [pc, #140]	@ (8000948 <MX_GPIO_Init+0x100>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_GPIO_Init+0x100>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	481e      	ldr	r0, [pc, #120]	@ (800094c <MX_GPIO_Init+0x104>)
 80008d4:	f000 feee 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4818      	ldr	r0, [pc, #96]	@ (8000950 <MX_GPIO_Init+0x108>)
 80008f0:	f000 fd34 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f4:	2320      	movs	r3, #32
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4810      	ldr	r0, [pc, #64]	@ (800094c <MX_GPIO_Init+0x104>)
 800090c:	f000 fd26 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000910:	2310      	movs	r3, #16
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	480b      	ldr	r0, [pc, #44]	@ (8000950 <MX_GPIO_Init+0x108>)
 8000924:	f000 fd1a 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000928:	2330      	movs	r3, #48	@ 0x30
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <MX_GPIO_Init+0x10c>)
 800093c:	f000 fd0e 	bl	800135c <HAL_GPIO_Init>

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	@ 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020800 	.word	0x40020800
 8000954:	40020400 	.word	0x40020400

08000958 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_I2C1_Init+0x50>)
 800095e:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <MX_I2C1_Init+0x54>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <MX_I2C1_Init+0x58>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000976:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800097a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000996:	f000 fea7 	bl	80016e8 <HAL_I2C_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 f8fa 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000a0 	.word	0x200000a0
 80009ac:	40005400 	.word	0x40005400
 80009b0:	00061a80 	.word	0x00061a80

080009b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <HAL_I2C_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12b      	bne.n	8000a2e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <HAL_I2C_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a17      	ldr	r2, [pc, #92]	@ (8000a3c <HAL_I2C_MspInit+0x88>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <HAL_I2C_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009f2:	23c0      	movs	r3, #192	@ 0xc0
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f6:	2312      	movs	r3, #18
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a02:	2304      	movs	r3, #4
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <HAL_I2C_MspInit+0x8c>)
 8000a0e:	f000 fca5 	bl	800135c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_I2C_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_I2C_MspInit+0x88>)
 8000a1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_I2C_MspInit+0x88>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	@ 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4a:	f000 fb0b 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4e:	f000 f835 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a52:	f7ff fef9 	bl	8000848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a56:	f000 fa69 	bl	8000f2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a5a:	f7ff ff7d 	bl	8000958 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Change ADXL345 operation mode into measurement
  Acc_AddController(&hi2c1, GPIOC, GPIO_PIN_4, 0x00);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	2210      	movs	r2, #16
 8000a62:	4911      	ldr	r1, [pc, #68]	@ (8000aa8 <main+0x64>)
 8000a64:	4811      	ldr	r0, [pc, #68]	@ (8000aac <main+0x68>)
 8000a66:	f7ff fd45 	bl	80004f4 <Acc_AddController>
  Acc_Config(0x00);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fdb6 	bl	80005dc <Acc_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Manual measurement
	  HAL_I2C_Mem_Read(&hi2c1, ADXL345_ALT_ADR, 0x32, 1, rx_buff, 6, 200);
 8000a70:	23c8      	movs	r3, #200	@ 0xc8
 8000a72:	9302      	str	r3, [sp, #8]
 8000a74:	2306      	movs	r3, #6
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <main+0x6c>)
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	2232      	movs	r2, #50	@ 0x32
 8000a80:	21a6      	movs	r1, #166	@ 0xa6
 8000a82:	480a      	ldr	r0, [pc, #40]	@ (8000aac <main+0x68>)
 8000a84:	f001 f872 	bl	8001b6c <HAL_I2C_Mem_Read>

	  // Avg measurment
	  Acc_AvgMeasurment(i2c_rx_buff, 32, 0x00);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <main+0x70>)
 8000a8e:	f7ff fe3f 	bl	8000710 <Acc_AvgMeasurment>
	  //ReturnCode ret = AccSelfTest(i2c_rx_buff);
	  GetTiltAngles(angles, i2c_rx_buff);
 8000a92:	4908      	ldr	r1, [pc, #32]	@ (8000ab4 <main+0x70>)
 8000a94:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <main+0x74>)
 8000a96:	f000 f9a9 	bl	8000dec <GetTiltAngles>


	  HAL_Delay(1000);
 8000a9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a9e:	f000 fb53 	bl	8001148 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, ADXL345_ALT_ADR, 0x32, 1, rx_buff, 6, 200);
 8000aa2:	bf00      	nop
 8000aa4:	e7e4      	b.n	8000a70 <main+0x2c>
 8000aa6:	bf00      	nop
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	200000a0 	.word	0x200000a0
 8000ab0:	200000f4 	.word	0x200000f4
 8000ab4:	200000fc 	.word	0x200000fc
 8000ab8:	20000104 	.word	0x20000104

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	@ 0x50
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	2234      	movs	r2, #52	@ 0x34
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fecc 	bl	8003868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <SystemClock_Config+0xd4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	4a29      	ldr	r2, [pc, #164]	@ (8000b90 <SystemClock_Config+0xd4>)
 8000aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af0:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <SystemClock_Config+0xd4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000afc:	2300      	movs	r3, #0
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <SystemClock_Config+0xd8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b08:	4a22      	ldr	r2, [pc, #136]	@ (8000b94 <SystemClock_Config+0xd8>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	4b20      	ldr	r3, [pc, #128]	@ (8000b94 <SystemClock_Config+0xd8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b20:	2301      	movs	r3, #1
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b24:	2310      	movs	r3, #16
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b30:	2310      	movs	r3, #16
 8000b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b34:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b38:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 f92a 	bl	8002da4 <HAL_RCC_OscConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b56:	f000 f81f 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	2102      	movs	r1, #2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fdca 	bl	8002710 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b82:	f000 f809 	bl	8000b98 <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	@ 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <Error_Handler+0x8>

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be2:	2007      	movs	r0, #7
 8000be4:	f000 fb86 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4a:	f000 fa5d 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <interpolate_x>:
const float LUT_tan[] = {  0.0000,  0.0175,  0.0349,  0.0524,  0.0699,  0.0875,  0.1051,  0.1228,  0.1405,  0.1584,  0.1763,  0.1944,  0.2126,  0.2309,  0.2493,  0.2679,  0.2867,  0.3057,  0.3249,  0.3443,  0.3640,  0.3839,  0.4040,  0.4245,  0.4452,  0.4663,  0.4877,  0.5095,  0.5317,  0.5543,  0.5774,  0.6009,  0.6249,  0.6494,  0.6745,  0.7002,  0.7265,  0.7536,  0.7813,  0.8098,  0.8391,  0.8693,  0.9004,  0.9325,  0.9657,  1.0000,  1.0355,  1.0724,  1.1106,  1.1504,  1.1918,  1.2349,  1.2799,  1.3270,  1.3764,  1.4281,  1.4826,  1.5399,  1.6003,  1.6643,  1.7321,  1.8040,  1.8807,  1.9626,  2.0503,  2.1445,  2.2460,  2.3559,  2.4751,  2.6051,  2.7475,  2.9042,  3.0777,  3.2709,  3.4874,  3.7321,  4.0108,  4.3315,  4.7046,  5.1446,  5.6713,  6.3138,  7.1154,  8.1443,  9.5144,  11.4301,  14.3007,  19.0811,  28.6363,  57.2900,  10000};


// Find x that satisfies f(x) = value
static float interpolate_x(float high_val, float low_val, float value, int higher_index)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000c82:	edc7 0a02 	vstr	s1, [r7, #8]
 8000c86:	ed87 1a01 	vstr	s2, [r7, #4]
 8000c8a:	6038      	str	r0, [r7, #0]
	float a = high_val - low_val;
 8000c8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c90:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c98:	edc7 7a05 	vstr	s15, [r7, #20]
	float b = high_val - higher_index * a;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cae:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cb6:	edc7 7a04 	vstr	s15, [r7, #16]

	if( a == 0)
 8000cba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cbe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc6:	d102      	bne.n	8000cce <interpolate_x+0x56>
		return high_val;
 8000cc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ccc:	e009      	b.n	8000ce2 <interpolate_x+0x6a>

	return ((value - b) / a);
 8000cce:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000cda:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8000ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce6:	371c      	adds	r7, #28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <LUT_ATan>:
	return value;
}

// Find x such that tan(x) = val
float LUT_ATan(float val)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(val > LUT_tan[89])
 8000cfa:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000ddc <LUT_ATan+0xec>
 8000cfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0a:	dd02      	ble.n	8000d12 <LUT_ATan+0x22>
			return 100;
 8000d0c:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8000de0 <LUT_ATan+0xf0>
 8000d10:	e05e      	b.n	8000dd0 <LUT_ATan+0xe0>

	float sign = 1.0;
 8000d12:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000d16:	61fb      	str	r3, [r7, #28]

	// Return for val that's out of bounds
	if(val < 0)
 8000d18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d24:	d507      	bpl.n	8000d36 <LUT_ATan+0x46>
	{
		val = -val;
 8000d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d2a:	eef1 7a67 	vneg.f32	s15, s15
 8000d2e:	edc7 7a01 	vstr	s15, [r7, #4]
		sign = -1.0;
 8000d32:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <LUT_ATan+0xf4>)
 8000d34:	61fb      	str	r3, [r7, #28]
	}

	// Find sine and interpolate
	for(uint16_t i = 0; i < LUT_SIZE; i++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	837b      	strh	r3, [r7, #26]
 8000d3a:	e046      	b.n	8000dca <LUT_ATan+0xda>
	{
		if(val == LUT_tan[i])
 8000d3c:	8b7b      	ldrh	r3, [r7, #26]
 8000d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000de8 <LUT_ATan+0xf8>)
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	edd3 7a00 	vldr	s15, [r3]
 8000d48:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d4c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d54:	d105      	bne.n	8000d62 <LUT_ATan+0x72>
			return (float) i;
 8000d56:	8b7b      	ldrh	r3, [r7, #26]
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d60:	e036      	b.n	8000dd0 <LUT_ATan+0xe0>

		else if( val < LUT_tan[i])
 8000d62:	8b7b      	ldrh	r3, [r7, #26]
 8000d64:	4a20      	ldr	r2, [pc, #128]	@ (8000de8 <LUT_ATan+0xf8>)
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	edd3 7a00 	vldr	s15, [r3]
 8000d6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7a:	d523      	bpl.n	8000dc4 <LUT_ATan+0xd4>
		{
			// Interpolate between two points
			float big_angle = LUT_tan[i];
 8000d7c:	8b7b      	ldrh	r3, [r7, #26]
 8000d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8000de8 <LUT_ATan+0xf8>)
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	617b      	str	r3, [r7, #20]
			float small_angle = LUT_tan[i - 1];  // Dont have to check for index because of first two conditions
 8000d88:	8b7b      	ldrh	r3, [r7, #26]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a16      	ldr	r2, [pc, #88]	@ (8000de8 <LUT_ATan+0xf8>)
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	613b      	str	r3, [r7, #16]

			float res = interpolate_x(big_angle, small_angle, val, i);
 8000d96:	8b7b      	ldrh	r3, [r7, #26]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	ed97 1a01 	vldr	s2, [r7, #4]
 8000d9e:	edd7 0a04 	vldr	s1, [r7, #16]
 8000da2:	ed97 0a05 	vldr	s0, [r7, #20]
 8000da6:	f7ff ff67 	bl	8000c78 <interpolate_x>
 8000daa:	ed87 0a03 	vstr	s0, [r7, #12]
			res = res * sign;
 8000dae:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dba:	edc7 7a03 	vstr	s15, [r7, #12]

			return res;
 8000dbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dc2:	e005      	b.n	8000dd0 <LUT_ATan+0xe0>
	for(uint16_t i = 0; i < LUT_SIZE; i++)
 8000dc4:	8b7b      	ldrh	r3, [r7, #26]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	837b      	strh	r3, [r7, #26]
 8000dca:	8b7b      	ldrh	r3, [r7, #26]
 8000dcc:	2b59      	cmp	r3, #89	@ 0x59
 8000dce:	d9b5      	bls.n	8000d3c <LUT_ATan+0x4c>
		}
	}
}
 8000dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	426528f6 	.word	0x426528f6
 8000de0:	42c80000 	.word	0x42c80000
 8000de4:	bf800000 	.word	0xbf800000
 8000de8:	08003940 	.word	0x08003940

08000dec <GetTiltAngles>:

void GetTiltAngles(float *abc_buffer, int16_t *xyz_acc)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	float a_yz, a_xy, a_xz;
	float x_2, y_2, z_2;

	// Helper variables
	x_2 = (*(xyz_acc)) * (*(xyz_acc));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	fb02 f303 	mul.w	r3, r2, r3
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e10:	edc7 7a07 	vstr	s15, [r7, #28]
	y_2 = (*(xyz_acc + 1)) * (*(xyz_acc + 1));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	3302      	adds	r3, #2
 8000e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	3302      	adds	r3, #2
 8000e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e32:	edc7 7a06 	vstr	s15, [r7, #24]
	z_2 = (*(xyz_acc + 2)) * (*(xyz_acc + 2));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3304      	adds	r3, #4
 8000e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e54:	edc7 7a05 	vstr	s15, [r7, #20]

	a_yz = sqrtf(y_2 + z_2);
 8000e58:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e64:	eeb0 0a67 	vmov.f32	s0, s15
 8000e68:	f002 fd30 	bl	80038cc <sqrtf>
 8000e6c:	ed87 0a04 	vstr	s0, [r7, #16]
	a_xy = sqrtf(x_2 + y_2);
 8000e70:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e74:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e80:	f002 fd24 	bl	80038cc <sqrtf>
 8000e84:	ed87 0a03 	vstr	s0, [r7, #12]
	a_xz = sqrtf(x_2 + z_2);
 8000e88:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e94:	eeb0 0a67 	vmov.f32	s0, s15
 8000e98:	f002 fd18 	bl	80038cc <sqrtf>
 8000e9c:	ed87 0a02 	vstr	s0, [r7, #8]

	*(abc_buffer) = LUT_ATan( ((*(xyz_acc)) / a_yz ) );
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000eb6:	eeb0 0a66 	vmov.f32	s0, s13
 8000eba:	f7ff ff19 	bl	8000cf0 <LUT_ATan>
 8000ebe:	eef0 7a40 	vmov.f32	s15, s0
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	edc3 7a00 	vstr	s15, [r3]
	*(abc_buffer + 1) = LUT_ATan( ((*(xyz_acc + 1)) / a_xz ) );
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed0:	ee07 3a90 	vmov	s15, r3
 8000ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000edc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	1d1c      	adds	r4, r3, #4
 8000ee4:	eeb0 0a66 	vmov.f32	s0, s13
 8000ee8:	f7ff ff02 	bl	8000cf0 <LUT_ATan>
 8000eec:	eef0 7a40 	vmov.f32	s15, s0
 8000ef0:	edc4 7a00 	vstr	s15, [r4]
	*(abc_buffer + 2) = LUT_ATan( (a_xy / (*(xyz_acc + 2))) );
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f04:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f103 0408 	add.w	r4, r3, #8
 8000f12:	eeb0 0a66 	vmov.f32	s0, s13
 8000f16:	f7ff feeb 	bl	8000cf0 <LUT_ATan>
 8000f1a:	eef0 7a40 	vmov.f32	s15, s0
 8000f1e:	edc4 7a00 	vstr	s15, [r4]
}
 8000f22:	bf00      	nop
 8000f24:	3724      	adds	r7, #36	@ 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
	...

08000f2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <MX_USART2_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f002 f9bc 	bl	80032e0 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f7ff fe13 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000110 	.word	0x20000110
 8000f7c:	40004400 	.word	0x40004400

08000f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	@ (8001004 <HAL_UART_MspInit+0x84>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12b      	bne.n	8000ffa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fea:	2307      	movs	r3, #7
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	@ (800100c <HAL_UART_MspInit+0x8c>)
 8000ff6:	f000 f9b1 	bl	800135c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	@ 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40004400 	.word	0x40004400
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001014:	f7ff fe1e 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800103e:	f002 fc21 	bl	8003884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fcff 	bl	8000a44 <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001054:	08003abc 	.word	0x08003abc
  ldr r2, =_sbss
 8001058:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800105c:	20000294 	.word	0x20000294

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <HAL_Init+0x40>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_Init+0x40>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800107e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <HAL_Init+0x40>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f931 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fd84 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f93b 	bl	8001342 <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f911 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000158 	.word	0x20000158

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000158 	.word	0x20000158

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff47 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff5c 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff8e 	bl	8001248 <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5d 	bl	80011f4 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb0 	bl	80012b0 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e165      	b.n	8001644 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8154 	bne.w	800163e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d005      	beq.n	80013ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d130      	bne.n	8001410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b03      	cmp	r3, #3
 800141a:	d017      	beq.n	800144c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80ae 	beq.w	800163e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <HAL_GPIO_Init+0x300>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a5c      	ldr	r2, [pc, #368]	@ (800165c <HAL_GPIO_Init+0x300>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b5a      	ldr	r3, [pc, #360]	@ (800165c <HAL_GPIO_Init+0x300>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fe:	4a58      	ldr	r2, [pc, #352]	@ (8001660 <HAL_GPIO_Init+0x304>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4f      	ldr	r2, [pc, #316]	@ (8001664 <HAL_GPIO_Init+0x308>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d025      	beq.n	8001576 <HAL_GPIO_Init+0x21a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4e      	ldr	r2, [pc, #312]	@ (8001668 <HAL_GPIO_Init+0x30c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d01f      	beq.n	8001572 <HAL_GPIO_Init+0x216>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4d      	ldr	r2, [pc, #308]	@ (800166c <HAL_GPIO_Init+0x310>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d019      	beq.n	800156e <HAL_GPIO_Init+0x212>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4c      	ldr	r2, [pc, #304]	@ (8001670 <HAL_GPIO_Init+0x314>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0x20e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4b      	ldr	r2, [pc, #300]	@ (8001674 <HAL_GPIO_Init+0x318>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00d      	beq.n	8001566 <HAL_GPIO_Init+0x20a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4a      	ldr	r2, [pc, #296]	@ (8001678 <HAL_GPIO_Init+0x31c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x206>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a49      	ldr	r2, [pc, #292]	@ (800167c <HAL_GPIO_Init+0x320>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_GPIO_Init+0x202>
 800155a:	2306      	movs	r3, #6
 800155c:	e00c      	b.n	8001578 <HAL_GPIO_Init+0x21c>
 800155e:	2307      	movs	r3, #7
 8001560:	e00a      	b.n	8001578 <HAL_GPIO_Init+0x21c>
 8001562:	2305      	movs	r3, #5
 8001564:	e008      	b.n	8001578 <HAL_GPIO_Init+0x21c>
 8001566:	2304      	movs	r3, #4
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x21c>
 800156a:	2303      	movs	r3, #3
 800156c:	e004      	b.n	8001578 <HAL_GPIO_Init+0x21c>
 800156e:	2302      	movs	r3, #2
 8001570:	e002      	b.n	8001578 <HAL_GPIO_Init+0x21c>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_GPIO_Init+0x21c>
 8001576:	2300      	movs	r3, #0
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	f002 0203 	and.w	r2, r2, #3
 800157e:	0092      	lsls	r2, r2, #2
 8001580:	4093      	lsls	r3, r2
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001588:	4935      	ldr	r1, [pc, #212]	@ (8001660 <HAL_GPIO_Init+0x304>)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	3302      	adds	r3, #2
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <HAL_GPIO_Init+0x324>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ba:	4a31      	ldr	r2, [pc, #196]	@ (8001680 <HAL_GPIO_Init+0x324>)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <HAL_GPIO_Init+0x324>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e4:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <HAL_GPIO_Init+0x324>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ea:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <HAL_GPIO_Init+0x324>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800160e:	4a1c      	ldr	r2, [pc, #112]	@ (8001680 <HAL_GPIO_Init+0x324>)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_GPIO_Init+0x324>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001638:	4a11      	ldr	r2, [pc, #68]	@ (8001680 <HAL_GPIO_Init+0x324>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3301      	adds	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	2b0f      	cmp	r3, #15
 8001648:	f67f ae96 	bls.w	8001378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40013800 	.word	0x40013800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020400 	.word	0x40020400
 800166c:	40020800 	.word	0x40020800
 8001670:	40020c00 	.word	0x40020c00
 8001674:	40021000 	.word	0x40021000
 8001678:	40021400 	.word	0x40021400
 800167c:	40021800 	.word	0x40021800
 8001680:	40013c00 	.word	0x40013c00

08001684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e001      	b.n	80016a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e12b      	b.n	8001952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff f950 	bl	80009b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2224      	movs	r2, #36	@ 0x24
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800173a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800174a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800174c:	f001 f8d2 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8001750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a81      	ldr	r2, [pc, #516]	@ (800195c <HAL_I2C_Init+0x274>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d807      	bhi.n	800176c <HAL_I2C_Init+0x84>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4a80      	ldr	r2, [pc, #512]	@ (8001960 <HAL_I2C_Init+0x278>)
 8001760:	4293      	cmp	r3, r2
 8001762:	bf94      	ite	ls
 8001764:	2301      	movls	r3, #1
 8001766:	2300      	movhi	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	e006      	b.n	800177a <HAL_I2C_Init+0x92>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a7d      	ldr	r2, [pc, #500]	@ (8001964 <HAL_I2C_Init+0x27c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	bf94      	ite	ls
 8001774:	2301      	movls	r3, #1
 8001776:	2300      	movhi	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0e7      	b.n	8001952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4a78      	ldr	r2, [pc, #480]	@ (8001968 <HAL_I2C_Init+0x280>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0c9b      	lsrs	r3, r3, #18
 800178c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a6a      	ldr	r2, [pc, #424]	@ (800195c <HAL_I2C_Init+0x274>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d802      	bhi.n	80017bc <HAL_I2C_Init+0xd4>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3301      	adds	r3, #1
 80017ba:	e009      	b.n	80017d0 <HAL_I2C_Init+0xe8>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	4a69      	ldr	r2, [pc, #420]	@ (800196c <HAL_I2C_Init+0x284>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	3301      	adds	r3, #1
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	495c      	ldr	r1, [pc, #368]	@ (800195c <HAL_I2C_Init+0x274>)
 80017ec:	428b      	cmp	r3, r1
 80017ee:	d819      	bhi.n	8001824 <HAL_I2C_Init+0x13c>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e59      	subs	r1, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80017fe:	1c59      	adds	r1, r3, #1
 8001800:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001804:	400b      	ands	r3, r1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00a      	beq.n	8001820 <HAL_I2C_Init+0x138>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1e59      	subs	r1, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fbb1 f3f3 	udiv	r3, r1, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181e:	e051      	b.n	80018c4 <HAL_I2C_Init+0x1dc>
 8001820:	2304      	movs	r3, #4
 8001822:	e04f      	b.n	80018c4 <HAL_I2C_Init+0x1dc>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d111      	bne.n	8001850 <HAL_I2C_Init+0x168>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1e58      	subs	r0, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	440b      	add	r3, r1
 800183a:	fbb0 f3f3 	udiv	r3, r0, r3
 800183e:	3301      	adds	r3, #1
 8001840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf0c      	ite	eq
 8001848:	2301      	moveq	r3, #1
 800184a:	2300      	movne	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	e012      	b.n	8001876 <HAL_I2C_Init+0x18e>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e58      	subs	r0, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	0099      	lsls	r1, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	fbb0 f3f3 	udiv	r3, r0, r3
 8001866:	3301      	adds	r3, #1
 8001868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf0c      	ite	eq
 8001870:	2301      	moveq	r3, #1
 8001872:	2300      	movne	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Init+0x196>
 800187a:	2301      	movs	r3, #1
 800187c:	e022      	b.n	80018c4 <HAL_I2C_Init+0x1dc>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10e      	bne.n	80018a4 <HAL_I2C_Init+0x1bc>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1e58      	subs	r0, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6859      	ldr	r1, [r3, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	440b      	add	r3, r1
 8001894:	fbb0 f3f3 	udiv	r3, r0, r3
 8001898:	3301      	adds	r3, #1
 800189a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018a2:	e00f      	b.n	80018c4 <HAL_I2C_Init+0x1dc>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1e58      	subs	r0, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	0099      	lsls	r1, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	6809      	ldr	r1, [r1, #0]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6911      	ldr	r1, [r2, #16]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68d2      	ldr	r2, [r2, #12]
 80018fe:	4311      	orrs	r1, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	430b      	orrs	r3, r1
 8001906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2220      	movs	r2, #32
 800193e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	000186a0 	.word	0x000186a0
 8001960:	001e847f 	.word	0x001e847f
 8001964:	003d08ff 	.word	0x003d08ff
 8001968:	431bde83 	.word	0x431bde83
 800196c:	10624dd3 	.word	0x10624dd3

08001970 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	461a      	mov	r2, r3
 800197c:	460b      	mov	r3, r1
 800197e:	817b      	strh	r3, [r7, #10]
 8001980:	4613      	mov	r3, r2
 8001982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff fbd4 	bl	8001130 <HAL_GetTick>
 8001988:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b20      	cmp	r3, #32
 8001994:	f040 80e0 	bne.w	8001b58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2319      	movs	r3, #25
 800199e:	2201      	movs	r2, #1
 80019a0:	4970      	ldr	r1, [pc, #448]	@ (8001b64 <HAL_I2C_Master_Transmit+0x1f4>)
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fc7e 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019ae:	2302      	movs	r3, #2
 80019b0:	e0d3      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_I2C_Master_Transmit+0x50>
 80019bc:	2302      	movs	r3, #2
 80019be:	e0cc      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d007      	beq.n	80019e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2221      	movs	r2, #33	@ 0x21
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2210      	movs	r2, #16
 8001a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	893a      	ldrh	r2, [r7, #8]
 8001a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4a50      	ldr	r2, [pc, #320]	@ (8001b68 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a28:	8979      	ldrh	r1, [r7, #10]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	6a3a      	ldr	r2, [r7, #32]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 face 	bl	8001fd0 <I2C_MasterRequestWrite>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e08d      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a54:	e066      	b.n	8001b24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fd3c 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d107      	bne.n	8001a7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06b      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <HAL_I2C_Master_Transmit+0x188>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d017      	beq.n	8001af8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6a39      	ldr	r1, [r7, #32]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fd33 	bl	8002568 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00d      	beq.n	8001b24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d107      	bne.n	8001b20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e01a      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d194      	bne.n	8001a56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e000      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
  }
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	00100002 	.word	0x00100002
 8001b68:	ffff0000 	.word	0xffff0000

08001b6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	@ 0x30
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	817b      	strh	r3, [r7, #10]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	813b      	strh	r3, [r7, #8]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b86:	f7ff fad3 	bl	8001130 <HAL_GetTick>
 8001b8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	f040 8214 	bne.w	8001fc2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2319      	movs	r3, #25
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	497b      	ldr	r1, [pc, #492]	@ (8001d90 <HAL_I2C_Mem_Read+0x224>)
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fb7d 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e207      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_I2C_Mem_Read+0x56>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e200      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x458>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d007      	beq.n	8001be8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2222      	movs	r2, #34	@ 0x22
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2240      	movs	r2, #64	@ 0x40
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4a5b      	ldr	r2, [pc, #364]	@ (8001d94 <HAL_I2C_Mem_Read+0x228>)
 8001c28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c2a:	88f8      	ldrh	r0, [r7, #6]
 8001c2c:	893a      	ldrh	r2, [r7, #8]
 8001c2e:	8979      	ldrh	r1, [r7, #10]
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4603      	mov	r3, r0
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 fa4a 	bl	80020d4 <I2C_RequestMemoryRead>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e1bc      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d113      	bne.n	8001c7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e190      	b.n	8001f9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d11b      	bne.n	8001cba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e170      	b.n	8001f9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d11b      	bne.n	8001cfa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	e150      	b.n	8001f9c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d10:	e144      	b.n	8001f9c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	f200 80f1 	bhi.w	8001efe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d123      	bne.n	8001d6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fc65 	bl	80025f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e145      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d6a:	e117      	b.n	8001f9c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d14e      	bne.n	8001e12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4906      	ldr	r1, [pc, #24]	@ (8001d98 <HAL_I2C_Mem_Read+0x22c>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fa90 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e11a      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x458>
 8001d8e:	bf00      	nop
 8001d90:	00100002 	.word	0x00100002
 8001d94:	ffff0000 	.word	0xffff0000
 8001d98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e10:	e0c4      	b.n	8001f9c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e18:	2200      	movs	r2, #0
 8001e1a:	496c      	ldr	r1, [pc, #432]	@ (8001fcc <HAL_I2C_Mem_Read+0x460>)
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fa41 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0cb      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e74:	2200      	movs	r2, #0
 8001e76:	4955      	ldr	r1, [pc, #340]	@ (8001fcc <HAL_I2C_Mem_Read+0x460>)
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fa13 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e09d      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001efc:	e04e      	b.n	8001f9c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fb78 	bl	80025f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e058      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d124      	bne.n	8001f9c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f68:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f47f aeb6 	bne.w	8001d12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
  }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3728      	adds	r7, #40	@ 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	00010004 	.word	0x00010004

08001fd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d006      	beq.n	8001ffa <I2C_MasterRequestWrite+0x2a>
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d003      	beq.n	8001ffa <I2C_MasterRequestWrite+0x2a>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ff8:	d108      	bne.n	800200c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e00b      	b.n	8002024 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	2b12      	cmp	r3, #18
 8002012:	d107      	bne.n	8002024 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002022:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f937 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800204a:	d103      	bne.n	8002054 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e035      	b.n	80020c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002060:	d108      	bne.n	8002074 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002062:	897b      	ldrh	r3, [r7, #10]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002070:	611a      	str	r2, [r3, #16]
 8002072:	e01b      	b.n	80020ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002074:	897b      	ldrh	r3, [r7, #10]
 8002076:	11db      	asrs	r3, r3, #7
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f003 0306 	and.w	r3, r3, #6
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f063 030f 	orn	r3, r3, #15
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	490e      	ldr	r1, [pc, #56]	@ (80020cc <I2C_MasterRequestWrite+0xfc>)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f980 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e010      	b.n	80020c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4907      	ldr	r1, [pc, #28]	@ (80020d0 <I2C_MasterRequestWrite+0x100>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f970 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	00010008 	.word	0x00010008
 80020d0:	00010002 	.word	0x00010002

080020d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	817b      	strh	r3, [r7, #10]
 80020e6:	460b      	mov	r3, r1
 80020e8:	813b      	strh	r3, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800210c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	2200      	movs	r2, #0
 8002116:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f8c2 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00d      	beq.n	8002142 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002134:	d103      	bne.n	800213e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0aa      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002142:	897b      	ldrh	r3, [r7, #10]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	4952      	ldr	r1, [pc, #328]	@ (80022a0 <I2C_RequestMemoryRead+0x1cc>)
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f91d 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e097      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800217e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f9a8 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	2b04      	cmp	r3, #4
 8002194:	d107      	bne.n	80021a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e076      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021b0:	893b      	ldrh	r3, [r7, #8]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	e021      	b.n	8002200 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021bc:	893b      	ldrh	r3, [r7, #8]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f982 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d107      	bne.n	80021f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e050      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002202:	6a39      	ldr	r1, [r7, #32]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f967 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002226:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e035      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800223a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	2200      	movs	r2, #0
 8002244:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f82b 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002262:	d103      	bne.n	800226c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e013      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002270:	897b      	ldrh	r3, [r7, #10]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	6a3a      	ldr	r2, [r7, #32]
 8002284:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <I2C_RequestMemoryRead+0x1cc>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f886 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010002 	.word	0x00010002

080022a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b4:	e048      	b.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d044      	beq.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7fe ff37 	bl	8001130 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d139      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10d      	bne.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	e00c      	b.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	43da      	mvns	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	429a      	cmp	r2, r3
 8002318:	d116      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e023      	b.n	8002390 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10d      	bne.n	800236e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	e00c      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	43da      	mvns	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	429a      	cmp	r2, r3
 800238c:	d093      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a6:	e071      	b.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b6:	d123      	bne.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e067      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d041      	beq.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002408:	f7fe fe92 	bl	8001130 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d302      	bcc.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d136      	bne.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d10c      	bne.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e00b      	b.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	43da      	mvns	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf14      	ite	ne
 8002454:	2301      	movne	r3, #1
 8002456:	2300      	moveq	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e021      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10c      	bne.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	43da      	mvns	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf14      	ite	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	2300      	moveq	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e00b      	b.n	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f af6d 	bne.w	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e4:	e034      	b.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f8e3 	bl	80026b2 <I2C_IsAcknowledgeFailed>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e034      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d028      	beq.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7fe fe17 	bl	8001130 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11d      	bne.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b80      	cmp	r3, #128	@ 0x80
 8002520:	d016      	beq.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e007      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255a:	2b80      	cmp	r3, #128	@ 0x80
 800255c:	d1c3      	bne.n	80024e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002574:	e034      	b.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f89b 	bl	80026b2 <I2C_IsAcknowledgeFailed>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e034      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d028      	beq.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258e:	f7fe fdcf 	bl	8001130 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11d      	bne.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d016      	beq.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e007      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d1c3      	bne.n	8002576 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002604:	e049      	b.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b10      	cmp	r3, #16
 8002612:	d119      	bne.n	8002648 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0210 	mvn.w	r2, #16
 800261c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e030      	b.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002648:	f7fe fd72 	bl	8001130 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11d      	bne.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002668:	2b40      	cmp	r3, #64	@ 0x40
 800266a:	d016      	beq.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e007      	b.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a4:	2b40      	cmp	r3, #64	@ 0x40
 80026a6:	d1ae      	bne.n	8002606 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c8:	d11b      	bne.n	8002702 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f043 0204 	orr.w	r2, r3, #4
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0cc      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b68      	ldr	r3, [pc, #416]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d90c      	bls.n	800274c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b65      	ldr	r3, [pc, #404]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a58      	ldr	r2, [pc, #352]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800276e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a52      	ldr	r2, [pc, #328]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d044      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b3f      	ldr	r3, [pc, #252]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e067      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b37      	ldr	r3, [pc, #220]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4934      	ldr	r1, [pc, #208]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7fe fc96 	bl	8001130 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe fc92 	bl	8001130 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b25      	ldr	r3, [pc, #148]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d20c      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002882:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f855 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	@ (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fbf6 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08003928 	.word	0x08003928
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000000 	.word	0x20000000

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028f8:	f7ff fff0 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4903      	ldr	r1, [pc, #12]	@ (8002918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	08003938 	.word	0x08003938

0800291c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002920:	f7ff ffdc 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	0b5b      	lsrs	r3, r3, #13
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4903      	ldr	r1, [pc, #12]	@ (8002940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	08003938 	.word	0x08003938

08002944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002948:	b0ae      	sub	sp, #184	@ 0xb8
 800294a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296a:	4bcb      	ldr	r3, [pc, #812]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x354>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b0c      	cmp	r3, #12
 8002974:	f200 8206 	bhi.w	8002d84 <HAL_RCC_GetSysClockFreq+0x440>
 8002978:	a201      	add	r2, pc, #4	@ (adr r2, 8002980 <HAL_RCC_GetSysClockFreq+0x3c>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	080029b5 	.word	0x080029b5
 8002984:	08002d85 	.word	0x08002d85
 8002988:	08002d85 	.word	0x08002d85
 800298c:	08002d85 	.word	0x08002d85
 8002990:	080029bd 	.word	0x080029bd
 8002994:	08002d85 	.word	0x08002d85
 8002998:	08002d85 	.word	0x08002d85
 800299c:	08002d85 	.word	0x08002d85
 80029a0:	080029c5 	.word	0x080029c5
 80029a4:	08002d85 	.word	0x08002d85
 80029a8:	08002d85 	.word	0x08002d85
 80029ac:	08002d85 	.word	0x08002d85
 80029b0:	08002bb5 	.word	0x08002bb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4bb9      	ldr	r3, [pc, #740]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x358>)
 80029b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029ba:	e1e7      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029bc:	4bb8      	ldr	r3, [pc, #736]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80029be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029c2:	e1e3      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c4:	4bb4      	ldr	r3, [pc, #720]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x354>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d0:	4bb1      	ldr	r3, [pc, #708]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x354>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d071      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029dc:	4bae      	ldr	r3, [pc, #696]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x354>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	099b      	lsrs	r3, r3, #6
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80029ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a02:	4622      	mov	r2, r4
 8002a04:	462b      	mov	r3, r5
 8002a06:	f04f 0000 	mov.w	r0, #0
 8002a0a:	f04f 0100 	mov.w	r1, #0
 8002a0e:	0159      	lsls	r1, r3, #5
 8002a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a14:	0150      	lsls	r0, r2, #5
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	1a51      	subs	r1, r2, r1
 8002a1e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002a20:	4629      	mov	r1, r5
 8002a22:	eb63 0301 	sbc.w	r3, r3, r1
 8002a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002a34:	4649      	mov	r1, r9
 8002a36:	018b      	lsls	r3, r1, #6
 8002a38:	4641      	mov	r1, r8
 8002a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a3e:	4641      	mov	r1, r8
 8002a40:	018a      	lsls	r2, r1, #6
 8002a42:	4641      	mov	r1, r8
 8002a44:	1a51      	subs	r1, r2, r1
 8002a46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a48:	4649      	mov	r1, r9
 8002a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	00cb      	lsls	r3, r1, #3
 8002a60:	4641      	mov	r1, r8
 8002a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a66:	4641      	mov	r1, r8
 8002a68:	00ca      	lsls	r2, r1, #3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4622      	mov	r2, r4
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a76:	462b      	mov	r3, r5
 8002a78:	460a      	mov	r2, r1
 8002a7a:	eb42 0303 	adc.w	r3, r2, r3
 8002a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	024b      	lsls	r3, r1, #9
 8002a90:	4621      	mov	r1, r4
 8002a92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a96:	4621      	mov	r1, r4
 8002a98:	024a      	lsls	r2, r1, #9
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002aa8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002aac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ab0:	f7fd fba8 	bl	8000204 <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002abe:	e067      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac0:	4b75      	ldr	r3, [pc, #468]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002acc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ada:	2300      	movs	r3, #0
 8002adc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ade:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	f04f 0000 	mov.w	r0, #0
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	0159      	lsls	r1, r3, #5
 8002af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af4:	0150      	lsls	r0, r2, #5
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4621      	mov	r1, r4
 8002afc:	1a51      	subs	r1, r2, r1
 8002afe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b00:	4629      	mov	r1, r5
 8002b02:	eb63 0301 	sbc.w	r3, r3, r1
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002b14:	4649      	mov	r1, r9
 8002b16:	018b      	lsls	r3, r1, #6
 8002b18:	4641      	mov	r1, r8
 8002b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b1e:	4641      	mov	r1, r8
 8002b20:	018a      	lsls	r2, r1, #6
 8002b22:	4641      	mov	r1, r8
 8002b24:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b28:	4649      	mov	r1, r9
 8002b2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b42:	4692      	mov	sl, r2
 8002b44:	469b      	mov	fp, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	eb1a 0303 	adds.w	r3, sl, r3
 8002b4c:	623b      	str	r3, [r7, #32]
 8002b4e:	462b      	mov	r3, r5
 8002b50:	eb4b 0303 	adc.w	r3, fp, r3
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b62:	4629      	mov	r1, r5
 8002b64:	028b      	lsls	r3, r1, #10
 8002b66:	4621      	mov	r1, r4
 8002b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	028a      	lsls	r2, r1, #10
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b78:	2200      	movs	r2, #0
 8002b7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b7c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b82:	f7fd fb3f 	bl	8000204 <__aeabi_uldivmod>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b90:	4b41      	ldr	r3, [pc, #260]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bb2:	e0eb      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb4:	4b38      	ldr	r3, [pc, #224]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc0:	4b35      	ldr	r3, [pc, #212]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d06b      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bcc:	4b32      	ldr	r3, [pc, #200]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bde:	663b      	str	r3, [r7, #96]	@ 0x60
 8002be0:	2300      	movs	r3, #0
 8002be2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002be4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002be8:	4622      	mov	r2, r4
 8002bea:	462b      	mov	r3, r5
 8002bec:	f04f 0000 	mov.w	r0, #0
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	0159      	lsls	r1, r3, #5
 8002bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfa:	0150      	lsls	r0, r2, #5
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4621      	mov	r1, r4
 8002c02:	1a51      	subs	r1, r2, r1
 8002c04:	61b9      	str	r1, [r7, #24]
 8002c06:	4629      	mov	r1, r5
 8002c08:	eb63 0301 	sbc.w	r3, r3, r1
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c1a:	4659      	mov	r1, fp
 8002c1c:	018b      	lsls	r3, r1, #6
 8002c1e:	4651      	mov	r1, sl
 8002c20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c24:	4651      	mov	r1, sl
 8002c26:	018a      	lsls	r2, r1, #6
 8002c28:	4651      	mov	r1, sl
 8002c2a:	ebb2 0801 	subs.w	r8, r2, r1
 8002c2e:	4659      	mov	r1, fp
 8002c30:	eb63 0901 	sbc.w	r9, r3, r1
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c48:	4690      	mov	r8, r2
 8002c4a:	4699      	mov	r9, r3
 8002c4c:	4623      	mov	r3, r4
 8002c4e:	eb18 0303 	adds.w	r3, r8, r3
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	462b      	mov	r3, r5
 8002c56:	eb49 0303 	adc.w	r3, r9, r3
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c68:	4629      	mov	r1, r5
 8002c6a:	024b      	lsls	r3, r1, #9
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c72:	4621      	mov	r1, r4
 8002c74:	024a      	lsls	r2, r1, #9
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c7e:	2200      	movs	r2, #0
 8002c80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c82:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c88:	f7fd fabc 	bl	8000204 <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4613      	mov	r3, r2
 8002c92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c96:	e065      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x420>
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	00f42400 	.word	0x00f42400
 8002ca0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x458>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	2200      	movs	r2, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	4611      	mov	r1, r2
 8002cb0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002cbe:	4642      	mov	r2, r8
 8002cc0:	464b      	mov	r3, r9
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	0159      	lsls	r1, r3, #5
 8002ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd0:	0150      	lsls	r0, r2, #5
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4641      	mov	r1, r8
 8002cd8:	1a51      	subs	r1, r2, r1
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	4649      	mov	r1, r9
 8002cde:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	018b      	lsls	r3, r1, #6
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	018a      	lsls	r2, r1, #6
 8002cfe:	4651      	mov	r1, sl
 8002d00:	1a54      	subs	r4, r2, r1
 8002d02:	4659      	mov	r1, fp
 8002d04:	eb63 0501 	sbc.w	r5, r3, r1
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	00eb      	lsls	r3, r5, #3
 8002d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d16:	00e2      	lsls	r2, r4, #3
 8002d18:	4614      	mov	r4, r2
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	4643      	mov	r3, r8
 8002d1e:	18e3      	adds	r3, r4, r3
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	464b      	mov	r3, r9
 8002d24:	eb45 0303 	adc.w	r3, r5, r3
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d36:	4629      	mov	r1, r5
 8002d38:	028b      	lsls	r3, r1, #10
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d40:	4621      	mov	r1, r4
 8002d42:	028a      	lsls	r2, r1, #10
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d50:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d56:	f7fd fa55 	bl	8000204 <__aeabi_uldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4613      	mov	r3, r2
 8002d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d64:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x458>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	0f1b      	lsrs	r3, r3, #28
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d82:	e003      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	37b8      	adds	r7, #184	@ 0xb8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	00f42400 	.word	0x00f42400

08002da4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e28d      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8083 	beq.w	8002eca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dc4:	4b94      	ldr	r3, [pc, #592]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d019      	beq.n	8002e04 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dd0:	4b91      	ldr	r3, [pc, #580]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d106      	bne.n	8002dea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ddc:	4b8e      	ldr	r3, [pc, #568]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de8:	d00c      	beq.n	8002e04 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dea:	4b8b      	ldr	r3, [pc, #556]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d112      	bne.n	8002e1c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df6:	4b88      	ldr	r3, [pc, #544]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e02:	d10b      	bne.n	8002e1c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	4b84      	ldr	r3, [pc, #528]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d05b      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x124>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d157      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e25a      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e24:	d106      	bne.n	8002e34 <HAL_RCC_OscConfig+0x90>
 8002e26:	4b7c      	ldr	r3, [pc, #496]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7b      	ldr	r2, [pc, #492]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e01d      	b.n	8002e70 <HAL_RCC_OscConfig+0xcc>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0xb4>
 8002e3e:	4b76      	ldr	r3, [pc, #472]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a75      	ldr	r2, [pc, #468]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b73      	ldr	r3, [pc, #460]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a72      	ldr	r2, [pc, #456]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0xcc>
 8002e58:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b6c      	ldr	r3, [pc, #432]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6b      	ldr	r2, [pc, #428]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d013      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe f95a 	bl	8001130 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e80:	f7fe f956 	bl	8001130 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	@ 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e21f      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e92:	4b61      	ldr	r3, [pc, #388]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0xdc>
 8002e9e:	e014      	b.n	8002eca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe f946 	bl	8001130 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fe f942 	bl	8001130 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	@ 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e20b      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eba:	4b57      	ldr	r3, [pc, #348]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x104>
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d06f      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ed6:	4b50      	ldr	r3, [pc, #320]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d017      	beq.n	8002f12 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d105      	bne.n	8002efa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002eee:	4b4a      	ldr	r3, [pc, #296]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efa:	4b47      	ldr	r3, [pc, #284]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f02:	2b0c      	cmp	r3, #12
 8002f04:	d11c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f06:	4b44      	ldr	r3, [pc, #272]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	4b41      	ldr	r3, [pc, #260]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_OscConfig+0x186>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e1d3      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4937      	ldr	r1, [pc, #220]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3e:	e03a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f48:	4b34      	ldr	r3, [pc, #208]	@ (800301c <HAL_RCC_OscConfig+0x278>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe f8ef 	bl	8001130 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f56:	f7fe f8eb 	bl	8001130 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1b4      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f74:	4b28      	ldr	r3, [pc, #160]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4925      	ldr	r1, [pc, #148]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
 8002f88:	e015      	b.n	8002fb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8a:	4b24      	ldr	r3, [pc, #144]	@ (800301c <HAL_RCC_OscConfig+0x278>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe f8ce 	bl	8001130 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fe f8ca 	bl	8001130 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e193      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d036      	beq.n	8003030 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d016      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fca:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <HAL_RCC_OscConfig+0x27c>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe f8ae 	bl	8001130 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fe f8aa 	bl	8001130 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e173      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x234>
 8002ff6:	e01b      	b.n	8003030 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fe f897 	bl	8001130 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	e00e      	b.n	8003024 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003006:	f7fe f893 	bl	8001130 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d907      	bls.n	8003024 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e15c      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
 8003018:	40023800 	.word	0x40023800
 800301c:	42470000 	.word	0x42470000
 8003020:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	4b8a      	ldr	r3, [pc, #552]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ea      	bne.n	8003006 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8097 	beq.w	800316c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003042:	4b83      	ldr	r3, [pc, #524]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b7f      	ldr	r3, [pc, #508]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	4a7e      	ldr	r2, [pc, #504]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	@ 0x40
 800305e:	4b7c      	ldr	r3, [pc, #496]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306a:	2301      	movs	r3, #1
 800306c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306e:	4b79      	ldr	r3, [pc, #484]	@ (8003254 <HAL_RCC_OscConfig+0x4b0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d118      	bne.n	80030ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307a:	4b76      	ldr	r3, [pc, #472]	@ (8003254 <HAL_RCC_OscConfig+0x4b0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a75      	ldr	r2, [pc, #468]	@ (8003254 <HAL_RCC_OscConfig+0x4b0>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003086:	f7fe f853 	bl	8001130 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308e:	f7fe f84f 	bl	8001130 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e118      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003254 <HAL_RCC_OscConfig+0x4b0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d106      	bne.n	80030c2 <HAL_RCC_OscConfig+0x31e>
 80030b4:	4b66      	ldr	r3, [pc, #408]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	4a65      	ldr	r2, [pc, #404]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c0:	e01c      	b.n	80030fc <HAL_RCC_OscConfig+0x358>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x340>
 80030ca:	4b61      	ldr	r3, [pc, #388]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	4a60      	ldr	r2, [pc, #384]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	4a5d      	ldr	r2, [pc, #372]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0x358>
 80030e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	4a59      	ldr	r2, [pc, #356]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f0:	4b57      	ldr	r3, [pc, #348]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f4:	4a56      	ldr	r2, [pc, #344]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80030f6:	f023 0304 	bic.w	r3, r3, #4
 80030fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe f814 	bl	8001130 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310a:	e00a      	b.n	8003122 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe f810 	bl	8001130 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0d7      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003122:	4b4b      	ldr	r3, [pc, #300]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ee      	beq.n	800310c <HAL_RCC_OscConfig+0x368>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fd fffe 	bl	8001130 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7fd fffa 	bl	8001130 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e0c1      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314e:	4b40      	ldr	r3, [pc, #256]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1ee      	bne.n	8003138 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003160:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	4a3a      	ldr	r2, [pc, #232]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800316a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80ad 	beq.w	80032d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003176:	4b36      	ldr	r3, [pc, #216]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b08      	cmp	r3, #8
 8003180:	d060      	beq.n	8003244 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d145      	bne.n	8003216 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b33      	ldr	r3, [pc, #204]	@ (8003258 <HAL_RCC_OscConfig+0x4b4>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fd ffce 	bl	8001130 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7fd ffca 	bl	8001130 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e093      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	4b29      	ldr	r3, [pc, #164]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	019b      	lsls	r3, r3, #6
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	3b01      	subs	r3, #1
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	491b      	ldr	r1, [pc, #108]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_OscConfig+0x4b4>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7fd ff9f 	bl	8001130 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fd ff9b 	bl	8001130 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e064      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x452>
 8003214:	e05c      	b.n	80032d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <HAL_RCC_OscConfig+0x4b4>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd ff88 	bl	8001130 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fd ff84 	bl	8001130 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e04d      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCC_OscConfig+0x4ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x480>
 8003242:	e045      	b.n	80032d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e040      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
 8003250:	40023800 	.word	0x40023800
 8003254:	40007000 	.word	0x40007000
 8003258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325c:	4b1f      	ldr	r3, [pc, #124]	@ (80032dc <HAL_RCC_OscConfig+0x538>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d030      	beq.n	80032cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d129      	bne.n	80032cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d122      	bne.n	80032cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800328c:	4013      	ands	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003294:	4293      	cmp	r3, r2
 8003296:	d119      	bne.n	80032cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	3b01      	subs	r3, #1
 80032a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d10f      	bne.n	80032cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800

080032e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e042      	b.n	8003378 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fe3a 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	@ 0x24
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003322:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f82b 	bl	8003380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003338:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003348:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003358:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003384:	b0c0      	sub	sp, #256	@ 0x100
 8003386:	af00      	add	r7, sp, #0
 8003388:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339c:	68d9      	ldr	r1, [r3, #12]
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	ea40 0301 	orr.w	r3, r0, r1
 80033a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	431a      	orrs	r2, r3
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033d8:	f021 010c 	bic.w	r1, r1, #12
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033e6:	430b      	orrs	r3, r1
 80033e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fa:	6999      	ldr	r1, [r3, #24]
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	ea40 0301 	orr.w	r3, r0, r1
 8003406:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b8f      	ldr	r3, [pc, #572]	@ (800364c <UART_SetConfig+0x2cc>)
 8003410:	429a      	cmp	r2, r3
 8003412:	d005      	beq.n	8003420 <UART_SetConfig+0xa0>
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b8d      	ldr	r3, [pc, #564]	@ (8003650 <UART_SetConfig+0x2d0>)
 800341c:	429a      	cmp	r2, r3
 800341e:	d104      	bne.n	800342a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7ff fa7c 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 8003424:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003428:	e003      	b.n	8003432 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800342a:	f7ff fa63 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 800342e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800343c:	f040 810c 	bne.w	8003658 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800344a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800344e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003452:	4622      	mov	r2, r4
 8003454:	462b      	mov	r3, r5
 8003456:	1891      	adds	r1, r2, r2
 8003458:	65b9      	str	r1, [r7, #88]	@ 0x58
 800345a:	415b      	adcs	r3, r3
 800345c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800345e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003462:	4621      	mov	r1, r4
 8003464:	eb12 0801 	adds.w	r8, r2, r1
 8003468:	4629      	mov	r1, r5
 800346a:	eb43 0901 	adc.w	r9, r3, r1
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800347a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003482:	4690      	mov	r8, r2
 8003484:	4699      	mov	r9, r3
 8003486:	4623      	mov	r3, r4
 8003488:	eb18 0303 	adds.w	r3, r8, r3
 800348c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003490:	462b      	mov	r3, r5
 8003492:	eb49 0303 	adc.w	r3, r9, r3
 8003496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034ae:	460b      	mov	r3, r1
 80034b0:	18db      	adds	r3, r3, r3
 80034b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80034b4:	4613      	mov	r3, r2
 80034b6:	eb42 0303 	adc.w	r3, r2, r3
 80034ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80034bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034c4:	f7fc fe9e 	bl	8000204 <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4b61      	ldr	r3, [pc, #388]	@ (8003654 <UART_SetConfig+0x2d4>)
 80034ce:	fba3 2302 	umull	r2, r3, r3, r2
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	011c      	lsls	r4, r3, #4
 80034d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034e8:	4642      	mov	r2, r8
 80034ea:	464b      	mov	r3, r9
 80034ec:	1891      	adds	r1, r2, r2
 80034ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034f0:	415b      	adcs	r3, r3
 80034f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034f8:	4641      	mov	r1, r8
 80034fa:	eb12 0a01 	adds.w	sl, r2, r1
 80034fe:	4649      	mov	r1, r9
 8003500:	eb43 0b01 	adc.w	fp, r3, r1
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003510:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003518:	4692      	mov	sl, r2
 800351a:	469b      	mov	fp, r3
 800351c:	4643      	mov	r3, r8
 800351e:	eb1a 0303 	adds.w	r3, sl, r3
 8003522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003526:	464b      	mov	r3, r9
 8003528:	eb4b 0303 	adc.w	r3, fp, r3
 800352c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800353c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003540:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003544:	460b      	mov	r3, r1
 8003546:	18db      	adds	r3, r3, r3
 8003548:	643b      	str	r3, [r7, #64]	@ 0x40
 800354a:	4613      	mov	r3, r2
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	647b      	str	r3, [r7, #68]	@ 0x44
 8003552:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003556:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800355a:	f7fc fe53 	bl	8000204 <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4611      	mov	r1, r2
 8003564:	4b3b      	ldr	r3, [pc, #236]	@ (8003654 <UART_SetConfig+0x2d4>)
 8003566:	fba3 2301 	umull	r2, r3, r3, r1
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2264      	movs	r2, #100	@ 0x64
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	1acb      	subs	r3, r1, r3
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800357a:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <UART_SetConfig+0x2d4>)
 800357c:	fba3 2302 	umull	r2, r3, r3, r2
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003588:	441c      	add	r4, r3
 800358a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003594:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003598:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035a4:	415b      	adcs	r3, r3
 80035a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035ac:	4641      	mov	r1, r8
 80035ae:	1851      	adds	r1, r2, r1
 80035b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80035b2:	4649      	mov	r1, r9
 80035b4:	414b      	adcs	r3, r1
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035c4:	4659      	mov	r1, fp
 80035c6:	00cb      	lsls	r3, r1, #3
 80035c8:	4651      	mov	r1, sl
 80035ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ce:	4651      	mov	r1, sl
 80035d0:	00ca      	lsls	r2, r1, #3
 80035d2:	4610      	mov	r0, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	4642      	mov	r2, r8
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035e0:	464b      	mov	r3, r9
 80035e2:	460a      	mov	r2, r1
 80035e4:	eb42 0303 	adc.w	r3, r2, r3
 80035e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003600:	460b      	mov	r3, r1
 8003602:	18db      	adds	r3, r3, r3
 8003604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003606:	4613      	mov	r3, r2
 8003608:	eb42 0303 	adc.w	r3, r2, r3
 800360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800360e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003612:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003616:	f7fc fdf5 	bl	8000204 <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <UART_SetConfig+0x2d4>)
 8003620:	fba3 1302 	umull	r1, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	2164      	movs	r1, #100	@ 0x64
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	3332      	adds	r3, #50	@ 0x32
 8003632:	4a08      	ldr	r2, [pc, #32]	@ (8003654 <UART_SetConfig+0x2d4>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	f003 0207 	and.w	r2, r3, #7
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4422      	add	r2, r4
 8003646:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003648:	e106      	b.n	8003858 <UART_SetConfig+0x4d8>
 800364a:	bf00      	nop
 800364c:	40011000 	.word	0x40011000
 8003650:	40011400 	.word	0x40011400
 8003654:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800365c:	2200      	movs	r2, #0
 800365e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003662:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003666:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800366a:	4642      	mov	r2, r8
 800366c:	464b      	mov	r3, r9
 800366e:	1891      	adds	r1, r2, r2
 8003670:	6239      	str	r1, [r7, #32]
 8003672:	415b      	adcs	r3, r3
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
 8003676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800367a:	4641      	mov	r1, r8
 800367c:	1854      	adds	r4, r2, r1
 800367e:	4649      	mov	r1, r9
 8003680:	eb43 0501 	adc.w	r5, r3, r1
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	00eb      	lsls	r3, r5, #3
 800368e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003692:	00e2      	lsls	r2, r4, #3
 8003694:	4614      	mov	r4, r2
 8003696:	461d      	mov	r5, r3
 8003698:	4643      	mov	r3, r8
 800369a:	18e3      	adds	r3, r4, r3
 800369c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036a0:	464b      	mov	r3, r9
 80036a2:	eb45 0303 	adc.w	r3, r5, r3
 80036a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036c6:	4629      	mov	r1, r5
 80036c8:	008b      	lsls	r3, r1, #2
 80036ca:	4621      	mov	r1, r4
 80036cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d0:	4621      	mov	r1, r4
 80036d2:	008a      	lsls	r2, r1, #2
 80036d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036d8:	f7fc fd94 	bl	8000204 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4b60      	ldr	r3, [pc, #384]	@ (8003864 <UART_SetConfig+0x4e4>)
 80036e2:	fba3 2302 	umull	r2, r3, r3, r2
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	011c      	lsls	r4, r3, #4
 80036ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036fc:	4642      	mov	r2, r8
 80036fe:	464b      	mov	r3, r9
 8003700:	1891      	adds	r1, r2, r2
 8003702:	61b9      	str	r1, [r7, #24]
 8003704:	415b      	adcs	r3, r3
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800370c:	4641      	mov	r1, r8
 800370e:	1851      	adds	r1, r2, r1
 8003710:	6139      	str	r1, [r7, #16]
 8003712:	4649      	mov	r1, r9
 8003714:	414b      	adcs	r3, r1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003724:	4659      	mov	r1, fp
 8003726:	00cb      	lsls	r3, r1, #3
 8003728:	4651      	mov	r1, sl
 800372a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800372e:	4651      	mov	r1, sl
 8003730:	00ca      	lsls	r2, r1, #3
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	4603      	mov	r3, r0
 8003738:	4642      	mov	r2, r8
 800373a:	189b      	adds	r3, r3, r2
 800373c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003740:	464b      	mov	r3, r9
 8003742:	460a      	mov	r2, r1
 8003744:	eb42 0303 	adc.w	r3, r2, r3
 8003748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003756:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003764:	4649      	mov	r1, r9
 8003766:	008b      	lsls	r3, r1, #2
 8003768:	4641      	mov	r1, r8
 800376a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376e:	4641      	mov	r1, r8
 8003770:	008a      	lsls	r2, r1, #2
 8003772:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003776:	f7fc fd45 	bl	8000204 <__aeabi_uldivmod>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4611      	mov	r1, r2
 8003780:	4b38      	ldr	r3, [pc, #224]	@ (8003864 <UART_SetConfig+0x4e4>)
 8003782:	fba3 2301 	umull	r2, r3, r3, r1
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2264      	movs	r2, #100	@ 0x64
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	1acb      	subs	r3, r1, r3
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	3332      	adds	r3, #50	@ 0x32
 8003794:	4a33      	ldr	r2, [pc, #204]	@ (8003864 <UART_SetConfig+0x4e4>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037a0:	441c      	add	r4, r3
 80037a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a6:	2200      	movs	r2, #0
 80037a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80037aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80037ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	415b      	adcs	r3, r3
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037c0:	4641      	mov	r1, r8
 80037c2:	1851      	adds	r1, r2, r1
 80037c4:	6039      	str	r1, [r7, #0]
 80037c6:	4649      	mov	r1, r9
 80037c8:	414b      	adcs	r3, r1
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037d8:	4659      	mov	r1, fp
 80037da:	00cb      	lsls	r3, r1, #3
 80037dc:	4651      	mov	r1, sl
 80037de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e2:	4651      	mov	r1, sl
 80037e4:	00ca      	lsls	r2, r1, #3
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	4642      	mov	r2, r8
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037f2:	464b      	mov	r3, r9
 80037f4:	460a      	mov	r2, r1
 80037f6:	eb42 0303 	adc.w	r3, r2, r3
 80037fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	663b      	str	r3, [r7, #96]	@ 0x60
 8003806:	667a      	str	r2, [r7, #100]	@ 0x64
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003814:	4649      	mov	r1, r9
 8003816:	008b      	lsls	r3, r1, #2
 8003818:	4641      	mov	r1, r8
 800381a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800381e:	4641      	mov	r1, r8
 8003820:	008a      	lsls	r2, r1, #2
 8003822:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003826:	f7fc fced 	bl	8000204 <__aeabi_uldivmod>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <UART_SetConfig+0x4e4>)
 8003830:	fba3 1302 	umull	r1, r3, r3, r2
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	2164      	movs	r1, #100	@ 0x64
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	3332      	adds	r3, #50	@ 0x32
 8003842:	4a08      	ldr	r2, [pc, #32]	@ (8003864 <UART_SetConfig+0x4e4>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4422      	add	r2, r4
 8003856:	609a      	str	r2, [r3, #8]
}
 8003858:	bf00      	nop
 800385a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800385e:	46bd      	mov	sp, r7
 8003860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003864:	51eb851f 	.word	0x51eb851f

08003868 <memset>:
 8003868:	4402      	add	r2, r0
 800386a:	4603      	mov	r3, r0
 800386c:	4293      	cmp	r3, r2
 800386e:	d100      	bne.n	8003872 <memset+0xa>
 8003870:	4770      	bx	lr
 8003872:	f803 1b01 	strb.w	r1, [r3], #1
 8003876:	e7f9      	b.n	800386c <memset+0x4>

08003878 <__errno>:
 8003878:	4b01      	ldr	r3, [pc, #4]	@ (8003880 <__errno+0x8>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2000000c 	.word	0x2000000c

08003884 <__libc_init_array>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4d0d      	ldr	r5, [pc, #52]	@ (80038bc <__libc_init_array+0x38>)
 8003888:	4c0d      	ldr	r4, [pc, #52]	@ (80038c0 <__libc_init_array+0x3c>)
 800388a:	1b64      	subs	r4, r4, r5
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	2600      	movs	r6, #0
 8003890:	42a6      	cmp	r6, r4
 8003892:	d109      	bne.n	80038a8 <__libc_init_array+0x24>
 8003894:	4d0b      	ldr	r5, [pc, #44]	@ (80038c4 <__libc_init_array+0x40>)
 8003896:	4c0c      	ldr	r4, [pc, #48]	@ (80038c8 <__libc_init_array+0x44>)
 8003898:	f000 f83a 	bl	8003910 <_init>
 800389c:	1b64      	subs	r4, r4, r5
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	2600      	movs	r6, #0
 80038a2:	42a6      	cmp	r6, r4
 80038a4:	d105      	bne.n	80038b2 <__libc_init_array+0x2e>
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ac:	4798      	blx	r3
 80038ae:	3601      	adds	r6, #1
 80038b0:	e7ee      	b.n	8003890 <__libc_init_array+0xc>
 80038b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b6:	4798      	blx	r3
 80038b8:	3601      	adds	r6, #1
 80038ba:	e7f2      	b.n	80038a2 <__libc_init_array+0x1e>
 80038bc:	08003ab4 	.word	0x08003ab4
 80038c0:	08003ab4 	.word	0x08003ab4
 80038c4:	08003ab4 	.word	0x08003ab4
 80038c8:	08003ab8 	.word	0x08003ab8

080038cc <sqrtf>:
 80038cc:	b508      	push	{r3, lr}
 80038ce:	ed2d 8b02 	vpush	{d8}
 80038d2:	eeb0 8a40 	vmov.f32	s16, s0
 80038d6:	f000 f817 	bl	8003908 <__ieee754_sqrtf>
 80038da:	eeb4 8a48 	vcmp.f32	s16, s16
 80038de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e2:	d60c      	bvs.n	80038fe <sqrtf+0x32>
 80038e4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8003904 <sqrtf+0x38>
 80038e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	d505      	bpl.n	80038fe <sqrtf+0x32>
 80038f2:	f7ff ffc1 	bl	8003878 <__errno>
 80038f6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80038fa:	2321      	movs	r3, #33	@ 0x21
 80038fc:	6003      	str	r3, [r0, #0]
 80038fe:	ecbd 8b02 	vpop	{d8}
 8003902:	bd08      	pop	{r3, pc}
 8003904:	00000000 	.word	0x00000000

08003908 <__ieee754_sqrtf>:
 8003908:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800390c:	4770      	bx	lr
	...

08003910 <_init>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr

0800391c <_fini>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	bf00      	nop
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr
