
NUCLEO-F446RE_prototypes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003068  08003068  00004068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003080  08003080  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003080  08003080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003088  08003088  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003088  08003088  00004088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800308c  0800308c  0000408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003090  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  0800309c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800309c  00005104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008db8  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001862  00000000  00000000  0000ddf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059b  00000000  00000000  0000fda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020389  00000000  00000000  00010343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d00  00000000  00000000  000306cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4c3f  00000000  00000000  0003a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff00b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf0  00000000  00000000  000ff050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00100d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003050 	.word	0x08003050

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003050 	.word	0x08003050

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ServoSetPos>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void ServoSetPos(uint8_t id, uint16_t pos, uint8_t* buff)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	603a      	str	r2, [r7, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	460b      	mov	r3, r1
 8000502:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	// Declare operating speed
	uint16_t speed = 3400;
 8000504:	f640 5348 	movw	r3, #3400	@ 0xd48
 8000508:	81fb      	strh	r3, [r7, #14]

	// Fist sending to bytes of 0xFF
	*buff = 0xFF;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	22ff      	movs	r2, #255	@ 0xff
 800050e:	701a      	strb	r2, [r3, #0]
	*(buff + 1) = 0xFF;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	22ff      	movs	r2, #255	@ 0xff
 8000516:	701a      	strb	r2, [r3, #0]

	// Sending transmission details
	*(buff + 2) = id;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	3302      	adds	r3, #2
 800051c:	79fa      	ldrb	r2, [r7, #7]
 800051e:	701a      	strb	r2, [r3, #0]
	*(buff + 3) = 0x0A; 		// number of messages
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	3303      	adds	r3, #3
 8000524:	220a      	movs	r2, #10
 8000526:	701a      	strb	r2, [r3, #0]
	*(buff + 4) = WRITE_INST;	// code of servo instruction
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	3304      	adds	r3, #4
 800052c:	2203      	movs	r2, #3
 800052e:	701a      	strb	r2, [r3, #0]
	*(buff + 5) = ACC_REG;		// servo memory address
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	3305      	adds	r3, #5
 8000534:	2229      	movs	r2, #41	@ 0x29
 8000536:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit(&huart4, buff, 6, HAL_MAX_DELAY);
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	2206      	movs	r2, #6
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	4827      	ldr	r0, [pc, #156]	@ (80005e0 <ServoSetPos+0xec>)
 8000542:	f001 fda7 	bl	8002094 <HAL_UART_Transmit>
 8000546:	4603      	mov	r3, r0
 8000548:	737b      	strb	r3, [r7, #13]

	uint8_t checksum = id + 0x0A + WRITE_INST + ACC_REG;
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	3336      	adds	r3, #54	@ 0x36
 800054e:	75fb      	strb	r3, [r7, #23]

	// Acceleration data
	*(buff + 0) = (uint8_t) 50;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2232      	movs	r2, #50	@ 0x32
 8000554:	701a      	strb	r2, [r3, #0]
	// Position data
	*(buff + 1) = (uint8_t) (pos & 0x00FF);	// lower byte of position
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	88ba      	ldrh	r2, [r7, #4]
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	701a      	strb	r2, [r3, #0]
	*(buff + 2) = (uint8_t) ((pos & 0xFF00) >> 8);	// higher byte of position
 8000560:	88bb      	ldrh	r3, [r7, #4]
 8000562:	0a1b      	lsrs	r3, r3, #8
 8000564:	b29a      	uxth	r2, r3
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	3302      	adds	r3, #2
 800056a:	b2d2      	uxtb	r2, r2
 800056c:	701a      	strb	r2, [r3, #0]
	// Time data
	*(buff + 3) = 0x00;	// lower  byte of time
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3303      	adds	r3, #3
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	*(buff + 4) = 0x00;	// higher  byte of time
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	3304      	adds	r3, #4
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	// Speed data
	*(buff + 5) = (uint8_t) (speed & 0x00FF);	// lower byte of speed
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	3305      	adds	r3, #5
 8000582:	89fa      	ldrh	r2, [r7, #14]
 8000584:	b2d2      	uxtb	r2, r2
 8000586:	701a      	strb	r2, [r3, #0]
	*(buff + 6) = (uint8_t) ((speed & 0xFF00) >> 8);	// higher byte of speed
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	0a1b      	lsrs	r3, r3, #8
 800058c:	b29a      	uxth	r2, r3
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	3306      	adds	r3, #6
 8000592:	b2d2      	uxtb	r2, r2
 8000594:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 7; i++)
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	e00b      	b.n	80005b4 <ServoSetPos+0xc0>
	{
		uint8_t data = *(buff + i);
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	4413      	add	r3, r2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	733b      	strb	r3, [r7, #12]
		checksum += data;
 80005a6:	7dfa      	ldrb	r2, [r7, #23]
 80005a8:	7b3b      	ldrb	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 7; i++)
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	3301      	adds	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	ddf0      	ble.n	800059c <ServoSetPos+0xa8>
	}

	// Sending checksum
	*(buff + 7) = ~checksum;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	3307      	adds	r3, #7
 80005be:	7dfa      	ldrb	r2, [r7, #23]
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	b2d2      	uxtb	r2, r2
 80005c4:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit(&huart4, buff, 8, HAL_MAX_DELAY);
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	2208      	movs	r2, #8
 80005cc:	6839      	ldr	r1, [r7, #0]
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <ServoSetPos+0xec>)
 80005d0:	f001 fd60 	bl	8002094 <HAL_UART_Transmit>
 80005d4:	4603      	mov	r3, r0
 80005d6:	737b      	strb	r3, [r7, #13]
}
 80005d8:	bf00      	nop
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000028 	.word	0x20000028

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fadb 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f821 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f90b 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 f8df 	bl	80007b8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80005fa:	f000 f889 	bl	8000710 <MX_UART4_Init>
  MX_UART5_Init();
 80005fe:	f000 f8b1 	bl	8000764 <MX_UART5_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ServoSetPos(0x01, 4095, servo_tx_buff);
 8000602:	463b      	mov	r3, r7
 8000604:	461a      	mov	r2, r3
 8000606:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff ff72 	bl	80004f4 <ServoSetPos>
	  HAL_Delay(2000);
 8000610:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000614:	f000 fb38 	bl	8000c88 <HAL_Delay>
	  ServoSetPos(0x01, 2000, servo_tx_buff);
 8000618:	463b      	mov	r3, r7
 800061a:	461a      	mov	r2, r3
 800061c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000620:	2001      	movs	r0, #1
 8000622:	f7ff ff67 	bl	80004f4 <ServoSetPos>
	  HAL_Delay(2000);
 8000626:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800062a:	f000 fb2d 	bl	8000c88 <HAL_Delay>
	  ServoSetPos(0x01, 4095, servo_tx_buff);
 800062e:	bf00      	nop
 8000630:	e7e7      	b.n	8000602 <main+0x1e>
	...

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2234      	movs	r2, #52	@ 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fcd8 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <SystemClock_Config+0xd4>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <SystemClock_Config+0xd4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	4a22      	ldr	r2, [pc, #136]	@ (800070c <SystemClock_Config+0xd8>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a8:	2310      	movs	r3, #16
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f9a0 	bl	8001a08 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ce:	f000 f90b 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fe40 	bl	8001374 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006fa:	f000 f8f5 	bl	80008e8 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000714:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_UART4_Init+0x48>)
 8000716:	4a11      	ldr	r2, [pc, #68]	@ (800075c <MX_UART4_Init+0x4c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1000000;
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_UART4_Init+0x48>)
 800071c:	4a10      	ldr	r2, [pc, #64]	@ (8000760 <MX_UART4_Init+0x50>)
 800071e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000720:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <MX_UART4_Init+0x48>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_UART4_Init+0x48>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_UART4_Init+0x48>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_UART4_Init+0x48>)
 8000734:	220c      	movs	r2, #12
 8000736:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <MX_UART4_Init+0x48>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_UART4_Init+0x48>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_UART4_Init+0x48>)
 8000746:	f001 fc4d 	bl	8001fe4 <HAL_HalfDuplex_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 8000750:	f000 f8ca 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000028 	.word	0x20000028
 800075c:	40004c00 	.word	0x40004c00
 8000760:	000f4240 	.word	0x000f4240

08000764 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_UART5_Init+0x48>)
 800076a:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <MX_UART5_Init+0x4c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_UART5_Init+0x48>)
 8000770:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <MX_UART5_Init+0x50>)
 8000772:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_UART5_Init+0x48>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_UART5_Init+0x48>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_UART5_Init+0x48>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_UART5_Init+0x48>)
 8000788:	220c      	movs	r2, #12
 800078a:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_UART5_Init+0x48>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_UART5_Init+0x48>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_UART5_Init+0x48>)
 800079a:	f001 fc23 	bl	8001fe4 <HAL_HalfDuplex_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_UART5_Init+0x44>
  {
    Error_Handler();
 80007a4:	f000 f8a0 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000070 	.word	0x20000070
 80007b0:	40005000 	.word	0x40005000
 80007b4:	000f4240 	.word	0x000f4240

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <MX_USART2_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f001 fba8 	bl	8001f44 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f875 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000b8 	.word	0x200000b8
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b2d      	ldr	r3, [pc, #180]	@ (80008dc <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a2c      	ldr	r2, [pc, #176]	@ (80008dc <MX_GPIO_Init+0xd0>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a25      	ldr	r2, [pc, #148]	@ (80008dc <MX_GPIO_Init+0xd0>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a1e      	ldr	r2, [pc, #120]	@ (80008dc <MX_GPIO_Init+0xd0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <MX_GPIO_Init+0xd0>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	4812      	ldr	r0, [pc, #72]	@ (80008e0 <MX_GPIO_Init+0xd4>)
 8000898:	f000 fd52 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <MX_GPIO_Init+0xd8>)
 80008b4:	f000 fbb0 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b8:	2320      	movs	r3, #32
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <MX_GPIO_Init+0xd4>)
 80008d0:	f000 fba2 	bl	8001018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	@ 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020800 	.word	0x40020800

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	@ (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	@ 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000932:	2007      	movs	r0, #7
 8000934:	f000 fa9c 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	@ 0x38
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a4f      	ldr	r2, [pc, #316]	@ (8000aa0 <HAL_UART_MspInit+0x15c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12c      	bne.n	80009c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a4d      	ldr	r2, [pc, #308]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000970:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800097e:	623b      	str	r3, [r7, #32]
 8000980:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
 8000986:	4b47      	ldr	r3, [pc, #284]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a46      	ldr	r2, [pc, #280]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b44      	ldr	r3, [pc, #272]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099e:	2301      	movs	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a2:	2312      	movs	r3, #18
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009ae:	2308      	movs	r3, #8
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	483b      	ldr	r0, [pc, #236]	@ (8000aa8 <HAL_UART_MspInit+0x164>)
 80009ba:	f000 fb2d 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009be:	e06b      	b.n	8000a98 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==UART5)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a39      	ldr	r2, [pc, #228]	@ (8000aac <HAL_UART_MspInit+0x168>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d135      	bne.n	8000a36 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_UART5_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4b35      	ldr	r3, [pc, #212]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a34      	ldr	r2, [pc, #208]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 80009d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009da:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a08:	2312      	movs	r3, #18
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a14:	2308      	movs	r3, #8
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4824      	ldr	r0, [pc, #144]	@ (8000ab0 <HAL_UART_MspInit+0x16c>)
 8000a20:	f000 fafa 	bl	8001018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2035      	movs	r0, #53	@ 0x35
 8000a2a:	f000 fa2c 	bl	8000e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000a2e:	2035      	movs	r0, #53	@ 0x35
 8000a30:	f000 fa45 	bl	8000ebe <HAL_NVIC_EnableIRQ>
}
 8000a34:	e030      	b.n	8000a98 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d12b      	bne.n	8000a98 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	4a16      	ldr	r2, [pc, #88]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_UART_MspInit+0x160>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <HAL_UART_MspInit+0x164>)
 8000a94:	f000 fac0 	bl	8001018 <HAL_GPIO_Init>
}
 8000a98:	bf00      	nop
 8000a9a:	3738      	adds	r7, #56	@ 0x38
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40004c00 	.word	0x40004c00
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40005000 	.word	0x40005000
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <NMI_Handler+0x4>

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <UsageFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0e:	f000 f89b 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <UART5_IRQHandler+0x10>)
 8000b1e:	f001 fb45 	bl	80021ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000070 	.word	0x20000070

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b54:	f7ff ffea 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	@ (8000b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f002 fa43 	bl	8003008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd2f 	bl	80005e4 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b94:	08003090 	.word	0x08003090
  ldr r2, =_sbss
 8000b98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b9c:	20000104 	.word	0x20000104

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	@ (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f94f 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe8c 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f967 	bl	8000eda <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f92f 	bl	8000e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	@ (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000100 	.word	0x20000100

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000100 	.word	0x20000100

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	@ (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	@ (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	@ (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e3c:	d301      	bcc.n	8000e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00f      	b.n	8000e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <SysTick_Config+0x40>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f7ff ff8e 	bl	8000d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <SysTick_Config+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <SysTick_Config+0x40>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff29 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff3e 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff8e 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5d 	bl	8000d70 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff31 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffa2 	bl	8000e2c <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff feb6 	bl	8000c70 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d008      	beq.n	8000f24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2280      	movs	r2, #128	@ 0x80
 8000f16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e052      	b.n	8000fca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0216 	bic.w	r2, r2, #22
 8000f32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d103      	bne.n	8000f54 <HAL_DMA_Abort+0x62>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d007      	beq.n	8000f64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0208 	bic.w	r2, r2, #8
 8000f62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0201 	bic.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f74:	e013      	b.n	8000f9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f76:	f7ff fe7b 	bl	8000c70 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	d90c      	bls.n	8000f9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2220      	movs	r2, #32
 8000f88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e015      	b.n	8000fca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1e4      	bne.n	8000f76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fb0:	223f      	movs	r2, #63	@ 0x3f
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d004      	beq.n	8000ff0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e00c      	b.n	800100a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e165      	b.n	8001300 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	429a      	cmp	r2, r3
 800104e:	f040 8154 	bne.w	80012fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b01      	cmp	r3, #1
 800105c:	d005      	beq.n	800106a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001066:	2b02      	cmp	r3, #2
 8001068:	d130      	bne.n	80010cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	f003 0201 	and.w	r2, r3, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d017      	beq.n	8001108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d123      	bne.n	800115c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	220f      	movs	r2, #15
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	69b9      	ldr	r1, [r7, #24]
 8001158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0203 	and.w	r2, r3, #3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80ae 	beq.w	80012fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ba:	4a58      	ldr	r2, [pc, #352]	@ (800131c <HAL_GPIO_Init+0x304>)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001320 <HAL_GPIO_Init+0x308>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d025      	beq.n	8001232 <HAL_GPIO_Init+0x21a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001324 <HAL_GPIO_Init+0x30c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d01f      	beq.n	800122e <HAL_GPIO_Init+0x216>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001328 <HAL_GPIO_Init+0x310>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d019      	beq.n	800122a <HAL_GPIO_Init+0x212>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4c      	ldr	r2, [pc, #304]	@ (800132c <HAL_GPIO_Init+0x314>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x20e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4b      	ldr	r2, [pc, #300]	@ (8001330 <HAL_GPIO_Init+0x318>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x20a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4a      	ldr	r2, [pc, #296]	@ (8001334 <HAL_GPIO_Init+0x31c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x206>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a49      	ldr	r2, [pc, #292]	@ (8001338 <HAL_GPIO_Init+0x320>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x202>
 8001216:	2306      	movs	r3, #6
 8001218:	e00c      	b.n	8001234 <HAL_GPIO_Init+0x21c>
 800121a:	2307      	movs	r3, #7
 800121c:	e00a      	b.n	8001234 <HAL_GPIO_Init+0x21c>
 800121e:	2305      	movs	r3, #5
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x21c>
 8001222:	2304      	movs	r3, #4
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x21c>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x21c>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x21c>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x21c>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	@ (800131c <HAL_GPIO_Init+0x304>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b3a      	ldr	r3, [pc, #232]	@ (800133c <HAL_GPIO_Init+0x324>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a31      	ldr	r2, [pc, #196]	@ (800133c <HAL_GPIO_Init+0x324>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <HAL_GPIO_Init+0x324>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a26      	ldr	r2, [pc, #152]	@ (800133c <HAL_GPIO_Init+0x324>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b25      	ldr	r3, [pc, #148]	@ (800133c <HAL_GPIO_Init+0x324>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <HAL_GPIO_Init+0x324>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <HAL_GPIO_Init+0x324>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a11      	ldr	r2, [pc, #68]	@ (800133c <HAL_GPIO_Init+0x324>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f ae96 	bls.w	8001034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	@ 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40021400 	.word	0x40021400
 8001338:	40021800 	.word	0x40021800
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0cc      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b68      	ldr	r3, [pc, #416]	@ (800152c <HAL_RCC_ClockConfig+0x1b8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d90c      	bls.n	80013b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b65      	ldr	r3, [pc, #404]	@ (800152c <HAL_RCC_ClockConfig+0x1b8>)
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	4b63      	ldr	r3, [pc, #396]	@ (800152c <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0b8      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c8:	4b59      	ldr	r3, [pc, #356]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a58      	ldr	r2, [pc, #352]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e0:	4b53      	ldr	r3, [pc, #332]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4a52      	ldr	r2, [pc, #328]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ec:	4b50      	ldr	r3, [pc, #320]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	494d      	ldr	r1, [pc, #308]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d044      	beq.n	8001494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b47      	ldr	r3, [pc, #284]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d119      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e07f      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d003      	beq.n	8001432 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142e:	2b03      	cmp	r3, #3
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e06f      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e067      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001452:	4b37      	ldr	r3, [pc, #220]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f023 0203 	bic.w	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4934      	ldr	r1, [pc, #208]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001464:	f7ff fc04 	bl	8000c70 <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	e00a      	b.n	8001482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff fc00 	bl	8000c70 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e04f      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 020c 	and.w	r2, r3, #12
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	429a      	cmp	r2, r3
 8001492:	d1eb      	bne.n	800146c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001494:	4b25      	ldr	r3, [pc, #148]	@ (800152c <HAL_RCC_ClockConfig+0x1b8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d20c      	bcs.n	80014bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e032      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c8:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4916      	ldr	r1, [pc, #88]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d009      	beq.n	80014fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	490e      	ldr	r1, [pc, #56]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014fa:	f000 f855 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	490a      	ldr	r1, [pc, #40]	@ (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	5ccb      	ldrb	r3, [r1, r3]
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_RCC_ClockConfig+0x1c8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fb64 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023c00 	.word	0x40023c00
 8001530:	40023800 	.word	0x40023800
 8001534:	08003068 	.word	0x08003068
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_RCC_GetHCLKFreq+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000000 	.word	0x20000000

08001558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800155c:	f7ff fff0 	bl	8001540 <HAL_RCC_GetHCLKFreq>
 8001560:	4602      	mov	r2, r0
 8001562:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	0a9b      	lsrs	r3, r3, #10
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	4903      	ldr	r1, [pc, #12]	@ (800157c <HAL_RCC_GetPCLK1Freq+0x24>)
 800156e:	5ccb      	ldrb	r3, [r1, r3]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	08003078 	.word	0x08003078

08001580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001584:	f7ff ffdc 	bl	8001540 <HAL_RCC_GetHCLKFreq>
 8001588:	4602      	mov	r2, r0
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	0b5b      	lsrs	r3, r3, #13
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	4903      	ldr	r1, [pc, #12]	@ (80015a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001596:	5ccb      	ldrb	r3, [r1, r3]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	08003078 	.word	0x08003078

080015a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ac:	b0ae      	sub	sp, #184	@ 0xb8
 80015ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ce:	4bcb      	ldr	r3, [pc, #812]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	f200 8206 	bhi.w	80019e8 <HAL_RCC_GetSysClockFreq+0x440>
 80015dc:	a201      	add	r2, pc, #4	@ (adr r2, 80015e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e2:	bf00      	nop
 80015e4:	08001619 	.word	0x08001619
 80015e8:	080019e9 	.word	0x080019e9
 80015ec:	080019e9 	.word	0x080019e9
 80015f0:	080019e9 	.word	0x080019e9
 80015f4:	08001621 	.word	0x08001621
 80015f8:	080019e9 	.word	0x080019e9
 80015fc:	080019e9 	.word	0x080019e9
 8001600:	080019e9 	.word	0x080019e9
 8001604:	08001629 	.word	0x08001629
 8001608:	080019e9 	.word	0x080019e9
 800160c:	080019e9 	.word	0x080019e9
 8001610:	080019e9 	.word	0x080019e9
 8001614:	08001819 	.word	0x08001819
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001618:	4bb9      	ldr	r3, [pc, #740]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x358>)
 800161a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800161e:	e1e7      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001620:	4bb8      	ldr	r3, [pc, #736]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001626:	e1e3      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001628:	4bb4      	ldr	r3, [pc, #720]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001634:	4bb1      	ldr	r3, [pc, #708]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d071      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001640:	4bae      	ldr	r3, [pc, #696]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	2200      	movs	r2, #0
 8001648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800164c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001666:	4622      	mov	r2, r4
 8001668:	462b      	mov	r3, r5
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	0159      	lsls	r1, r3, #5
 8001674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001678:	0150      	lsls	r0, r2, #5
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4621      	mov	r1, r4
 8001680:	1a51      	subs	r1, r2, r1
 8001682:	6439      	str	r1, [r7, #64]	@ 0x40
 8001684:	4629      	mov	r1, r5
 8001686:	eb63 0301 	sbc.w	r3, r3, r1
 800168a:	647b      	str	r3, [r7, #68]	@ 0x44
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001698:	4649      	mov	r1, r9
 800169a:	018b      	lsls	r3, r1, #6
 800169c:	4641      	mov	r1, r8
 800169e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016a2:	4641      	mov	r1, r8
 80016a4:	018a      	lsls	r2, r1, #6
 80016a6:	4641      	mov	r1, r8
 80016a8:	1a51      	subs	r1, r2, r1
 80016aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80016ac:	4649      	mov	r1, r9
 80016ae:	eb63 0301 	sbc.w	r3, r3, r1
 80016b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80016c0:	4649      	mov	r1, r9
 80016c2:	00cb      	lsls	r3, r1, #3
 80016c4:	4641      	mov	r1, r8
 80016c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016ca:	4641      	mov	r1, r8
 80016cc:	00ca      	lsls	r2, r1, #3
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	4622      	mov	r2, r4
 80016d6:	189b      	adds	r3, r3, r2
 80016d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80016da:	462b      	mov	r3, r5
 80016dc:	460a      	mov	r2, r1
 80016de:	eb42 0303 	adc.w	r3, r2, r3
 80016e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016f0:	4629      	mov	r1, r5
 80016f2:	024b      	lsls	r3, r1, #9
 80016f4:	4621      	mov	r1, r4
 80016f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016fa:	4621      	mov	r1, r4
 80016fc:	024a      	lsls	r2, r1, #9
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001706:	2200      	movs	r2, #0
 8001708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800170c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001710:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001714:	f7fe fd76 	bl	8000204 <__aeabi_uldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4613      	mov	r3, r2
 800171e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001722:	e067      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001724:	4b75      	ldr	r3, [pc, #468]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	2200      	movs	r2, #0
 800172c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001730:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001734:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800173e:	2300      	movs	r3, #0
 8001740:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001742:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001746:	4622      	mov	r2, r4
 8001748:	462b      	mov	r3, r5
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	0159      	lsls	r1, r3, #5
 8001754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001758:	0150      	lsls	r0, r2, #5
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4621      	mov	r1, r4
 8001760:	1a51      	subs	r1, r2, r1
 8001762:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001764:	4629      	mov	r1, r5
 8001766:	eb63 0301 	sbc.w	r3, r3, r1
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001778:	4649      	mov	r1, r9
 800177a:	018b      	lsls	r3, r1, #6
 800177c:	4641      	mov	r1, r8
 800177e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001782:	4641      	mov	r1, r8
 8001784:	018a      	lsls	r2, r1, #6
 8001786:	4641      	mov	r1, r8
 8001788:	ebb2 0a01 	subs.w	sl, r2, r1
 800178c:	4649      	mov	r1, r9
 800178e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800179e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017a6:	4692      	mov	sl, r2
 80017a8:	469b      	mov	fp, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	eb1a 0303 	adds.w	r3, sl, r3
 80017b0:	623b      	str	r3, [r7, #32]
 80017b2:	462b      	mov	r3, r5
 80017b4:	eb4b 0303 	adc.w	r3, fp, r3
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017c6:	4629      	mov	r1, r5
 80017c8:	028b      	lsls	r3, r1, #10
 80017ca:	4621      	mov	r1, r4
 80017cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d0:	4621      	mov	r1, r4
 80017d2:	028a      	lsls	r2, r1, #10
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017dc:	2200      	movs	r2, #0
 80017de:	673b      	str	r3, [r7, #112]	@ 0x70
 80017e0:	677a      	str	r2, [r7, #116]	@ 0x74
 80017e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017e6:	f7fe fd0d 	bl	8000204 <__aeabi_uldivmod>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4613      	mov	r3, r2
 80017f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017f4:	4b41      	ldr	r3, [pc, #260]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	0c1b      	lsrs	r3, r3, #16
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	3301      	adds	r3, #1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800180a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001816:	e0eb      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001818:	4b38      	ldr	r3, [pc, #224]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001824:	4b35      	ldr	r3, [pc, #212]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d06b      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001830:	4b32      	ldr	r3, [pc, #200]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	2200      	movs	r2, #0
 8001838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800183a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800183c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800183e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001842:	663b      	str	r3, [r7, #96]	@ 0x60
 8001844:	2300      	movs	r3, #0
 8001846:	667b      	str	r3, [r7, #100]	@ 0x64
 8001848:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800184c:	4622      	mov	r2, r4
 800184e:	462b      	mov	r3, r5
 8001850:	f04f 0000 	mov.w	r0, #0
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	0159      	lsls	r1, r3, #5
 800185a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800185e:	0150      	lsls	r0, r2, #5
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4621      	mov	r1, r4
 8001866:	1a51      	subs	r1, r2, r1
 8001868:	61b9      	str	r1, [r7, #24]
 800186a:	4629      	mov	r1, r5
 800186c:	eb63 0301 	sbc.w	r3, r3, r1
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800187e:	4659      	mov	r1, fp
 8001880:	018b      	lsls	r3, r1, #6
 8001882:	4651      	mov	r1, sl
 8001884:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001888:	4651      	mov	r1, sl
 800188a:	018a      	lsls	r2, r1, #6
 800188c:	4651      	mov	r1, sl
 800188e:	ebb2 0801 	subs.w	r8, r2, r1
 8001892:	4659      	mov	r1, fp
 8001894:	eb63 0901 	sbc.w	r9, r3, r1
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ac:	4690      	mov	r8, r2
 80018ae:	4699      	mov	r9, r3
 80018b0:	4623      	mov	r3, r4
 80018b2:	eb18 0303 	adds.w	r3, r8, r3
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	462b      	mov	r3, r5
 80018ba:	eb49 0303 	adc.w	r3, r9, r3
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018cc:	4629      	mov	r1, r5
 80018ce:	024b      	lsls	r3, r1, #9
 80018d0:	4621      	mov	r1, r4
 80018d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018d6:	4621      	mov	r1, r4
 80018d8:	024a      	lsls	r2, r1, #9
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018e2:	2200      	movs	r2, #0
 80018e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018e6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018ec:	f7fe fc8a 	bl	8000204 <__aeabi_uldivmod>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4613      	mov	r3, r2
 80018f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018fa:	e065      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x420>
 80018fc:	40023800 	.word	0x40023800
 8001900:	00f42400 	.word	0x00f42400
 8001904:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001908:	4b3d      	ldr	r3, [pc, #244]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x458>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	2200      	movs	r2, #0
 8001910:	4618      	mov	r0, r3
 8001912:	4611      	mov	r1, r2
 8001914:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001918:	653b      	str	r3, [r7, #80]	@ 0x50
 800191a:	2300      	movs	r3, #0
 800191c:	657b      	str	r3, [r7, #84]	@ 0x54
 800191e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001922:	4642      	mov	r2, r8
 8001924:	464b      	mov	r3, r9
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	0159      	lsls	r1, r3, #5
 8001930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001934:	0150      	lsls	r0, r2, #5
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4641      	mov	r1, r8
 800193c:	1a51      	subs	r1, r2, r1
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	4649      	mov	r1, r9
 8001942:	eb63 0301 	sbc.w	r3, r3, r1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001954:	4659      	mov	r1, fp
 8001956:	018b      	lsls	r3, r1, #6
 8001958:	4651      	mov	r1, sl
 800195a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800195e:	4651      	mov	r1, sl
 8001960:	018a      	lsls	r2, r1, #6
 8001962:	4651      	mov	r1, sl
 8001964:	1a54      	subs	r4, r2, r1
 8001966:	4659      	mov	r1, fp
 8001968:	eb63 0501 	sbc.w	r5, r3, r1
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	00eb      	lsls	r3, r5, #3
 8001976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800197a:	00e2      	lsls	r2, r4, #3
 800197c:	4614      	mov	r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	4643      	mov	r3, r8
 8001982:	18e3      	adds	r3, r4, r3
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	464b      	mov	r3, r9
 8001988:	eb45 0303 	adc.w	r3, r5, r3
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800199a:	4629      	mov	r1, r5
 800199c:	028b      	lsls	r3, r1, #10
 800199e:	4621      	mov	r1, r4
 80019a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a4:	4621      	mov	r1, r4
 80019a6:	028a      	lsls	r2, r1, #10
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019b0:	2200      	movs	r2, #0
 80019b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019b4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019ba:	f7fe fc23 	bl	8000204 <__aeabi_uldivmod>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4613      	mov	r3, r2
 80019c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x458>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	0f1b      	lsrs	r3, r3, #28
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80019d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019e6:	e003      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	37b8      	adds	r7, #184	@ 0xb8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	00f42400 	.word	0x00f42400

08001a08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e28d      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8083 	beq.w	8001b2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a28:	4b94      	ldr	r3, [pc, #592]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d019      	beq.n	8001a68 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a34:	4b91      	ldr	r3, [pc, #580]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a40:	4b8e      	ldr	r3, [pc, #568]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a4c:	d00c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d112      	bne.n	8001a80 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5a:	4b88      	ldr	r3, [pc, #544]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4b84      	ldr	r3, [pc, #528]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d05b      	beq.n	8001b2c <HAL_RCC_OscConfig+0x124>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d157      	bne.n	8001b2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e25a      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a88:	d106      	bne.n	8001a98 <HAL_RCC_OscConfig+0x90>
 8001a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7b      	ldr	r2, [pc, #492]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xcc>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0xb4>
 8001aa2:	4b76      	ldr	r3, [pc, #472]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b73      	ldr	r3, [pc, #460]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a72      	ldr	r2, [pc, #456]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xcc>
 8001abc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6e      	ldr	r2, [pc, #440]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a6b      	ldr	r2, [pc, #428]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f8c8 	bl	8000c70 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f8c4 	bl	8000c70 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	@ 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e21f      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b61      	ldr	r3, [pc, #388]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xdc>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f8b4 	bl	8000c70 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff f8b0 	bl	8000c70 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	@ 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e20b      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b57      	ldr	r3, [pc, #348]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x104>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d06f      	beq.n	8001c1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b3a:	4b50      	ldr	r3, [pc, #320]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d017      	beq.n	8001b76 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b46:	4b4d      	ldr	r3, [pc, #308]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d105      	bne.n	8001b5e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b52:	4b4a      	ldr	r3, [pc, #296]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b47      	ldr	r3, [pc, #284]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6a:	4b44      	ldr	r3, [pc, #272]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b41      	ldr	r3, [pc, #260]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x186>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1d3      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4937      	ldr	r1, [pc, #220]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b34      	ldr	r3, [pc, #208]	@ (8001c80 <HAL_RCC_OscConfig+0x278>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f85d 	bl	8000c70 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff f859 	bl	8000c70 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1b4      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4925      	ldr	r1, [pc, #148]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_RCC_OscConfig+0x278>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f83c 	bl	8000c70 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f838 	bl	8000c70 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e193      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d036      	beq.n	8001c94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d016      	beq.n	8001c5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff f81c 	bl	8000c70 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff f818 	bl	8000c70 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e173      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x234>
 8001c5a:	e01b      	b.n	8001c94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c62:	f7ff f805 	bl	8000c70 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	e00e      	b.n	8001c88 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f801 	bl	8000c70 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d907      	bls.n	8001c88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e15c      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	42470000 	.word	0x42470000
 8001c84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	4b8a      	ldr	r3, [pc, #552]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ea      	bne.n	8001c6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8097 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b83      	ldr	r3, [pc, #524]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a7e      	ldr	r2, [pc, #504]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b79      	ldr	r3, [pc, #484]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d118      	bne.n	8001d10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4b76      	ldr	r3, [pc, #472]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a75      	ldr	r2, [pc, #468]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7fe ffc1 	bl	8000c70 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7fe ffbd 	bl	8000c70 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e118      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x31e>
 8001d18:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1c:	4a65      	ldr	r2, [pc, #404]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x358>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x340>
 8001d2e:	4b61      	ldr	r3, [pc, #388]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d32:	4a60      	ldr	r2, [pc, #384]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3a:	4b5e      	ldr	r3, [pc, #376]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3e:	4a5d      	ldr	r2, [pc, #372]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0x358>
 8001d48:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4c:	4a59      	ldr	r2, [pc, #356]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d54:	4b57      	ldr	r3, [pc, #348]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d58:	4a56      	ldr	r2, [pc, #344]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d5a:	f023 0304 	bic.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7fe ff82 	bl	8000c70 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7fe ff7e 	bl	8000c70 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0d7      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0ee      	beq.n	8001d70 <HAL_RCC_OscConfig+0x368>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7fe ff6c 	bl	8000c70 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7fe ff68 	bl	8000c70 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0c1      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	4b40      	ldr	r3, [pc, #256]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80ad 	beq.w	8001f34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dda:	4b36      	ldr	r3, [pc, #216]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d060      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d145      	bne.n	8001e7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b33      	ldr	r3, [pc, #204]	@ (8001ebc <HAL_RCC_OscConfig+0x4b4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe ff3c 	bl	8000c70 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe ff38 	bl	8000c70 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e093      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	071b      	lsls	r3, r3, #28
 8001e46:	491b      	ldr	r1, [pc, #108]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <HAL_RCC_OscConfig+0x4b4>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7fe ff0d 	bl	8000c70 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe ff09 	bl	8000c70 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e064      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x452>
 8001e78:	e05c      	b.n	8001f34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <HAL_RCC_OscConfig+0x4b4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe fef6 	bl	8000c70 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe fef2 	bl	8000c70 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e04d      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x480>
 8001ea6:	e045      	b.n	8001f34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e040      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <HAL_RCC_OscConfig+0x538>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d030      	beq.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d129      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d122      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d119      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d10f      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e042      	b.n	8001fdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fcea 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2224      	movs	r2, #36	@ 0x24
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fdc1 	bl	8002b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e04a      	b.n	800208c <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fc9a 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	@ 0x24
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fd71 	bl	8002b10 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800203c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800204c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0208 	orr.w	r2, r2, #8
 800205c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800206c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	@ 0x28
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d175      	bne.n	80021a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_UART_Transmit+0x2c>
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e06e      	b.n	80021a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2221      	movs	r2, #33	@ 0x21
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020d2:	f7fe fdcd 	bl	8000c70 <HAL_GetTick>
 80020d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	88fa      	ldrh	r2, [r7, #6]
 80020dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	88fa      	ldrh	r2, [r7, #6]
 80020e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ec:	d108      	bne.n	8002100 <HAL_UART_Transmit+0x6c>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d104      	bne.n	8002100 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	e003      	b.n	8002108 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002108:	e02e      	b.n	8002168 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	2180      	movs	r1, #128	@ 0x80
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fb05 	bl	8002724 <UART_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e03a      	b.n	80021a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002140:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	3302      	adds	r3, #2
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	e007      	b.n	800215a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	3301      	adds	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1cb      	bne.n	800210a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2200      	movs	r2, #0
 800217a:	2140      	movs	r1, #64	@ 0x40
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fad1 	bl	8002724 <UART_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e006      	b.n	80021a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e000      	b.n	80021a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
  }
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0ba      	sub	sp, #232	@ 0xe8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80021ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_UART_IRQHandler+0x66>
 80021fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fbc2 	bl	8002994 <UART_Receive_IT>
      return;
 8002210:	e25b      	b.n	80026ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80de 	beq.w	80023d8 <HAL_UART_IRQHandler+0x22c>
 800221c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800222c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80d1 	beq.w	80023d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_UART_IRQHandler+0xae>
 8002242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800225a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_UART_IRQHandler+0xd2>
 8002266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800227e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_UART_IRQHandler+0xf6>
 800228a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f043 0204 	orr.w	r2, r3, #4
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d011      	beq.n	80022d2 <HAL_UART_IRQHandler+0x126>
 80022ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	f043 0208 	orr.w	r2, r3, #8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 81f2 	beq.w	80026c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_UART_IRQHandler+0x14e>
 80022e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fb4d 	bl	8002994 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002304:	2b40      	cmp	r3, #64	@ 0x40
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d103      	bne.n	8002326 <HAL_UART_IRQHandler+0x17a>
 800231e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d04f      	beq.n	80023c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fa55 	bl	80027d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002336:	2b40      	cmp	r3, #64	@ 0x40
 8002338:	d141      	bne.n	80023be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3314      	adds	r3, #20
 8002340:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002344:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002348:	e853 3f00 	ldrex	r3, [r3]
 800234c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002350:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3314      	adds	r3, #20
 8002362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002366:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800236a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002376:	e841 2300 	strex	r3, r2, [r1]
 800237a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800237e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1d9      	bne.n	800233a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d013      	beq.n	80023b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002392:	4a7e      	ldr	r2, [pc, #504]	@ (800258c <HAL_UART_IRQHandler+0x3e0>)
 8002394:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fe19 	bl	8000fd2 <HAL_DMA_Abort_IT>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d016      	beq.n	80023d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023b0:	4610      	mov	r0, r2
 80023b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b4:	e00e      	b.n	80023d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f99e 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023bc:	e00a      	b.n	80023d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f99a 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c4:	e006      	b.n	80023d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f996 	bl	80026f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80023d2:	e175      	b.n	80026c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d4:	bf00      	nop
    return;
 80023d6:	e173      	b.n	80026c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	2b01      	cmp	r3, #1
 80023de:	f040 814f 	bne.w	8002680 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8148 	beq.w	8002680 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8141 	beq.w	8002680 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241e:	2b40      	cmp	r3, #64	@ 0x40
 8002420:	f040 80b6 	bne.w	8002590 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8145 	beq.w	80026c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800243e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002442:	429a      	cmp	r2, r3
 8002444:	f080 813e 	bcs.w	80026c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800244e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800245a:	f000 8088 	beq.w	800256e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002468:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800246c:	e853 3f00 	ldrex	r3, [r3]
 8002470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002474:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800247c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800248a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800248e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002492:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002496:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800249a:	e841 2300 	strex	r3, r2, [r1]
 800249e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80024a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1d9      	bne.n	800245e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3314      	adds	r3, #20
 80024b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024b4:	e853 3f00 	ldrex	r3, [r3]
 80024b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80024ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3314      	adds	r3, #20
 80024ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80024d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024da:	e841 2300 	strex	r3, r2, [r1]
 80024de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80024e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1e1      	bne.n	80024aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3314      	adds	r3, #20
 80024ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024f0:	e853 3f00 	ldrex	r3, [r3]
 80024f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80024f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3314      	adds	r3, #20
 8002506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800250a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800250c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002510:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002512:	e841 2300 	strex	r3, r2, [r1]
 8002516:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1e3      	bne.n	80024e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002536:	e853 3f00 	ldrex	r3, [r3]
 800253a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800253c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800253e:	f023 0310 	bic.w	r3, r3, #16
 8002542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002550:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002552:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002554:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002556:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002558:	e841 2300 	strex	r3, r2, [r1]
 800255c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800255e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1e3      	bne.n	800252c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fcc2 	bl	8000ef2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800257c:	b29b      	uxth	r3, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	b29b      	uxth	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f8c1 	bl	800270c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800258a:	e09b      	b.n	80026c4 <HAL_UART_IRQHandler+0x518>
 800258c:	0800289d 	.word	0x0800289d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002598:	b29b      	uxth	r3, r3
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 808e 	beq.w	80026c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8089 	beq.w	80026c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	e853 3f00 	ldrex	r3, [r3]
 80025c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80025c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025da:	647a      	str	r2, [r7, #68]	@ 0x44
 80025dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025e2:	e841 2300 	strex	r3, r2, [r1]
 80025e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e3      	bne.n	80025b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3314      	adds	r3, #20
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	e853 3f00 	ldrex	r3, [r3]
 80025fc:	623b      	str	r3, [r7, #32]
   return(result);
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3314      	adds	r3, #20
 800260e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002612:	633a      	str	r2, [r7, #48]	@ 0x30
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800261a:	e841 2300 	strex	r3, r2, [r1]
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e3      	bne.n	80025ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	e853 3f00 	ldrex	r3, [r3]
 8002642:	60fb      	str	r3, [r7, #12]
   return(result);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0310 	bic.w	r3, r3, #16
 800264a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	330c      	adds	r3, #12
 8002654:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002658:	61fa      	str	r2, [r7, #28]
 800265a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265c:	69b9      	ldr	r1, [r7, #24]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	e841 2300 	strex	r3, r2, [r1]
 8002664:	617b      	str	r3, [r7, #20]
   return(result);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e3      	bne.n	8002634 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002676:	4619      	mov	r1, r3
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f847 	bl	800270c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800267e:	e023      	b.n	80026c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HAL_UART_IRQHandler+0x4f4>
 800268c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f913 	bl	80028c4 <UART_Transmit_IT>
    return;
 800269e:	e014      	b.n	80026ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <HAL_UART_IRQHandler+0x51e>
 80026ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f953 	bl	8002964 <UART_EndTransmit_IT>
    return;
 80026be:	e004      	b.n	80026ca <HAL_UART_IRQHandler+0x51e>
    return;
 80026c0:	bf00      	nop
 80026c2:	e002      	b.n	80026ca <HAL_UART_IRQHandler+0x51e>
      return;
 80026c4:	bf00      	nop
 80026c6:	e000      	b.n	80026ca <HAL_UART_IRQHandler+0x51e>
      return;
 80026c8:	bf00      	nop
  }
}
 80026ca:	37e8      	adds	r7, #232	@ 0xe8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002734:	e03b      	b.n	80027ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d037      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273e:	f7fe fa97 	bl	8000c70 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <UART_WaitOnFlagUntilTimeout+0x30>
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e03a      	b.n	80027ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d023      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b80      	cmp	r3, #128	@ 0x80
 800276a:	d020      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b40      	cmp	r3, #64	@ 0x40
 8002770:	d01d      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d116      	bne.n	80027ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f81d 	bl	80027d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2208      	movs	r2, #8
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d0b4      	beq.n	8002736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b095      	sub	sp, #84	@ 0x54
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e8:	e853 3f00 	ldrex	r3, [r3]
 80027ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8002800:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002802:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002804:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002806:	e841 2300 	strex	r3, r2, [r1]
 800280a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800280c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e5      	bne.n	80027de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3314      	adds	r3, #20
 8002818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	61fb      	str	r3, [r7, #28]
   return(result);
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3314      	adds	r3, #20
 8002830:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800283a:	e841 2300 	strex	r3, r2, [r1]
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e5      	bne.n	8002812 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	2b01      	cmp	r3, #1
 800284c:	d119      	bne.n	8002882 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	60bb      	str	r3, [r7, #8]
   return(result);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f023 0310 	bic.w	r3, r3, #16
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800286e:	61ba      	str	r2, [r7, #24]
 8002870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6979      	ldr	r1, [r7, #20]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	613b      	str	r3, [r7, #16]
   return(result);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e5      	bne.n	800284e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002890:	bf00      	nop
 8002892:	3754      	adds	r7, #84	@ 0x54
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7ff ff1e 	bl	80026f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b21      	cmp	r3, #33	@ 0x21
 80028d6:	d13e      	bne.n	8002956 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028e0:	d114      	bne.n	800290c <UART_Transmit_IT+0x48>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d110      	bne.n	800290c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	1c9a      	adds	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	621a      	str	r2, [r3, #32]
 800290a:	e008      	b.n	800291e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	1c59      	adds	r1, r3, #1
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6211      	str	r1, [r2, #32]
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29b      	uxth	r3, r3
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4619      	mov	r1, r3
 800292c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800297a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fea3 	bl	80026d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	@ 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b22      	cmp	r3, #34	@ 0x22
 80029a6:	f040 80ae 	bne.w	8002b06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b2:	d117      	bne.n	80029e4 <UART_Receive_IT+0x50>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d113      	bne.n	80029e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	1c9a      	adds	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80029e2:	e026      	b.n	8002a32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f6:	d007      	beq.n	8002a08 <UART_Receive_IT+0x74>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <UART_Receive_IT+0x82>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e008      	b.n	8002a28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d15d      	bne.n	8002b02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0220 	bic.w	r2, r2, #32
 8002a54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d135      	bne.n	8002af8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f023 0310 	bic.w	r3, r3, #16
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab2:	623a      	str	r2, [r7, #32]
 8002ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	69f9      	ldr	r1, [r7, #28]
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e5      	bne.n	8002a92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d10a      	bne.n	8002aea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff fe0b 	bl	800270c <HAL_UARTEx_RxEventCallback>
 8002af6:	e002      	b.n	8002afe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fdf3 	bl	80026e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e002      	b.n	8002b08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3730      	adds	r7, #48	@ 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b0c0      	sub	sp, #256	@ 0x100
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	68d9      	ldr	r1, [r3, #12]
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	ea40 0301 	orr.w	r3, r0, r1
 8002b38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b68:	f021 010c 	bic.w	r1, r1, #12
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b76:	430b      	orrs	r3, r1
 8002b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8a:	6999      	ldr	r1, [r3, #24]
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	ea40 0301 	orr.w	r3, r0, r1
 8002b96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b8f      	ldr	r3, [pc, #572]	@ (8002ddc <UART_SetConfig+0x2cc>)
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d005      	beq.n	8002bb0 <UART_SetConfig+0xa0>
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b8d      	ldr	r3, [pc, #564]	@ (8002de0 <UART_SetConfig+0x2d0>)
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d104      	bne.n	8002bba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bb0:	f7fe fce6 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 8002bb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002bb8:	e003      	b.n	8002bc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bba:	f7fe fccd 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 8002bbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bcc:	f040 810c 	bne.w	8002de8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	1891      	adds	r1, r2, r2
 8002be8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bea:	415b      	adcs	r3, r3
 8002bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	eb12 0801 	adds.w	r8, r2, r1
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	eb43 0901 	adc.w	r9, r3, r1
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c12:	4690      	mov	r8, r2
 8002c14:	4699      	mov	r9, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	eb18 0303 	adds.w	r3, r8, r3
 8002c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c20:	462b      	mov	r3, r5
 8002c22:	eb49 0303 	adc.w	r3, r9, r3
 8002c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c3e:	460b      	mov	r3, r1
 8002c40:	18db      	adds	r3, r3, r3
 8002c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c44:	4613      	mov	r3, r2
 8002c46:	eb42 0303 	adc.w	r3, r2, r3
 8002c4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c54:	f7fd fad6 	bl	8000204 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4b61      	ldr	r3, [pc, #388]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	011c      	lsls	r4, r3, #4
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	1891      	adds	r1, r2, r2
 8002c7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c80:	415b      	adcs	r3, r3
 8002c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c88:	4641      	mov	r1, r8
 8002c8a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c8e:	4649      	mov	r1, r9
 8002c90:	eb43 0b01 	adc.w	fp, r3, r1
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca8:	4692      	mov	sl, r2
 8002caa:	469b      	mov	fp, r3
 8002cac:	4643      	mov	r3, r8
 8002cae:	eb1a 0303 	adds.w	r3, sl, r3
 8002cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8002cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ccc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	18db      	adds	r3, r3, r3
 8002cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cda:	4613      	mov	r3, r2
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cea:	f7fd fa8b 	bl	8000204 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2264      	movs	r2, #100	@ 0x64
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	1acb      	subs	r3, r1, r3
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d0a:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d18:	441c      	add	r4, r3
 8002d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	1891      	adds	r1, r2, r2
 8002d32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d34:	415b      	adcs	r3, r3
 8002d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	1851      	adds	r1, r2, r1
 8002d40:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d42:	4649      	mov	r1, r9
 8002d44:	414b      	adcs	r3, r1
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d54:	4659      	mov	r1, fp
 8002d56:	00cb      	lsls	r3, r1, #3
 8002d58:	4651      	mov	r1, sl
 8002d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d5e:	4651      	mov	r1, sl
 8002d60:	00ca      	lsls	r2, r1, #3
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	4642      	mov	r2, r8
 8002d6a:	189b      	adds	r3, r3, r2
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d70:	464b      	mov	r3, r9
 8002d72:	460a      	mov	r2, r1
 8002d74:	eb42 0303 	adc.w	r3, r2, r3
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d90:	460b      	mov	r3, r1
 8002d92:	18db      	adds	r3, r3, r3
 8002d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d96:	4613      	mov	r3, r2
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002da2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002da6:	f7fd fa2d 	bl	8000204 <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002db0:	fba3 1302 	umull	r1, r3, r3, r2
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	2164      	movs	r1, #100	@ 0x64
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	3332      	adds	r3, #50	@ 0x32
 8002dc2:	4a08      	ldr	r2, [pc, #32]	@ (8002de4 <UART_SetConfig+0x2d4>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	f003 0207 	and.w	r2, r3, #7
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4422      	add	r2, r4
 8002dd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dd8:	e106      	b.n	8002fe8 <UART_SetConfig+0x4d8>
 8002dda:	bf00      	nop
 8002ddc:	40011000 	.word	0x40011000
 8002de0:	40011400 	.word	0x40011400
 8002de4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002df2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002df6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	464b      	mov	r3, r9
 8002dfe:	1891      	adds	r1, r2, r2
 8002e00:	6239      	str	r1, [r7, #32]
 8002e02:	415b      	adcs	r3, r3
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	1854      	adds	r4, r2, r1
 8002e0e:	4649      	mov	r1, r9
 8002e10:	eb43 0501 	adc.w	r5, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	00eb      	lsls	r3, r5, #3
 8002e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e22:	00e2      	lsls	r2, r4, #3
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	18e3      	adds	r3, r4, r3
 8002e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e30:	464b      	mov	r3, r9
 8002e32:	eb45 0303 	adc.w	r3, r5, r3
 8002e36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e56:	4629      	mov	r1, r5
 8002e58:	008b      	lsls	r3, r1, #2
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e60:	4621      	mov	r1, r4
 8002e62:	008a      	lsls	r2, r1, #2
 8002e64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e68:	f7fd f9cc 	bl	8000204 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4b60      	ldr	r3, [pc, #384]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002e72:	fba3 2302 	umull	r2, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	011c      	lsls	r4, r3, #4
 8002e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	1891      	adds	r1, r2, r2
 8002e92:	61b9      	str	r1, [r7, #24]
 8002e94:	415b      	adcs	r3, r3
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	1851      	adds	r1, r2, r1
 8002ea0:	6139      	str	r1, [r7, #16]
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	414b      	adcs	r3, r1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	00cb      	lsls	r3, r1, #3
 8002eb8:	4651      	mov	r1, sl
 8002eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	00ca      	lsls	r2, r1, #3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4642      	mov	r2, r8
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	eb42 0303 	adc.w	r3, r2, r3
 8002ed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ee6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	008b      	lsls	r3, r1, #2
 8002ef8:	4641      	mov	r1, r8
 8002efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002efe:	4641      	mov	r1, r8
 8002f00:	008a      	lsls	r2, r1, #2
 8002f02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f06:	f7fd f97d 	bl	8000204 <__aeabi_uldivmod>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4b38      	ldr	r3, [pc, #224]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002f12:	fba3 2301 	umull	r2, r3, r3, r1
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2264      	movs	r2, #100	@ 0x64
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	1acb      	subs	r3, r1, r3
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	3332      	adds	r3, #50	@ 0x32
 8002f24:	4a33      	ldr	r2, [pc, #204]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f30:	441c      	add	r4, r3
 8002f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f36:	2200      	movs	r2, #0
 8002f38:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f40:	4642      	mov	r2, r8
 8002f42:	464b      	mov	r3, r9
 8002f44:	1891      	adds	r1, r2, r2
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	415b      	adcs	r3, r3
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f50:	4641      	mov	r1, r8
 8002f52:	1851      	adds	r1, r2, r1
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	4649      	mov	r1, r9
 8002f58:	414b      	adcs	r3, r1
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f68:	4659      	mov	r1, fp
 8002f6a:	00cb      	lsls	r3, r1, #3
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f72:	4651      	mov	r1, sl
 8002f74:	00ca      	lsls	r2, r1, #3
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f82:	464b      	mov	r3, r9
 8002f84:	460a      	mov	r2, r1
 8002f86:	eb42 0303 	adc.w	r3, r2, r3
 8002f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f96:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	008b      	lsls	r3, r1, #2
 8002fa8:	4641      	mov	r1, r8
 8002faa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fae:	4641      	mov	r1, r8
 8002fb0:	008a      	lsls	r2, r1, #2
 8002fb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002fb6:	f7fd f925 	bl	8000204 <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	2164      	movs	r1, #100	@ 0x64
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	3332      	adds	r3, #50	@ 0x32
 8002fd2:	4a08      	ldr	r2, [pc, #32]	@ (8002ff4 <UART_SetConfig+0x4e4>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4422      	add	r2, r4
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ff4:	51eb851f 	.word	0x51eb851f

08002ff8 <memset>:
 8002ff8:	4402      	add	r2, r0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <__libc_init_array>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	4d0d      	ldr	r5, [pc, #52]	@ (8003040 <__libc_init_array+0x38>)
 800300c:	4c0d      	ldr	r4, [pc, #52]	@ (8003044 <__libc_init_array+0x3c>)
 800300e:	1b64      	subs	r4, r4, r5
 8003010:	10a4      	asrs	r4, r4, #2
 8003012:	2600      	movs	r6, #0
 8003014:	42a6      	cmp	r6, r4
 8003016:	d109      	bne.n	800302c <__libc_init_array+0x24>
 8003018:	4d0b      	ldr	r5, [pc, #44]	@ (8003048 <__libc_init_array+0x40>)
 800301a:	4c0c      	ldr	r4, [pc, #48]	@ (800304c <__libc_init_array+0x44>)
 800301c:	f000 f818 	bl	8003050 <_init>
 8003020:	1b64      	subs	r4, r4, r5
 8003022:	10a4      	asrs	r4, r4, #2
 8003024:	2600      	movs	r6, #0
 8003026:	42a6      	cmp	r6, r4
 8003028:	d105      	bne.n	8003036 <__libc_init_array+0x2e>
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003030:	4798      	blx	r3
 8003032:	3601      	adds	r6, #1
 8003034:	e7ee      	b.n	8003014 <__libc_init_array+0xc>
 8003036:	f855 3b04 	ldr.w	r3, [r5], #4
 800303a:	4798      	blx	r3
 800303c:	3601      	adds	r6, #1
 800303e:	e7f2      	b.n	8003026 <__libc_init_array+0x1e>
 8003040:	08003088 	.word	0x08003088
 8003044:	08003088 	.word	0x08003088
 8003048:	08003088 	.word	0x08003088
 800304c:	0800308c 	.word	0x0800308c

08003050 <_init>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr

0800305c <_fini>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr
