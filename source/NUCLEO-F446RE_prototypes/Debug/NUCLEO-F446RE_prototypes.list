
NUCLEO-F446RE_prototypes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000577c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08005940  08005940  00006940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e10  08005e10  00007020  2**0
                  CONTENTS
  4 .ARM          00000008  08005e10  08005e10  00006e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e18  08005e18  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e18  08005e18  00006e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08005e20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000020  08005e40  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08005e40  0000731c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d66a  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a6  00000000  00000000  000146ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00016b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093c  00000000  00000000  00017778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023191  00000000  00000000  000180b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f9a  00000000  00000000  0003b245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb99d  00000000  00000000  0004e1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119b7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  00119bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005928 	.word	0x08005928

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08005928 	.word	0x08005928

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b37      	ldr	r3, [pc, #220]	@ (80005ec <MX_GPIO_Init+0xf8>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a36      	ldr	r2, [pc, #216]	@ (80005ec <MX_GPIO_Init+0xf8>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b34      	ldr	r3, [pc, #208]	@ (80005ec <MX_GPIO_Init+0xf8>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b30      	ldr	r3, [pc, #192]	@ (80005ec <MX_GPIO_Init+0xf8>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a2f      	ldr	r2, [pc, #188]	@ (80005ec <MX_GPIO_Init+0xf8>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <MX_GPIO_Init+0xf8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b29      	ldr	r3, [pc, #164]	@ (80005ec <MX_GPIO_Init+0xf8>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a28      	ldr	r2, [pc, #160]	@ (80005ec <MX_GPIO_Init+0xf8>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b26      	ldr	r3, [pc, #152]	@ (80005ec <MX_GPIO_Init+0xf8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b22      	ldr	r3, [pc, #136]	@ (80005ec <MX_GPIO_Init+0xf8>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a21      	ldr	r2, [pc, #132]	@ (80005ec <MX_GPIO_Init+0xf8>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <MX_GPIO_Init+0xf8>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2101      	movs	r1, #1
 800057e:	481c      	ldr	r0, [pc, #112]	@ (80005f0 <MX_GPIO_Init+0xfc>)
 8000580:	f000 fe4e 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	481a      	ldr	r0, [pc, #104]	@ (80005f4 <MX_GPIO_Init+0x100>)
 800058a:	f000 fe49 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000594:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <MX_GPIO_Init+0xfc>)
 80005a6:	f000 fca7 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <MX_GPIO_Init+0xfc>)
 80005c2:	f000 fc99 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005c6:	2320      	movs	r3, #32
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <MX_GPIO_Init+0x100>)
 80005de:	f000 fc8b 	bl	8000ef8 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	@ 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020800 	.word	0x40020800
 80005f4:	40020000 	.word	0x40020000

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	f5ad 5d02 	sub.w	sp, sp, #8320	@ 0x2080
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fafd 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f8d3 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f7ff ff73 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060e:	f000 fa5b 	bl	8000ac8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000612:	f001 ff55 	bl	80024c0 <MX_FATFS_Init>
  MX_SPI2_Init();
 8000616:	f000 f93f 	bl	8000898 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000); //a short delay is important to let the SD card settle
 800061a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800061e:	f000 fb61 	bl	8000ce4 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000622:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000626:	f103 0308 	add.w	r3, r3, #8
 800062a:	3b08      	subs	r3, #8
 800062c:	2201      	movs	r2, #1
 800062e:	495c      	ldr	r1, [pc, #368]	@ (80007a0 <main+0x1a8>)
 8000630:	4618      	mov	r0, r3
 8000632:	f004 f98f 	bl	8004954 <f_mount>
 8000636:	4603      	mov	r3, r0
 8000638:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 800063c:	f102 0227 	add.w	r2, r2, #39	@ 0x27
 8000640:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK)
 8000642:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8000646:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <main+0x5c>
  {
  	while(1);
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <main+0x58>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000654:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000658:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800065c:	3b3c      	subs	r3, #60	@ 0x3c
 800065e:	4619      	mov	r1, r3
 8000660:	484f      	ldr	r0, [pc, #316]	@ (80007a0 <main+0x1a8>)
 8000662:	f004 ff20 	bl	80054a6 <f_getfree>
 8000666:	4603      	mov	r3, r0
 8000668:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 800066c:	f102 0227 	add.w	r2, r2, #39	@ 0x27
 8000670:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK)
 8000672:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8000676:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <main+0x8c>
  {
  	while(1);
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <main+0x88>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000684:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000688:	f853 3c80 	ldr.w	r3, [r3, #-128]
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	3b02      	subs	r3, #2
 8000690:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8000694:	f852 2c80 	ldr.w	r2, [r2, #-128]
 8000698:	8952      	ldrh	r2, [r2, #10]
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 80006a2:	f102 0220 	add.w	r2, r2, #32
 80006a6:	6013      	str	r3, [r2, #0]
  free_sectors = free_clusters * getFreeFs->csize;
 80006a8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80006ac:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80006b0:	895b      	ldrh	r3, [r3, #10]
 80006b2:	461a      	mov	r2, r3
 80006b4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80006b8:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80006bc:	fb02 f303 	mul.w	r3, r2, r3
 80006c0:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 80006c4:	f102 021c 	add.w	r2, r2, #28
 80006c8:	6013      	str	r3, [r2, #0]

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 80006ca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80006ce:	3b38      	subs	r3, #56	@ 0x38
 80006d0:	2201      	movs	r2, #1
 80006d2:	4934      	ldr	r1, [pc, #208]	@ (80007a4 <main+0x1ac>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 f983 	bl	80049e0 <f_open>
 80006da:	4603      	mov	r3, r0
 80006dc:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 80006e0:	f102 0227 	add.w	r2, r2, #39	@ 0x27
 80006e4:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK)
 80006e6:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 80006ea:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <main+0x100>
  {
  	while(1);
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <main+0xfc>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80006f8:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80006fc:	3a38      	subs	r2, #56	@ 0x38
 80006fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000702:	3b20      	subs	r3, #32
 8000704:	211e      	movs	r1, #30
 8000706:	4618      	mov	r0, r3
 8000708:	f004 ff82 	bl	8005610 <f_gets>
 800070c:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8000710:	f103 0318 	add.w	r3, r3, #24
 8000714:	6018      	str	r0, [r3, #0]

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 8000716:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800071a:	3b38      	subs	r3, #56	@ 0x38
 800071c:	4618      	mov	r0, r3
 800071e:	f004 fe98 	bl	8005452 <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000722:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000726:	3b38      	subs	r3, #56	@ 0x38
 8000728:	221a      	movs	r2, #26
 800072a:	491f      	ldr	r1, [pc, #124]	@ (80007a8 <main+0x1b0>)
 800072c:	4618      	mov	r0, r3
 800072e:	f004 f957 	bl	80049e0 <f_open>
 8000732:	4603      	mov	r3, r0
 8000734:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000738:	f102 0227 	add.w	r2, r2, #39	@ 0x27
 800073c:	7013      	strb	r3, [r2, #0]

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 800073e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000742:	3b20      	subs	r3, #32
 8000744:	4a19      	ldr	r2, [pc, #100]	@ (80007ac <main+0x1b4>)
 8000746:	461c      	mov	r4, r3
 8000748:	4615      	mov	r5, r2
 800074a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074e:	682b      	ldr	r3, [r5, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	8022      	strh	r2, [r4, #0]
 8000754:	3402      	adds	r4, #2
 8000756:	0c1b      	lsrs	r3, r3, #16
 8000758:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800075a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800075e:	3b24      	subs	r3, #36	@ 0x24
 8000760:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000764:	3920      	subs	r1, #32
 8000766:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800076a:	3838      	subs	r0, #56	@ 0x38
 800076c:	2213      	movs	r2, #19
 800076e:	f004 fc5e 	bl	800502e <f_write>
 8000772:	4603      	mov	r3, r0
 8000774:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000778:	f102 0227 	add.w	r2, r2, #39	@ 0x27
 800077c:	7013      	strb	r3, [r2, #0]

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 800077e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000782:	3b38      	subs	r3, #56	@ 0x38
 8000784:	4618      	mov	r0, r3
 8000786:	f004 fe64 	bl	8005452 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800078a:	2200      	movs	r2, #0
 800078c:	4904      	ldr	r1, [pc, #16]	@ (80007a0 <main+0x1a8>)
 800078e:	2000      	movs	r0, #0
 8000790:	f004 f8e0 	bl	8004954 <f_mount>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_Delay(500);
 8000794:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000798:	f000 faa4 	bl	8000ce4 <HAL_Delay>
 800079c:	e7fa      	b.n	8000794 <main+0x19c>
 800079e:	bf00      	nop
 80007a0:	08005940 	.word	0x08005940
 80007a4:	08005944 	.word	0x08005944
 80007a8:	08005950 	.word	0x08005950
 80007ac:	0800595c 	.word	0x0800595c

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	@ 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2234      	movs	r2, #52	@ 0x34
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 f886 	bl	80058d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <SystemClock_Config+0xd4>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007dc:	4a29      	ldr	r2, [pc, #164]	@ (8000884 <SystemClock_Config+0xd4>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e4:	4b27      	ldr	r3, [pc, #156]	@ (8000884 <SystemClock_Config+0xd4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <SystemClock_Config+0xd8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007fc:	4a22      	ldr	r2, [pc, #136]	@ (8000888 <SystemClock_Config+0xd8>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <SystemClock_Config+0xd8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000818:	2310      	movs	r3, #16
 800081a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000820:	2300      	movs	r3, #0
 8000822:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000824:	2310      	movs	r3, #16
 8000826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000828:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800082c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800082e:	2304      	movs	r3, #4
 8000830:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f852 	bl	80018e8 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800084a:	f000 f81f 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fcf2 	bl	8001254 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000876:	f000 f809 	bl	800088c <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	@ 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_SPI2_Init+0x64>)
 800089e:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <MX_SPI2_Init+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008cc:	2220      	movs	r2, #32
 80008ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008e4:	220a      	movs	r2, #10
 80008e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_SPI2_Init+0x64>)
 80008ea:	f001 fa9b 	bl	8001e24 <HAL_SPI_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008f4:	f7ff ffca 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000003c 	.word	0x2000003c
 8000900:	40003800 	.word	0x40003800

08000904 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a30      	ldr	r2, [pc, #192]	@ (80009e4 <HAL_SPI_MspInit+0xe0>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d15a      	bne.n	80009dc <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b2f      	ldr	r3, [pc, #188]	@ (80009e8 <HAL_SPI_MspInit+0xe4>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	4a2e      	ldr	r2, [pc, #184]	@ (80009e8 <HAL_SPI_MspInit+0xe4>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000934:	6413      	str	r3, [r2, #64]	@ 0x40
 8000936:	4b2c      	ldr	r3, [pc, #176]	@ (80009e8 <HAL_SPI_MspInit+0xe4>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b28      	ldr	r3, [pc, #160]	@ (80009e8 <HAL_SPI_MspInit+0xe4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a27      	ldr	r2, [pc, #156]	@ (80009e8 <HAL_SPI_MspInit+0xe4>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b25      	ldr	r3, [pc, #148]	@ (80009e8 <HAL_SPI_MspInit+0xe4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <HAL_SPI_MspInit+0xe4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a20      	ldr	r2, [pc, #128]	@ (80009e8 <HAL_SPI_MspInit+0xe4>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <HAL_SPI_MspInit+0xe4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800097a:	2302      	movs	r3, #2
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800098a:	2307      	movs	r3, #7
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4815      	ldr	r0, [pc, #84]	@ (80009ec <HAL_SPI_MspInit+0xe8>)
 8000996:	f000 faaf 	bl	8000ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800099a:	2304      	movs	r3, #4
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009aa:	2305      	movs	r3, #5
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	480d      	ldr	r0, [pc, #52]	@ (80009ec <HAL_SPI_MspInit+0xe8>)
 80009b6:	f000 fa9f 	bl	8000ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009cc:	2305      	movs	r3, #5
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <HAL_SPI_MspInit+0xec>)
 80009d8:	f000 fa8e 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	@ 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40003800 	.word	0x40003800
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020400 	.word	0x40020400

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a0f      	ldr	r2, [pc, #60]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a32:	2007      	movs	r0, #7
 8000a34:	f000 fa2c 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <NMI_Handler+0x4>

08000a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9a:	f000 f903 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	@ (8000b18 <MX_USART2_UART_Init+0x50>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f001 fa19 	bl	8001f36 <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0a:	f7ff febf 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000094 	.word	0x20000094
 8000b18:	40004400 	.word	0x40004400

08000b1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	@ (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d12b      	bne.n	8000b96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a17      	ldr	r2, [pc, #92]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a10      	ldr	r2, [pc, #64]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b76:	230c      	movs	r3, #12
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b86:	2307      	movs	r3, #7
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <HAL_UART_MspInit+0x8c>)
 8000b92:	f000 f9b1 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	@ 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bb0:	f7ff ff78 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	@ (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f004 fe81 	bl	80058e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fd0b 	bl	80005f8 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000bf0:	08005e20 	.word	0x08005e20
  ldr r2, =_sbss
 8000bf4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000bf8:	2000031c 	.word	0x2000031c

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f931 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fede 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f93b 	bl	8000ede <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f911 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	@ (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200000dc 	.word	0x200000dc

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200000dc 	.word	0x200000dc

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	@ (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff47 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff5c 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffb0 	bl	8000e4c <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e165      	b.n	80011e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 8154 	bne.w	80011da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80ae 	beq.w	80011da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <HAL_GPIO_Init+0x300>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a5c      	ldr	r2, [pc, #368]	@ (80011f8 <HAL_GPIO_Init+0x300>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b5a      	ldr	r3, [pc, #360]	@ (80011f8 <HAL_GPIO_Init+0x300>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a58      	ldr	r2, [pc, #352]	@ (80011fc <HAL_GPIO_Init+0x304>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001200 <HAL_GPIO_Init+0x308>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001204 <HAL_GPIO_Init+0x30c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001208 <HAL_GPIO_Init+0x310>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	@ (800120c <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001210 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x20a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001214 <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x206>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a49      	ldr	r2, [pc, #292]	@ (8001218 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x202>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00c      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 80010fe:	2305      	movs	r3, #5
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	@ (80011fc <HAL_GPIO_Init+0x304>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b3a      	ldr	r3, [pc, #232]	@ (800121c <HAL_GPIO_Init+0x324>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a31      	ldr	r2, [pc, #196]	@ (800121c <HAL_GPIO_Init+0x324>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <HAL_GPIO_Init+0x324>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a26      	ldr	r2, [pc, #152]	@ (800121c <HAL_GPIO_Init+0x324>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001186:	4b25      	ldr	r3, [pc, #148]	@ (800121c <HAL_GPIO_Init+0x324>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <HAL_GPIO_Init+0x324>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <HAL_GPIO_Init+0x324>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d4:	4a11      	ldr	r2, [pc, #68]	@ (800121c <HAL_GPIO_Init+0x324>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f ae96 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0cc      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4b68      	ldr	r3, [pc, #416]	@ (800140c <HAL_RCC_ClockConfig+0x1b8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d90c      	bls.n	8001290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b65      	ldr	r3, [pc, #404]	@ (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127e:	4b63      	ldr	r3, [pc, #396]	@ (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b8      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a8:	4b59      	ldr	r3, [pc, #356]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a58      	ldr	r2, [pc, #352]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c0:	4b53      	ldr	r3, [pc, #332]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4a52      	ldr	r2, [pc, #328]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012cc:	4b50      	ldr	r3, [pc, #320]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	494d      	ldr	r1, [pc, #308]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d044      	beq.n	8001374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d119      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e07f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d003      	beq.n	8001312 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130e:	2b03      	cmp	r3, #3
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b3f      	ldr	r3, [pc, #252]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e06f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b3b      	ldr	r3, [pc, #236]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e067      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	4b37      	ldr	r3, [pc, #220]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f023 0203 	bic.w	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4934      	ldr	r1, [pc, #208]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	4313      	orrs	r3, r2
 8001342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff fcc2 	bl	8000ccc <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	e00a      	b.n	8001362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff fcbe 	bl	8000ccc <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e04f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 020c 	and.w	r2, r3, #12
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1eb      	bne.n	800134c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b25      	ldr	r3, [pc, #148]	@ (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d20c      	bcs.n	800139c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e032      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4916      	ldr	r1, [pc, #88]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	490e      	ldr	r1, [pc, #56]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013da:	f000 f855 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	490a      	ldr	r1, [pc, #40]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	5ccb      	ldrb	r3, [r1, r3]
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	4a09      	ldr	r2, [pc, #36]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <HAL_RCC_ClockConfig+0x1c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fc22 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00
 8001410:	40023800 	.word	0x40023800
 8001414:	080059b8 	.word	0x080059b8
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <HAL_RCC_GetHCLKFreq+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000000 	.word	0x20000000

08001438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800143c:	f7ff fff0 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	0a9b      	lsrs	r3, r3, #10
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	4903      	ldr	r1, [pc, #12]	@ (800145c <HAL_RCC_GetPCLK1Freq+0x24>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	080059c8 	.word	0x080059c8

08001460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001464:	f7ff ffdc 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001468:	4602      	mov	r2, r0
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	0b5b      	lsrs	r3, r3, #13
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	4903      	ldr	r1, [pc, #12]	@ (8001484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001476:	5ccb      	ldrb	r3, [r1, r3]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	080059c8 	.word	0x080059c8

08001488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800148c:	b0ae      	sub	sp, #184	@ 0xb8
 800148e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ae:	4bcb      	ldr	r3, [pc, #812]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	f200 8206 	bhi.w	80018c8 <HAL_RCC_GetSysClockFreq+0x440>
 80014bc:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	080018c9 	.word	0x080018c9
 80014cc:	080018c9 	.word	0x080018c9
 80014d0:	080018c9 	.word	0x080018c9
 80014d4:	08001501 	.word	0x08001501
 80014d8:	080018c9 	.word	0x080018c9
 80014dc:	080018c9 	.word	0x080018c9
 80014e0:	080018c9 	.word	0x080018c9
 80014e4:	08001509 	.word	0x08001509
 80014e8:	080018c9 	.word	0x080018c9
 80014ec:	080018c9 	.word	0x080018c9
 80014f0:	080018c9 	.word	0x080018c9
 80014f4:	080016f9 	.word	0x080016f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014f8:	4bb9      	ldr	r3, [pc, #740]	@ (80017e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014fe:	e1e7      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001500:	4bb8      	ldr	r3, [pc, #736]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001506:	e1e3      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001508:	4bb4      	ldr	r3, [pc, #720]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001514:	4bb1      	ldr	r3, [pc, #708]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d071      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001520:	4bae      	ldr	r3, [pc, #696]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	2200      	movs	r2, #0
 8001528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800152c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001546:	4622      	mov	r2, r4
 8001548:	462b      	mov	r3, r5
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	0159      	lsls	r1, r3, #5
 8001554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001558:	0150      	lsls	r0, r2, #5
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4621      	mov	r1, r4
 8001560:	1a51      	subs	r1, r2, r1
 8001562:	6439      	str	r1, [r7, #64]	@ 0x40
 8001564:	4629      	mov	r1, r5
 8001566:	eb63 0301 	sbc.w	r3, r3, r1
 800156a:	647b      	str	r3, [r7, #68]	@ 0x44
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001578:	4649      	mov	r1, r9
 800157a:	018b      	lsls	r3, r1, #6
 800157c:	4641      	mov	r1, r8
 800157e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001582:	4641      	mov	r1, r8
 8001584:	018a      	lsls	r2, r1, #6
 8001586:	4641      	mov	r1, r8
 8001588:	1a51      	subs	r1, r2, r1
 800158a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800158c:	4649      	mov	r1, r9
 800158e:	eb63 0301 	sbc.w	r3, r3, r1
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80015a0:	4649      	mov	r1, r9
 80015a2:	00cb      	lsls	r3, r1, #3
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015aa:	4641      	mov	r1, r8
 80015ac:	00ca      	lsls	r2, r1, #3
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	4622      	mov	r2, r4
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80015ba:	462b      	mov	r3, r5
 80015bc:	460a      	mov	r2, r1
 80015be:	eb42 0303 	adc.w	r3, r2, r3
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015d0:	4629      	mov	r1, r5
 80015d2:	024b      	lsls	r3, r1, #9
 80015d4:	4621      	mov	r1, r4
 80015d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015da:	4621      	mov	r1, r4
 80015dc:	024a      	lsls	r2, r1, #9
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015e6:	2200      	movs	r2, #0
 80015e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80015f4:	f7fe fe06 	bl	8000204 <__aeabi_uldivmod>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4613      	mov	r3, r2
 80015fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001602:	e067      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	4b75      	ldr	r3, [pc, #468]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	2200      	movs	r2, #0
 800160c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001610:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001614:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800161e:	2300      	movs	r3, #0
 8001620:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001622:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001626:	4622      	mov	r2, r4
 8001628:	462b      	mov	r3, r5
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	0159      	lsls	r1, r3, #5
 8001634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001638:	0150      	lsls	r0, r2, #5
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4621      	mov	r1, r4
 8001640:	1a51      	subs	r1, r2, r1
 8001642:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001644:	4629      	mov	r1, r5
 8001646:	eb63 0301 	sbc.w	r3, r3, r1
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001658:	4649      	mov	r1, r9
 800165a:	018b      	lsls	r3, r1, #6
 800165c:	4641      	mov	r1, r8
 800165e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001662:	4641      	mov	r1, r8
 8001664:	018a      	lsls	r2, r1, #6
 8001666:	4641      	mov	r1, r8
 8001668:	ebb2 0a01 	subs.w	sl, r2, r1
 800166c:	4649      	mov	r1, r9
 800166e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800167e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001686:	4692      	mov	sl, r2
 8001688:	469b      	mov	fp, r3
 800168a:	4623      	mov	r3, r4
 800168c:	eb1a 0303 	adds.w	r3, sl, r3
 8001690:	623b      	str	r3, [r7, #32]
 8001692:	462b      	mov	r3, r5
 8001694:	eb4b 0303 	adc.w	r3, fp, r3
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016a6:	4629      	mov	r1, r5
 80016a8:	028b      	lsls	r3, r1, #10
 80016aa:	4621      	mov	r1, r4
 80016ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016b0:	4621      	mov	r1, r4
 80016b2:	028a      	lsls	r2, r1, #10
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016bc:	2200      	movs	r2, #0
 80016be:	673b      	str	r3, [r7, #112]	@ 0x70
 80016c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80016c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016c6:	f7fe fd9d 	bl	8000204 <__aeabi_uldivmod>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4613      	mov	r3, r2
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016d4:	4b41      	ldr	r3, [pc, #260]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	3301      	adds	r3, #1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80016e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016f6:	e0eb      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f8:	4b38      	ldr	r3, [pc, #224]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001704:	4b35      	ldr	r3, [pc, #212]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d06b      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	2200      	movs	r2, #0
 8001718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800171a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800171c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800171e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001722:	663b      	str	r3, [r7, #96]	@ 0x60
 8001724:	2300      	movs	r3, #0
 8001726:	667b      	str	r3, [r7, #100]	@ 0x64
 8001728:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800172c:	4622      	mov	r2, r4
 800172e:	462b      	mov	r3, r5
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	0159      	lsls	r1, r3, #5
 800173a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800173e:	0150      	lsls	r0, r2, #5
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4621      	mov	r1, r4
 8001746:	1a51      	subs	r1, r2, r1
 8001748:	61b9      	str	r1, [r7, #24]
 800174a:	4629      	mov	r1, r5
 800174c:	eb63 0301 	sbc.w	r3, r3, r1
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800175e:	4659      	mov	r1, fp
 8001760:	018b      	lsls	r3, r1, #6
 8001762:	4651      	mov	r1, sl
 8001764:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001768:	4651      	mov	r1, sl
 800176a:	018a      	lsls	r2, r1, #6
 800176c:	4651      	mov	r1, sl
 800176e:	ebb2 0801 	subs.w	r8, r2, r1
 8001772:	4659      	mov	r1, fp
 8001774:	eb63 0901 	sbc.w	r9, r3, r1
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001784:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001788:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800178c:	4690      	mov	r8, r2
 800178e:	4699      	mov	r9, r3
 8001790:	4623      	mov	r3, r4
 8001792:	eb18 0303 	adds.w	r3, r8, r3
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	462b      	mov	r3, r5
 800179a:	eb49 0303 	adc.w	r3, r9, r3
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017ac:	4629      	mov	r1, r5
 80017ae:	024b      	lsls	r3, r1, #9
 80017b0:	4621      	mov	r1, r4
 80017b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017b6:	4621      	mov	r1, r4
 80017b8:	024a      	lsls	r2, r1, #9
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017c2:	2200      	movs	r2, #0
 80017c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017cc:	f7fe fd1a 	bl	8000204 <__aeabi_uldivmod>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4613      	mov	r3, r2
 80017d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80017da:	e065      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x420>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	00f42400 	.word	0x00f42400
 80017e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e8:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	2200      	movs	r2, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	4611      	mov	r1, r2
 80017f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80017fa:	2300      	movs	r3, #0
 80017fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80017fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001802:	4642      	mov	r2, r8
 8001804:	464b      	mov	r3, r9
 8001806:	f04f 0000 	mov.w	r0, #0
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	0159      	lsls	r1, r3, #5
 8001810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001814:	0150      	lsls	r0, r2, #5
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4641      	mov	r1, r8
 800181c:	1a51      	subs	r1, r2, r1
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	4649      	mov	r1, r9
 8001822:	eb63 0301 	sbc.w	r3, r3, r1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001834:	4659      	mov	r1, fp
 8001836:	018b      	lsls	r3, r1, #6
 8001838:	4651      	mov	r1, sl
 800183a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800183e:	4651      	mov	r1, sl
 8001840:	018a      	lsls	r2, r1, #6
 8001842:	4651      	mov	r1, sl
 8001844:	1a54      	subs	r4, r2, r1
 8001846:	4659      	mov	r1, fp
 8001848:	eb63 0501 	sbc.w	r5, r3, r1
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	00eb      	lsls	r3, r5, #3
 8001856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185a:	00e2      	lsls	r2, r4, #3
 800185c:	4614      	mov	r4, r2
 800185e:	461d      	mov	r5, r3
 8001860:	4643      	mov	r3, r8
 8001862:	18e3      	adds	r3, r4, r3
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	464b      	mov	r3, r9
 8001868:	eb45 0303 	adc.w	r3, r5, r3
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800187a:	4629      	mov	r1, r5
 800187c:	028b      	lsls	r3, r1, #10
 800187e:	4621      	mov	r1, r4
 8001880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001884:	4621      	mov	r1, r4
 8001886:	028a      	lsls	r2, r1, #10
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001890:	2200      	movs	r2, #0
 8001892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001894:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001896:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800189a:	f7fe fcb3 	bl	8000204 <__aeabi_uldivmod>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4613      	mov	r3, r2
 80018a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	0f1b      	lsrs	r3, r3, #28
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80018b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018c6:	e003      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80018ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	37b8      	adds	r7, #184	@ 0xb8
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	00f42400 	.word	0x00f42400

080018e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e28d      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8083 	beq.w	8001a0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001908:	4b94      	ldr	r3, [pc, #592]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b04      	cmp	r3, #4
 8001912:	d019      	beq.n	8001948 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001914:	4b91      	ldr	r3, [pc, #580]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
        || \
 800191c:	2b08      	cmp	r3, #8
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001920:	4b8e      	ldr	r3, [pc, #568]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800192c:	d00c      	beq.n	8001948 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d112      	bne.n	8001960 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193a:	4b88      	ldr	r3, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4b84      	ldr	r3, [pc, #528]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d05b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x124>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d157      	bne.n	8001a0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e25a      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x90>
 800196a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7b      	ldr	r2, [pc, #492]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xcc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0xb4>
 8001982:	4b76      	ldr	r3, [pc, #472]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a75      	ldr	r2, [pc, #468]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b73      	ldr	r3, [pc, #460]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a72      	ldr	r2, [pc, #456]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xcc>
 800199c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b6c      	ldr	r3, [pc, #432]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6b      	ldr	r2, [pc, #428]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f986 	bl	8000ccc <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff f982 	bl	8000ccc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	@ 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e21f      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b61      	ldr	r3, [pc, #388]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xdc>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f972 	bl	8000ccc <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f96e 	bl	8000ccc <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	@ 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e20b      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	4b57      	ldr	r3, [pc, #348]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x104>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d06f      	beq.n	8001afa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a1a:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d017      	beq.n	8001a56 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a26:	4b4d      	ldr	r3, [pc, #308]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a32:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a3e:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d11c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4a:	4b44      	ldr	r3, [pc, #272]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d116      	bne.n	8001a84 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x186>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1d3      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4937      	ldr	r1, [pc, #220]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <HAL_RCC_OscConfig+0x278>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff f91b 	bl	8000ccc <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff f917 	bl	8000ccc <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1b4      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4925      	ldr	r1, [pc, #148]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ace:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <HAL_RCC_OscConfig+0x278>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f8fa 	bl	8000ccc <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff f8f6 	bl	8000ccc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e193      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d036      	beq.n	8001b74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f8da 	bl	8000ccc <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f8d6 	bl	8000ccc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e173      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x234>
 8001b3a:	e01b      	b.n	8001b74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff f8c3 	bl	8000ccc <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	e00e      	b.n	8001b68 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7ff f8bf 	bl	8000ccc <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d907      	bls.n	8001b68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e15c      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	42470000 	.word	0x42470000
 8001b64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b68:	4b8a      	ldr	r3, [pc, #552]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ea      	bne.n	8001b4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 8097 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b86:	4b83      	ldr	r3, [pc, #524]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10f      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b7f      	ldr	r3, [pc, #508]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	4b79      	ldr	r3, [pc, #484]	@ (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d118      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbe:	4b76      	ldr	r3, [pc, #472]	@ (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a75      	ldr	r2, [pc, #468]	@ (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bca:	f7ff f87f 	bl	8000ccc <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd2:	f7ff f87b 	bl	8000ccc <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e118      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x31e>
 8001bf8:	4b66      	ldr	r3, [pc, #408]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfc:	4a65      	ldr	r2, [pc, #404]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c04:	e01c      	b.n	8001c40 <HAL_RCC_OscConfig+0x358>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x340>
 8001c0e:	4b61      	ldr	r3, [pc, #388]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	4a60      	ldr	r2, [pc, #384]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1a:	4b5e      	ldr	r3, [pc, #376]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0x358>
 8001c28:	4b5a      	ldr	r3, [pc, #360]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2c:	4a59      	ldr	r2, [pc, #356]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c34:	4b57      	ldr	r3, [pc, #348]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c38:	4a56      	ldr	r2, [pc, #344]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	f023 0304 	bic.w	r3, r3, #4
 8001c3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d015      	beq.n	8001c74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff f840 	bl	8000ccc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7ff f83c 	bl	8000ccc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0d7      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c66:	4b4b      	ldr	r3, [pc, #300]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0ee      	beq.n	8001c50 <HAL_RCC_OscConfig+0x368>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7ff f82a 	bl	8000ccc <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f826 	bl	8000ccc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0c1      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	4b40      	ldr	r3, [pc, #256]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ee      	bne.n	8001c7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80ad 	beq.w	8001e14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cba:	4b36      	ldr	r3, [pc, #216]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d060      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d145      	bne.n	8001d5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b33      	ldr	r3, [pc, #204]	@ (8001d9c <HAL_RCC_OscConfig+0x4b4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fffa 	bl	8000ccc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7fe fff6 	bl	8000ccc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e093      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	4b29      	ldr	r3, [pc, #164]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	019b      	lsls	r3, r3, #6
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	071b      	lsls	r3, r3, #28
 8001d26:	491b      	ldr	r1, [pc, #108]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x4b4>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7fe ffcb 	bl	8000ccc <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7fe ffc7 	bl	8000ccc <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e064      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x452>
 8001d58:	e05c      	b.n	8001e14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <HAL_RCC_OscConfig+0x4b4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe ffb4 	bl	8000ccc <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe ffb0 	bl	8000ccc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e04d      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x480>
 8001d86:	e045      	b.n	8001e14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e040      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <HAL_RCC_OscConfig+0x538>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d030      	beq.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d129      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d122      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d119      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	3b01      	subs	r3, #1
 8001dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d10f      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e07b      	b.n	8001f2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d108      	bne.n	8001e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e46:	d009      	beq.n	8001e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
 8001e4e:	e005      	b.n	8001e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fd44 	bl	8000904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee0:	ea42 0103 	orr.w	r1, r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	f003 0104 	and.w	r1, r3, #4
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	f003 0210 	and.w	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e042      	b.n	8001fce <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d106      	bne.n	8001f62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7fe fddd 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2224      	movs	r2, #36	@ 0x24
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f82c 	bl	8001fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fdc:	b0c0      	sub	sp, #256	@ 0x100
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	68d9      	ldr	r1, [r3, #12]
 8001ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	ea40 0301 	orr.w	r3, r0, r1
 8002000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	431a      	orrs	r2, r3
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	431a      	orrs	r2, r3
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002030:	f021 010c 	bic.w	r1, r1, #12
 8002034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800203e:	430b      	orrs	r3, r1
 8002040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002052:	6999      	ldr	r1, [r3, #24]
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	ea40 0301 	orr.w	r3, r0, r1
 800205e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b8f      	ldr	r3, [pc, #572]	@ (80022a4 <UART_SetConfig+0x2cc>)
 8002068:	429a      	cmp	r2, r3
 800206a:	d005      	beq.n	8002078 <UART_SetConfig+0xa0>
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b8d      	ldr	r3, [pc, #564]	@ (80022a8 <UART_SetConfig+0x2d0>)
 8002074:	429a      	cmp	r2, r3
 8002076:	d104      	bne.n	8002082 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002078:	f7ff f9f2 	bl	8001460 <HAL_RCC_GetPCLK2Freq>
 800207c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002080:	e003      	b.n	800208a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002082:	f7ff f9d9 	bl	8001438 <HAL_RCC_GetPCLK1Freq>
 8002086:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800208a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002094:	f040 810c 	bne.w	80022b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800209c:	2200      	movs	r2, #0
 800209e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80020a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80020a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80020aa:	4622      	mov	r2, r4
 80020ac:	462b      	mov	r3, r5
 80020ae:	1891      	adds	r1, r2, r2
 80020b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020b2:	415b      	adcs	r3, r3
 80020b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020ba:	4621      	mov	r1, r4
 80020bc:	eb12 0801 	adds.w	r8, r2, r1
 80020c0:	4629      	mov	r1, r5
 80020c2:	eb43 0901 	adc.w	r9, r3, r1
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020da:	4690      	mov	r8, r2
 80020dc:	4699      	mov	r9, r3
 80020de:	4623      	mov	r3, r4
 80020e0:	eb18 0303 	adds.w	r3, r8, r3
 80020e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020e8:	462b      	mov	r3, r5
 80020ea:	eb49 0303 	adc.w	r3, r9, r3
 80020ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002102:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002106:	460b      	mov	r3, r1
 8002108:	18db      	adds	r3, r3, r3
 800210a:	653b      	str	r3, [r7, #80]	@ 0x50
 800210c:	4613      	mov	r3, r2
 800210e:	eb42 0303 	adc.w	r3, r2, r3
 8002112:	657b      	str	r3, [r7, #84]	@ 0x54
 8002114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800211c:	f7fe f872 	bl	8000204 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4b61      	ldr	r3, [pc, #388]	@ (80022ac <UART_SetConfig+0x2d4>)
 8002126:	fba3 2302 	umull	r2, r3, r3, r2
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	011c      	lsls	r4, r3, #4
 800212e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002132:	2200      	movs	r2, #0
 8002134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002138:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800213c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002140:	4642      	mov	r2, r8
 8002142:	464b      	mov	r3, r9
 8002144:	1891      	adds	r1, r2, r2
 8002146:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002148:	415b      	adcs	r3, r3
 800214a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800214c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002150:	4641      	mov	r1, r8
 8002152:	eb12 0a01 	adds.w	sl, r2, r1
 8002156:	4649      	mov	r1, r9
 8002158:	eb43 0b01 	adc.w	fp, r3, r1
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002168:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800216c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002170:	4692      	mov	sl, r2
 8002172:	469b      	mov	fp, r3
 8002174:	4643      	mov	r3, r8
 8002176:	eb1a 0303 	adds.w	r3, sl, r3
 800217a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800217e:	464b      	mov	r3, r9
 8002180:	eb4b 0303 	adc.w	r3, fp, r3
 8002184:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002194:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002198:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800219c:	460b      	mov	r3, r1
 800219e:	18db      	adds	r3, r3, r3
 80021a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80021a2:	4613      	mov	r3, r2
 80021a4:	eb42 0303 	adc.w	r3, r2, r3
 80021a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80021aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80021b2:	f7fe f827 	bl	8000204 <__aeabi_uldivmod>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4611      	mov	r1, r2
 80021bc:	4b3b      	ldr	r3, [pc, #236]	@ (80022ac <UART_SetConfig+0x2d4>)
 80021be:	fba3 2301 	umull	r2, r3, r3, r1
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2264      	movs	r2, #100	@ 0x64
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	1acb      	subs	r3, r1, r3
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021d2:	4b36      	ldr	r3, [pc, #216]	@ (80022ac <UART_SetConfig+0x2d4>)
 80021d4:	fba3 2302 	umull	r2, r3, r3, r2
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021e0:	441c      	add	r4, r3
 80021e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021e6:	2200      	movs	r2, #0
 80021e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021f4:	4642      	mov	r2, r8
 80021f6:	464b      	mov	r3, r9
 80021f8:	1891      	adds	r1, r2, r2
 80021fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021fc:	415b      	adcs	r3, r3
 80021fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002204:	4641      	mov	r1, r8
 8002206:	1851      	adds	r1, r2, r1
 8002208:	6339      	str	r1, [r7, #48]	@ 0x30
 800220a:	4649      	mov	r1, r9
 800220c:	414b      	adcs	r3, r1
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800221c:	4659      	mov	r1, fp
 800221e:	00cb      	lsls	r3, r1, #3
 8002220:	4651      	mov	r1, sl
 8002222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002226:	4651      	mov	r1, sl
 8002228:	00ca      	lsls	r2, r1, #3
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	4603      	mov	r3, r0
 8002230:	4642      	mov	r2, r8
 8002232:	189b      	adds	r3, r3, r2
 8002234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002238:	464b      	mov	r3, r9
 800223a:	460a      	mov	r2, r1
 800223c:	eb42 0303 	adc.w	r3, r2, r3
 8002240:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002250:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002258:	460b      	mov	r3, r1
 800225a:	18db      	adds	r3, r3, r3
 800225c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800225e:	4613      	mov	r3, r2
 8002260:	eb42 0303 	adc.w	r3, r2, r3
 8002264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800226a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800226e:	f7fd ffc9 	bl	8000204 <__aeabi_uldivmod>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <UART_SetConfig+0x2d4>)
 8002278:	fba3 1302 	umull	r1, r3, r3, r2
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	2164      	movs	r1, #100	@ 0x64
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	3332      	adds	r3, #50	@ 0x32
 800228a:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <UART_SetConfig+0x2d4>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	f003 0207 	and.w	r2, r3, #7
 8002296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4422      	add	r2, r4
 800229e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022a0:	e106      	b.n	80024b0 <UART_SetConfig+0x4d8>
 80022a2:	bf00      	nop
 80022a4:	40011000 	.word	0x40011000
 80022a8:	40011400 	.word	0x40011400
 80022ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022b4:	2200      	movs	r2, #0
 80022b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80022be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022c2:	4642      	mov	r2, r8
 80022c4:	464b      	mov	r3, r9
 80022c6:	1891      	adds	r1, r2, r2
 80022c8:	6239      	str	r1, [r7, #32]
 80022ca:	415b      	adcs	r3, r3
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022d2:	4641      	mov	r1, r8
 80022d4:	1854      	adds	r4, r2, r1
 80022d6:	4649      	mov	r1, r9
 80022d8:	eb43 0501 	adc.w	r5, r3, r1
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	00eb      	lsls	r3, r5, #3
 80022e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ea:	00e2      	lsls	r2, r4, #3
 80022ec:	4614      	mov	r4, r2
 80022ee:	461d      	mov	r5, r3
 80022f0:	4643      	mov	r3, r8
 80022f2:	18e3      	adds	r3, r4, r3
 80022f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022f8:	464b      	mov	r3, r9
 80022fa:	eb45 0303 	adc.w	r3, r5, r3
 80022fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800230e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800231e:	4629      	mov	r1, r5
 8002320:	008b      	lsls	r3, r1, #2
 8002322:	4621      	mov	r1, r4
 8002324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002328:	4621      	mov	r1, r4
 800232a:	008a      	lsls	r2, r1, #2
 800232c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002330:	f7fd ff68 	bl	8000204 <__aeabi_uldivmod>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4b60      	ldr	r3, [pc, #384]	@ (80024bc <UART_SetConfig+0x4e4>)
 800233a:	fba3 2302 	umull	r2, r3, r3, r2
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	011c      	lsls	r4, r3, #4
 8002342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002346:	2200      	movs	r2, #0
 8002348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800234c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002350:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002354:	4642      	mov	r2, r8
 8002356:	464b      	mov	r3, r9
 8002358:	1891      	adds	r1, r2, r2
 800235a:	61b9      	str	r1, [r7, #24]
 800235c:	415b      	adcs	r3, r3
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002364:	4641      	mov	r1, r8
 8002366:	1851      	adds	r1, r2, r1
 8002368:	6139      	str	r1, [r7, #16]
 800236a:	4649      	mov	r1, r9
 800236c:	414b      	adcs	r3, r1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800237c:	4659      	mov	r1, fp
 800237e:	00cb      	lsls	r3, r1, #3
 8002380:	4651      	mov	r1, sl
 8002382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002386:	4651      	mov	r1, sl
 8002388:	00ca      	lsls	r2, r1, #3
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	4603      	mov	r3, r0
 8002390:	4642      	mov	r2, r8
 8002392:	189b      	adds	r3, r3, r2
 8002394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002398:	464b      	mov	r3, r9
 800239a:	460a      	mov	r2, r1
 800239c:	eb42 0303 	adc.w	r3, r2, r3
 80023a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80023bc:	4649      	mov	r1, r9
 80023be:	008b      	lsls	r3, r1, #2
 80023c0:	4641      	mov	r1, r8
 80023c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023c6:	4641      	mov	r1, r8
 80023c8:	008a      	lsls	r2, r1, #2
 80023ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023ce:	f7fd ff19 	bl	8000204 <__aeabi_uldivmod>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	4b38      	ldr	r3, [pc, #224]	@ (80024bc <UART_SetConfig+0x4e4>)
 80023da:	fba3 2301 	umull	r2, r3, r3, r1
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2264      	movs	r2, #100	@ 0x64
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	1acb      	subs	r3, r1, r3
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	3332      	adds	r3, #50	@ 0x32
 80023ec:	4a33      	ldr	r2, [pc, #204]	@ (80024bc <UART_SetConfig+0x4e4>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f8:	441c      	add	r4, r3
 80023fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023fe:	2200      	movs	r2, #0
 8002400:	673b      	str	r3, [r7, #112]	@ 0x70
 8002402:	677a      	str	r2, [r7, #116]	@ 0x74
 8002404:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002408:	4642      	mov	r2, r8
 800240a:	464b      	mov	r3, r9
 800240c:	1891      	adds	r1, r2, r2
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	415b      	adcs	r3, r3
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002418:	4641      	mov	r1, r8
 800241a:	1851      	adds	r1, r2, r1
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	4649      	mov	r1, r9
 8002420:	414b      	adcs	r3, r1
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002430:	4659      	mov	r1, fp
 8002432:	00cb      	lsls	r3, r1, #3
 8002434:	4651      	mov	r1, sl
 8002436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800243a:	4651      	mov	r1, sl
 800243c:	00ca      	lsls	r2, r1, #3
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	4603      	mov	r3, r0
 8002444:	4642      	mov	r2, r8
 8002446:	189b      	adds	r3, r3, r2
 8002448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800244a:	464b      	mov	r3, r9
 800244c:	460a      	mov	r2, r1
 800244e:	eb42 0303 	adc.w	r3, r2, r3
 8002452:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	663b      	str	r3, [r7, #96]	@ 0x60
 800245e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800246c:	4649      	mov	r1, r9
 800246e:	008b      	lsls	r3, r1, #2
 8002470:	4641      	mov	r1, r8
 8002472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002476:	4641      	mov	r1, r8
 8002478:	008a      	lsls	r2, r1, #2
 800247a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800247e:	f7fd fec1 	bl	8000204 <__aeabi_uldivmod>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <UART_SetConfig+0x4e4>)
 8002488:	fba3 1302 	umull	r1, r3, r3, r2
 800248c:	095b      	lsrs	r3, r3, #5
 800248e:	2164      	movs	r1, #100	@ 0x64
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	3332      	adds	r3, #50	@ 0x32
 800249a:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <UART_SetConfig+0x4e4>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	f003 020f 	and.w	r2, r3, #15
 80024a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4422      	add	r2, r4
 80024ae:	609a      	str	r2, [r3, #8]
}
 80024b0:	bf00      	nop
 80024b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80024b6:	46bd      	mov	sp, r7
 80024b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024bc:	51eb851f 	.word	0x51eb851f

080024c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80024c4:	4904      	ldr	r1, [pc, #16]	@ (80024d8 <MX_FATFS_Init+0x18>)
 80024c6:	4805      	ldr	r0, [pc, #20]	@ (80024dc <MX_FATFS_Init+0x1c>)
 80024c8:	f003 f92c 	bl	8005724 <FATFS_LinkDriver>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b03      	ldr	r3, [pc, #12]	@ (80024e0 <MX_FATFS_Init+0x20>)
 80024d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200000e4 	.word	0x200000e4
 80024dc:	2000000c 	.word	0x2000000c
 80024e0:	200000e0 	.word	0x200000e0

080024e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80024e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <USER_initialize+0x24>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002504:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <USER_initialize+0x24>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000009 	.word	0x20000009

0800251c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <USER_status+0x24>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <USER_status+0x24>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000009 	.word	0x20000009

08002544 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8002554:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	4603      	mov	r3, r0
 8002570:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8002572:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	603a      	str	r2, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	460b      	mov	r3, r1
 800258e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
    return res;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	4a08      	ldr	r2, [pc, #32]	@ (80025d4 <disk_status+0x30>)
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	79fa      	ldrb	r2, [r7, #7]
 80025bc:	4905      	ldr	r1, [pc, #20]	@ (80025d4 <disk_status+0x30>)
 80025be:	440a      	add	r2, r1
 80025c0:	7a12      	ldrb	r2, [r2, #8]
 80025c2:	4610      	mov	r0, r2
 80025c4:	4798      	blx	r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000310 	.word	0x20000310

080025d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002624 <disk_initialize+0x4c>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d114      	bne.n	800261a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002624 <disk_initialize+0x4c>)
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	79fa      	ldrb	r2, [r7, #7]
 80025fe:	4909      	ldr	r1, [pc, #36]	@ (8002624 <disk_initialize+0x4c>)
 8002600:	440a      	add	r2, r1
 8002602:	7a12      	ldrb	r2, [r2, #8]
 8002604:	4610      	mov	r0, r2
 8002606:	4798      	blx	r3
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4a03      	ldr	r2, [pc, #12]	@ (8002624 <disk_initialize+0x4c>)
 8002616:	2101      	movs	r1, #1
 8002618:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000310 	.word	0x20000310

08002628 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <disk_read+0x3c>)
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	689c      	ldr	r4, [r3, #8]
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	4a07      	ldr	r2, [pc, #28]	@ (8002664 <disk_read+0x3c>)
 8002648:	4413      	add	r3, r2
 800264a:	7a18      	ldrb	r0, [r3, #8]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	47a0      	blx	r4
 8002654:	4603      	mov	r3, r0
 8002656:	75fb      	strb	r3, [r7, #23]
  return res;
 8002658:	7dfb      	ldrb	r3, [r7, #23]
}
 800265a:	4618      	mov	r0, r3
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}
 8002662:	bf00      	nop
 8002664:	20000310 	.word	0x20000310

08002668 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4603      	mov	r3, r0
 8002676:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <disk_write+0x3c>)
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	68dc      	ldr	r4, [r3, #12]
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	4a07      	ldr	r2, [pc, #28]	@ (80026a4 <disk_write+0x3c>)
 8002688:	4413      	add	r3, r2
 800268a:	7a18      	ldrb	r0, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	47a0      	blx	r4
 8002694:	4603      	mov	r3, r0
 8002696:	75fb      	strb	r3, [r7, #23]
  return res;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
}
 800269a:	4618      	mov	r0, r3
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000310 	.word	0x20000310

080026a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	603a      	str	r2, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	460b      	mov	r3, r1
 80026b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4a09      	ldr	r2, [pc, #36]	@ (80026e0 <disk_ioctl+0x38>)
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	79fa      	ldrb	r2, [r7, #7]
 80026c6:	4906      	ldr	r1, [pc, #24]	@ (80026e0 <disk_ioctl+0x38>)
 80026c8:	440a      	add	r2, r1
 80026ca:	7a10      	ldrb	r0, [r2, #8]
 80026cc:	79b9      	ldrb	r1, [r7, #6]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4798      	blx	r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000310 	.word	0x20000310

080026e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3301      	adds	r3, #1
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80026f4:	89fb      	ldrh	r3, [r7, #14]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	b21a      	sxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b21b      	sxth	r3, r3
 8002700:	4313      	orrs	r3, r2
 8002702:	b21b      	sxth	r3, r3
 8002704:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002706:	89fb      	ldrh	r3, [r7, #14]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3303      	adds	r3, #3
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	3202      	adds	r2, #2
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	3201      	adds	r2, #1
 800273a:	7812      	ldrb	r2, [r2, #0]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
	return rv;
 800274c:	68fb      	ldr	r3, [r7, #12]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	887a      	ldrh	r2, [r7, #2]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	1c53      	adds	r3, r2, #1
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	1c59      	adds	r1, r3, #1
 800280c:	6179      	str	r1, [r7, #20]
 800280e:	7812      	ldrb	r2, [r2, #0]
 8002810:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3b01      	subs	r3, #1
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f1      	bne.n	8002802 <mem_cpy+0x1a>
	}
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800282a:	b480      	push	{r7}
 800282c:	b087      	sub	sp, #28
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	617a      	str	r2, [r7, #20]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3b01      	subs	r3, #1
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f3      	bne.n	800283a <mem_set+0x10>
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	@ 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	61fa      	str	r2, [r7, #28]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	61ba      	str	r2, [r7, #24]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	1acb      	subs	r3, r1, r3
 800288c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3b01      	subs	r3, #1
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <mem_cmp+0x40>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0eb      	beq.n	8002878 <mem_cmp+0x18>

	return r;
 80028a0:	697b      	ldr	r3, [r7, #20]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3724      	adds	r7, #36	@ 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80028b8:	e002      	b.n	80028c0 <chk_chr+0x12>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3301      	adds	r3, #1
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <chk_chr+0x26>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d1f2      	bne.n	80028ba <chk_chr+0xc>
	return *str;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	781b      	ldrb	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e029      	b.n	800294c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80028f8:	4a27      	ldr	r2, [pc, #156]	@ (8002998 <chk_lock+0xb4>)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	4413      	add	r3, r2
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01d      	beq.n	8002942 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002906:	4a24      	ldr	r2, [pc, #144]	@ (8002998 <chk_lock+0xb4>)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	4413      	add	r3, r2
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d116      	bne.n	8002946 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002918:	4a1f      	ldr	r2, [pc, #124]	@ (8002998 <chk_lock+0xb4>)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	4413      	add	r3, r2
 8002920:	3304      	adds	r3, #4
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002928:	429a      	cmp	r2, r3
 800292a:	d10c      	bne.n	8002946 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800292c:	4a1a      	ldr	r2, [pc, #104]	@ (8002998 <chk_lock+0xb4>)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	4413      	add	r3, r2
 8002934:	3308      	adds	r3, #8
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800293c:	429a      	cmp	r2, r3
 800293e:	d102      	bne.n	8002946 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002940:	e007      	b.n	8002952 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3301      	adds	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d9d2      	bls.n	80028f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d109      	bne.n	800296c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <chk_lock+0x80>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d101      	bne.n	8002968 <chk_lock+0x84>
 8002964:	2300      	movs	r3, #0
 8002966:	e010      	b.n	800298a <chk_lock+0xa6>
 8002968:	2312      	movs	r3, #18
 800296a:	e00e      	b.n	800298a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <chk_lock+0xa0>
 8002972:	4a09      	ldr	r2, [pc, #36]	@ (8002998 <chk_lock+0xb4>)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	330c      	adds	r3, #12
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002982:	d101      	bne.n	8002988 <chk_lock+0xa4>
 8002984:	2310      	movs	r3, #16
 8002986:	e000      	b.n	800298a <chk_lock+0xa6>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200000f0 	.word	0x200000f0

0800299c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	e002      	b.n	80029ae <enq_lock+0x12>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3301      	adds	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d806      	bhi.n	80029c2 <enq_lock+0x26>
 80029b4:	4a09      	ldr	r2, [pc, #36]	@ (80029dc <enq_lock+0x40>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	4413      	add	r3, r2
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f2      	bne.n	80029a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	200000f0 	.word	0x200000f0

080029e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	e01f      	b.n	8002a30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80029f0:	4a41      	ldr	r2, [pc, #260]	@ (8002af8 <inc_lock+0x118>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	4413      	add	r3, r2
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d113      	bne.n	8002a2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002a02:	4a3d      	ldr	r2, [pc, #244]	@ (8002af8 <inc_lock+0x118>)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	4413      	add	r3, r2
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d109      	bne.n	8002a2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002a16:	4a38      	ldr	r2, [pc, #224]	@ (8002af8 <inc_lock+0x118>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3308      	adds	r3, #8
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d006      	beq.n	8002a38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d9dc      	bls.n	80029f0 <inc_lock+0x10>
 8002a36:	e000      	b.n	8002a3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002a38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d132      	bne.n	8002aa6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e002      	b.n	8002a4c <inc_lock+0x6c>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d806      	bhi.n	8002a60 <inc_lock+0x80>
 8002a52:	4a29      	ldr	r2, [pc, #164]	@ (8002af8 <inc_lock+0x118>)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f2      	bne.n	8002a46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d101      	bne.n	8002a6a <inc_lock+0x8a>
 8002a66:	2300      	movs	r3, #0
 8002a68:	e040      	b.n	8002aec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4922      	ldr	r1, [pc, #136]	@ (8002af8 <inc_lock+0x118>)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	440b      	add	r3, r1
 8002a76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	491e      	ldr	r1, [pc, #120]	@ (8002af8 <inc_lock+0x118>)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	440b      	add	r3, r1
 8002a84:	3304      	adds	r3, #4
 8002a86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	491a      	ldr	r1, [pc, #104]	@ (8002af8 <inc_lock+0x118>)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	440b      	add	r3, r1
 8002a94:	3308      	adds	r3, #8
 8002a96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002a98:	4a17      	ldr	r2, [pc, #92]	@ (8002af8 <inc_lock+0x118>)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	4413      	add	r3, r2
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d009      	beq.n	8002ac0 <inc_lock+0xe0>
 8002aac:	4a12      	ldr	r2, [pc, #72]	@ (8002af8 <inc_lock+0x118>)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	4413      	add	r3, r2
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <inc_lock+0xe0>
 8002abc:	2300      	movs	r3, #0
 8002abe:	e015      	b.n	8002aec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d108      	bne.n	8002ad8 <inc_lock+0xf8>
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8002af8 <inc_lock+0x118>)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	330c      	adds	r3, #12
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	e001      	b.n	8002adc <inc_lock+0xfc>
 8002ad8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002adc:	4906      	ldr	r1, [pc, #24]	@ (8002af8 <inc_lock+0x118>)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	440b      	add	r3, r1
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3301      	adds	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	200000f0 	.word	0x200000f0

08002afc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d825      	bhi.n	8002b5c <dec_lock+0x60>
		n = Files[i].ctr;
 8002b10:	4a17      	ldr	r2, [pc, #92]	@ (8002b70 <dec_lock+0x74>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	4413      	add	r3, r2
 8002b18:	330c      	adds	r3, #12
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002b1e:	89fb      	ldrh	r3, [r7, #14]
 8002b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b24:	d101      	bne.n	8002b2a <dec_lock+0x2e>
 8002b26:	2300      	movs	r3, #0
 8002b28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <dec_lock+0x3a>
 8002b30:	89fb      	ldrh	r3, [r7, #14]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002b36:	4a0e      	ldr	r2, [pc, #56]	@ (8002b70 <dec_lock+0x74>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	330c      	adds	r3, #12
 8002b40:	89fa      	ldrh	r2, [r7, #14]
 8002b42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002b44:	89fb      	ldrh	r3, [r7, #14]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <dec_lock+0x5a>
 8002b4a:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <dec_lock+0x74>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	4413      	add	r3, r2
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	737b      	strb	r3, [r7, #13]
 8002b5a:	e001      	b.n	8002b60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002b60:	7b7b      	ldrb	r3, [r7, #13]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200000f0 	.word	0x200000f0

08002b74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e010      	b.n	8002ba4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002b82:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb8 <clear_lock+0x44>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4413      	add	r3, r2
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d105      	bne.n	8002b9e <clear_lock+0x2a>
 8002b92:	4a09      	ldr	r2, [pc, #36]	@ (8002bb8 <clear_lock+0x44>)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d9eb      	bls.n	8002b82 <clear_lock+0xe>
	}
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	200000f0 	.word	0x200000f0

08002bbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	78db      	ldrb	r3, [r3, #3]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d034      	beq.n	8002c3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7858      	ldrb	r0, [r3, #1]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002be0:	2301      	movs	r3, #1
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	f7ff fd40 	bl	8002668 <disk_write>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	e022      	b.n	8002c3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	1ad2      	subs	r2, r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d217      	bcs.n	8002c3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	789b      	ldrb	r3, [r3, #2]
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	e010      	b.n	8002c34 <sync_window+0x78>
					wsect += fs->fsize;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4413      	add	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7858      	ldrb	r0, [r3, #1]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002c26:	2301      	movs	r3, #1
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	f7ff fd1d 	bl	8002668 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d8eb      	bhi.n	8002c12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d01b      	beq.n	8002c94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ffad 	bl	8002bbc <sync_window>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d113      	bne.n	8002c94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7858      	ldrb	r0, [r3, #1]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002c76:	2301      	movs	r3, #1
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	f7ff fcd5 	bl	8002628 <disk_read>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff87 	bl	8002bbc <sync_window>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d159      	bne.n	8002d6c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d149      	bne.n	8002d54 <sync_fs+0xb4>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	791b      	ldrb	r3, [r3, #4]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d145      	bne.n	8002d54 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	899b      	ldrh	r3, [r3, #12]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f7ff fda8 	bl	800282a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3338      	adds	r3, #56	@ 0x38
 8002cde:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8002ce2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fd37 	bl	800275a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3338      	adds	r3, #56	@ 0x38
 8002cf0:	4921      	ldr	r1, [pc, #132]	@ (8002d78 <sync_fs+0xd8>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fd4c 	bl	8002790 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3338      	adds	r3, #56	@ 0x38
 8002cfc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8002d00:	491e      	ldr	r1, [pc, #120]	@ (8002d7c <sync_fs+0xdc>)
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fd44 	bl	8002790 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3338      	adds	r3, #56	@ 0x38
 8002d0c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f7ff fd3a 	bl	8002790 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3338      	adds	r3, #56	@ 0x38
 8002d20:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f7ff fd30 	bl	8002790 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7858      	ldrb	r0, [r3, #1]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f7ff fc8d 	bl	8002668 <disk_write>
			fs->fsi_flag = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fca3 	bl	80026a8 <disk_ioctl>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <sync_fs+0xcc>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	41615252 	.word	0x41615252
 8002d7c:	61417272 	.word	0x61417272

08002d80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	3b02      	subs	r3, #2
 8002d8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	3b02      	subs	r3, #2
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d301      	bcc.n	8002da0 <clust2sect+0x20>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e008      	b.n	8002db2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	895b      	ldrh	r3, [r3, #10]
 8002da4:	461a      	mov	r2, r3
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	fb03 f202 	mul.w	r2, r3, r2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	4413      	add	r3, r2
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d904      	bls.n	8002dde <get_fat+0x20>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8002dde:	2301      	movs	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e0ba      	b.n	8002f5a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002de4:	f04f 33ff 	mov.w	r3, #4294967295
 8002de8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	f000 8082 	beq.w	8002ef8 <get_fat+0x13a>
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	f300 80a6 	bgt.w	8002f46 <get_fat+0x188>
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d002      	beq.n	8002e04 <get_fat+0x46>
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d055      	beq.n	8002eae <get_fat+0xf0>
 8002e02:	e0a0      	b.n	8002f46 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	899b      	ldrh	r3, [r3, #12]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e22:	4413      	add	r3, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	6938      	ldr	r0, [r7, #16]
 8002e28:	f7ff ff0c 	bl	8002c44 <move_window>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 808c 	bne.w	8002f4c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60fa      	str	r2, [r7, #12]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	8992      	ldrh	r2, [r2, #12]
 8002e3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e42:	fb01 f202 	mul.w	r2, r1, r2
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	899b      	ldrh	r3, [r3, #12]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e62:	4413      	add	r3, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f7ff feec 	bl	8002c44 <move_window>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d16e      	bne.n	8002f50 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	899b      	ldrh	r3, [r3, #12]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e7e:	fb01 f202 	mul.w	r2, r1, r2
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <get_fat+0xe6>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	e002      	b.n	8002eaa <get_fat+0xec>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eaa:	617b      	str	r3, [r7, #20]
			break;
 8002eac:	e055      	b.n	8002f5a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	899b      	ldrh	r3, [r3, #12]
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4619      	mov	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6938      	ldr	r0, [r7, #16]
 8002ec8:	f7ff febc 	bl	8002c44 <move_window>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d140      	bne.n	8002f54 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	8992      	ldrh	r2, [r2, #12]
 8002ee0:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ee4:	fb00 f202 	mul.w	r2, r0, r2
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fbf9 	bl	80026e4 <ld_word>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	617b      	str	r3, [r7, #20]
			break;
 8002ef6:	e030      	b.n	8002f5a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	899b      	ldrh	r3, [r3, #12]
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6938      	ldr	r0, [r7, #16]
 8002f12:	f7ff fe97 	bl	8002c44 <move_window>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d11d      	bne.n	8002f58 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	8992      	ldrh	r2, [r2, #12]
 8002f2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002f2e:	fb00 f202 	mul.w	r2, r0, r2
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fbec 	bl	8002714 <ld_dword>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002f42:	617b      	str	r3, [r7, #20]
			break;
 8002f44:	e009      	b.n	8002f5a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002f46:	2301      	movs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e006      	b.n	8002f5a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002f4c:	bf00      	nop
 8002f4e:	e004      	b.n	8002f5a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002f50:	bf00      	nop
 8002f52:	e002      	b.n	8002f5a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002f54:	bf00      	nop
 8002f56:	e000      	b.n	8002f5a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002f58:	bf00      	nop
		}
	}

	return val;
 8002f5a:	697b      	ldr	r3, [r7, #20]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b089      	sub	sp, #36	@ 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002f70:	2302      	movs	r3, #2
 8002f72:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	f240 8109 	bls.w	800318e <put_fat+0x22a>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	f080 8103 	bcs.w	800318e <put_fat+0x22a>
		switch (fs->fs_type) {
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	f000 80b6 	beq.w	80030fe <put_fat+0x19a>
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	f300 80fb 	bgt.w	800318e <put_fat+0x22a>
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d003      	beq.n	8002fa4 <put_fat+0x40>
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	f000 8083 	beq.w	80030a8 <put_fat+0x144>
 8002fa2:	e0f4      	b.n	800318e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4413      	add	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	899b      	ldrh	r3, [r3, #12]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f7ff fe3c 	bl	8002c44 <move_window>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002fd0:	7ffb      	ldrb	r3, [r7, #31]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 80d4 	bne.w	8003180 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	61ba      	str	r2, [r7, #24]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	8992      	ldrh	r2, [r2, #12]
 8002fe8:	fbb3 f0f2 	udiv	r0, r3, r2
 8002fec:	fb00 f202 	mul.w	r2, r0, r2
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00d      	beq.n	800301c <put_fat+0xb8>
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b25b      	sxtb	r3, r3
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	b25a      	sxtb	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	b25b      	sxtb	r3, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	b25b      	sxtb	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e001      	b.n	8003020 <put_fat+0xbc>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	899b      	ldrh	r3, [r3, #12]
 8003032:	4619      	mov	r1, r3
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	fbb3 f3f1 	udiv	r3, r3, r1
 800303a:	4413      	add	r3, r2
 800303c:	4619      	mov	r1, r3
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fe00 	bl	8002c44 <move_window>
 8003044:	4603      	mov	r3, r0
 8003046:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003048:	7ffb      	ldrb	r3, [r7, #31]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 809a 	bne.w	8003184 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	899b      	ldrh	r3, [r3, #12]
 800305a:	461a      	mov	r2, r3
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003062:	fb00 f202 	mul.w	r2, r0, r2
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	440b      	add	r3, r1
 800306a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <put_fat+0x11a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e00e      	b.n	800309c <put_fat+0x138>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b25b      	sxtb	r3, r3
 8003084:	f023 030f 	bic.w	r3, r3, #15
 8003088:	b25a      	sxtb	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	b25b      	sxtb	r3, r3
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	b25b      	sxtb	r3, r3
 8003096:	4313      	orrs	r3, r2
 8003098:	b25b      	sxtb	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	70da      	strb	r2, [r3, #3]
			break;
 80030a6:	e072      	b.n	800318e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	899b      	ldrh	r3, [r3, #12]
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	4619      	mov	r1, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80030bc:	4413      	add	r3, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff fdbf 	bl	8002c44 <move_window>
 80030c6:	4603      	mov	r3, r0
 80030c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d15b      	bne.n	8003188 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	8992      	ldrh	r2, [r2, #12]
 80030de:	fbb3 f0f2 	udiv	r0, r3, r2
 80030e2:	fb00 f202 	mul.w	r2, r0, r2
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	b292      	uxth	r2, r2
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fb32 	bl	800275a <st_word>
			fs->wflag = 1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	70da      	strb	r2, [r3, #3]
			break;
 80030fc:	e047      	b.n	800318e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	899b      	ldrh	r3, [r3, #12]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	b29b      	uxth	r3, r3
 800310a:	4619      	mov	r1, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003112:	4413      	add	r3, r2
 8003114:	4619      	mov	r1, r3
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff fd94 	bl	8002c44 <move_window>
 800311c:	4603      	mov	r3, r0
 800311e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003120:	7ffb      	ldrb	r3, [r7, #31]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d132      	bne.n	800318c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	8992      	ldrh	r2, [r2, #12]
 800313a:	fbb3 f0f2 	udiv	r0, r3, r2
 800313e:	fb00 f202 	mul.w	r2, r0, r2
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	440b      	add	r3, r1
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fae4 	bl	8002714 <ld_dword>
 800314c:	4603      	mov	r3, r0
 800314e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003152:	4323      	orrs	r3, r4
 8003154:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	8992      	ldrh	r2, [r2, #12]
 8003164:	fbb3 f0f2 	udiv	r0, r3, r2
 8003168:	fb00 f202 	mul.w	r2, r0, r2
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	440b      	add	r3, r1
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fb0c 	bl	8002790 <st_dword>
			fs->wflag = 1;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	70da      	strb	r2, [r3, #3]
			break;
 800317e:	e006      	b.n	800318e <put_fat+0x22a>
			if (res != FR_OK) break;
 8003180:	bf00      	nop
 8003182:	e004      	b.n	800318e <put_fat+0x22a>
			if (res != FR_OK) break;
 8003184:	bf00      	nop
 8003186:	e002      	b.n	800318e <put_fat+0x22a>
			if (res != FR_OK) break;
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <put_fat+0x22a>
			if (res != FR_OK) break;
 800318c:	bf00      	nop
		}
	}
	return res;
 800318e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3724      	adds	r7, #36	@ 0x24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}

08003198 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d904      	bls.n	80031be <remove_chain+0x26>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d301      	bcc.n	80031c2 <remove_chain+0x2a>
 80031be:	2302      	movs	r3, #2
 80031c0:	e04b      	b.n	800325a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	69b8      	ldr	r0, [r7, #24]
 80031d0:	f7ff fec8 	bl	8002f64 <put_fat>
 80031d4:	4603      	mov	r3, r0
 80031d6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80031d8:	7ffb      	ldrb	r3, [r7, #31]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <remove_chain+0x4a>
 80031de:	7ffb      	ldrb	r3, [r7, #31]
 80031e0:	e03b      	b.n	800325a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff fdea 	bl	8002dbe <get_fat>
 80031ea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d031      	beq.n	8003256 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <remove_chain+0x64>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e02e      	b.n	800325a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d101      	bne.n	8003208 <remove_chain+0x70>
 8003204:	2301      	movs	r3, #1
 8003206:	e028      	b.n	800325a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003208:	2200      	movs	r2, #0
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	69b8      	ldr	r0, [r7, #24]
 800320e:	f7ff fea9 	bl	8002f64 <put_fat>
 8003212:	4603      	mov	r3, r0
 8003214:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003216:	7ffb      	ldrb	r3, [r7, #31]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <remove_chain+0x88>
 800321c:	7ffb      	ldrb	r3, [r7, #31]
 800321e:	e01c      	b.n	800325a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	3b02      	subs	r3, #2
 800322a:	429a      	cmp	r2, r3
 800322c:	d20b      	bcs.n	8003246 <remove_chain+0xae>
			fs->free_clst++;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	791b      	ldrb	r3, [r3, #4]
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	b2da      	uxtb	r2, r3
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d3c6      	bcc.n	80031e2 <remove_chain+0x4a>
 8003254:	e000      	b.n	8003258 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003256:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b088      	sub	sp, #32
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10d      	bne.n	8003294 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <create_chain+0x2c>
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	429a      	cmp	r2, r3
 800328c:	d31b      	bcc.n	80032c6 <create_chain+0x64>
 800328e:	2301      	movs	r3, #1
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	e018      	b.n	80032c6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fd91 	bl	8002dbe <get_fat>
 800329c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d801      	bhi.n	80032a8 <create_chain+0x46>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e070      	b.n	800338a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d101      	bne.n	80032b4 <create_chain+0x52>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	e06a      	b.n	800338a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d201      	bcs.n	80032c2 <create_chain+0x60>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	e063      	b.n	800338a <create_chain+0x128>
		scl = clst;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d307      	bcc.n	80032ea <create_chain+0x88>
				ncl = 2;
 80032da:	2302      	movs	r3, #2
 80032dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d901      	bls.n	80032ea <create_chain+0x88>
 80032e6:	2300      	movs	r3, #0
 80032e8:	e04f      	b.n	800338a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80032ea:	69f9      	ldr	r1, [r7, #28]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fd66 	bl	8002dbe <get_fat>
 80032f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00e      	beq.n	8003318 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d003      	beq.n	8003308 <create_chain+0xa6>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d101      	bne.n	800330c <create_chain+0xaa>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	e03e      	b.n	800338a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	429a      	cmp	r2, r3
 8003312:	d1da      	bne.n	80032ca <create_chain+0x68>
 8003314:	2300      	movs	r3, #0
 8003316:	e038      	b.n	800338a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003318:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	69f9      	ldr	r1, [r7, #28]
 8003320:	6938      	ldr	r0, [r7, #16]
 8003322:	f7ff fe1f 	bl	8002f64 <put_fat>
 8003326:	4603      	mov	r3, r0
 8003328:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <create_chain+0xe2>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	6938      	ldr	r0, [r7, #16]
 800333c:	f7ff fe12 	bl	8002f64 <put_fat>
 8003340:	4603      	mov	r3, r0
 8003342:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d116      	bne.n	8003378 <create_chain+0x116>
		fs->last_clst = ncl;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	3b02      	subs	r3, #2
 800335a:	429a      	cmp	r2, r3
 800335c:	d804      	bhi.n	8003368 <create_chain+0x106>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	1e5a      	subs	r2, r3, #1
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	791b      	ldrb	r3, [r3, #4]
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	b2da      	uxtb	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	711a      	strb	r2, [r3, #4]
 8003376:	e007      	b.n	8003388 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <create_chain+0x122>
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	e000      	b.n	8003386 <create_chain+0x124>
 8003384:	2301      	movs	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003388:	69fb      	ldr	r3, [r7, #28]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	3304      	adds	r3, #4
 80033a8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	899b      	ldrh	r3, [r3, #12]
 80033ae:	461a      	mov	r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	8952      	ldrh	r2, [r2, #10]
 80033ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80033be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1d1a      	adds	r2, r3, #4
 80033c4:	613a      	str	r2, [r7, #16]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <clmt_clust+0x42>
 80033d0:	2300      	movs	r3, #0
 80033d2:	e010      	b.n	80033f6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d307      	bcc.n	80033ec <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	3304      	adds	r3, #4
 80033e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80033ea:	e7e9      	b.n	80033c0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80033ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	4413      	add	r3, r2
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003418:	d204      	bcs.n	8003424 <dir_sdi+0x22>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003424:	2302      	movs	r3, #2
 8003426:	e071      	b.n	800350c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <dir_sdi+0x46>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d902      	bls.n	8003448 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	8912      	ldrh	r2, [r2, #8]
 8003456:	4293      	cmp	r3, r2
 8003458:	d301      	bcc.n	800345e <dir_sdi+0x5c>
 800345a:	2302      	movs	r3, #2
 800345c:	e056      	b.n	800350c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	61da      	str	r2, [r3, #28]
 8003466:	e02d      	b.n	80034c4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	895b      	ldrh	r3, [r3, #10]
 800346c:	461a      	mov	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	899b      	ldrh	r3, [r3, #12]
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003478:	e019      	b.n	80034ae <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6979      	ldr	r1, [r7, #20]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fc9d 	bl	8002dbe <get_fat>
 8003484:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d101      	bne.n	8003492 <dir_sdi+0x90>
 800348e:	2301      	movs	r3, #1
 8003490:	e03c      	b.n	800350c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d904      	bls.n	80034a2 <dir_sdi+0xa0>
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d301      	bcc.n	80034a6 <dir_sdi+0xa4>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e032      	b.n	800350c <dir_sdi+0x10a>
			ofs -= csz;
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d2e1      	bcs.n	800347a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80034b6:	6979      	ldr	r1, [r7, #20]
 80034b8:	6938      	ldr	r0, [r7, #16]
 80034ba:	f7ff fc61 	bl	8002d80 <clust2sect>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <dir_sdi+0xd4>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e01a      	b.n	800350c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	899b      	ldrh	r3, [r3, #12]
 80034de:	4619      	mov	r1, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e6:	441a      	add	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	899b      	ldrh	r3, [r3, #12]
 80034f6:	461a      	mov	r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80034fe:	fb00 f202 	mul.w	r2, r0, r2
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	18ca      	adds	r2, r1, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	3320      	adds	r3, #32
 800352a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <dir_next+0x28>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800353a:	d301      	bcc.n	8003540 <dir_next+0x2c>
 800353c:	2304      	movs	r3, #4
 800353e:	e0bb      	b.n	80036b8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	899b      	ldrh	r3, [r3, #12]
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	fbb3 f1f2 	udiv	r1, r3, r2
 800354c:	fb01 f202 	mul.w	r2, r1, r2
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 809d 	bne.w	8003692 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	8912      	ldrh	r2, [r2, #8]
 8003572:	4293      	cmp	r3, r2
 8003574:	f0c0 808d 	bcc.w	8003692 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	61da      	str	r2, [r3, #28]
 800357e:	2304      	movs	r3, #4
 8003580:	e09a      	b.n	80036b8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	899b      	ldrh	r3, [r3, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	fbb3 f3f2 	udiv	r3, r3, r2
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	8952      	ldrh	r2, [r2, #10]
 8003592:	3a01      	subs	r2, #1
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d17b      	bne.n	8003692 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f7ff fc0b 	bl	8002dbe <get_fat>
 80035a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d801      	bhi.n	80035b4 <dir_next+0xa0>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e081      	b.n	80036b8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d101      	bne.n	80035c0 <dir_next+0xac>
 80035bc:	2301      	movs	r3, #1
 80035be:	e07b      	b.n	80036b8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d359      	bcc.n	800367e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
 80035d6:	2304      	movs	r3, #4
 80035d8:	e06e      	b.n	80036b8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f7ff fe3d 	bl	8003262 <create_chain>
 80035e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <dir_next+0xe0>
 80035f0:	2307      	movs	r3, #7
 80035f2:	e061      	b.n	80036b8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <dir_next+0xea>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e05c      	b.n	80036b8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d101      	bne.n	800360a <dir_next+0xf6>
 8003606:	2301      	movs	r3, #1
 8003608:	e056      	b.n	80036b8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff fad6 	bl	8002bbc <sync_window>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <dir_next+0x106>
 8003616:	2301      	movs	r3, #1
 8003618:	e04e      	b.n	80036b8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	899b      	ldrh	r3, [r3, #12]
 8003624:	461a      	mov	r2, r3
 8003626:	2100      	movs	r1, #0
 8003628:	f7ff f8ff 	bl	800282a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7ff fba4 	bl	8002d80 <clust2sect>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	635a      	str	r2, [r3, #52]	@ 0x34
 800363e:	e012      	b.n	8003666 <dir_next+0x152>
						fs->wflag = 1;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff fab8 	bl	8002bbc <sync_window>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <dir_next+0x142>
 8003652:	2301      	movs	r3, #1
 8003654:	e030      	b.n	80036b8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	3301      	adds	r3, #1
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	635a      	str	r2, [r3, #52]	@ 0x34
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	895b      	ldrh	r3, [r3, #10]
 800366a:	461a      	mov	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4293      	cmp	r3, r2
 8003670:	d3e6      	bcc.n	8003640 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad2      	subs	r2, r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003684:	6979      	ldr	r1, [r7, #20]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7ff fb7a 	bl	8002d80 <clust2sect>
 800368c:	4602      	mov	r2, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	899b      	ldrh	r3, [r3, #12]
 80036a2:	461a      	mov	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80036aa:	fb00 f202 	mul.w	r2, r0, r2
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	18ca      	adds	r2, r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80036d0:	2100      	movs	r1, #0
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fe95 	bl	8003402 <dir_sdi>
 80036d8:	4603      	mov	r3, r0
 80036da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d12b      	bne.n	800373a <dir_alloc+0x7a>
		n = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff faa9 	bl	8002c44 <move_window>
 80036f2:	4603      	mov	r3, r0
 80036f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11d      	bne.n	8003738 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2be5      	cmp	r3, #229	@ 0xe5
 8003704:	d004      	beq.n	8003710 <dir_alloc+0x50>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3301      	adds	r3, #1
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d102      	bne.n	8003724 <dir_alloc+0x64>
 800371e:	e00c      	b.n	800373a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003724:	2101      	movs	r1, #1
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fef4 	bl	8003514 <dir_next>
 800372c:	4603      	mov	r3, r0
 800372e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0d7      	beq.n	80036e6 <dir_alloc+0x26>
 8003736:	e000      	b.n	800373a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003738:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d101      	bne.n	8003744 <dir_alloc+0x84>
 8003740:	2307      	movs	r3, #7
 8003742:	75fb      	strb	r3, [r7, #23]
	return res;
 8003744:	7dfb      	ldrb	r3, [r7, #23]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	331a      	adds	r3, #26
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe ffc1 	bl	80026e4 <ld_word>
 8003762:	4603      	mov	r3, r0
 8003764:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d109      	bne.n	8003782 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	3314      	adds	r3, #20
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe ffb6 	bl	80026e4 <ld_word>
 8003778:	4603      	mov	r3, r0
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	331a      	adds	r3, #26
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	b292      	uxth	r2, r2
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe ffd9 	bl	800275a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d109      	bne.n	80037c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f103 0214 	add.w	r2, r3, #20
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	4610      	mov	r0, r2
 80037c0:	f7fe ffcb 	bl	800275a <st_word>
	}
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	331a      	adds	r3, #26
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe ff82 	bl	80026e4 <ld_word>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <cmp_lfn+0x1e>
 80037e6:	2300      	movs	r3, #0
 80037e8:	e059      	b.n	800389e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037f2:	1e5a      	subs	r2, r3, #1
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003800:	2301      	movs	r3, #1
 8003802:	81fb      	strh	r3, [r7, #14]
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e033      	b.n	8003872 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800380a:	4a27      	ldr	r2, [pc, #156]	@ (80038a8 <cmp_lfn+0xdc>)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4413      	add	r3, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe ff63 	bl	80026e4 <ld_word>
 800381e:	4603      	mov	r3, r0
 8003820:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003822:	89fb      	ldrh	r3, [r7, #14]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01a      	beq.n	800385e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2bfe      	cmp	r3, #254	@ 0xfe
 800382c:	d812      	bhi.n	8003854 <cmp_lfn+0x88>
 800382e:	89bb      	ldrh	r3, [r7, #12]
 8003830:	4618      	mov	r0, r3
 8003832:	f001 ffc3 	bl	80057bc <ff_wtoupper>
 8003836:	4603      	mov	r3, r0
 8003838:	461c      	mov	r4, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	617a      	str	r2, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f001 ffb7 	bl	80057bc <ff_wtoupper>
 800384e:	4603      	mov	r3, r0
 8003850:	429c      	cmp	r4, r3
 8003852:	d001      	beq.n	8003858 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8003854:	2300      	movs	r3, #0
 8003856:	e022      	b.n	800389e <cmp_lfn+0xd2>
			}
			wc = uc;
 8003858:	89bb      	ldrh	r3, [r7, #12]
 800385a:	81fb      	strh	r3, [r7, #14]
 800385c:	e006      	b.n	800386c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800385e:	89bb      	ldrh	r3, [r7, #12]
 8003860:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003864:	4293      	cmp	r3, r2
 8003866:	d001      	beq.n	800386c <cmp_lfn+0xa0>
 8003868:	2300      	movs	r3, #0
 800386a:	e018      	b.n	800389e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	3301      	adds	r3, #1
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d9c8      	bls.n	800380a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <cmp_lfn+0xd0>
 8003884:	89fb      	ldrh	r3, [r7, #14]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <cmp_lfn+0xd0>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <cmp_lfn+0xd0>
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800389c:	2301      	movs	r3, #1
}
 800389e:	4618      	mov	r0, r3
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd90      	pop	{r4, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	08005a50 	.word	0x08005a50

080038ac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	4611      	mov	r1, r2
 80038b8:	461a      	mov	r2, r3
 80038ba:	460b      	mov	r3, r1
 80038bc:	71fb      	strb	r3, [r7, #7]
 80038be:	4613      	mov	r3, r2
 80038c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	330d      	adds	r3, #13
 80038c6:	79ba      	ldrb	r2, [r7, #6]
 80038c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	330b      	adds	r3, #11
 80038ce:	220f      	movs	r2, #15
 80038d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	330c      	adds	r3, #12
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	331a      	adds	r3, #26
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe ff3a 	bl	800275a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	82fb      	strh	r3, [r7, #22]
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80038fe:	8afb      	ldrh	r3, [r7, #22]
 8003900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003904:	4293      	cmp	r3, r2
 8003906:	d007      	beq.n	8003918 <put_lfn+0x6c>
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	61fa      	str	r2, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003918:	4a17      	ldr	r2, [pc, #92]	@ (8003978 <put_lfn+0xcc>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4413      	add	r3, r2
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4413      	add	r3, r2
 8003926:	8afa      	ldrh	r2, [r7, #22]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe ff15 	bl	800275a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003930:	8afb      	ldrh	r3, [r7, #22]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <put_lfn+0x90>
 8003936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800393a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	3301      	adds	r3, #1
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	d9da      	bls.n	80038fe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003948:	8afb      	ldrh	r3, [r7, #22]
 800394a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800394e:	4293      	cmp	r3, r2
 8003950:	d006      	beq.n	8003960 <put_lfn+0xb4>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <put_lfn+0xbc>
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003966:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	79fa      	ldrb	r2, [r7, #7]
 800396c:	701a      	strb	r2, [r3, #0]
}
 800396e:	bf00      	nop
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	08005a50 	.word	0x08005a50

0800397c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	@ 0x30
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800398a:	220b      	movs	r2, #11
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7fe ff2a 	bl	80027e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d92b      	bls.n	80039f2 <gen_numname+0x76>
		sr = seq;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800399e:	e022      	b.n	80039e6 <gen_numname+0x6a>
			wc = *lfn++;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80039aa:	2300      	movs	r3, #0
 80039ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ae:	e017      	b.n	80039e0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005a      	lsls	r2, r3, #1
 80039b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80039be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <gen_numname+0x5e>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80039d4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80039d8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	3301      	adds	r3, #1
 80039de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	d9e4      	bls.n	80039b0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1d8      	bne.n	80039a0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80039f2:	2307      	movs	r3, #7
 80039f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3330      	adds	r3, #48	@ 0x30
 8003a02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8003a06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a0a:	2b39      	cmp	r3, #57	@ 0x39
 8003a0c:	d904      	bls.n	8003a18 <gen_numname+0x9c>
 8003a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a12:	3307      	adds	r3, #7
 8003a14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	1e5a      	subs	r2, r3, #1
 8003a1c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a1e:	3330      	adds	r3, #48	@ 0x30
 8003a20:	443b      	add	r3, r7
 8003a22:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003a26:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1df      	bne.n	80039f6 <gen_numname+0x7a>
	ns[i] = '~';
 8003a36:	f107 0214 	add.w	r2, r7, #20
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	4413      	add	r3, r2
 8003a3e:	227e      	movs	r2, #126	@ 0x7e
 8003a40:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a46:	e002      	b.n	8003a4e <gen_numname+0xd2>
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d205      	bcs.n	8003a62 <gen_numname+0xe6>
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	4413      	add	r3, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d1f2      	bne.n	8003a48 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a64:	2b07      	cmp	r3, #7
 8003a66:	d807      	bhi.n	8003a78 <gen_numname+0xfc>
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a6e:	3330      	adds	r3, #48	@ 0x30
 8003a70:	443b      	add	r3, r7
 8003a72:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8003a76:	e000      	b.n	8003a7a <gen_numname+0xfe>
 8003a78:	2120      	movs	r1, #32
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	460a      	mov	r2, r1
 8003a86:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	d9e9      	bls.n	8003a62 <gen_numname+0xe6>
}
 8003a8e:	bf00      	nop
 8003a90:	bf00      	nop
 8003a92:	3730      	adds	r7, #48	@ 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8003aa4:	230b      	movs	r3, #11
 8003aa6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	0852      	lsrs	r2, r2, #1
 8003aae:	01db      	lsls	r3, r3, #7
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	1c59      	adds	r1, r3, #1
 8003ab8:	6079      	str	r1, [r7, #4]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	4413      	add	r3, r2
 8003abe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ed      	bne.n	8003aa8 <sum_sfn+0x10>
	return sum;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003ae8:	2100      	movs	r1, #0
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fc89 	bl	8003402 <dir_sdi>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <dir_find+0x24>
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	e0a9      	b.n	8003c52 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003afe:	23ff      	movs	r3, #255	@ 0xff
 8003b00:	753b      	strb	r3, [r7, #20]
 8003b02:	7d3b      	ldrb	r3, [r7, #20]
 8003b04:	757b      	strb	r3, [r7, #21]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4619      	mov	r1, r3
 8003b14:	6938      	ldr	r0, [r7, #16]
 8003b16:	f7ff f895 	bl	8002c44 <move_window>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f040 8090 	bne.w	8003c46 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003b2e:	7dbb      	ldrb	r3, [r7, #22]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <dir_find+0x60>
 8003b34:	2304      	movs	r3, #4
 8003b36:	75fb      	strb	r3, [r7, #23]
 8003b38:	e08a      	b.n	8003c50 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	330b      	adds	r3, #11
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003b4e:	7dbb      	ldrb	r3, [r7, #22]
 8003b50:	2be5      	cmp	r3, #229	@ 0xe5
 8003b52:	d007      	beq.n	8003b64 <dir_find+0x8a>
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <dir_find+0x98>
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b0f      	cmp	r3, #15
 8003b62:	d006      	beq.n	8003b72 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003b64:	23ff      	movs	r3, #255	@ 0xff
 8003b66:	757b      	strb	r3, [r7, #21]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b70:	e05e      	b.n	8003c30 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b0f      	cmp	r3, #15
 8003b76:	d136      	bne.n	8003be6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d154      	bne.n	8003c30 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003b86:	7dbb      	ldrb	r3, [r7, #22]
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	7b5b      	ldrb	r3, [r3, #13]
 8003b96:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003b98:	7dbb      	ldrb	r3, [r7, #22]
 8003b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b9e:	75bb      	strb	r3, [r7, #22]
 8003ba0:	7dbb      	ldrb	r3, [r7, #22]
 8003ba2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003bac:	7dba      	ldrb	r2, [r7, #22]
 8003bae:	7d7b      	ldrb	r3, [r7, #21]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d115      	bne.n	8003be0 <dir_find+0x106>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	330d      	adds	r3, #13
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	7d3a      	ldrb	r2, [r7, #20]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10e      	bne.n	8003be0 <dir_find+0x106>
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f7ff fdfd 	bl	80037cc <cmp_lfn>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <dir_find+0x106>
 8003bd8:	7d7b      	ldrb	r3, [r7, #21]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e000      	b.n	8003be2 <dir_find+0x108>
 8003be0:	23ff      	movs	r3, #255	@ 0xff
 8003be2:	757b      	strb	r3, [r7, #21]
 8003be4:	e024      	b.n	8003c30 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003be6:	7d7b      	ldrb	r3, [r7, #21]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <dir_find+0x126>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff51 	bl	8003a98 <sum_sfn>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	7d3b      	ldrb	r3, [r7, #20]
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d024      	beq.n	8003c4a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <dir_find+0x14a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a18      	ldr	r0, [r3, #32]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3324      	adds	r3, #36	@ 0x24
 8003c16:	220b      	movs	r2, #11
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f7fe fe21 	bl	8002860 <mem_cmp>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d014      	beq.n	8003c4e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003c24:	23ff      	movs	r3, #255	@ 0xff
 8003c26:	757b      	strb	r3, [r7, #21]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003c30:	2100      	movs	r1, #0
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fc6e 	bl	8003514 <dir_next>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f43f af65 	beq.w	8003b0e <dir_find+0x34>
 8003c44:	e004      	b.n	8003c50 <dir_find+0x176>
		if (res != FR_OK) break;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003c4e:	bf00      	nop

	return res;
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	@ 0x30
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003c70:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <dir_register+0x20>
 8003c78:	2306      	movs	r3, #6
 8003c7a:	e0e0      	b.n	8003e3e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c80:	e002      	b.n	8003c88 <dir_register+0x2c>
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	3301      	adds	r3, #1
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f4      	bne.n	8003c82 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8003c9e:	f107 030c 	add.w	r3, r7, #12
 8003ca2:	220c      	movs	r2, #12
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe fd9f 	bl	80027e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d032      	beq.n	8003d1a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2240      	movs	r2, #64	@ 0x40
 8003cb8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cc0:	e016      	b.n	8003cf0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	f107 010c 	add.w	r1, r7, #12
 8003cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd2:	f7ff fe53 	bl	800397c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff feff 	bl	8003ada <dir_find>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8003ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8003cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cec:	3301      	adds	r3, #1
 8003cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	2b63      	cmp	r3, #99	@ 0x63
 8003cf4:	d9e5      	bls.n	8003cc2 <dir_register+0x66>
 8003cf6:	e000      	b.n	8003cfa <dir_register+0x9e>
			if (res != FR_OK) break;
 8003cf8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfc:	2b64      	cmp	r3, #100	@ 0x64
 8003cfe:	d101      	bne.n	8003d04 <dir_register+0xa8>
 8003d00:	2307      	movs	r3, #7
 8003d02:	e09c      	b.n	8003e3e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003d04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d002      	beq.n	8003d12 <dir_register+0xb6>
 8003d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d10:	e095      	b.n	8003e3e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8003d12:	7dfa      	ldrb	r2, [r7, #23]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <dir_register+0xd8>
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	330c      	adds	r3, #12
 8003d28:	4a47      	ldr	r2, [pc, #284]	@ (8003e48 <dir_register+0x1ec>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	089b      	lsrs	r3, r3, #2
 8003d30:	3301      	adds	r3, #1
 8003d32:	e000      	b.n	8003d36 <dir_register+0xda>
 8003d34:	2301      	movs	r3, #1
 8003d36:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003d38:	6a39      	ldr	r1, [r7, #32]
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fcc0 	bl	80036c0 <dir_alloc>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003d46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d148      	bne.n	8003de0 <dir_register+0x184>
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	623b      	str	r3, [r7, #32]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d042      	beq.n	8003de0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	015b      	lsls	r3, r3, #5
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff fb4b 	bl	8003402 <dir_sdi>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8003d72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d132      	bne.n	8003de0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3324      	adds	r3, #36	@ 0x24
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fe8a 	bl	8003a98 <sum_sfn>
 8003d84:	4603      	mov	r3, r0
 8003d86:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	69f8      	ldr	r0, [r7, #28]
 8003d90:	f7fe ff58 	bl	8002c44 <move_window>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8003d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d11d      	bne.n	8003dde <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	6918      	ldr	r0, [r3, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a19      	ldr	r1, [r3, #32]
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	7efb      	ldrb	r3, [r7, #27]
 8003db0:	f7ff fd7c 	bl	80038ac <put_lfn>
				fs->wflag = 1;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2201      	movs	r2, #1
 8003db8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003dba:	2100      	movs	r1, #0
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fba9 	bl	8003514 <dir_next>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8003dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <dir_register+0x184>
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1d5      	bne.n	8003d88 <dir_register+0x12c>
 8003ddc:	e000      	b.n	8003de0 <dir_register+0x184>
				if (res != FR_OK) break;
 8003dde:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003de0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d128      	bne.n	8003e3a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4619      	mov	r1, r3
 8003dee:	69f8      	ldr	r0, [r7, #28]
 8003df0:	f7fe ff28 	bl	8002c44 <move_window>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8003dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d11b      	bne.n	8003e3a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	2220      	movs	r2, #32
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fd0d 	bl	800282a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a18      	ldr	r0, [r3, #32]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3324      	adds	r3, #36	@ 0x24
 8003e18:	220b      	movs	r2, #11
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f7fe fce4 	bl	80027e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	f002 0218 	and.w	r2, r2, #24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2201      	movs	r2, #1
 8003e38:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3730      	adds	r7, #48	@ 0x30
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	4ec4ec4f 	.word	0x4ec4ec4f

08003e4c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	@ 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	61ba      	str	r2, [r7, #24]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4413      	add	r3, r2
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8003e7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e7c:	2b1f      	cmp	r3, #31
 8003e7e:	d940      	bls.n	8003f02 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8003e80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e82:	2b2f      	cmp	r3, #47	@ 0x2f
 8003e84:	d006      	beq.n	8003e94 <create_name+0x48>
 8003e86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e88:	2b5c      	cmp	r3, #92	@ 0x5c
 8003e8a:	d110      	bne.n	8003eae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003e8c:	e002      	b.n	8003e94 <create_name+0x48>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	4413      	add	r3, r2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8003e9e:	d0f6      	beq.n	8003e8e <create_name+0x42>
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b5c      	cmp	r3, #92	@ 0x5c
 8003eaa:	d0f0      	beq.n	8003e8e <create_name+0x42>
			break;
 8003eac:	e02a      	b.n	8003f04 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2bfe      	cmp	r3, #254	@ 0xfe
 8003eb2:	d901      	bls.n	8003eb8 <create_name+0x6c>
 8003eb4:	2306      	movs	r3, #6
 8003eb6:	e17d      	b.n	80041b4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003eb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003ebe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 fc3e 	bl	8005744 <ff_convert>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003ecc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <create_name+0x8a>
 8003ed2:	2306      	movs	r3, #6
 8003ed4:	e16e      	b.n	80041b4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003ed6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ed8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003eda:	d809      	bhi.n	8003ef0 <create_name+0xa4>
 8003edc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ede:	4619      	mov	r1, r3
 8003ee0:	488d      	ldr	r0, [pc, #564]	@ (8004118 <create_name+0x2cc>)
 8003ee2:	f7fe fce4 	bl	80028ae <chk_chr>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <create_name+0xa4>
 8003eec:	2306      	movs	r3, #6
 8003eee:	e161      	b.n	80041b4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	617a      	str	r2, [r7, #20]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003efe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8003f00:	e7b4      	b.n	8003e6c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8003f02:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	441a      	add	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003f0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f10:	2b1f      	cmp	r3, #31
 8003f12:	d801      	bhi.n	8003f18 <create_name+0xcc>
 8003f14:	2304      	movs	r3, #4
 8003f16:	e000      	b.n	8003f1a <create_name+0xce>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003f1e:	e011      	b.n	8003f44 <create_name+0xf8>
		w = lfn[di - 1];
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8003f26:	3b01      	subs	r3, #1
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8003f32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d002      	beq.n	8003f3e <create_name+0xf2>
 8003f38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f3c:	d106      	bne.n	8003f4c <create_name+0x100>
		di--;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ea      	bne.n	8003f20 <create_name+0xd4>
 8003f4a:	e000      	b.n	8003f4e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8003f4c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	2200      	movs	r2, #0
 8003f58:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <create_name+0x118>
 8003f60:	2306      	movs	r3, #6
 8003f62:	e127      	b.n	80041b4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3324      	adds	r3, #36	@ 0x24
 8003f68:	220b      	movs	r2, #11
 8003f6a:	2120      	movs	r1, #32
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fc5c 	bl	800282a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e002      	b.n	8003f7e <create_name+0x132>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4413      	add	r3, r2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d0f5      	beq.n	8003f78 <create_name+0x12c>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f98:	d0ee      	beq.n	8003f78 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <create_name+0x168>
 8003fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fa4:	f043 0303 	orr.w	r3, r3, #3
 8003fa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003fac:	e002      	b.n	8003fb4 <create_name+0x168>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <create_name+0x182>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fcc:	d1ef      	bne.n	8003fae <create_name+0x162>

	i = b = 0; ni = 8;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	623b      	str	r3, [r7, #32]
 8003fd8:	2308      	movs	r3, #8
 8003fda:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	61ba      	str	r2, [r7, #24]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8003fec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8090 	beq.w	8004114 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003ff4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d006      	beq.n	8004008 <create_name+0x1bc>
 8003ffa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ffc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ffe:	d10a      	bne.n	8004016 <create_name+0x1ca>
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d006      	beq.n	8004016 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800400c:	f043 0303 	orr.w	r3, r3, #3
 8004010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004014:	e07d      	b.n	8004112 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004016:	6a3a      	ldr	r2, [r7, #32]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	429a      	cmp	r2, r3
 800401c:	d203      	bcs.n	8004026 <create_name+0x1da>
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	429a      	cmp	r2, r3
 8004024:	d123      	bne.n	800406e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b0b      	cmp	r3, #11
 800402a:	d106      	bne.n	800403a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800402c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004030:	f043 0303 	orr.w	r3, r3, #3
 8004034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004038:	e075      	b.n	8004126 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	429a      	cmp	r2, r3
 8004040:	d005      	beq.n	800404e <create_name+0x202>
 8004042:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004046:	f043 0303 	orr.w	r3, r3, #3
 800404a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	429a      	cmp	r2, r3
 8004054:	d866      	bhi.n	8004124 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	2308      	movs	r3, #8
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	230b      	movs	r3, #11
 8004060:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800406c:	e051      	b.n	8004112 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800406e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004070:	2b7f      	cmp	r3, #127	@ 0x7f
 8004072:	d914      	bls.n	800409e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004074:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f001 fb63 	bl	8005744 <ff_convert>
 800407e:	4603      	mov	r3, r0
 8004080:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004082:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	d004      	beq.n	8004092 <create_name+0x246>
 8004088:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800408a:	3b80      	subs	r3, #128	@ 0x80
 800408c:	4a23      	ldr	r2, [pc, #140]	@ (800411c <create_name+0x2d0>)
 800408e:	5cd3      	ldrb	r3, [r2, r3]
 8004090:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004096:	f043 0302 	orr.w	r3, r3, #2
 800409a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800409e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <create_name+0x268>
 80040a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040a6:	4619      	mov	r1, r3
 80040a8:	481d      	ldr	r0, [pc, #116]	@ (8004120 <create_name+0x2d4>)
 80040aa:	f7fe fc00 	bl	80028ae <chk_chr>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80040b4:	235f      	movs	r3, #95	@ 0x5f
 80040b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80040b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040bc:	f043 0303 	orr.w	r3, r3, #3
 80040c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80040c4:	e01b      	b.n	80040fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80040c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040c8:	2b40      	cmp	r3, #64	@ 0x40
 80040ca:	d909      	bls.n	80040e0 <create_name+0x294>
 80040cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040ce:	2b5a      	cmp	r3, #90	@ 0x5a
 80040d0:	d806      	bhi.n	80040e0 <create_name+0x294>
					b |= 2;
 80040d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80040de:	e00e      	b.n	80040fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80040e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040e2:	2b60      	cmp	r3, #96	@ 0x60
 80040e4:	d90b      	bls.n	80040fe <create_name+0x2b2>
 80040e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040e8:	2b7a      	cmp	r3, #122	@ 0x7a
 80040ea:	d808      	bhi.n	80040fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80040ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80040f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040fa:	3b20      	subs	r3, #32
 80040fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	623a      	str	r2, [r7, #32]
 8004104:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004106:	b2d1      	uxtb	r1, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	460a      	mov	r2, r1
 800410e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004112:	e763      	b.n	8003fdc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004114:	bf00      	nop
 8004116:	e006      	b.n	8004126 <create_name+0x2da>
 8004118:	08005970 	.word	0x08005970
 800411c:	080059d0 	.word	0x080059d0
 8004120:	0800597c 	.word	0x0800597c
			if (si > di) break;			/* No extension */
 8004124:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800412c:	2be5      	cmp	r3, #229	@ 0xe5
 800412e:	d103      	bne.n	8004138 <create_name+0x2ec>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2205      	movs	r2, #5
 8004134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b08      	cmp	r3, #8
 800413c:	d104      	bne.n	8004148 <create_name+0x2fc>
 800413e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d005      	beq.n	8004160 <create_name+0x314>
 8004154:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b03      	cmp	r3, #3
 800415e:	d105      	bne.n	800416c <create_name+0x320>
 8004160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800416c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d117      	bne.n	80041a8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <create_name+0x344>
 8004184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004188:	f043 0310 	orr.w	r3, r3, #16
 800418c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004190:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b04      	cmp	r3, #4
 800419a:	d105      	bne.n	80041a8 <create_name+0x35c>
 800419c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041a0:	f043 0308 	orr.w	r3, r3, #8
 80041a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80041ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80041b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3728      	adds	r7, #40	@ 0x28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80041d0:	e002      	b.n	80041d8 <follow_path+0x1c>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80041de:	d0f8      	beq.n	80041d2 <follow_path+0x16>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80041e6:	d0f4      	beq.n	80041d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b1f      	cmp	r3, #31
 80041f4:	d80a      	bhi.n	800420c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2280      	movs	r2, #128	@ 0x80
 80041fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80041fe:	2100      	movs	r1, #0
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff f8fe 	bl	8003402 <dir_sdi>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]
 800420a:	e048      	b.n	800429e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800420c:	463b      	mov	r3, r7
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fe1b 	bl	8003e4c <create_name>
 8004216:	4603      	mov	r3, r0
 8004218:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d139      	bne.n	8004294 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fc5a 	bl	8003ada <dir_find>
 8004226:	4603      	mov	r3, r0
 8004228:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004230:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b04      	cmp	r3, #4
 800423c:	d12c      	bne.n	8004298 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800423e:	7afb      	ldrb	r3, [r7, #11]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d127      	bne.n	8004298 <follow_path+0xdc>
 8004248:	2305      	movs	r3, #5
 800424a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800424c:	e024      	b.n	8004298 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800424e:	7afb      	ldrb	r3, [r7, #11]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d121      	bne.n	800429c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	799b      	ldrb	r3, [r3, #6]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004264:	2305      	movs	r3, #5
 8004266:	75fb      	strb	r3, [r7, #23]
 8004268:	e019      	b.n	800429e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	8992      	ldrh	r2, [r2, #12]
 8004278:	fbb3 f0f2 	udiv	r0, r3, r2
 800427c:	fb00 f202 	mul.w	r2, r0, r2
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	440b      	add	r3, r1
 8004284:	4619      	mov	r1, r3
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fa61 	bl	800374e <ld_clust>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004292:	e7bb      	b.n	800420c <follow_path+0x50>
			if (res != FR_OK) break;
 8004294:	bf00      	nop
 8004296:	e002      	b.n	800429e <follow_path+0xe2>
				break;
 8004298:	bf00      	nop
 800429a:	e000      	b.n	800429e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800429c:	bf00      	nop
			}
		}
	}

	return res;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d031      	beq.n	8004322 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e002      	b.n	80042cc <get_ldnumber+0x24>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3301      	adds	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b1f      	cmp	r3, #31
 80042d2:	d903      	bls.n	80042dc <get_ldnumber+0x34>
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80042da:	d1f4      	bne.n	80042c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80042e2:	d11c      	bne.n	800431e <get_ldnumber+0x76>
			tp = *path;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	60fa      	str	r2, [r7, #12]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	3b30      	subs	r3, #48	@ 0x30
 80042f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b09      	cmp	r3, #9
 80042fa:	d80e      	bhi.n	800431a <get_ldnumber+0x72>
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	429a      	cmp	r2, r3
 8004302:	d10a      	bne.n	800431a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d107      	bne.n	800431a <get_ldnumber+0x72>
					vol = (int)i;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	3301      	adds	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	e002      	b.n	8004324 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004322:	693b      	ldr	r3, [r7, #16]
}
 8004324:	4618      	mov	r0, r3
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	70da      	strb	r2, [r3, #3]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f04f 32ff 	mov.w	r2, #4294967295
 8004346:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004348:	6839      	ldr	r1, [r7, #0]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fe fc7a 	bl	8002c44 <move_window>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <check_fs+0x2a>
 8004356:	2304      	movs	r3, #4
 8004358:	e038      	b.n	80043cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3338      	adds	r3, #56	@ 0x38
 800435e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe f9be 	bl	80026e4 <ld_word>
 8004368:	4603      	mov	r3, r0
 800436a:	461a      	mov	r2, r3
 800436c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <check_fs+0x48>
 8004374:	2303      	movs	r3, #3
 8004376:	e029      	b.n	80043cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800437e:	2be9      	cmp	r3, #233	@ 0xe9
 8004380:	d009      	beq.n	8004396 <check_fs+0x66>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004388:	2beb      	cmp	r3, #235	@ 0xeb
 800438a:	d11e      	bne.n	80043ca <check_fs+0x9a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004392:	2b90      	cmp	r3, #144	@ 0x90
 8004394:	d119      	bne.n	80043ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3338      	adds	r3, #56	@ 0x38
 800439a:	3336      	adds	r3, #54	@ 0x36
 800439c:	4618      	mov	r0, r3
 800439e:	f7fe f9b9 	bl	8002714 <ld_dword>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043a8:	4a0a      	ldr	r2, [pc, #40]	@ (80043d4 <check_fs+0xa4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <check_fs+0x82>
 80043ae:	2300      	movs	r3, #0
 80043b0:	e00c      	b.n	80043cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3338      	adds	r3, #56	@ 0x38
 80043b6:	3352      	adds	r3, #82	@ 0x52
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe f9ab 	bl	8002714 <ld_dword>
 80043be:	4603      	mov	r3, r0
 80043c0:	4a05      	ldr	r2, [pc, #20]	@ (80043d8 <check_fs+0xa8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d101      	bne.n	80043ca <check_fs+0x9a>
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80043ca:	2302      	movs	r3, #2
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	00544146 	.word	0x00544146
 80043d8:	33544146 	.word	0x33544146

080043dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b096      	sub	sp, #88	@ 0x58
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff ff59 	bl	80042a8 <get_ldnumber>
 80043f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80043f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	da01      	bge.n	8004402 <find_volume+0x26>
 80043fe:	230b      	movs	r3, #11
 8004400:	e265      	b.n	80048ce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004402:	4a9f      	ldr	r2, [pc, #636]	@ (8004680 <find_volume+0x2a4>)
 8004404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800440a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800440c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <find_volume+0x3a>
 8004412:	230c      	movs	r3, #12
 8004414:	e25b      	b.n	80048ce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800441a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01a      	beq.n	8004462 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe f8b7 	bl	80025a4 <disk_status>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800443c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10c      	bne.n	8004462 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <find_volume+0x82>
 800444e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800445a:	230a      	movs	r3, #10
 800445c:	e237      	b.n	80048ce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800445e:	2300      	movs	r3, #0
 8004460:	e235      	b.n	80048ce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446a:	b2da      	uxtb	r2, r3
 800446c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004472:	785b      	ldrb	r3, [r3, #1]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe f8af 	bl	80025d8 <disk_initialize>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004480:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800448c:	2303      	movs	r3, #3
 800448e:	e21e      	b.n	80048ce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <find_volume+0xca>
 8004496:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80044a2:	230a      	movs	r3, #10
 80044a4:	e213      	b.n	80048ce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80044a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a8:	7858      	ldrb	r0, [r3, #1]
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	330c      	adds	r3, #12
 80044ae:	461a      	mov	r2, r3
 80044b0:	2102      	movs	r1, #2
 80044b2:	f7fe f8f9 	bl	80026a8 <disk_ioctl>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <find_volume+0xe4>
 80044bc:	2301      	movs	r3, #1
 80044be:	e206      	b.n	80048ce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80044c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c2:	899b      	ldrh	r3, [r3, #12]
 80044c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c8:	d80d      	bhi.n	80044e6 <find_volume+0x10a>
 80044ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044cc:	899b      	ldrh	r3, [r3, #12]
 80044ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d2:	d308      	bcc.n	80044e6 <find_volume+0x10a>
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	899b      	ldrh	r3, [r3, #12]
 80044d8:	461a      	mov	r2, r3
 80044da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044dc:	899b      	ldrh	r3, [r3, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <find_volume+0x10e>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e1f1      	b.n	80048ce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80044ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80044f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80044f2:	f7ff ff1d 	bl	8004330 <check_fs>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80044fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004500:	2b02      	cmp	r3, #2
 8004502:	d149      	bne.n	8004598 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004504:	2300      	movs	r3, #0
 8004506:	643b      	str	r3, [r7, #64]	@ 0x40
 8004508:	e01e      	b.n	8004548 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004518:	4413      	add	r3, r2
 800451a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	3304      	adds	r3, #4
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <find_volume+0x158>
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	3308      	adds	r3, #8
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe f8f2 	bl	8002714 <ld_dword>
 8004530:	4602      	mov	r2, r0
 8004532:	e000      	b.n	8004536 <find_volume+0x15a>
 8004534:	2200      	movs	r2, #0
 8004536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	3358      	adds	r3, #88	@ 0x58
 800453c:	443b      	add	r3, r7
 800453e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004544:	3301      	adds	r3, #1
 8004546:	643b      	str	r3, [r7, #64]	@ 0x40
 8004548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800454a:	2b03      	cmp	r3, #3
 800454c:	d9dd      	bls.n	800450a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800454e:	2300      	movs	r3, #0
 8004550:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <find_volume+0x182>
 8004558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800455a:	3b01      	subs	r3, #1
 800455c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800455e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	3358      	adds	r3, #88	@ 0x58
 8004564:	443b      	add	r3, r7
 8004566:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800456a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800456c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <find_volume+0x1a2>
 8004572:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004574:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004576:	f7ff fedb 	bl	8004330 <check_fs>
 800457a:	4603      	mov	r3, r0
 800457c:	e000      	b.n	8004580 <find_volume+0x1a4>
 800457e:	2303      	movs	r3, #3
 8004580:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004584:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004588:	2b01      	cmp	r3, #1
 800458a:	d905      	bls.n	8004598 <find_volume+0x1bc>
 800458c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800458e:	3301      	adds	r3, #1
 8004590:	643b      	str	r3, [r7, #64]	@ 0x40
 8004592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004594:	2b03      	cmp	r3, #3
 8004596:	d9e2      	bls.n	800455e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004598:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800459c:	2b04      	cmp	r3, #4
 800459e:	d101      	bne.n	80045a4 <find_volume+0x1c8>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e194      	b.n	80048ce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80045a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d901      	bls.n	80045b0 <find_volume+0x1d4>
 80045ac:	230d      	movs	r3, #13
 80045ae:	e18e      	b.n	80048ce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	3338      	adds	r3, #56	@ 0x38
 80045b4:	330b      	adds	r3, #11
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe f894 	bl	80026e4 <ld_word>
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	899b      	ldrh	r3, [r3, #12]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <find_volume+0x1f0>
 80045c8:	230d      	movs	r3, #13
 80045ca:	e180      	b.n	80048ce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	3338      	adds	r3, #56	@ 0x38
 80045d0:	3316      	adds	r3, #22
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe f886 	bl	80026e4 <ld_word>
 80045d8:	4603      	mov	r3, r0
 80045da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80045dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <find_volume+0x214>
 80045e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e4:	3338      	adds	r3, #56	@ 0x38
 80045e6:	3324      	adds	r3, #36	@ 0x24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe f893 	bl	8002714 <ld_dword>
 80045ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80045f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045f4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80045fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	789b      	ldrb	r3, [r3, #2]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d005      	beq.n	8004614 <find_volume+0x238>
 8004608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460a:	789b      	ldrb	r3, [r3, #2]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d001      	beq.n	8004614 <find_volume+0x238>
 8004610:	230d      	movs	r3, #13
 8004612:	e15c      	b.n	80048ce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	789b      	ldrb	r3, [r3, #2]
 8004618:	461a      	mov	r2, r3
 800461a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004628:	461a      	mov	r2, r3
 800462a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	895b      	ldrh	r3, [r3, #10]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <find_volume+0x26c>
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	895b      	ldrh	r3, [r3, #10]
 800463a:	461a      	mov	r2, r3
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	895b      	ldrh	r3, [r3, #10]
 8004640:	3b01      	subs	r3, #1
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <find_volume+0x270>
 8004648:	230d      	movs	r3, #13
 800464a:	e140      	b.n	80048ce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800464c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464e:	3338      	adds	r3, #56	@ 0x38
 8004650:	3311      	adds	r3, #17
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe f846 	bl	80026e4 <ld_word>
 8004658:	4603      	mov	r3, r0
 800465a:	461a      	mov	r2, r3
 800465c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	891b      	ldrh	r3, [r3, #8]
 8004664:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004666:	8992      	ldrh	r2, [r2, #12]
 8004668:	0952      	lsrs	r2, r2, #5
 800466a:	b292      	uxth	r2, r2
 800466c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004670:	fb01 f202 	mul.w	r2, r1, r2
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <find_volume+0x2a8>
 800467c:	230d      	movs	r3, #13
 800467e:	e126      	b.n	80048ce <find_volume+0x4f2>
 8004680:	200000e8 	.word	0x200000e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004686:	3338      	adds	r3, #56	@ 0x38
 8004688:	3313      	adds	r3, #19
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe f82a 	bl	80026e4 <ld_word>
 8004690:	4603      	mov	r3, r0
 8004692:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <find_volume+0x2cc>
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	3338      	adds	r3, #56	@ 0x38
 800469e:	3320      	adds	r3, #32
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fe f837 	bl	8002714 <ld_dword>
 80046a6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80046a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046aa:	3338      	adds	r3, #56	@ 0x38
 80046ac:	330e      	adds	r3, #14
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe f818 	bl	80026e4 <ld_word>
 80046b4:	4603      	mov	r3, r0
 80046b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80046b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <find_volume+0x2e6>
 80046be:	230d      	movs	r3, #13
 80046c0:	e105      	b.n	80048ce <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80046c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80046c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c6:	4413      	add	r3, r2
 80046c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046ca:	8911      	ldrh	r1, [r2, #8]
 80046cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046ce:	8992      	ldrh	r2, [r2, #12]
 80046d0:	0952      	lsrs	r2, r2, #5
 80046d2:	b292      	uxth	r2, r2
 80046d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80046d8:	b292      	uxth	r2, r2
 80046da:	4413      	add	r3, r2
 80046dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80046de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d201      	bcs.n	80046ea <find_volume+0x30e>
 80046e6:	230d      	movs	r3, #13
 80046e8:	e0f1      	b.n	80048ce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80046ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046f2:	8952      	ldrh	r2, [r2, #10]
 80046f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <find_volume+0x328>
 8004700:	230d      	movs	r3, #13
 8004702:	e0e4      	b.n	80048ce <find_volume+0x4f2>
		fmt = FS_FAT32;
 8004704:	2303      	movs	r3, #3
 8004706:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004710:	4293      	cmp	r3, r2
 8004712:	d802      	bhi.n	800471a <find_volume+0x33e>
 8004714:	2302      	movs	r3, #2
 8004716:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004720:	4293      	cmp	r3, r2
 8004722:	d802      	bhi.n	800472a <find_volume+0x34e>
 8004724:	2301      	movs	r3, #1
 8004726:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	1c9a      	adds	r2, r3, #2
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004736:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004738:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800473a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800473c:	441a      	add	r2, r3
 800473e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004740:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004742:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004746:	441a      	add	r2, r3
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800474c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004750:	2b03      	cmp	r3, #3
 8004752:	d11e      	bne.n	8004792 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004756:	3338      	adds	r3, #56	@ 0x38
 8004758:	332a      	adds	r3, #42	@ 0x2a
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd ffc2 	bl	80026e4 <ld_word>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <find_volume+0x38e>
 8004766:	230d      	movs	r3, #13
 8004768:	e0b1      	b.n	80048ce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	891b      	ldrh	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <find_volume+0x39a>
 8004772:	230d      	movs	r3, #13
 8004774:	e0ab      	b.n	80048ce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004778:	3338      	adds	r3, #56	@ 0x38
 800477a:	332c      	adds	r3, #44	@ 0x2c
 800477c:	4618      	mov	r0, r3
 800477e:	f7fd ffc9 	bl	8002714 <ld_dword>
 8004782:	4602      	mov	r2, r0
 8004784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004786:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004790:	e01f      	b.n	80047d2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	891b      	ldrh	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <find_volume+0x3c2>
 800479a:	230d      	movs	r3, #13
 800479c:	e097      	b.n	80048ce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800479e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047a4:	441a      	add	r2, r3
 80047a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80047aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d103      	bne.n	80047ba <find_volume+0x3de>
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	e00a      	b.n	80047d0 <find_volume+0x3f4>
 80047ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	4613      	mov	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	085a      	lsrs	r2, r3, #1
 80047c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80047d0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80047d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	899b      	ldrh	r3, [r3, #12]
 80047da:	4619      	mov	r1, r3
 80047dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047de:	440b      	add	r3, r1
 80047e0:	3b01      	subs	r3, #1
 80047e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047e4:	8989      	ldrh	r1, [r1, #12]
 80047e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d201      	bcs.n	80047f2 <find_volume+0x416>
 80047ee:	230d      	movs	r3, #13
 80047f0:	e06d      	b.n	80048ce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	f04f 32ff 	mov.w	r2, #4294967295
 80047f8:	619a      	str	r2, [r3, #24]
 80047fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	2280      	movs	r2, #128	@ 0x80
 8004806:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004808:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800480c:	2b03      	cmp	r3, #3
 800480e:	d149      	bne.n	80048a4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	3338      	adds	r3, #56	@ 0x38
 8004814:	3330      	adds	r3, #48	@ 0x30
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd ff64 	bl	80026e4 <ld_word>
 800481c:	4603      	mov	r3, r0
 800481e:	2b01      	cmp	r3, #1
 8004820:	d140      	bne.n	80048a4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004824:	3301      	adds	r3, #1
 8004826:	4619      	mov	r1, r3
 8004828:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800482a:	f7fe fa0b 	bl	8002c44 <move_window>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d137      	bne.n	80048a4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004836:	2200      	movs	r2, #0
 8004838:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800483a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483c:	3338      	adds	r3, #56	@ 0x38
 800483e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004842:	4618      	mov	r0, r3
 8004844:	f7fd ff4e 	bl	80026e4 <ld_word>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004850:	429a      	cmp	r2, r3
 8004852:	d127      	bne.n	80048a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004856:	3338      	adds	r3, #56	@ 0x38
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd ff5b 	bl	8002714 <ld_dword>
 800485e:	4603      	mov	r3, r0
 8004860:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <find_volume+0x4fc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d11e      	bne.n	80048a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004868:	3338      	adds	r3, #56	@ 0x38
 800486a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fd ff50 	bl	8002714 <ld_dword>
 8004874:	4603      	mov	r3, r0
 8004876:	4a19      	ldr	r2, [pc, #100]	@ (80048dc <find_volume+0x500>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d113      	bne.n	80048a4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800487c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487e:	3338      	adds	r3, #56	@ 0x38
 8004880:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004884:	4618      	mov	r0, r3
 8004886:	f7fd ff45 	bl	8002714 <ld_dword>
 800488a:	4602      	mov	r2, r0
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004892:	3338      	adds	r3, #56	@ 0x38
 8004894:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd ff3b 	bl	8002714 <ld_dword>
 800489e:	4602      	mov	r2, r0
 80048a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80048a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80048aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80048ac:	4b0c      	ldr	r3, [pc, #48]	@ (80048e0 <find_volume+0x504>)
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <find_volume+0x504>)
 80048b6:	801a      	strh	r2, [r3, #0]
 80048b8:	4b09      	ldr	r3, [pc, #36]	@ (80048e0 <find_volume+0x504>)
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048be:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80048c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c2:	4a08      	ldr	r2, [pc, #32]	@ (80048e4 <find_volume+0x508>)
 80048c4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80048c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80048c8:	f7fe f954 	bl	8002b74 <clear_lock>
#endif
	return FR_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3758      	adds	r7, #88	@ 0x58
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	41615252 	.word	0x41615252
 80048dc:	61417272 	.word	0x61417272
 80048e0:	200000ec 	.word	0x200000ec
 80048e4:	20000110 	.word	0x20000110

080048e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80048f2:	2309      	movs	r3, #9
 80048f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01c      	beq.n	8004936 <validate+0x4e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d018      	beq.n	8004936 <validate+0x4e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d013      	beq.n	8004936 <validate+0x4e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	889a      	ldrh	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	88db      	ldrh	r3, [r3, #6]
 8004918:	429a      	cmp	r2, r3
 800491a:	d10c      	bne.n	8004936 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	785b      	ldrb	r3, [r3, #1]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fd fe3e 	bl	80025a4 <disk_status>
 8004928:	4603      	mov	r3, r0
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <validate+0x4e>
			res = FR_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <validate+0x5a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	e000      	b.n	8004944 <validate+0x5c>
 8004942:	2300      	movs	r3, #0
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	6013      	str	r3, [r2, #0]
	return res;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	4613      	mov	r3, r2
 8004960:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004966:	f107 0310 	add.w	r3, r7, #16
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fc9c 	bl	80042a8 <get_ldnumber>
 8004970:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2b00      	cmp	r3, #0
 8004976:	da01      	bge.n	800497c <f_mount+0x28>
 8004978:	230b      	movs	r3, #11
 800497a:	e02b      	b.n	80049d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800497c:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <f_mount+0x88>)
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004984:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800498c:	69b8      	ldr	r0, [r7, #24]
 800498e:	f7fe f8f1 	bl	8002b74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	490d      	ldr	r1, [pc, #52]	@ (80049dc <f_mount+0x88>)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <f_mount+0x66>
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <f_mount+0x6a>
 80049ba:	2300      	movs	r3, #0
 80049bc:	e00a      	b.n	80049d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80049be:	f107 010c 	add.w	r1, r7, #12
 80049c2:	f107 0308 	add.w	r3, r7, #8
 80049c6:	2200      	movs	r2, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fd07 	bl	80043dc <find_volume>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	200000e8 	.word	0x200000e8

080049e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b09a      	sub	sp, #104	@ 0x68
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <f_open+0x18>
 80049f4:	2309      	movs	r3, #9
 80049f6:	e1b7      	b.n	8004d68 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004a00:	79fa      	ldrb	r2, [r7, #7]
 8004a02:	f107 0114 	add.w	r1, r7, #20
 8004a06:	f107 0308 	add.w	r3, r7, #8
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fce6 	bl	80043dc <find_volume>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8004a16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 819b 	bne.w	8004d56 <f_open+0x376>
		dj.obj.fs = fs;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	f107 0318 	add.w	r3, r7, #24
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fbc5 	bl	80041bc <follow_path>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004a38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d118      	bne.n	8004a72 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004a40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da03      	bge.n	8004a52 <f_open+0x72>
				res = FR_INVALID_NAME;
 8004a4a:	2306      	movs	r3, #6
 8004a4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004a50:	e00f      	b.n	8004a72 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf8c      	ite	hi
 8004a58:	2301      	movhi	r3, #1
 8004a5a:	2300      	movls	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f107 0318 	add.w	r3, r7, #24
 8004a64:	4611      	mov	r1, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fd ff3c 	bl	80028e4 <chk_lock>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	f003 031c 	and.w	r3, r3, #28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d07f      	beq.n	8004b7c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8004a7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d017      	beq.n	8004ab4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004a84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d10e      	bne.n	8004aaa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004a8c:	f7fd ff86 	bl	800299c <enq_lock>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d006      	beq.n	8004aa4 <f_open+0xc4>
 8004a96:	f107 0318 	add.w	r3, r7, #24
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff f8de 	bl	8003c5c <dir_register>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	e000      	b.n	8004aa6 <f_open+0xc6>
 8004aa4:	2312      	movs	r3, #18
 8004aa6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	f043 0308 	orr.w	r3, r3, #8
 8004ab0:	71fb      	strb	r3, [r7, #7]
 8004ab2:	e010      	b.n	8004ad6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004ab4:	7fbb      	ldrb	r3, [r7, #30]
 8004ab6:	f003 0311 	and.w	r3, r3, #17
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <f_open+0xe6>
					res = FR_DENIED;
 8004abe:	2307      	movs	r3, #7
 8004ac0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004ac4:	e007      	b.n	8004ad6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <f_open+0xf6>
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004ad6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d168      	bne.n	8004bb0 <f_open+0x1d0>
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d063      	beq.n	8004bb0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8004ae8:	f7fd fcfc 	bl	80024e4 <get_fattime>
 8004aec:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	330e      	adds	r3, #14
 8004af2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fd fe4b 	bl	8002790 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	3316      	adds	r3, #22
 8004afe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fd fe45 	bl	8002790 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b08:	330b      	adds	r3, #11
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b12:	4611      	mov	r1, r2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fe1a 	bl	800374e <ld_clust>
 8004b1a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b20:	2200      	movs	r2, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fe32 	bl	800378c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2a:	331c      	adds	r3, #28
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fd fe2e 	bl	8002790 <st_dword>
					fs->wflag = 1;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2201      	movs	r2, #1
 8004b38:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d037      	beq.n	8004bb0 <f_open+0x1d0>
						dw = fs->winsect;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b44:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8004b46:	f107 0318 	add.w	r3, r7, #24
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fb22 	bl	8003198 <remove_chain>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8004b5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d126      	bne.n	8004bb0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe f86c 	bl	8002c44 <move_window>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b76:	3a01      	subs	r2, #1
 8004b78:	615a      	str	r2, [r3, #20]
 8004b7a:	e019      	b.n	8004bb0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004b7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d115      	bne.n	8004bb0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004b84:	7fbb      	ldrb	r3, [r7, #30]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <f_open+0x1b6>
					res = FR_NO_FILE;
 8004b8e:	2304      	movs	r3, #4
 8004b90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004b94:	e00c      	b.n	8004bb0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <f_open+0x1d0>
 8004ba0:	7fbb      	ldrb	r3, [r7, #30]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <f_open+0x1d0>
						res = FR_DENIED;
 8004baa:	2307      	movs	r3, #7
 8004bac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8004bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d126      	bne.n	8004c06 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bc8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8004bd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	bf8c      	ite	hi
 8004bde:	2301      	movhi	r3, #1
 8004be0:	2300      	movls	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	f107 0318 	add.w	r3, r7, #24
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd fef7 	bl	80029e0 <inc_lock>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <f_open+0x226>
 8004c00:	2302      	movs	r3, #2
 8004c02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004c06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 80a3 	bne.w	8004d56 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe fd99 	bl	800374e <ld_clust>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	331c      	adds	r3, #28
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd fd74 	bl	8002714 <ld_dword>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	88da      	ldrh	r2, [r3, #6]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	79fa      	ldrb	r2, [r7, #7]
 8004c4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3330      	adds	r3, #48	@ 0x30
 8004c62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd fdde 	bl	800282a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d06e      	beq.n	8004d56 <f_open+0x376>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d06a      	beq.n	8004d56 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	895b      	ldrh	r3, [r3, #10]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	899b      	ldrh	r3, [r3, #12]
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ca4:	e016      	b.n	8004cd4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe f887 	bl	8002dbe <get_fat>
 8004cb0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8004cb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d802      	bhi.n	8004cbe <f_open+0x2de>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004cbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d102      	bne.n	8004ccc <f_open+0x2ec>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004ccc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <f_open+0x304>
 8004cdc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d8e0      	bhi.n	8004ca6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ce8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004cea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d131      	bne.n	8004d56 <f_open+0x376>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	899b      	ldrh	r3, [r3, #12]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cfe:	fb01 f202 	mul.w	r2, r1, r2
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d026      	beq.n	8004d56 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe f837 	bl	8002d80 <clust2sect>
 8004d12:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8004d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <f_open+0x342>
						res = FR_INT_ERR;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004d20:	e019      	b.n	8004d56 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	899b      	ldrh	r3, [r3, #12]
 8004d26:	461a      	mov	r2, r3
 8004d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d30:	441a      	add	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	7858      	ldrb	r0, [r3, #1]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1a      	ldr	r2, [r3, #32]
 8004d44:	2301      	movs	r3, #1
 8004d46:	f7fd fc6f 	bl	8002628 <disk_read>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <f_open+0x376>
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004d56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <f_open+0x384>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004d64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3768      	adds	r7, #104	@ 0x68
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08e      	sub	sp, #56	@ 0x38
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f107 0214 	add.w	r2, r7, #20
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fda9 	bl	80048e8 <validate>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d107      	bne.n	8004db4 <f_read+0x44>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	7d5b      	ldrb	r3, [r3, #21]
 8004da8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004dac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <f_read+0x4a>
 8004db4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004db8:	e135      	b.n	8005026 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	7d1b      	ldrb	r3, [r3, #20]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <f_read+0x5a>
 8004dc6:	2307      	movs	r3, #7
 8004dc8:	e12d      	b.n	8005026 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	f240 811e 	bls.w	800501c <f_read+0x2ac>
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004de4:	e11a      	b.n	800501c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	8992      	ldrh	r2, [r2, #12]
 8004dee:	fbb3 f1f2 	udiv	r1, r3, r2
 8004df2:	fb01 f202 	mul.w	r2, r1, r2
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f040 80d5 	bne.w	8004fa8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	8992      	ldrh	r2, [r2, #12]
 8004e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	8952      	ldrh	r2, [r2, #10]
 8004e0e:	3a01      	subs	r2, #1
 8004e10:	4013      	ands	r3, r2
 8004e12:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d12f      	bne.n	8004e7a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e28:	e013      	b.n	8004e52 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	4619      	mov	r1, r3
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f7fe faaa 	bl	8003392 <clmt_clust>
 8004e3e:	6338      	str	r0, [r7, #48]	@ 0x30
 8004e40:	e007      	b.n	8004e52 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f7fd ffb7 	bl	8002dbe <get_fat>
 8004e50:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d804      	bhi.n	8004e62 <f_read+0xf2>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	755a      	strb	r2, [r3, #21]
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e0e1      	b.n	8005026 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d104      	bne.n	8004e74 <f_read+0x104>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	755a      	strb	r2, [r3, #21]
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0d8      	b.n	8005026 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e78:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7fd ff7c 	bl	8002d80 <clust2sect>
 8004e88:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d104      	bne.n	8004e9a <f_read+0x12a>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2202      	movs	r2, #2
 8004e94:	755a      	strb	r2, [r3, #21]
 8004e96:	2302      	movs	r3, #2
 8004e98:	e0c5      	b.n	8005026 <f_read+0x2b6>
			sect += csect;
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	899b      	ldrh	r3, [r3, #12]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eae:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d041      	beq.n	8004f3a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	4413      	add	r3, r2
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	8952      	ldrh	r2, [r2, #10]
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d905      	bls.n	8004ed0 <f_read+0x160>
					cc = fs->csize - csect;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	895b      	ldrh	r3, [r3, #10]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	7858      	ldrb	r0, [r3, #1]
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eda:	f7fd fba5 	bl	8002628 <disk_read>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <f_read+0x17e>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	755a      	strb	r2, [r3, #21]
 8004eea:	2301      	movs	r3, #1
 8004eec:	e09b      	b.n	8005026 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	7d1b      	ldrb	r3, [r3, #20]
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	da18      	bge.n	8004f2a <f_read+0x1ba>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d911      	bls.n	8004f2a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1a      	ldr	r2, [r3, #32]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	8992      	ldrh	r2, [r2, #12]
 8004f12:	fb02 f303 	mul.w	r3, r2, r3
 8004f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f18:	18d0      	adds	r0, r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	899b      	ldrh	r3, [r3, #12]
 8004f24:	461a      	mov	r2, r3
 8004f26:	f7fd fc5f 	bl	80027e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	899b      	ldrh	r3, [r3, #12]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8004f38:	e05c      	b.n	8004ff4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d02e      	beq.n	8004fa2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	7d1b      	ldrb	r3, [r3, #20]
 8004f48:	b25b      	sxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	da18      	bge.n	8004f80 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	7858      	ldrb	r0, [r3, #1]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f7fd fb83 	bl	8002668 <disk_write>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <f_read+0x202>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	755a      	strb	r2, [r3, #21]
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e059      	b.n	8005026 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	7d1b      	ldrb	r3, [r3, #20]
 8004f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	7858      	ldrb	r0, [r3, #1]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	f7fd fb4b 	bl	8002628 <disk_read>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <f_read+0x232>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	755a      	strb	r2, [r3, #21]
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e041      	b.n	8005026 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	899b      	ldrh	r3, [r3, #12]
 8004fac:	4618      	mov	r0, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	8992      	ldrh	r2, [r2, #12]
 8004fb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fba:	fb01 f202 	mul.w	r2, r1, r2
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	1ac3      	subs	r3, r0, r3
 8004fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d901      	bls.n	8004fd0 <f_read+0x260>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	8992      	ldrh	r2, [r2, #12]
 8004fde:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fe2:	fb00 f202 	mul.w	r2, r0, r2
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	440b      	add	r3, r1
 8004fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fec:	4619      	mov	r1, r3
 8004fee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ff0:	f7fd fbfa 	bl	80027e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	4413      	add	r3, r2
 8004ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	699a      	ldr	r2, [r3, #24]
 8005000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005002:	441a      	add	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	619a      	str	r2, [r3, #24]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500e:	441a      	add	r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f47f aee1 	bne.w	8004de6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3738      	adds	r7, #56	@ 0x38
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b08c      	sub	sp, #48	@ 0x30
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f107 0210 	add.w	r2, r7, #16
 800504c:	4611      	mov	r1, r2
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fc4a 	bl	80048e8 <validate>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800505a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800505e:	2b00      	cmp	r3, #0
 8005060:	d107      	bne.n	8005072 <f_write+0x44>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	7d5b      	ldrb	r3, [r3, #21]
 8005066:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800506a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <f_write+0x4a>
 8005072:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005076:	e16a      	b.n	800534e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	7d1b      	ldrb	r3, [r3, #20]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <f_write+0x5a>
 8005084:	2307      	movs	r3, #7
 8005086:	e162      	b.n	800534e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	441a      	add	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	429a      	cmp	r2, r3
 8005096:	f080 814c 	bcs.w	8005332 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	43db      	mvns	r3, r3
 80050a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80050a2:	e146      	b.n	8005332 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	8992      	ldrh	r2, [r2, #12]
 80050ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80050b0:	fb01 f202 	mul.w	r2, r1, r2
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f040 80f1 	bne.w	800529e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	8992      	ldrh	r2, [r2, #12]
 80050c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	8952      	ldrh	r2, [r2, #10]
 80050cc:	3a01      	subs	r2, #1
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d143      	bne.n	8005160 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10c      	bne.n	80050fa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80050e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11a      	bne.n	8005122 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe f8b6 	bl	8003262 <create_chain>
 80050f6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80050f8:	e013      	b.n	8005122 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	4619      	mov	r1, r3
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7fe f942 	bl	8003392 <clmt_clust>
 800510e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005110:	e007      	b.n	8005122 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f7fe f8a1 	bl	8003262 <create_chain>
 8005120:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8109 	beq.w	800533c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800512a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512c:	2b01      	cmp	r3, #1
 800512e:	d104      	bne.n	800513a <f_write+0x10c>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2202      	movs	r2, #2
 8005134:	755a      	strb	r2, [r3, #21]
 8005136:	2302      	movs	r3, #2
 8005138:	e109      	b.n	800534e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d104      	bne.n	800514c <f_write+0x11e>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	755a      	strb	r2, [r3, #21]
 8005148:	2301      	movs	r3, #1
 800514a:	e100      	b.n	800534e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005150:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d102      	bne.n	8005160 <f_write+0x132>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800515e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	7d1b      	ldrb	r3, [r3, #20]
 8005164:	b25b      	sxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	da18      	bge.n	800519c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	7858      	ldrb	r0, [r3, #1]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a1a      	ldr	r2, [r3, #32]
 8005178:	2301      	movs	r3, #1
 800517a:	f7fd fa75 	bl	8002668 <disk_write>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <f_write+0x160>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	755a      	strb	r2, [r3, #21]
 800518a:	2301      	movs	r3, #1
 800518c:	e0df      	b.n	800534e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	7d1b      	ldrb	r3, [r3, #20]
 8005192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f7fd fdeb 	bl	8002d80 <clust2sect>
 80051aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d104      	bne.n	80051bc <f_write+0x18e>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2202      	movs	r2, #2
 80051b6:	755a      	strb	r2, [r3, #21]
 80051b8:	2302      	movs	r3, #2
 80051ba:	e0c8      	b.n	800534e <f_write+0x320>
			sect += csect;
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	4413      	add	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	899b      	ldrh	r3, [r3, #12]
 80051c8:	461a      	mov	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80051d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d043      	beq.n	8005260 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	4413      	add	r3, r2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	8952      	ldrh	r2, [r2, #10]
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d905      	bls.n	80051f2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	895b      	ldrh	r3, [r3, #10]
 80051ea:	461a      	mov	r2, r3
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	7858      	ldrb	r0, [r3, #1]
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	69f9      	ldr	r1, [r7, #28]
 80051fc:	f7fd fa34 	bl	8002668 <disk_write>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <f_write+0x1e2>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	755a      	strb	r2, [r3, #21]
 800520c:	2301      	movs	r3, #1
 800520e:	e09e      	b.n	800534e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	6a3a      	ldr	r2, [r7, #32]
 800521a:	429a      	cmp	r2, r3
 800521c:	d918      	bls.n	8005250 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	8992      	ldrh	r2, [r2, #12]
 8005230:	fb02 f303 	mul.w	r3, r2, r3
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	18d1      	adds	r1, r2, r3
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	899b      	ldrh	r3, [r3, #12]
 800523c:	461a      	mov	r2, r3
 800523e:	f7fd fad3 	bl	80027e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	7d1b      	ldrb	r3, [r3, #20]
 8005246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800524a:	b2da      	uxtb	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	899b      	ldrh	r3, [r3, #12]
 8005254:	461a      	mov	r2, r3
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	fb02 f303 	mul.w	r3, r2, r3
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800525e:	e04b      	b.n	80052f8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	429a      	cmp	r2, r3
 8005268:	d016      	beq.n	8005298 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005272:	429a      	cmp	r2, r3
 8005274:	d210      	bcs.n	8005298 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	7858      	ldrb	r0, [r3, #1]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005280:	2301      	movs	r3, #1
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	f7fd f9d0 	bl	8002628 <disk_read>
 8005288:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	755a      	strb	r2, [r3, #21]
 8005294:	2301      	movs	r3, #1
 8005296:	e05a      	b.n	800534e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	899b      	ldrh	r3, [r3, #12]
 80052a2:	4618      	mov	r0, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	8992      	ldrh	r2, [r2, #12]
 80052ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80052b0:	fb01 f202 	mul.w	r2, r1, r2
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	1ac3      	subs	r3, r0, r3
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80052ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d901      	bls.n	80052c6 <f_write+0x298>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	8992      	ldrh	r2, [r2, #12]
 80052d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80052d8:	fb00 f202 	mul.w	r2, r0, r2
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	440b      	add	r3, r1
 80052e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e2:	69f9      	ldr	r1, [r7, #28]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fd fa7f 	bl	80027e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	7d1b      	ldrb	r3, [r3, #20]
 80052ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	4413      	add	r3, r2
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	441a      	add	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	619a      	str	r2, [r3, #24]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	429a      	cmp	r2, r3
 8005316:	bf38      	it	cc
 8005318:	461a      	movcc	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	60da      	str	r2, [r3, #12]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	441a      	add	r2, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f47f aeb5 	bne.w	80050a4 <f_write+0x76>
 800533a:	e000      	b.n	800533e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800533c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	7d1b      	ldrb	r3, [r3, #20]
 8005342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005346:	b2da      	uxtb	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3730      	adds	r7, #48	@ 0x30
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b086      	sub	sp, #24
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f107 0208 	add.w	r2, r7, #8
 8005364:	4611      	mov	r1, r2
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fabe 	bl	80048e8 <validate>
 800536c:	4603      	mov	r3, r0
 800536e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d168      	bne.n	8005448 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	7d1b      	ldrb	r3, [r3, #20]
 800537a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d062      	beq.n	8005448 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	7d1b      	ldrb	r3, [r3, #20]
 8005386:	b25b      	sxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	da15      	bge.n	80053b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	7858      	ldrb	r0, [r3, #1]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1a      	ldr	r2, [r3, #32]
 800539a:	2301      	movs	r3, #1
 800539c:	f7fd f964 	bl	8002668 <disk_write>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <f_sync+0x54>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e04f      	b.n	800544a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	7d1b      	ldrb	r3, [r3, #20]
 80053ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80053b8:	f7fd f894 	bl	80024e4 <get_fattime>
 80053bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	4619      	mov	r1, r3
 80053c6:	4610      	mov	r0, r2
 80053c8:	f7fd fc3c 	bl	8002c44 <move_window>
 80053cc:	4603      	mov	r3, r0
 80053ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d138      	bne.n	8005448 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	330b      	adds	r3, #11
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	330b      	adds	r3, #11
 80053e6:	f042 0220 	orr.w	r2, r2, #32
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	461a      	mov	r2, r3
 80053f8:	68f9      	ldr	r1, [r7, #12]
 80053fa:	f7fe f9c7 	bl	800378c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f103 021c 	add.w	r2, r3, #28
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f7fd f9c0 	bl	8002790 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3316      	adds	r3, #22
 8005414:	6939      	ldr	r1, [r7, #16]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fd f9ba 	bl	8002790 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3312      	adds	r3, #18
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f7fd f999 	bl	800275a <st_word>
					fs->wflag = 1;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2201      	movs	r2, #1
 800542c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4618      	mov	r0, r3
 8005432:	f7fd fc35 	bl	8002ca0 <sync_fs>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7d1b      	ldrb	r3, [r3, #20]
 800543e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005442:	b2da      	uxtb	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005448:	7dfb      	ldrb	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff ff7b 	bl	8005356 <f_sync>
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d118      	bne.n	800549c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f107 0208 	add.w	r2, r7, #8
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fa38 	bl	80048e8 <validate>
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10c      	bne.n	800549c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fd fb38 	bl	8002afc <dec_lock>
 800548c:	4603      	mov	r3, r0
 800548e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b092      	sub	sp, #72	@ 0x48
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80054b2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80054b6:	f107 030c 	add.w	r3, r7, #12
 80054ba:	2200      	movs	r2, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe ff8d 	bl	80043dc <find_volume>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80054c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 8099 	bne.w	8005604 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80054d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	3b02      	subs	r3, #2
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d804      	bhi.n	80054f0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e089      	b.n	8005604 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80054f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d128      	bne.n	800554e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80054fc:	2302      	movs	r3, #2
 80054fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800550a:	4618      	mov	r0, r3
 800550c:	f7fd fc57 	bl	8002dbe <get_fat>
 8005510:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005518:	d103      	bne.n	8005522 <f_getfree+0x7c>
 800551a:	2301      	movs	r3, #1
 800551c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005520:	e063      	b.n	80055ea <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d103      	bne.n	8005530 <f_getfree+0x8a>
 8005528:	2302      	movs	r3, #2
 800552a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800552e:	e05c      	b.n	80055ea <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d102      	bne.n	800553c <f_getfree+0x96>
 8005536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005538:	3301      	adds	r3, #1
 800553a:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800553c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800553e:	3301      	adds	r3, #1
 8005540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005548:	429a      	cmp	r2, r3
 800554a:	d3db      	bcc.n	8005504 <f_getfree+0x5e>
 800554c:	e04d      	b.n	80055ea <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005558:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	637b      	str	r3, [r7, #52]	@ 0x34
 800555e:	2300      	movs	r3, #0
 8005560:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8005562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005564:	2b00      	cmp	r3, #0
 8005566:	d113      	bne.n	8005590 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005570:	4619      	mov	r1, r3
 8005572:	f7fd fb67 	bl	8002c44 <move_window>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800557c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005580:	2b00      	cmp	r3, #0
 8005582:	d131      	bne.n	80055e8 <f_getfree+0x142>
							p = fs->win;
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	3338      	adds	r3, #56	@ 0x38
 8005588:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	899b      	ldrh	r3, [r3, #12]
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d10f      	bne.n	80055b8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800559a:	f7fd f8a3 	bl	80026e4 <ld_word>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d102      	bne.n	80055aa <f_getfree+0x104>
 80055a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a6:	3301      	adds	r3, #1
 80055a8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	3302      	adds	r3, #2
 80055ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b2:	3b02      	subs	r3, #2
 80055b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b6:	e010      	b.n	80055da <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80055b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ba:	f7fd f8ab 	bl	8002714 <ld_dword>
 80055be:	4603      	mov	r3, r0
 80055c0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <f_getfree+0x128>
 80055c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ca:	3301      	adds	r3, #1
 80055cc:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	3304      	adds	r3, #4
 80055d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d6:	3b04      	subs	r3, #4
 80055d8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80055da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055dc:	3b01      	subs	r3, #1
 80055de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1bd      	bne.n	8005562 <f_getfree+0xbc>
 80055e6:	e000      	b.n	80055ea <f_getfree+0x144>
							if (res != FR_OK) break;
 80055e8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055ee:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055f4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80055f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f8:	791a      	ldrb	r2, [r3, #4]
 80055fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005604:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005608:	4618      	mov	r0, r3
 800560a:	3748      	adds	r7, #72	@ 0x48
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005624:	e01c      	b.n	8005660 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005626:	f107 0310 	add.w	r3, r7, #16
 800562a:	f107 0114 	add.w	r1, r7, #20
 800562e:	2201      	movs	r2, #1
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff fb9d 	bl	8004d70 <f_read>
		if (rc != 1) break;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d117      	bne.n	800566c <f_gets+0x5c>
		c = s[0];
 800563c:	7d3b      	ldrb	r3, [r7, #20]
 800563e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	2b0d      	cmp	r3, #13
 8005644:	d00b      	beq.n	800565e <f_gets+0x4e>
		*p++ = c;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	61ba      	str	r2, [r7, #24]
 800564c:	7dfa      	ldrb	r2, [r7, #23]
 800564e:	701a      	strb	r2, [r3, #0]
		n++;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	3301      	adds	r3, #1
 8005654:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b0a      	cmp	r3, #10
 800565a:	d009      	beq.n	8005670 <f_gets+0x60>
 800565c:	e000      	b.n	8005660 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800565e:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	3b01      	subs	r3, #1
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	429a      	cmp	r2, r3
 8005668:	dbdd      	blt.n	8005626 <f_gets+0x16>
 800566a:	e002      	b.n	8005672 <f_gets+0x62>
		if (rc != 1) break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8005670:	bf00      	nop
	}
	*p = 0;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <f_gets+0x72>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	e000      	b.n	8005684 <f_gets+0x74>
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80056a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056a4:	7a5b      	ldrb	r3, [r3, #9]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d131      	bne.n	8005710 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80056ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056ae:	7a5b      	ldrb	r3, [r3, #9]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056b6:	2100      	movs	r1, #0
 80056b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80056ba:	4b19      	ldr	r3, [pc, #100]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056bc:	7a5b      	ldrb	r3, [r3, #9]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4a17      	ldr	r2, [pc, #92]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80056ca:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056cc:	7a5b      	ldrb	r3, [r3, #9]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056d4:	4413      	add	r3, r2
 80056d6:	79fa      	ldrb	r2, [r7, #7]
 80056d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80056da:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056dc:	7a5b      	ldrb	r3, [r3, #9]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	b2d1      	uxtb	r1, r2
 80056e4:	4a0e      	ldr	r2, [pc, #56]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056e6:	7251      	strb	r1, [r2, #9]
 80056e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80056ea:	7dbb      	ldrb	r3, [r7, #22]
 80056ec:	3330      	adds	r3, #48	@ 0x30
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	3301      	adds	r3, #1
 80056f8:	223a      	movs	r2, #58	@ 0x3a
 80056fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	3302      	adds	r3, #2
 8005700:	222f      	movs	r2, #47	@ 0x2f
 8005702:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	3303      	adds	r3, #3
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
}
 8005712:	4618      	mov	r0, r3
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20000310 	.word	0x20000310

08005724 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800572e:	2200      	movs	r2, #0
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ffaa 	bl	800568c <FATFS_LinkDriverEx>
 8005738:	4603      	mov	r3, r0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	6039      	str	r1, [r7, #0]
 800574e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005750:	88fb      	ldrh	r3, [r7, #6]
 8005752:	2b7f      	cmp	r3, #127	@ 0x7f
 8005754:	d802      	bhi.n	800575c <ff_convert+0x18>
		c = chr;
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	81fb      	strh	r3, [r7, #14]
 800575a:	e025      	b.n	80057a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	2bff      	cmp	r3, #255	@ 0xff
 8005766:	d805      	bhi.n	8005774 <ff_convert+0x30>
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	3b80      	subs	r3, #128	@ 0x80
 800576c:	4a12      	ldr	r2, [pc, #72]	@ (80057b8 <ff_convert+0x74>)
 800576e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005772:	e000      	b.n	8005776 <ff_convert+0x32>
 8005774:	2300      	movs	r3, #0
 8005776:	81fb      	strh	r3, [r7, #14]
 8005778:	e016      	b.n	80057a8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800577a:	2300      	movs	r3, #0
 800577c:	81fb      	strh	r3, [r7, #14]
 800577e:	e009      	b.n	8005794 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005780:	89fb      	ldrh	r3, [r7, #14]
 8005782:	4a0d      	ldr	r2, [pc, #52]	@ (80057b8 <ff_convert+0x74>)
 8005784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005788:	88fa      	ldrh	r2, [r7, #6]
 800578a:	429a      	cmp	r2, r3
 800578c:	d006      	beq.n	800579c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800578e:	89fb      	ldrh	r3, [r7, #14]
 8005790:	3301      	adds	r3, #1
 8005792:	81fb      	strh	r3, [r7, #14]
 8005794:	89fb      	ldrh	r3, [r7, #14]
 8005796:	2b7f      	cmp	r3, #127	@ 0x7f
 8005798:	d9f2      	bls.n	8005780 <ff_convert+0x3c>
 800579a:	e000      	b.n	800579e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800579c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800579e:	89fb      	ldrh	r3, [r7, #14]
 80057a0:	3380      	adds	r3, #128	@ 0x80
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80057a8:	89fb      	ldrh	r3, [r7, #14]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	08005a60 	.word	0x08005a60

080057bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057cc:	d201      	bcs.n	80057d2 <ff_wtoupper+0x16>
 80057ce:	4b3e      	ldr	r3, [pc, #248]	@ (80058c8 <ff_wtoupper+0x10c>)
 80057d0:	e000      	b.n	80057d4 <ff_wtoupper+0x18>
 80057d2:	4b3e      	ldr	r3, [pc, #248]	@ (80058cc <ff_wtoupper+0x110>)
 80057d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	1c9a      	adds	r2, r3, #2
 80057da:	617a      	str	r2, [r7, #20]
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80057e0:	8a7b      	ldrh	r3, [r7, #18]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d068      	beq.n	80058b8 <ff_wtoupper+0xfc>
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	8a7b      	ldrh	r3, [r7, #18]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d364      	bcc.n	80058b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	1c9a      	adds	r2, r3, #2
 80057f2:	617a      	str	r2, [r7, #20]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	823b      	strh	r3, [r7, #16]
 80057f8:	8a3b      	ldrh	r3, [r7, #16]
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	81fb      	strh	r3, [r7, #14]
 80057fe:	8a3b      	ldrh	r3, [r7, #16]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	8a79      	ldrh	r1, [r7, #18]
 8005808:	8a3b      	ldrh	r3, [r7, #16]
 800580a:	440b      	add	r3, r1
 800580c:	429a      	cmp	r2, r3
 800580e:	da49      	bge.n	80058a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8005810:	89fb      	ldrh	r3, [r7, #14]
 8005812:	2b08      	cmp	r3, #8
 8005814:	d84f      	bhi.n	80058b6 <ff_wtoupper+0xfa>
 8005816:	a201      	add	r2, pc, #4	@ (adr r2, 800581c <ff_wtoupper+0x60>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	08005841 	.word	0x08005841
 8005820:	08005853 	.word	0x08005853
 8005824:	08005869 	.word	0x08005869
 8005828:	08005871 	.word	0x08005871
 800582c:	08005879 	.word	0x08005879
 8005830:	08005881 	.word	0x08005881
 8005834:	08005889 	.word	0x08005889
 8005838:	08005891 	.word	0x08005891
 800583c:	08005899 	.word	0x08005899
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005840:	88fa      	ldrh	r2, [r7, #6]
 8005842:	8a7b      	ldrh	r3, [r7, #18]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	80fb      	strh	r3, [r7, #6]
 8005850:	e027      	b.n	80058a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	8a7b      	ldrh	r3, [r7, #18]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	b29b      	uxth	r3, r3
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	b29b      	uxth	r3, r3
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	80fb      	strh	r3, [r7, #6]
 8005866:	e01c      	b.n	80058a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	3b10      	subs	r3, #16
 800586c:	80fb      	strh	r3, [r7, #6]
 800586e:	e018      	b.n	80058a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	3b20      	subs	r3, #32
 8005874:	80fb      	strh	r3, [r7, #6]
 8005876:	e014      	b.n	80058a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	3b30      	subs	r3, #48	@ 0x30
 800587c:	80fb      	strh	r3, [r7, #6]
 800587e:	e010      	b.n	80058a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	3b1a      	subs	r3, #26
 8005884:	80fb      	strh	r3, [r7, #6]
 8005886:	e00c      	b.n	80058a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005888:	88fb      	ldrh	r3, [r7, #6]
 800588a:	3308      	adds	r3, #8
 800588c:	80fb      	strh	r3, [r7, #6]
 800588e:	e008      	b.n	80058a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	3b50      	subs	r3, #80	@ 0x50
 8005894:	80fb      	strh	r3, [r7, #6]
 8005896:	e004      	b.n	80058a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800589e:	80fb      	strh	r3, [r7, #6]
 80058a0:	bf00      	nop
			}
			break;
 80058a2:	e008      	b.n	80058b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80058a4:	89fb      	ldrh	r3, [r7, #14]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d195      	bne.n	80057d6 <ff_wtoupper+0x1a>
 80058aa:	8a3b      	ldrh	r3, [r7, #16]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4413      	add	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80058b4:	e78f      	b.n	80057d6 <ff_wtoupper+0x1a>
			break;
 80058b6:	bf00      	nop
	}

	return chr;
 80058b8:	88fb      	ldrh	r3, [r7, #6]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	08005b60 	.word	0x08005b60
 80058cc:	08005d54 	.word	0x08005d54

080058d0 <memset>:
 80058d0:	4402      	add	r2, r0
 80058d2:	4603      	mov	r3, r0
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d100      	bne.n	80058da <memset+0xa>
 80058d8:	4770      	bx	lr
 80058da:	f803 1b01 	strb.w	r1, [r3], #1
 80058de:	e7f9      	b.n	80058d4 <memset+0x4>

080058e0 <__libc_init_array>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005918 <__libc_init_array+0x38>)
 80058e4:	4c0d      	ldr	r4, [pc, #52]	@ (800591c <__libc_init_array+0x3c>)
 80058e6:	1b64      	subs	r4, r4, r5
 80058e8:	10a4      	asrs	r4, r4, #2
 80058ea:	2600      	movs	r6, #0
 80058ec:	42a6      	cmp	r6, r4
 80058ee:	d109      	bne.n	8005904 <__libc_init_array+0x24>
 80058f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005920 <__libc_init_array+0x40>)
 80058f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005924 <__libc_init_array+0x44>)
 80058f4:	f000 f818 	bl	8005928 <_init>
 80058f8:	1b64      	subs	r4, r4, r5
 80058fa:	10a4      	asrs	r4, r4, #2
 80058fc:	2600      	movs	r6, #0
 80058fe:	42a6      	cmp	r6, r4
 8005900:	d105      	bne.n	800590e <__libc_init_array+0x2e>
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	f855 3b04 	ldr.w	r3, [r5], #4
 8005908:	4798      	blx	r3
 800590a:	3601      	adds	r6, #1
 800590c:	e7ee      	b.n	80058ec <__libc_init_array+0xc>
 800590e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005912:	4798      	blx	r3
 8005914:	3601      	adds	r6, #1
 8005916:	e7f2      	b.n	80058fe <__libc_init_array+0x1e>
 8005918:	08005e18 	.word	0x08005e18
 800591c:	08005e18 	.word	0x08005e18
 8005920:	08005e18 	.word	0x08005e18
 8005924:	08005e1c 	.word	0x08005e1c

08005928 <_init>:
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	bf00      	nop
 800592c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592e:	bc08      	pop	{r3}
 8005930:	469e      	mov	lr, r3
 8005932:	4770      	bx	lr

08005934 <_fini>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr
