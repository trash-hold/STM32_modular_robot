
NUCLEO-F446RE_prototypes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007668  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800782c  0800782c  0000882c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce0  08007ce0  00009018  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce0  08007ce0  00008ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce8  08007ce8  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce8  08007ce8  00008ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08007cf0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023a0  20000018  08007d08  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023b8  08007d08  000093b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff3a  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a98  00000000  00000000  00018f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa0  00000000  00000000  0001c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023faf  00000000  00000000  0001d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154f5  00000000  00000000  0004126f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf37c  00000000  00000000  00056764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125ae0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c0  00000000  00000000  00125b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001292e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007814 	.word	0x08007814

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08007814 	.word	0x08007814

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b44      	ldr	r3, [pc, #272]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a43      	ldr	r2, [pc, #268]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b41      	ldr	r3, [pc, #260]	@ (8000620 <MX_GPIO_Init+0x12c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b3d      	ldr	r3, [pc, #244]	@ (8000620 <MX_GPIO_Init+0x12c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a3c      	ldr	r2, [pc, #240]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b3a      	ldr	r3, [pc, #232]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b36      	ldr	r3, [pc, #216]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a35      	ldr	r2, [pc, #212]	@ (8000620 <MX_GPIO_Init+0x12c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b33      	ldr	r3, [pc, #204]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b2f      	ldr	r3, [pc, #188]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a2e      	ldr	r2, [pc, #184]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b2c      	ldr	r3, [pc, #176]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	4b28      	ldr	r3, [pc, #160]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a27      	ldr	r2, [pc, #156]	@ (8000620 <MX_GPIO_Init+0x12c>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b25      	ldr	r3, [pc, #148]	@ (8000620 <MX_GPIO_Init+0x12c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2101      	movs	r1, #1
 800059a:	4822      	ldr	r0, [pc, #136]	@ (8000624 <MX_GPIO_Init+0x130>)
 800059c:	f000 fe28 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	4820      	ldr	r0, [pc, #128]	@ (8000628 <MX_GPIO_Init+0x134>)
 80005a6:	f000 fe23 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	4818      	ldr	r0, [pc, #96]	@ (8000624 <MX_GPIO_Init+0x130>)
 80005c2:	f000 fc69 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4811      	ldr	r0, [pc, #68]	@ (8000624 <MX_GPIO_Init+0x130>)
 80005de:	f000 fc5b 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005e2:	2320      	movs	r3, #32
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0x134>)
 80005fa:	f000 fc4d 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <MX_GPIO_Init+0x134>)
 8000614:	f000 fc40 	bl	8000e98 <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	@ 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020800 	.word	0x40020800
 8000628:	40020000 	.word	0x40020000

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fab5 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f86f 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f7ff ff5b 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063e:	f000 fa13 	bl	8000a68 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000642:	f003 fe7f 	bl	8004344 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 8000646:	f000 f8d9 	bl	80007fc <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(2000); //a short delay is important to let the SD card settle

  // Mount SD
  if( f_mount(&fatfs, path, 0) == FR_OK)
 800064a:	2200      	movs	r2, #0
 800064c:	492b      	ldr	r1, [pc, #172]	@ (80006fc <main+0xd0>)
 800064e:	482c      	ldr	r0, [pc, #176]	@ (8000700 <main+0xd4>)
 8000650:	f006 f9e8 	bl	8006a24 <f_mount>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d128      	bne.n	80006ac <main+0x80>
  {
	  // Try to open the file
	  FRESULT res = f_open(&file, file_name,  FA_OPEN_EXISTING | FA_READ);
 800065a:	2201      	movs	r2, #1
 800065c:	4929      	ldr	r1, [pc, #164]	@ (8000704 <main+0xd8>)
 800065e:	482a      	ldr	r0, [pc, #168]	@ (8000708 <main+0xdc>)
 8000660:	f006 fa26 	bl	8006ab0 <f_open>
 8000664:	4603      	mov	r3, r0
 8000666:	71fb      	strb	r3, [r7, #7]


	  if (res == FR_OK)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d109      	bne.n	8000682 <main+0x56>
	  {
		  // File exists
		  if ( f_read(&file, &counter, sizeof(counter), (void*) &read_bytes) == FR_OK)
 800066e:	4b27      	ldr	r3, [pc, #156]	@ (800070c <main+0xe0>)
 8000670:	2204      	movs	r2, #4
 8000672:	4927      	ldr	r1, [pc, #156]	@ (8000710 <main+0xe4>)
 8000674:	4824      	ldr	r0, [pc, #144]	@ (8000708 <main+0xdc>)
 8000676:	f006 fbe3 	bl	8006e40 <f_read>

			  counter = temp;
			  */
		  }

		  f_close(&file);
 800067a:	4823      	ldr	r0, [pc, #140]	@ (8000708 <main+0xdc>)
 800067c:	f006 ff51 	bl	8007522 <f_close>
 8000680:	e016      	b.n	80006b0 <main+0x84>
	  }
	  else
	  {
		  // File doesnt exist - create
		  if( f_open(&file, file_name, FA_CREATE_NEW | FA_WRITE) == FR_OK)
 8000682:	2206      	movs	r2, #6
 8000684:	491f      	ldr	r1, [pc, #124]	@ (8000704 <main+0xd8>)
 8000686:	4820      	ldr	r0, [pc, #128]	@ (8000708 <main+0xdc>)
 8000688:	f006 fa12 	bl	8006ab0 <f_open>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d109      	bne.n	80006a6 <main+0x7a>
		  {
			  // File sucessfully created
			  if (f_write(&file, &counter, sizeof(counter), (void*) &write_bytes) == FR_OK)
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <main+0xe8>)
 8000694:	2204      	movs	r2, #4
 8000696:	491e      	ldr	r1, [pc, #120]	@ (8000710 <main+0xe4>)
 8000698:	481b      	ldr	r0, [pc, #108]	@ (8000708 <main+0xdc>)
 800069a:	f006 fd30 	bl	80070fe <f_write>
			  {
				  // Write data into file
			  }

			  f_close(&file);
 800069e:	481a      	ldr	r0, [pc, #104]	@ (8000708 <main+0xdc>)
 80006a0:	f006 ff3f 	bl	8007522 <f_close>
 80006a4:	e004      	b.n	80006b0 <main+0x84>
		  }
		  else
		  {
			  // Couldnt create file
			  Error_Handler();
 80006a6:	f000 f8a3 	bl	80007f0 <Error_Handler>
 80006aa:	e001      	b.n	80006b0 <main+0x84>
	  }
  }
  else
  {
	  // Mount unsuccessful
	  Error_Handler();
 80006ac:	f000 f8a0 	bl	80007f0 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	// Increment counter
	HAL_Delay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006b4:	f000 fae6 	bl	8000c84 <HAL_Delay>
	counter++;
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <main+0xe4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <main+0xe4>)
 80006c0:	6013      	str	r3, [r2, #0]

	if (counter > 9999)
 80006c2:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <main+0xe4>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d902      	bls.n	80006d4 <main+0xa8>
		counter = 0;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <main+0xe4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
	rest -= temp*10;
	sent_bytes[1] = temp + 0x30;

	sent_bytes[0] = rest +  0x30;
	*/
	if( f_open(&file, file_name, FA_OPEN_EXISTING | FA_WRITE) == FR_OK)
 80006d4:	2202      	movs	r2, #2
 80006d6:	490b      	ldr	r1, [pc, #44]	@ (8000704 <main+0xd8>)
 80006d8:	480b      	ldr	r0, [pc, #44]	@ (8000708 <main+0xdc>)
 80006da:	f006 f9e9 	bl	8006ab0 <f_open>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1e5      	bne.n	80006b0 <main+0x84>
	{
		//FRESULT res = f_write(&file, sent_bytes, sizeof(sent_bytes), (void *)&write_bytes);
		FRESULT res = f_write(&file, &counter, sizeof(counter), (void *)&write_bytes);
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <main+0xe8>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	4909      	ldr	r1, [pc, #36]	@ (8000710 <main+0xe4>)
 80006ea:	4807      	ldr	r0, [pc, #28]	@ (8000708 <main+0xdc>)
 80006ec:	f006 fd07 	bl	80070fe <f_write>
 80006f0:	4603      	mov	r3, r0
 80006f2:	71bb      	strb	r3, [r7, #6]
		f_close(&file);
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <main+0xdc>)
 80006f6:	f006 ff14 	bl	8007522 <f_close>
	HAL_Delay(1000);
 80006fa:	e7d9      	b.n	80006b0 <main+0x84>
 80006fc:	200020a0 	.word	0x200020a0
 8000700:	20000038 	.word	0x20000038
 8000704:	20000000 	.word	0x20000000
 8000708:	20001070 	.word	0x20001070
 800070c:	200020a4 	.word	0x200020a4
 8000710:	20000034 	.word	0x20000034
 8000714:	200020a8 	.word	0x200020a8

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	@ 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2234      	movs	r2, #52	@ 0x34
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f007 f848 	bl	80077bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b29      	ldr	r3, [pc, #164]	@ (80007e8 <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	4a28      	ldr	r2, [pc, #160]	@ (80007e8 <SystemClock_Config+0xd0>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	@ 0x40
 800074c:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <SystemClock_Config+0xd4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000764:	4a21      	ldr	r2, [pc, #132]	@ (80007ec <SystemClock_Config+0xd4>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <SystemClock_Config+0xd4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000790:	2332      	movs	r3, #50	@ 0x32
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000798:	2303      	movs	r3, #3
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fbb1 	bl	8001f0c <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007b0:	f000 f81e 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2101      	movs	r1, #1
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fd27 	bl	8001224 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007dc:	f000 f808 	bl	80007f0 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3750      	adds	r7, #80	@ 0x50
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_SDIO_SD_Init+0x44>)
 8000802:	4a10      	ldr	r2, [pc, #64]	@ (8000844 <MX_SDIO_SD_Init+0x48>)
 8000804:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_SDIO_SD_Init+0x44>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_SDIO_SD_Init+0x44>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_SDIO_SD_Init+0x44>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_SDIO_SD_Init+0x44>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_SDIO_SD_Init+0x44>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_SDIO_SD_Init+0x44>)
 8000826:	2202      	movs	r2, #2
 8000828:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */


  if(HAL_SD_Init(&hsd) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_SDIO_SD_Init+0x44>)
 800082c:	f001 fe0c 	bl	8002448 <HAL_SD_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SDIO_SD_Init+0x3e>
  {
	  Error_Handler();
 8000836:	f7ff ffdb 	bl	80007f0 <Error_Handler>
  }

  /* USER CODE END SDIO_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200020ac 	.word	0x200020ac
 8000844:	40012c00 	.word	0x40012c00

08000848 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0a2      	sub	sp, #136	@ 0x88
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	225c      	movs	r2, #92	@ 0x5c
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f006 ffa7 	bl	80077bc <memset>
  if(sdHandle->Instance==SDIO)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a43      	ldr	r2, [pc, #268]	@ (8000980 <HAL_SD_MspInit+0x138>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d17f      	bne.n	8000978 <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000878:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800087c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800087e:	2300      	movs	r3, #0
 8000880:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000882:	2300      	movs	r3, #0
 8000884:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fde4 	bl	8001458 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000896:	f7ff ffab 	bl	80007f0 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	4a38      	ldr	r2, [pc, #224]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008aa:	4b36      	ldr	r3, [pc, #216]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b32      	ldr	r3, [pc, #200]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a31      	ldr	r2, [pc, #196]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a2a      	ldr	r2, [pc, #168]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b28      	ldr	r3, [pc, #160]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b24      	ldr	r3, [pc, #144]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b21      	ldr	r3, [pc, #132]	@ (8000984 <HAL_SD_MspInit+0x13c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800090a:	2304      	movs	r3, #4
 800090c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800091c:	230c      	movs	r3, #12
 800091e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000926:	4619      	mov	r1, r3
 8000928:	4817      	ldr	r0, [pc, #92]	@ (8000988 <HAL_SD_MspInit+0x140>)
 800092a:	f000 fab5 	bl	8000e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800092e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000932:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000938:	2301      	movs	r3, #1
 800093a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000942:	230c      	movs	r3, #12
 8000944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000948:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800094c:	4619      	mov	r1, r3
 800094e:	480f      	ldr	r0, [pc, #60]	@ (800098c <HAL_SD_MspInit+0x144>)
 8000950:	f000 faa2 	bl	8000e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000954:	2304      	movs	r3, #4
 8000956:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095c:	2301      	movs	r3, #1
 800095e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000966:	230c      	movs	r3, #12
 8000968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000970:	4619      	mov	r1, r3
 8000972:	4807      	ldr	r0, [pc, #28]	@ (8000990 <HAL_SD_MspInit+0x148>)
 8000974:	f000 fa90 	bl	8000e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000978:	bf00      	nop
 800097a:	3788      	adds	r7, #136	@ 0x88
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40012c00 	.word	0x40012c00
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400
 800098c:	40020800 	.word	0x40020800
 8000990:	40020c00 	.word	0x40020c00

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 fa2c 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <MemManage_Handler+0x4>

080009fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3a:	f000 f903 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <MX_USART2_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f002 fc5a 	bl	8003358 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f7ff fea1 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20002130 	.word	0x20002130
 8000ab8:	40004400 	.word	0x40004400

08000abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12b      	bne.n	8000b36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b32:	f000 f9b1 	bl	8000e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	@ 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b50:	f7ff ff78 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	@ (8000b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f006 fe27 	bl	80077cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fd55 	bl	800062c <main>
  bx  lr    
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b90:	08007cf0 	.word	0x08007cf0
  ldr r2, =_sbss
 8000b94:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b98:	200023b8 	.word	0x200023b8

08000b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	@ (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f931 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fede 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f93b 	bl	8000e7e <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 f911 	bl	8000e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	@ (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000000c 	.word	0x2000000c
 8000c3c:	20000014 	.word	0x20000014
 8000c40:	20000010 	.word	0x20000010

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000014 	.word	0x20000014
 8000c68:	20002178 	.word	0x20002178

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20002178 	.word	0x20002178

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000014 	.word	0x20000014

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	@ (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	@ 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	@ 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff ff8e 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff47 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff5c 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff8e 	bl	8000d84 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5d 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffb0 	bl	8000dec <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e165      	b.n	8001180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8154 	bne.w	800117a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80ae 	beq.w	800117a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b5d      	ldr	r3, [pc, #372]	@ (8001198 <HAL_GPIO_Init+0x300>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a5c      	ldr	r2, [pc, #368]	@ (8001198 <HAL_GPIO_Init+0x300>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b5a      	ldr	r3, [pc, #360]	@ (8001198 <HAL_GPIO_Init+0x300>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a58      	ldr	r2, [pc, #352]	@ (800119c <HAL_GPIO_Init+0x304>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4f      	ldr	r2, [pc, #316]	@ (80011a0 <HAL_GPIO_Init+0x308>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d025      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4e      	ldr	r2, [pc, #312]	@ (80011a4 <HAL_GPIO_Init+0x30c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d01f      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4d      	ldr	r2, [pc, #308]	@ (80011a8 <HAL_GPIO_Init+0x310>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4c      	ldr	r2, [pc, #304]	@ (80011ac <HAL_GPIO_Init+0x314>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4b      	ldr	r2, [pc, #300]	@ (80011b0 <HAL_GPIO_Init+0x318>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x20a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4a      	ldr	r2, [pc, #296]	@ (80011b4 <HAL_GPIO_Init+0x31c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x206>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a49      	ldr	r2, [pc, #292]	@ (80011b8 <HAL_GPIO_Init+0x320>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x202>
 8001096:	2306      	movs	r3, #6
 8001098:	e00c      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 800109a:	2307      	movs	r3, #7
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 800109e:	2305      	movs	r3, #5
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	@ (800119c <HAL_GPIO_Init+0x304>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	@ (80011bc <HAL_GPIO_Init+0x324>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f6:	4a31      	ldr	r2, [pc, #196]	@ (80011bc <HAL_GPIO_Init+0x324>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010fc:	4b2f      	ldr	r3, [pc, #188]	@ (80011bc <HAL_GPIO_Init+0x324>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001120:	4a26      	ldr	r2, [pc, #152]	@ (80011bc <HAL_GPIO_Init+0x324>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001126:	4b25      	ldr	r3, [pc, #148]	@ (80011bc <HAL_GPIO_Init+0x324>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114a:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <HAL_GPIO_Init+0x324>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <HAL_GPIO_Init+0x324>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001174:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <HAL_GPIO_Init+0x324>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f ae96 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40013800 	.word	0x40013800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40021400 	.word	0x40021400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40013c00 	.word	0x40013c00

080011c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e001      	b.n	80011e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800120c:	e003      	b.n	8001216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0cc      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001238:	4b68      	ldr	r3, [pc, #416]	@ (80013dc <HAL_RCC_ClockConfig+0x1b8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d90c      	bls.n	8001260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	4b65      	ldr	r3, [pc, #404]	@ (80013dc <HAL_RCC_ClockConfig+0x1b8>)
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124e:	4b63      	ldr	r3, [pc, #396]	@ (80013dc <HAL_RCC_ClockConfig+0x1b8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d001      	beq.n	8001260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0b8      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001278:	4b59      	ldr	r3, [pc, #356]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4a58      	ldr	r2, [pc, #352]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001290:	4b53      	ldr	r3, [pc, #332]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	4a52      	ldr	r2, [pc, #328]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800129a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800129c:	4b50      	ldr	r3, [pc, #320]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	494d      	ldr	r1, [pc, #308]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d044      	beq.n	8001344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b47      	ldr	r3, [pc, #284]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d119      	bne.n	8001302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e07f      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d003      	beq.n	80012e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d107      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e2:	4b3f      	ldr	r3, [pc, #252]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d109      	bne.n	8001302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e06f      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f2:	4b3b      	ldr	r3, [pc, #236]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e067      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001302:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f023 0203 	bic.w	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4934      	ldr	r1, [pc, #208]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	4313      	orrs	r3, r2
 8001312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001314:	f7ff fcaa 	bl	8000c6c <HAL_GetTick>
 8001318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	e00a      	b.n	8001332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131c:	f7ff fca6 	bl	8000c6c <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800132a:	4293      	cmp	r3, r2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e04f      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001332:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 020c 	and.w	r2, r3, #12
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	429a      	cmp	r2, r3
 8001342:	d1eb      	bne.n	800131c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001344:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <HAL_RCC_ClockConfig+0x1b8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d20c      	bcs.n	800136c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <HAL_RCC_ClockConfig+0x1b8>)
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <HAL_RCC_ClockConfig+0x1b8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e032      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4916      	ldr	r1, [pc, #88]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	4313      	orrs	r3, r2
 8001388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	490e      	ldr	r1, [pc, #56]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013aa:	f000 fb7f 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	490a      	ldr	r1, [pc, #40]	@ (80013e4 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	5ccb      	ldrb	r3, [r1, r3]
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <HAL_RCC_ClockConfig+0x1c8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fc0a 	bl	8000be4 <HAL_InitTick>

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023c00 	.word	0x40023c00
 80013e0:	40023800 	.word	0x40023800
 80013e4:	08007874 	.word	0x08007874
 80013e8:	2000000c 	.word	0x2000000c
 80013ec:	20000010 	.word	0x20000010

080013f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <HAL_RCC_GetHCLKFreq+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	2000000c 	.word	0x2000000c

08001408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800140c:	f7ff fff0 	bl	80013f0 <HAL_RCC_GetHCLKFreq>
 8001410:	4602      	mov	r2, r0
 8001412:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	0a9b      	lsrs	r3, r3, #10
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	4903      	ldr	r1, [pc, #12]	@ (800142c <HAL_RCC_GetPCLK1Freq+0x24>)
 800141e:	5ccb      	ldrb	r3, [r1, r3]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	08007884 	.word	0x08007884

08001430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001434:	f7ff ffdc 	bl	80013f0 <HAL_RCC_GetHCLKFreq>
 8001438:	4602      	mov	r2, r0
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	0b5b      	lsrs	r3, r3, #13
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	4903      	ldr	r1, [pc, #12]	@ (8001454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001446:	5ccb      	ldrb	r3, [r1, r3]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800144c:	4618      	mov	r0, r3
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	08007884 	.word	0x08007884

08001458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d010      	beq.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001490:	4b6f      	ldr	r3, [pc, #444]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001496:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149e:	496c      	ldr	r1, [pc, #432]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d010      	beq.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80014be:	4b64      	ldr	r3, [pc, #400]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014cc:	4960      	ldr	r1, [pc, #384]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80014dc:	2301      	movs	r3, #1
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d017      	beq.n	800151c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014ec:	4b58      	ldr	r3, [pc, #352]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4955      	ldr	r1, [pc, #340]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800150a:	d101      	bne.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800150c:	2301      	movs	r3, #1
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001518:	2301      	movs	r3, #1
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d017      	beq.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001528:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800152a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001536:	4946      	ldr	r1, [pc, #280]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001538:	4313      	orrs	r3, r2
 800153a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001546:	d101      	bne.n	800154c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001548:	2301      	movs	r3, #1
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001554:	2301      	movs	r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 808a 	beq.w	800167a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b39      	ldr	r3, [pc, #228]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	4a38      	ldr	r2, [pc, #224]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	@ 0x40
 8001576:	4b36      	ldr	r3, [pc, #216]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a33      	ldr	r2, [pc, #204]	@ (8001654 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800158e:	f7ff fb6d 	bl	8000c6c <HAL_GetTick>
 8001592:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001596:	f7ff fb69 	bl	8000c6c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e278      	b.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015b4:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015bc:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d02f      	beq.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015cc:	6a3a      	ldr	r2, [r7, #32]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d028      	beq.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015da:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80015e8:	4a19      	ldr	r2, [pc, #100]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d114      	bne.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb37 	bl	8000c6c <HAL_GetTick>
 80015fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff fb33 	bl	8000c6c <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001610:	4293      	cmp	r3, r2
 8001612:	d901      	bls.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e240      	b.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ee      	beq.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800162c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001630:	d114      	bne.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001646:	4902      	ldr	r1, [pc, #8]	@ (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
 800164c:	e00c      	b.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000
 8001658:	42470e40 	.word	0x42470e40
 800165c:	4b4a      	ldr	r3, [pc, #296]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a49      	ldr	r2, [pc, #292]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001662:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001666:	6093      	str	r3, [r2, #8]
 8001668:	4b47      	ldr	r3, [pc, #284]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800166a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	4944      	ldr	r1, [pc, #272]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001676:	4313      	orrs	r3, r2
 8001678:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800168c:	4b3f      	ldr	r3, [pc, #252]	@ (800178c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800168e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00a      	beq.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800169c:	4b3a      	ldr	r3, [pc, #232]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	4937      	ldr	r1, [pc, #220]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80016be:	4b32      	ldr	r3, [pc, #200]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016cc:	492e      	ldr	r1, [pc, #184]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d011      	beq.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ee:	4926      	ldr	r1, [pc, #152]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80016fe:	d101      	bne.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001700:	2301      	movs	r3, #1
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00a      	beq.n	8001726 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001710:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001716:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	491a      	ldr	r1, [pc, #104]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001720:	4313      	orrs	r3, r2
 8001722:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172e:	2b00      	cmp	r3, #0
 8001730:	d011      	beq.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001738:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001740:	4911      	ldr	r1, [pc, #68]	@ (8001788 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001742:	4313      	orrs	r3, r2
 8001744:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800174c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001750:	d101      	bne.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001752:	2301      	movs	r3, #1
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001758:	2b01      	cmp	r3, #1
 800175a:	d005      	beq.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001764:	f040 80ff 	bne.w	8001966 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800176e:	f7ff fa7d 	bl	8000c6c <HAL_GetTick>
 8001772:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001774:	e00e      	b.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001776:	f7ff fa79 	bl	8000c6c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d907      	bls.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e188      	b.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001788:	40023800 	.word	0x40023800
 800178c:	424711e0 	.word	0x424711e0
 8001790:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001794:	4b7e      	ldr	r3, [pc, #504]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ea      	bne.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d028      	beq.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d124      	bne.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80017c8:	4b71      	ldr	r3, [pc, #452]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	3301      	adds	r3, #1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80017da:	4b6d      	ldr	r3, [pc, #436]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017e0:	0e1b      	lsrs	r3, r3, #24
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	019b      	lsls	r3, r3, #6
 80017f2:	431a      	orrs	r2, r3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	3b01      	subs	r3, #1
 80017fa:	041b      	lsls	r3, r3, #16
 80017fc:	431a      	orrs	r2, r3
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	061b      	lsls	r3, r3, #24
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	071b      	lsls	r3, r3, #28
 800180a:	4961      	ldr	r1, [pc, #388]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800180c:	4313      	orrs	r3, r2
 800180e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001826:	d00a      	beq.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001830:	2b00      	cmp	r3, #0
 8001832:	d035      	beq.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800183c:	d130      	bne.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800183e:	4b54      	ldr	r3, [pc, #336]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	3301      	adds	r3, #1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001850:	4b4f      	ldr	r3, [pc, #316]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001856:	0f1b      	lsrs	r3, r3, #28
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	019b      	lsls	r3, r3, #6
 8001868:	431a      	orrs	r2, r3
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	3b01      	subs	r3, #1
 8001870:	041b      	lsls	r3, r3, #16
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	431a      	orrs	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	071b      	lsls	r3, r3, #28
 8001880:	4943      	ldr	r1, [pc, #268]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001882:	4313      	orrs	r3, r2
 8001884:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001888:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800188a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188e:	f023 021f 	bic.w	r2, r3, #31
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	493d      	ldr	r1, [pc, #244]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800189a:	4313      	orrs	r3, r2
 800189c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d029      	beq.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018b4:	d124      	bne.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80018b6:	4b36      	ldr	r3, [pc, #216]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018bc:	0c1b      	lsrs	r3, r3, #16
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	3301      	adds	r3, #1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018c8:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018ce:	0f1b      	lsrs	r3, r3, #28
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	019b      	lsls	r3, r3, #6
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	431a      	orrs	r2, r3
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	431a      	orrs	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	071b      	lsls	r3, r3, #28
 80018f8:	4925      	ldr	r1, [pc, #148]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001908:	2b00      	cmp	r3, #0
 800190a:	d016      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	019b      	lsls	r3, r3, #6
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	071b      	lsls	r3, r3, #28
 8001932:	4917      	ldr	r1, [pc, #92]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001934:	4313      	orrs	r3, r2
 8001936:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800193a:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff f994 	bl	8000c6c <HAL_GetTick>
 8001944:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001948:	f7ff f990 	bl	8000c6c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e09f      	b.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 8095 	bne.w	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001974:	f7ff f97a 	bl	8000c6c <HAL_GetTick>
 8001978:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800197a:	e00f      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800197c:	f7ff f976 	bl	8000c6c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d908      	bls.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e085      	b.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	42470068 	.word	0x42470068
 8001998:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800199c:	4b41      	ldr	r3, [pc, #260]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019a8:	d0e8      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d02b      	beq.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d127      	bne.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80019d2:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80019d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d8:	0c1b      	lsrs	r3, r3, #16
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	3301      	adds	r3, #1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	431a      	orrs	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	085b      	lsrs	r3, r3, #1
 80019f4:	3b01      	subs	r3, #1
 80019f6:	041b      	lsls	r3, r3, #16
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	061b      	lsls	r3, r3, #24
 8001a00:	4928      	ldr	r1, [pc, #160]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a08:	4b26      	ldr	r3, [pc, #152]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a0e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a16:	3b01      	subs	r3, #1
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	4922      	ldr	r1, [pc, #136]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01d      	beq.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a36:	d118      	bne.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3e:	0e1b      	lsrs	r3, r3, #24
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	019b      	lsls	r3, r3, #6
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	041b      	lsls	r3, r3, #16
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	4910      	ldr	r1, [pc, #64]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a70:	f7ff f8fc 	bl	8000c6c <HAL_GetTick>
 8001a74:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a78:	f7ff f8f8 	bl	8000c6c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e007      	b.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a96:	d1ef      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3730      	adds	r7, #48	@ 0x30
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	42470070 	.word	0x42470070

08001aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab0:	b0ae      	sub	sp, #184	@ 0xb8
 8001ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad2:	4bcb      	ldr	r3, [pc, #812]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	f200 8206 	bhi.w	8001eec <HAL_RCC_GetSysClockFreq+0x440>
 8001ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae6:	bf00      	nop
 8001ae8:	08001b1d 	.word	0x08001b1d
 8001aec:	08001eed 	.word	0x08001eed
 8001af0:	08001eed 	.word	0x08001eed
 8001af4:	08001eed 	.word	0x08001eed
 8001af8:	08001b25 	.word	0x08001b25
 8001afc:	08001eed 	.word	0x08001eed
 8001b00:	08001eed 	.word	0x08001eed
 8001b04:	08001eed 	.word	0x08001eed
 8001b08:	08001b2d 	.word	0x08001b2d
 8001b0c:	08001eed 	.word	0x08001eed
 8001b10:	08001eed 	.word	0x08001eed
 8001b14:	08001eed 	.word	0x08001eed
 8001b18:	08001d1d 	.word	0x08001d1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4bb9      	ldr	r3, [pc, #740]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b22:	e1e7      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b24:	4bb8      	ldr	r3, [pc, #736]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b2a:	e1e3      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2c:	4bb4      	ldr	r3, [pc, #720]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b38:	4bb1      	ldr	r3, [pc, #708]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d071      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b44:	4bae      	ldr	r3, [pc, #696]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	462b      	mov	r3, r5
 8001b6e:	f04f 0000 	mov.w	r0, #0
 8001b72:	f04f 0100 	mov.w	r1, #0
 8001b76:	0159      	lsls	r1, r3, #5
 8001b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7c:	0150      	lsls	r0, r2, #5
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4621      	mov	r1, r4
 8001b84:	1a51      	subs	r1, r2, r1
 8001b86:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b88:	4629      	mov	r1, r5
 8001b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	018b      	lsls	r3, r1, #6
 8001ba0:	4641      	mov	r1, r8
 8001ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ba6:	4641      	mov	r1, r8
 8001ba8:	018a      	lsls	r2, r1, #6
 8001baa:	4641      	mov	r1, r8
 8001bac:	1a51      	subs	r1, r2, r1
 8001bae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	00cb      	lsls	r3, r1, #3
 8001bc8:	4641      	mov	r1, r8
 8001bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bce:	4641      	mov	r1, r8
 8001bd0:	00ca      	lsls	r2, r1, #3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4622      	mov	r2, r4
 8001bda:	189b      	adds	r3, r3, r2
 8001bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bde:	462b      	mov	r3, r5
 8001be0:	460a      	mov	r2, r1
 8001be2:	eb42 0303 	adc.w	r3, r2, r3
 8001be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	024b      	lsls	r3, r1, #9
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bfe:	4621      	mov	r1, r4
 8001c00:	024a      	lsls	r2, r1, #9
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c18:	f7fe faf4 	bl	8000204 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c26:	e067      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c28:	4b75      	ldr	r3, [pc, #468]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c34:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c42:	2300      	movs	r3, #0
 8001c44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	f04f 0000 	mov.w	r0, #0
 8001c52:	f04f 0100 	mov.w	r1, #0
 8001c56:	0159      	lsls	r1, r3, #5
 8001c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5c:	0150      	lsls	r0, r2, #5
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4621      	mov	r1, r4
 8001c64:	1a51      	subs	r1, r2, r1
 8001c66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c68:	4629      	mov	r1, r5
 8001c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	018b      	lsls	r3, r1, #6
 8001c80:	4641      	mov	r1, r8
 8001c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c86:	4641      	mov	r1, r8
 8001c88:	018a      	lsls	r2, r1, #6
 8001c8a:	4641      	mov	r1, r8
 8001c8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c90:	4649      	mov	r1, r9
 8001c92:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ca2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ca6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001caa:	4692      	mov	sl, r2
 8001cac:	469b      	mov	fp, r3
 8001cae:	4623      	mov	r3, r4
 8001cb0:	eb1a 0303 	adds.w	r3, sl, r3
 8001cb4:	623b      	str	r3, [r7, #32]
 8001cb6:	462b      	mov	r3, r5
 8001cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001cca:	4629      	mov	r1, r5
 8001ccc:	028b      	lsls	r3, r1, #10
 8001cce:	4621      	mov	r1, r4
 8001cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	028a      	lsls	r2, r1, #10
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ce4:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ce6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001cea:	f7fe fa8b 	bl	8000204 <__aeabi_uldivmod>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cf8:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	0c1b      	lsrs	r3, r3, #16
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	3301      	adds	r3, #1
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d1a:	e0eb      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4b38      	ldr	r3, [pc, #224]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d28:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d06b      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d34:	4b32      	ldr	r3, [pc, #200]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d46:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d48:	2300      	movs	r3, #0
 8001d4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001d50:	4622      	mov	r2, r4
 8001d52:	462b      	mov	r3, r5
 8001d54:	f04f 0000 	mov.w	r0, #0
 8001d58:	f04f 0100 	mov.w	r1, #0
 8001d5c:	0159      	lsls	r1, r3, #5
 8001d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d62:	0150      	lsls	r0, r2, #5
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4621      	mov	r1, r4
 8001d6a:	1a51      	subs	r1, r2, r1
 8001d6c:	61b9      	str	r1, [r7, #24]
 8001d6e:	4629      	mov	r1, r5
 8001d70:	eb63 0301 	sbc.w	r3, r3, r1
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d82:	4659      	mov	r1, fp
 8001d84:	018b      	lsls	r3, r1, #6
 8001d86:	4651      	mov	r1, sl
 8001d88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d8c:	4651      	mov	r1, sl
 8001d8e:	018a      	lsls	r2, r1, #6
 8001d90:	4651      	mov	r1, sl
 8001d92:	ebb2 0801 	subs.w	r8, r2, r1
 8001d96:	4659      	mov	r1, fp
 8001d98:	eb63 0901 	sbc.w	r9, r3, r1
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001da8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001db0:	4690      	mov	r8, r2
 8001db2:	4699      	mov	r9, r3
 8001db4:	4623      	mov	r3, r4
 8001db6:	eb18 0303 	adds.w	r3, r8, r3
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	462b      	mov	r3, r5
 8001dbe:	eb49 0303 	adc.w	r3, r9, r3
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	024b      	lsls	r3, r1, #9
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dda:	4621      	mov	r1, r4
 8001ddc:	024a      	lsls	r2, r1, #9
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001de6:	2200      	movs	r2, #0
 8001de8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001dea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001dec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001df0:	f7fe fa08 	bl	8000204 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dfe:	e065      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x420>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	00f42400 	.word	0x00f42400
 8001e08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	2200      	movs	r2, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	4611      	mov	r1, r2
 8001e18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e1e:	2300      	movs	r3, #0
 8001e20:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001e26:	4642      	mov	r2, r8
 8001e28:	464b      	mov	r3, r9
 8001e2a:	f04f 0000 	mov.w	r0, #0
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	0159      	lsls	r1, r3, #5
 8001e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e38:	0150      	lsls	r0, r2, #5
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4641      	mov	r1, r8
 8001e40:	1a51      	subs	r1, r2, r1
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	4649      	mov	r1, r9
 8001e46:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e58:	4659      	mov	r1, fp
 8001e5a:	018b      	lsls	r3, r1, #6
 8001e5c:	4651      	mov	r1, sl
 8001e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e62:	4651      	mov	r1, sl
 8001e64:	018a      	lsls	r2, r1, #6
 8001e66:	4651      	mov	r1, sl
 8001e68:	1a54      	subs	r4, r2, r1
 8001e6a:	4659      	mov	r1, fp
 8001e6c:	eb63 0501 	sbc.w	r5, r3, r1
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	00eb      	lsls	r3, r5, #3
 8001e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e7e:	00e2      	lsls	r2, r4, #3
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4643      	mov	r3, r8
 8001e86:	18e3      	adds	r3, r4, r3
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	464b      	mov	r3, r9
 8001e8c:	eb45 0303 	adc.w	r3, r5, r3
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	028b      	lsls	r3, r1, #10
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	028a      	lsls	r2, r1, #10
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001eb8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001eba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ebe:	f7fe f9a1 	bl	8000204 <__aeabi_uldivmod>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	0f1b      	lsrs	r3, r3, #28
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001eea:	e003      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001eee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ef2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	37b8      	adds	r7, #184	@ 0xb8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	00f42400 	.word	0x00f42400

08001f0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e28d      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8083 	beq.w	8002032 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f2c:	4b94      	ldr	r3, [pc, #592]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d019      	beq.n	8001f6c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f38:	4b91      	ldr	r3, [pc, #580]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f44:	4b8e      	ldr	r3, [pc, #568]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f50:	d00c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f52:	4b8b      	ldr	r3, [pc, #556]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d112      	bne.n	8001f84 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5e:	4b88      	ldr	r3, [pc, #544]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	4b84      	ldr	r3, [pc, #528]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d05b      	beq.n	8002030 <HAL_RCC_OscConfig+0x124>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d157      	bne.n	8002030 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e25a      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x90>
 8001f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7b      	ldr	r2, [pc, #492]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e01d      	b.n	8001fd8 <HAL_RCC_OscConfig+0xcc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xb4>
 8001fa6:	4b76      	ldr	r3, [pc, #472]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a75      	ldr	r2, [pc, #468]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b73      	ldr	r3, [pc, #460]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a72      	ldr	r2, [pc, #456]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xcc>
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6b      	ldr	r2, [pc, #428]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fe44 	bl	8000c6c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7fe fe40 	bl	8000c6c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	@ 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e21f      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b61      	ldr	r3, [pc, #388]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xdc>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe fe30 	bl	8000c6c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe fe2c 	bl	8000c6c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	@ 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e20b      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b57      	ldr	r3, [pc, #348]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x104>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d06f      	beq.n	800211e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800203e:	4b50      	ldr	r3, [pc, #320]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b00      	cmp	r3, #0
 8002048:	d017      	beq.n	800207a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800204a:	4b4d      	ldr	r3, [pc, #308]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002052:	2b08      	cmp	r3, #8
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002056:	4b4a      	ldr	r3, [pc, #296]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002062:	4b47      	ldr	r3, [pc, #284]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d11c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206e:	4b44      	ldr	r3, [pc, #272]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d116      	bne.n	80020a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	4b41      	ldr	r3, [pc, #260]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_RCC_OscConfig+0x186>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e1d3      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002092:	4b3b      	ldr	r3, [pc, #236]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4937      	ldr	r1, [pc, #220]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	e03a      	b.n	800211e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b0:	4b34      	ldr	r3, [pc, #208]	@ (8002184 <HAL_RCC_OscConfig+0x278>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe fdd9 	bl	8000c6c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020be:	f7fe fdd5 	bl	8000c6c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e1b4      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020dc:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4925      	ldr	r1, [pc, #148]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
 80020f0:	e015      	b.n	800211e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f2:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <HAL_RCC_OscConfig+0x278>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fdb8 	bl	8000c6c <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7fe fdb4 	bl	8000c6c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e193      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d036      	beq.n	8002198 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d016      	beq.n	8002160 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_RCC_OscConfig+0x27c>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7fe fd98 	bl	8000c6c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002140:	f7fe fd94 	bl	8000c6c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e173      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x234>
 800215e:	e01b      	b.n	8002198 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_OscConfig+0x27c>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7fe fd81 	bl	8000c6c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	e00e      	b.n	800218c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216e:	f7fe fd7d 	bl	8000c6c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d907      	bls.n	800218c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e15c      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
 8002180:	40023800 	.word	0x40023800
 8002184:	42470000 	.word	0x42470000
 8002188:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	4b8a      	ldr	r3, [pc, #552]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 800218e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ea      	bne.n	800216e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8097 	beq.w	80022d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021aa:	4b83      	ldr	r3, [pc, #524]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	4b7f      	ldr	r3, [pc, #508]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	4a7e      	ldr	r2, [pc, #504]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c6:	4b7c      	ldr	r3, [pc, #496]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b79      	ldr	r3, [pc, #484]	@ (80023bc <HAL_RCC_OscConfig+0x4b0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d118      	bne.n	8002214 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e2:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <HAL_RCC_OscConfig+0x4b0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a75      	ldr	r2, [pc, #468]	@ (80023bc <HAL_RCC_OscConfig+0x4b0>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fd3d 	bl	8000c6c <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7fe fd39 	bl	8000c6c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e118      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	4b6c      	ldr	r3, [pc, #432]	@ (80023bc <HAL_RCC_OscConfig+0x4b0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x31e>
 800221c:	4b66      	ldr	r3, [pc, #408]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002220:	4a65      	ldr	r2, [pc, #404]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6713      	str	r3, [r2, #112]	@ 0x70
 8002228:	e01c      	b.n	8002264 <HAL_RCC_OscConfig+0x358>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b05      	cmp	r3, #5
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x340>
 8002232:	4b61      	ldr	r3, [pc, #388]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002236:	4a60      	ldr	r2, [pc, #384]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6713      	str	r3, [r2, #112]	@ 0x70
 800223e:	4b5e      	ldr	r3, [pc, #376]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002242:	4a5d      	ldr	r2, [pc, #372]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	@ 0x70
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0x358>
 800224c:	4b5a      	ldr	r3, [pc, #360]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	4a59      	ldr	r2, [pc, #356]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6713      	str	r3, [r2, #112]	@ 0x70
 8002258:	4b57      	ldr	r3, [pc, #348]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225c:	4a56      	ldr	r2, [pc, #344]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 800225e:	f023 0304 	bic.w	r3, r3, #4
 8002262:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d015      	beq.n	8002298 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7fe fcfe 	bl	8000c6c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7fe fcfa 	bl	8000c6c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0d7      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228a:	4b4b      	ldr	r3, [pc, #300]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0ee      	beq.n	8002274 <HAL_RCC_OscConfig+0x368>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7fe fce8 	bl	8000c6c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a0:	f7fe fce4 	bl	8000c6c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e0c1      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b6:	4b40      	ldr	r3, [pc, #256]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ee      	bne.n	80022a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d105      	bne.n	80022d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c8:	4b3b      	ldr	r3, [pc, #236]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	4a3a      	ldr	r2, [pc, #232]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 80022ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80ad 	beq.w	8002438 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022de:	4b36      	ldr	r3, [pc, #216]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d060      	beq.n	80023ac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d145      	bne.n	800237e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	4b33      	ldr	r3, [pc, #204]	@ (80023c0 <HAL_RCC_OscConfig+0x4b4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe fcb8 	bl	8000c6c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002300:	f7fe fcb4 	bl	8000c6c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e093      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	4b29      	ldr	r3, [pc, #164]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232c:	019b      	lsls	r3, r3, #6
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	3b01      	subs	r3, #1
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	071b      	lsls	r3, r3, #28
 800234a:	491b      	ldr	r1, [pc, #108]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x4b4>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fc89 	bl	8000c6c <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe fc85 	bl	8000c6c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e064      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x452>
 800237c:	e05c      	b.n	8002438 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_RCC_OscConfig+0x4b4>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fc72 	bl	8000c6c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fc6e 	bl	8000c6c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e04d      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_OscConfig+0x4ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x480>
 80023aa:	e045      	b.n	8002438 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e040      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000
 80023c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <HAL_RCC_OscConfig+0x538>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d030      	beq.n	8002434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d129      	bne.n	8002434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d122      	bne.n	8002434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d119      	bne.n	8002434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d10f      	bne.n	8002434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e022      	b.n	80024a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7fe f9eb 	bl	8000848 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f814 	bl	80024a8 <HAL_SD_InitCard>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e00a      	b.n	80024a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b08e      	sub	sp, #56	@ 0x38
 80024ac:	af04      	add	r7, sp, #16
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80024c4:	2376      	movs	r3, #118	@ 0x76
 80024c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681d      	ldr	r5, [r3, #0]
 80024cc:	466c      	mov	r4, sp
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e0:	4628      	mov	r0, r5
 80024e2:	f001 f9fd 	bl	80038e0 <SDIO_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80024ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e04f      	b.n	8002598 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80024f8:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <HAL_SD_InitCard+0xf8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f001 fa35 	bl	8003972 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_SD_InitCard+0xf8>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800250e:	2002      	movs	r0, #2
 8002510:	f7fe fbb8 	bl	8000c84 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fe69 	bl	80031ec <SD_PowerON>
 800251a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e02e      	b.n	8002598 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fd88 	bl	8003050 <SD_InitCard>
 8002540:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e01b      	b.n	8002598 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002568:	4618      	mov	r0, r3
 800256a:	f001 fa94 	bl	8003a96 <SDMMC_CmdBlockLength>
 800256e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00f      	beq.n	8002596 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <HAL_SD_InitCard+0xfc>)
 800257c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3728      	adds	r7, #40	@ 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bdb0      	pop	{r4, r5, r7, pc}
 80025a0:	422580a0 	.word	0x422580a0
 80025a4:	004005ff 	.word	0x004005ff

080025a8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b092      	sub	sp, #72	@ 0x48
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80025b6:	f7fe fb59 	bl	8000c6c <HAL_GetTick>
 80025ba:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e1bd      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	f040 81b0 	bne.w	8002948 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80025ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	441a      	add	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d907      	bls.n	800260c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e1a4      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2203      	movs	r2, #3
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002620:	2b01      	cmp	r3, #1
 8002622:	d002      	beq.n	800262a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002626:	025b      	lsls	r3, r3, #9
 8002628:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	025b      	lsls	r3, r3, #9
 8002634:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002636:	2390      	movs	r3, #144	@ 0x90
 8002638:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800263a:	2302      	movs	r3, #2
 800263c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002642:	2301      	movs	r3, #1
 8002644:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f107 0214 	add.w	r2, r7, #20
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f9f4 	bl	8003a3e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d90a      	bls.n	8002672 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2202      	movs	r2, #2
 8002660:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002668:	4618      	mov	r0, r3
 800266a:	f001 fa58 	bl	8003b1e <SDMMC_CmdReadMultiBlock>
 800266e:	6478      	str	r0, [r7, #68]	@ 0x44
 8002670:	e009      	b.n	8002686 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800267e:	4618      	mov	r0, r3
 8002680:	f001 fa2b 	bl	8003ada <SDMMC_CmdReadSingleBlock>
 8002684:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002688:	2b00      	cmp	r3, #0
 800268a:	d012      	beq.n	80026b2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a7a      	ldr	r2, [pc, #488]	@ (800287c <HAL_SD_ReadBlocks+0x2d4>)
 8002692:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800269a:	431a      	orrs	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e151      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80026b6:	e061      	b.n	800277c <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d03c      	beq.n	8002740 <HAL_SD_ReadBlocks+0x198>
 80026c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d039      	beq.n	8002740 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80026d0:	e033      	b.n	800273a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 f92d 	bl	8003936 <SDIO_ReadFIFO>
 80026dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80026de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80026e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e8:	3301      	adds	r3, #1
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80026ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ee:	3b01      	subs	r3, #1
 80026f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80026f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80026fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fe:	3301      	adds	r3, #1
 8002700:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002704:	3b01      	subs	r3, #1
 8002706:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270a:	0c1b      	lsrs	r3, r3, #16
 800270c:	b2da      	uxtb	r2, r3
 800270e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002710:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002714:	3301      	adds	r3, #1
 8002716:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271a:	3b01      	subs	r3, #1
 800271c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800271e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002720:	0e1b      	lsrs	r3, r3, #24
 8002722:	b2da      	uxtb	r2, r3
 8002724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002726:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272a:	3301      	adds	r3, #1
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800272e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002730:	3b01      	subs	r3, #1
 8002732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002736:	3301      	adds	r3, #1
 8002738:	643b      	str	r3, [r7, #64]	@ 0x40
 800273a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273c:	2b07      	cmp	r3, #7
 800273e:	d9c8      	bls.n	80026d2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002740:	f7fe fa94 	bl	8000c6c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800274c:	429a      	cmp	r2, r3
 800274e:	d902      	bls.n	8002756 <HAL_SD_ReadBlocks+0x1ae>
 8002750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002752:	2b00      	cmp	r3, #0
 8002754:	d112      	bne.n	800277c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a48      	ldr	r2, [pc, #288]	@ (800287c <HAL_SD_ReadBlocks+0x2d4>)
 800275c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002762:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0ec      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002782:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002786:	2b00      	cmp	r3, #0
 8002788:	d096      	beq.n	80026b8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d022      	beq.n	80027de <HAL_SD_ReadBlocks+0x236>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d91f      	bls.n	80027de <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d01b      	beq.n	80027de <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 fa1e 	bl	8003bec <SDMMC_CmdStopTransfer>
 80027b0:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80027b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d012      	beq.n	80027de <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2f      	ldr	r2, [pc, #188]	@ (800287c <HAL_SD_ReadBlocks+0x2d4>)
 80027be:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c6:	431a      	orrs	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0bb      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d012      	beq.n	8002812 <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a22      	ldr	r2, [pc, #136]	@ (800287c <HAL_SD_ReadBlocks+0x2d4>)
 80027f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f8:	f043 0208 	orr.w	r2, r3, #8
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0a1      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d012      	beq.n	8002846 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a15      	ldr	r2, [pc, #84]	@ (800287c <HAL_SD_ReadBlocks+0x2d4>)
 8002826:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282c:	f043 0202 	orr.w	r2, r3, #2
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e087      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d064      	beq.n	800291e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a08      	ldr	r2, [pc, #32]	@ (800287c <HAL_SD_ReadBlocks+0x2d4>)
 800285a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06d      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>
 800287a:	bf00      	nop
 800287c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f001 f856 	bl	8003936 <SDIO_ReadFIFO>
 800288a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288e:	b2da      	uxtb	r2, r3
 8002890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002892:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002896:	3301      	adds	r3, #1
 8002898:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800289a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800289c:	3b01      	subs	r3, #1
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80028a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ac:	3301      	adds	r3, #1
 80028ae:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80028b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b2:	3b01      	subs	r3, #1
 80028b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80028b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028be:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c2:	3301      	adds	r3, #1
 80028c4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80028c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c8:	3b01      	subs	r3, #1
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80028cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ce:	0e1b      	lsrs	r3, r3, #24
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d8:	3301      	adds	r3, #1
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80028dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028de:	3b01      	subs	r3, #1
 80028e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80028e2:	f7fe f9c3 	bl	8000c6c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d902      	bls.n	80028f8 <HAL_SD_ReadBlocks+0x350>
 80028f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d112      	bne.n	800291e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a18      	ldr	r2, [pc, #96]	@ (8002960 <HAL_SD_ReadBlocks+0x3b8>)
 80028fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e01b      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_SD_ReadBlocks+0x38a>
 800292c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1a6      	bne.n	8002880 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f240 523a 	movw	r2, #1338	@ 0x53a
 800293a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e006      	b.n	8002956 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3748      	adds	r7, #72	@ 0x48
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	004005ff 	.word	0x004005ff

08002964 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b092      	sub	sp, #72	@ 0x48
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002972:	f7fe f97b 	bl	8000c6c <HAL_GetTick>
 8002976:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d107      	bne.n	8002996 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e165      	b.n	8002c62 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	f040 8158 	bne.w	8002c54 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80029aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d907      	bls.n	80029c8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029bc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e14c      	b.n	8002c62 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2203      	movs	r2, #3
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d002      	beq.n	80029e6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80029e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e2:	025b      	lsls	r3, r3, #9
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	025b      	lsls	r3, r3, #9
 80029f0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80029f2:	2390      	movs	r3, #144	@ 0x90
 80029f4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f107 0218 	add.w	r2, r7, #24
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f001 f816 	bl	8003a3e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d90a      	bls.n	8002a2e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f8be 	bl	8003ba6 <SDMMC_CmdWriteMultiBlock>
 8002a2a:	6478      	str	r0, [r7, #68]	@ 0x44
 8002a2c:	e009      	b.n	8002a42 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2210      	movs	r2, #16
 8002a32:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 f891 	bl	8003b62 <SDMMC_CmdWriteSingleBlock>
 8002a40:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d012      	beq.n	8002a6e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a87      	ldr	r2, [pc, #540]	@ (8002c6c <HAL_SD_WriteBlocks+0x308>)
 8002a4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0f9      	b.n	8002c62 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002a72:	e065      	b.n	8002b40 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d040      	beq.n	8002b04 <HAL_SD_WriteBlocks+0x1a0>
 8002a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03d      	beq.n	8002b04 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a8c:	e037      	b.n	8002afe <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a96:	3301      	adds	r3, #1
 8002a98:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	021a      	lsls	r2, r3, #8
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aae:	3301      	adds	r3, #1
 8002ab0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	041a      	lsls	r2, r3, #16
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002acc:	3b01      	subs	r3, #1
 8002ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	061a      	lsls	r2, r3, #24
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ade:	3301      	adds	r3, #1
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f107 0214 	add.w	r2, r7, #20
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 ff2c 	bl	8003950 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002afa:	3301      	adds	r3, #1
 8002afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b00:	2b07      	cmp	r3, #7
 8002b02:	d9c4      	bls.n	8002a8e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002b04:	f7fe f8b2 	bl	8000c6c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d902      	bls.n	8002b1a <HAL_SD_WriteBlocks+0x1b6>
 8002b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d112      	bne.n	8002b40 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a53      	ldr	r2, [pc, #332]	@ (8002c6c <HAL_SD_WriteBlocks+0x308>)
 8002b20:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e090      	b.n	8002c62 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d092      	beq.n	8002a74 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d022      	beq.n	8002ba2 <HAL_SD_WriteBlocks+0x23e>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d91f      	bls.n	8002ba2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d01b      	beq.n	8002ba2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 f83c 	bl	8003bec <SDMMC_CmdStopTransfer>
 8002b74:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d012      	beq.n	8002ba2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3a      	ldr	r2, [pc, #232]	@ (8002c6c <HAL_SD_WriteBlocks+0x308>)
 8002b82:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e05f      	b.n	8002c62 <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8002c6c <HAL_SD_WriteBlocks+0x308>)
 8002bb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbc:	f043 0208 	orr.w	r2, r3, #8
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e045      	b.n	8002c62 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a20      	ldr	r2, [pc, #128]	@ (8002c6c <HAL_SD_WriteBlocks+0x308>)
 8002bea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf0:	f043 0202 	orr.w	r2, r3, #2
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e02b      	b.n	8002c62 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d012      	beq.n	8002c3e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <HAL_SD_WriteBlocks+0x308>)
 8002c1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c24:	f043 0210 	orr.w	r2, r3, #16
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e011      	b.n	8002c62 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002c46:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e006      	b.n	8002c62 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3748      	adds	r7, #72	@ 0x48
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	004005ff 	.word	0x004005ff

08002c70 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c7e:	0f9b      	lsrs	r3, r3, #30
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c9c:	0e1b      	lsrs	r3, r3, #24
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cae:	0c1b      	lsrs	r3, r3, #16
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cd0:	0d1b      	lsrs	r3, r3, #20
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cee:	0bdb      	lsrs	r3, r3, #15
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d00:	0b9b      	lsrs	r3, r3, #14
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d12:	0b5b      	lsrs	r3, r3, #13
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d24:	0b1b      	lsrs	r3, r3, #12
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d163      	bne.n	8002e08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002d50:	0f92      	lsrs	r2, r2, #30
 8002d52:	431a      	orrs	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5c:	0edb      	lsrs	r3, r3, #27
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d6e:	0e1b      	lsrs	r3, r3, #24
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d80:	0d5b      	lsrs	r3, r3, #21
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002da4:	0bdb      	lsrs	r3, r3, #15
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	7e1b      	ldrb	r3, [r3, #24]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	2201      	movs	r2, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002dd2:	fb03 f202 	mul.w	r2, r3, r2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	7a1b      	ldrb	r3, [r3, #8]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002df4:	0a52      	lsrs	r2, r2, #9
 8002df6:	fb03 f202 	mul.w	r2, r3, r2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e04:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e06:	e031      	b.n	8002e6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d11d      	bne.n	8002e4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	431a      	orrs	r2, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	029a      	lsls	r2, r3, #10
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e40:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e4a:	e00f      	b.n	8002e6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a58      	ldr	r2, [pc, #352]	@ (8002fb4 <HAL_SD_GetCardCSD+0x344>)
 8002e52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e09d      	b.n	8002fa8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e70:	0b9b      	lsrs	r3, r3, #14
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e82:	09db      	lsrs	r3, r3, #7
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea4:	0fdb      	lsrs	r3, r3, #31
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	0f5b      	lsrs	r3, r3, #29
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed4:	0d9b      	lsrs	r3, r3, #22
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	0d5b      	lsrs	r3, r3, #21
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	0c1b      	lsrs	r3, r3, #16
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f16:	0bdb      	lsrs	r3, r3, #15
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	0b9b      	lsrs	r3, r3, #14
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3e:	0b5b      	lsrs	r3, r3, #13
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f52:	0b1b      	lsrs	r3, r3, #12
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	0a9b      	lsrs	r3, r3, #10
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	004005ff 	.word	0x004005ff

08002fb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f970 	bl	8003308 <SD_SendStatus>
 8003028:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	0a5b      	lsrs	r3, r3, #9
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003046:	693b      	ldr	r3, [r7, #16]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b094      	sub	sp, #80	@ 0x50
 8003054:	af04      	add	r7, sp, #16
 8003056:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003058:	2301      	movs	r3, #1
 800305a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fc94 	bl	800398e <SDIO_GetPowerState>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800306c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003070:	e0b8      	b.n	80031e4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	2b03      	cmp	r3, #3
 8003078:	d02f      	beq.n	80030da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fe7b 	bl	8003d7a <SDMMC_CmdSendCID>
 8003084:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <SD_InitCard+0x40>
    {
      return errorstate;
 800308c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800308e:	e0a9      	b.n	80031e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fcbe 	bl	8003a18 <SDIO_GetResponse>
 800309c:	4602      	mov	r2, r0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2104      	movs	r1, #4
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fcb5 	bl	8003a18 <SDIO_GetResponse>
 80030ae:	4602      	mov	r2, r0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2108      	movs	r1, #8
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fcac 	bl	8003a18 <SDIO_GetResponse>
 80030c0:	4602      	mov	r2, r0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	210c      	movs	r1, #12
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fca3 	bl	8003a18 <SDIO_GetResponse>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d00d      	beq.n	80030fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f107 020e 	add.w	r2, r7, #14
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fe81 	bl	8003df4 <SDMMC_CmdSetRelAdd>
 80030f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80030f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <SD_InitCard+0xae>
    {
      return errorstate;
 80030fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fc:	e072      	b.n	80031e4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	2b03      	cmp	r3, #3
 8003104:	d036      	beq.n	8003174 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003106:	89fb      	ldrh	r3, [r7, #14]
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003116:	041b      	lsls	r3, r3, #16
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f000 fe4b 	bl	8003db6 <SDMMC_CmdSendCSD>
 8003120:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800312a:	e05b      	b.n	80031e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fc70 	bl	8003a18 <SDIO_GetResponse>
 8003138:	4602      	mov	r2, r0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2104      	movs	r1, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fc67 	bl	8003a18 <SDIO_GetResponse>
 800314a:	4602      	mov	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2108      	movs	r1, #8
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fc5e 	bl	8003a18 <SDIO_GetResponse>
 800315c:	4602      	mov	r2, r0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	210c      	movs	r1, #12
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fc55 	bl	8003a18 <SDIO_GetResponse>
 800316e:	4602      	mov	r2, r0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2104      	movs	r1, #4
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fc4c 	bl	8003a18 <SDIO_GetResponse>
 8003180:	4603      	mov	r3, r0
 8003182:	0d1a      	lsrs	r2, r3, #20
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	4619      	mov	r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff fd6e 	bl	8002c70 <HAL_SD_GetCardCSD>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800319a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800319e:	e021      	b.n	80031e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a8:	041b      	lsls	r3, r3, #16
 80031aa:	2200      	movs	r2, #0
 80031ac:	461c      	mov	r4, r3
 80031ae:	4615      	mov	r5, r2
 80031b0:	4622      	mov	r2, r4
 80031b2:	462b      	mov	r3, r5
 80031b4:	4608      	mov	r0, r1
 80031b6:	f000 fd3b 	bl	8003c30 <SDMMC_CmdSelDesel>
 80031ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80031bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <SD_InitCard+0x176>
  {
    return errorstate;
 80031c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c4:	e00e      	b.n	80031e4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681d      	ldr	r5, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	466c      	mov	r4, sp
 80031ce:	f103 0210 	add.w	r2, r3, #16
 80031d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80031d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031d8:	3304      	adds	r3, #4
 80031da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031dc:	4628      	mov	r0, r5
 80031de:	f000 fb7f 	bl	80038e0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3740      	adds	r7, #64	@ 0x40
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bdb0      	pop	{r4, r5, r7, pc}

080031ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fd36 	bl	8003c76 <SDMMC_CmdGoIdleState>
 800320a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	e072      	b.n	80032fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fd49 	bl	8003cb2 <SDMMC_CmdOperCond>
 8003220:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00d      	beq.n	8003244 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fd1f 	bl	8003c76 <SDMMC_CmdGoIdleState>
 8003238:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	e05b      	b.n	80032fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324e:	2b01      	cmp	r3, #1
 8003250:	d137      	bne.n	80032c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fd49 	bl	8003cf0 <SDMMC_CmdAppCommand>
 800325e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02d      	beq.n	80032c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003266:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800326a:	e047      	b.n	80032fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fd3c 	bl	8003cf0 <SDMMC_CmdAppCommand>
 8003278:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <SD_PowerON+0x98>
    {
      return errorstate;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	e03b      	b.n	80032fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	491e      	ldr	r1, [pc, #120]	@ (8003304 <SD_PowerON+0x118>)
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fd52 	bl	8003d34 <SDMMC_CmdAppOperCommand>
 8003290:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003298:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800329c:	e02e      	b.n	80032fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fbb7 	bl	8003a18 <SDIO_GetResponse>
 80032aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	0fdb      	lsrs	r3, r3, #31
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <SD_PowerON+0xcc>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <SD_PowerON+0xce>
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]

    count++;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	3301      	adds	r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d802      	bhi.n	80032d2 <SD_PowerON+0xe6>
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0cc      	beq.n	800326c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80032d8:	4293      	cmp	r3, r2
 80032da:	d902      	bls.n	80032e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80032dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032e0:	e00c      	b.n	80032fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80032f2:	e002      	b.n	80032fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	c1100000 	.word	0xc1100000

08003308 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003318:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800331c:	e018      	b.n	8003350 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003326:	041b      	lsls	r3, r3, #16
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 fd83 	bl	8003e36 <SDMMC_CmdSendStatus>
 8003330:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	e009      	b.n	8003350 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fb68 	bl	8003a18 <SDIO_GetResponse>
 8003348:	4602      	mov	r2, r0
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e042      	b.n	80033f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fb9c 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	@ 0x24
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800339a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f82b 	bl	80033f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033fc:	b0c0      	sub	sp, #256	@ 0x100
 80033fe:	af00      	add	r7, sp, #0
 8003400:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003414:	68d9      	ldr	r1, [r3, #12]
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	ea40 0301 	orr.w	r3, r0, r1
 8003420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	431a      	orrs	r2, r3
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	431a      	orrs	r2, r3
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003450:	f021 010c 	bic.w	r1, r1, #12
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800345e:	430b      	orrs	r3, r1
 8003460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	6999      	ldr	r1, [r3, #24]
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	ea40 0301 	orr.w	r3, r0, r1
 800347e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b8f      	ldr	r3, [pc, #572]	@ (80036c4 <UART_SetConfig+0x2cc>)
 8003488:	429a      	cmp	r2, r3
 800348a:	d005      	beq.n	8003498 <UART_SetConfig+0xa0>
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b8d      	ldr	r3, [pc, #564]	@ (80036c8 <UART_SetConfig+0x2d0>)
 8003494:	429a      	cmp	r2, r3
 8003496:	d104      	bne.n	80034a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003498:	f7fd ffca 	bl	8001430 <HAL_RCC_GetPCLK2Freq>
 800349c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034a0:	e003      	b.n	80034aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034a2:	f7fd ffb1 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
 80034a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b4:	f040 810c 	bne.w	80036d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034ca:	4622      	mov	r2, r4
 80034cc:	462b      	mov	r3, r5
 80034ce:	1891      	adds	r1, r2, r2
 80034d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034d2:	415b      	adcs	r3, r3
 80034d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034da:	4621      	mov	r1, r4
 80034dc:	eb12 0801 	adds.w	r8, r2, r1
 80034e0:	4629      	mov	r1, r5
 80034e2:	eb43 0901 	adc.w	r9, r3, r1
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fa:	4690      	mov	r8, r2
 80034fc:	4699      	mov	r9, r3
 80034fe:	4623      	mov	r3, r4
 8003500:	eb18 0303 	adds.w	r3, r8, r3
 8003504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003508:	462b      	mov	r3, r5
 800350a:	eb49 0303 	adc.w	r3, r9, r3
 800350e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800351e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003526:	460b      	mov	r3, r1
 8003528:	18db      	adds	r3, r3, r3
 800352a:	653b      	str	r3, [r7, #80]	@ 0x50
 800352c:	4613      	mov	r3, r2
 800352e:	eb42 0303 	adc.w	r3, r2, r3
 8003532:	657b      	str	r3, [r7, #84]	@ 0x54
 8003534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800353c:	f7fc fe62 	bl	8000204 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4b61      	ldr	r3, [pc, #388]	@ (80036cc <UART_SetConfig+0x2d4>)
 8003546:	fba3 2302 	umull	r2, r3, r3, r2
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	011c      	lsls	r4, r3, #4
 800354e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003558:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800355c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	1891      	adds	r1, r2, r2
 8003566:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003568:	415b      	adcs	r3, r3
 800356a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800356c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003570:	4641      	mov	r1, r8
 8003572:	eb12 0a01 	adds.w	sl, r2, r1
 8003576:	4649      	mov	r1, r9
 8003578:	eb43 0b01 	adc.w	fp, r3, r1
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800358c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003590:	4692      	mov	sl, r2
 8003592:	469b      	mov	fp, r3
 8003594:	4643      	mov	r3, r8
 8003596:	eb1a 0303 	adds.w	r3, sl, r3
 800359a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800359e:	464b      	mov	r3, r9
 80035a0:	eb4b 0303 	adc.w	r3, fp, r3
 80035a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035bc:	460b      	mov	r3, r1
 80035be:	18db      	adds	r3, r3, r3
 80035c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80035c2:	4613      	mov	r3, r2
 80035c4:	eb42 0303 	adc.w	r3, r2, r3
 80035c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035d2:	f7fc fe17 	bl	8000204 <__aeabi_uldivmod>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <UART_SetConfig+0x2d4>)
 80035de:	fba3 2301 	umull	r2, r3, r3, r1
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2264      	movs	r2, #100	@ 0x64
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	1acb      	subs	r3, r1, r3
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035f2:	4b36      	ldr	r3, [pc, #216]	@ (80036cc <UART_SetConfig+0x2d4>)
 80035f4:	fba3 2302 	umull	r2, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003600:	441c      	add	r4, r3
 8003602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800360c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003614:	4642      	mov	r2, r8
 8003616:	464b      	mov	r3, r9
 8003618:	1891      	adds	r1, r2, r2
 800361a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800361c:	415b      	adcs	r3, r3
 800361e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003624:	4641      	mov	r1, r8
 8003626:	1851      	adds	r1, r2, r1
 8003628:	6339      	str	r1, [r7, #48]	@ 0x30
 800362a:	4649      	mov	r1, r9
 800362c:	414b      	adcs	r3, r1
 800362e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800363c:	4659      	mov	r1, fp
 800363e:	00cb      	lsls	r3, r1, #3
 8003640:	4651      	mov	r1, sl
 8003642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003646:	4651      	mov	r1, sl
 8003648:	00ca      	lsls	r2, r1, #3
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	4603      	mov	r3, r0
 8003650:	4642      	mov	r2, r8
 8003652:	189b      	adds	r3, r3, r2
 8003654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003658:	464b      	mov	r3, r9
 800365a:	460a      	mov	r2, r1
 800365c:	eb42 0303 	adc.w	r3, r2, r3
 8003660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003670:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003678:	460b      	mov	r3, r1
 800367a:	18db      	adds	r3, r3, r3
 800367c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800367e:	4613      	mov	r3, r2
 8003680:	eb42 0303 	adc.w	r3, r2, r3
 8003684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800368a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800368e:	f7fc fdb9 	bl	8000204 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4b0d      	ldr	r3, [pc, #52]	@ (80036cc <UART_SetConfig+0x2d4>)
 8003698:	fba3 1302 	umull	r1, r3, r3, r2
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	2164      	movs	r1, #100	@ 0x64
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	3332      	adds	r3, #50	@ 0x32
 80036aa:	4a08      	ldr	r2, [pc, #32]	@ (80036cc <UART_SetConfig+0x2d4>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	f003 0207 	and.w	r2, r3, #7
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4422      	add	r2, r4
 80036be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036c0:	e106      	b.n	80038d0 <UART_SetConfig+0x4d8>
 80036c2:	bf00      	nop
 80036c4:	40011000 	.word	0x40011000
 80036c8:	40011400 	.word	0x40011400
 80036cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d4:	2200      	movs	r2, #0
 80036d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036e2:	4642      	mov	r2, r8
 80036e4:	464b      	mov	r3, r9
 80036e6:	1891      	adds	r1, r2, r2
 80036e8:	6239      	str	r1, [r7, #32]
 80036ea:	415b      	adcs	r3, r3
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036f2:	4641      	mov	r1, r8
 80036f4:	1854      	adds	r4, r2, r1
 80036f6:	4649      	mov	r1, r9
 80036f8:	eb43 0501 	adc.w	r5, r3, r1
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	00eb      	lsls	r3, r5, #3
 8003706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800370a:	00e2      	lsls	r2, r4, #3
 800370c:	4614      	mov	r4, r2
 800370e:	461d      	mov	r5, r3
 8003710:	4643      	mov	r3, r8
 8003712:	18e3      	adds	r3, r4, r3
 8003714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003718:	464b      	mov	r3, r9
 800371a:	eb45 0303 	adc.w	r3, r5, r3
 800371e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800372e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800373e:	4629      	mov	r1, r5
 8003740:	008b      	lsls	r3, r1, #2
 8003742:	4621      	mov	r1, r4
 8003744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003748:	4621      	mov	r1, r4
 800374a:	008a      	lsls	r2, r1, #2
 800374c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003750:	f7fc fd58 	bl	8000204 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4b60      	ldr	r3, [pc, #384]	@ (80038dc <UART_SetConfig+0x4e4>)
 800375a:	fba3 2302 	umull	r2, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	011c      	lsls	r4, r3, #4
 8003762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003766:	2200      	movs	r2, #0
 8003768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800376c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003774:	4642      	mov	r2, r8
 8003776:	464b      	mov	r3, r9
 8003778:	1891      	adds	r1, r2, r2
 800377a:	61b9      	str	r1, [r7, #24]
 800377c:	415b      	adcs	r3, r3
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003784:	4641      	mov	r1, r8
 8003786:	1851      	adds	r1, r2, r1
 8003788:	6139      	str	r1, [r7, #16]
 800378a:	4649      	mov	r1, r9
 800378c:	414b      	adcs	r3, r1
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800379c:	4659      	mov	r1, fp
 800379e:	00cb      	lsls	r3, r1, #3
 80037a0:	4651      	mov	r1, sl
 80037a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a6:	4651      	mov	r1, sl
 80037a8:	00ca      	lsls	r2, r1, #3
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	4642      	mov	r2, r8
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037b8:	464b      	mov	r3, r9
 80037ba:	460a      	mov	r2, r1
 80037bc:	eb42 0303 	adc.w	r3, r2, r3
 80037c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037dc:	4649      	mov	r1, r9
 80037de:	008b      	lsls	r3, r1, #2
 80037e0:	4641      	mov	r1, r8
 80037e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e6:	4641      	mov	r1, r8
 80037e8:	008a      	lsls	r2, r1, #2
 80037ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037ee:	f7fc fd09 	bl	8000204 <__aeabi_uldivmod>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <UART_SetConfig+0x4e4>)
 80037fa:	fba3 2301 	umull	r2, r3, r3, r1
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2264      	movs	r2, #100	@ 0x64
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	1acb      	subs	r3, r1, r3
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	3332      	adds	r3, #50	@ 0x32
 800380c:	4a33      	ldr	r2, [pc, #204]	@ (80038dc <UART_SetConfig+0x4e4>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003818:	441c      	add	r4, r3
 800381a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800381e:	2200      	movs	r2, #0
 8003820:	673b      	str	r3, [r7, #112]	@ 0x70
 8003822:	677a      	str	r2, [r7, #116]	@ 0x74
 8003824:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003828:	4642      	mov	r2, r8
 800382a:	464b      	mov	r3, r9
 800382c:	1891      	adds	r1, r2, r2
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	415b      	adcs	r3, r3
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003838:	4641      	mov	r1, r8
 800383a:	1851      	adds	r1, r2, r1
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	4649      	mov	r1, r9
 8003840:	414b      	adcs	r3, r1
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003850:	4659      	mov	r1, fp
 8003852:	00cb      	lsls	r3, r1, #3
 8003854:	4651      	mov	r1, sl
 8003856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800385a:	4651      	mov	r1, sl
 800385c:	00ca      	lsls	r2, r1, #3
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	4603      	mov	r3, r0
 8003864:	4642      	mov	r2, r8
 8003866:	189b      	adds	r3, r3, r2
 8003868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800386a:	464b      	mov	r3, r9
 800386c:	460a      	mov	r2, r1
 800386e:	eb42 0303 	adc.w	r3, r2, r3
 8003872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	663b      	str	r3, [r7, #96]	@ 0x60
 800387e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800388c:	4649      	mov	r1, r9
 800388e:	008b      	lsls	r3, r1, #2
 8003890:	4641      	mov	r1, r8
 8003892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003896:	4641      	mov	r1, r8
 8003898:	008a      	lsls	r2, r1, #2
 800389a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800389e:	f7fc fcb1 	bl	8000204 <__aeabi_uldivmod>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <UART_SetConfig+0x4e4>)
 80038a8:	fba3 1302 	umull	r1, r3, r3, r2
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	2164      	movs	r1, #100	@ 0x64
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	3332      	adds	r3, #50	@ 0x32
 80038ba:	4a08      	ldr	r2, [pc, #32]	@ (80038dc <UART_SetConfig+0x4e4>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4422      	add	r2, r4
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038d6:	46bd      	mov	sp, r7
 80038d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038dc:	51eb851f 	.word	0x51eb851f

080038e0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80038e0:	b084      	sub	sp, #16
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	f107 001c 	add.w	r0, r7, #28
 80038ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80038f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80038f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80038fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80038fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003902:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003906:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800390a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800391a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	b004      	add	sp, #16
 8003934:	4770      	bx	lr

08003936 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2203      	movs	r2, #3
 800397e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0303 	and.w	r3, r3, #3
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80039c8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80039ce:	431a      	orrs	r2, r3
                       Command->CPSM);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80039d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80039e4:	f023 030f 	bic.w	r3, r3, #15
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	b2db      	uxtb	r3, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3314      	adds	r3, #20
 8003a26:	461a      	mov	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
}  
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003a64:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003a6a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003a70:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0

}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b088      	sub	sp, #32
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aa8:	2340      	movs	r3, #64	@ 0x40
 8003aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ab0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ab6:	f107 0308 	add.w	r3, r7, #8
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ff74 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	2110      	movs	r1, #16
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f9d7 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b088      	sub	sp, #32
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003ae8:	2311      	movs	r3, #17
 8003aea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aec:	2340      	movs	r3, #64	@ 0x40
 8003aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003af8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff52 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0a:	2111      	movs	r1, #17
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f9b5 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b14:	69fb      	ldr	r3, [r7, #28]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b088      	sub	sp, #32
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003b2c:	2312      	movs	r3, #18
 8003b2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b30:	2340      	movs	r3, #64	@ 0x40
 8003b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b3e:	f107 0308 	add.w	r3, r7, #8
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff30 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	2112      	movs	r1, #18
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f993 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b58:	69fb      	ldr	r3, [r7, #28]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b088      	sub	sp, #32
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003b70:	2318      	movs	r3, #24
 8003b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b74:	2340      	movs	r3, #64	@ 0x40
 8003b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff0e 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	2118      	movs	r1, #24
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f971 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b088      	sub	sp, #32
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003bb4:	2319      	movs	r3, #25
 8003bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bb8:	2340      	movs	r3, #64	@ 0x40
 8003bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bc6:	f107 0308 	add.w	r3, r7, #8
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff feec 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd6:	2119      	movs	r1, #25
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f94f 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003be0:	69fb      	ldr	r3, [r7, #28]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bfc:	2340      	movs	r3, #64	@ 0x40
 8003bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c0a:	f107 0308 	add.w	r3, r7, #8
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff feca 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003c16:	4a05      	ldr	r2, [pc, #20]	@ (8003c2c <SDMMC_CmdStopTransfer+0x40>)
 8003c18:	210c      	movs	r1, #12
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f92e 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003c20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c22:	69fb      	ldr	r3, [r7, #28]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	05f5e100 	.word	0x05f5e100

08003c30 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	@ 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003c40:	2307      	movs	r3, #7
 8003c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c44:	2340      	movs	r3, #64	@ 0x40
 8003c46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c50:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c52:	f107 0310 	add.w	r3, r7, #16
 8003c56:	4619      	mov	r1, r3
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff fea6 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c62:	2107      	movs	r1, #7
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f909 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003c6a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3728      	adds	r7, #40	@ 0x28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b088      	sub	sp, #32
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c94:	f107 0308 	add.w	r3, r7, #8
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fe85 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fb23 	bl	80042ec <SDMMC_GetCmdError>
 8003ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b088      	sub	sp, #32
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003cba:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003cbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cc4:	2340      	movs	r3, #64	@ 0x40
 8003cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ccc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cd2:	f107 0308 	add.w	r3, r7, #8
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fe66 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fab6 	bl	8004250 <SDMMC_GetCmdResp7>
 8003ce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003cfe:	2337      	movs	r3, #55	@ 0x37
 8003d00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d02:	2340      	movs	r3, #64	@ 0x40
 8003d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d10:	f107 0308 	add.w	r3, r7, #8
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fe47 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d20:	2137      	movs	r1, #55	@ 0x37
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8aa 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003d4a:	2329      	movs	r3, #41	@ 0x29
 8003d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d4e:	2340      	movs	r3, #64	@ 0x40
 8003d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d5c:	f107 0308 	add.w	r3, r7, #8
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fe21 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f9bd 	bl	80040e8 <SDMMC_GetCmdResp3>
 8003d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d70:	69fb      	ldr	r3, [r7, #28]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b088      	sub	sp, #32
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003d86:	2302      	movs	r3, #2
 8003d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d8a:	23c0      	movs	r3, #192	@ 0xc0
 8003d8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d98:	f107 0308 	add.w	r3, r7, #8
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fe03 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f957 	bl	8004058 <SDMMC_GetCmdResp2>
 8003daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dac:	69fb      	ldr	r3, [r7, #28]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b088      	sub	sp, #32
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003dc4:	2309      	movs	r3, #9
 8003dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003dc8:	23c0      	movs	r3, #192	@ 0xc0
 8003dca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dd6:	f107 0308 	add.w	r3, r7, #8
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fde4 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f938 	bl	8004058 <SDMMC_GetCmdResp2>
 8003de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dea:	69fb      	ldr	r3, [r7, #28]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003e02:	2303      	movs	r3, #3
 8003e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e06:	2340      	movs	r3, #64	@ 0x40
 8003e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e14:	f107 0308 	add.w	r3, r7, #8
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fdc5 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	2103      	movs	r1, #3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f99d 	bl	8004164 <SDMMC_GetCmdResp6>
 8003e2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b088      	sub	sp, #32
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003e44:	230d      	movs	r3, #13
 8003e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e48:	2340      	movs	r3, #64	@ 0x40
 8003e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e56:	f107 0308 	add.w	r3, r7, #8
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff fda4 	bl	80039aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e66:	210d      	movs	r1, #13
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f807 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e70:	69fb      	ldr	r3, [r7, #28]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	460b      	mov	r3, r1
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003e8a:	4b70      	ldr	r3, [pc, #448]	@ (800404c <SDMMC_GetCmdResp1+0x1d0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a70      	ldr	r2, [pc, #448]	@ (8004050 <SDMMC_GetCmdResp1+0x1d4>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	0a5a      	lsrs	r2, r3, #9
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	1e5a      	subs	r2, r3, #1
 8003ea2:	61fa      	str	r2, [r7, #28]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ea8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003eac:	e0c9      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ef      	beq.n	8003e9e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1ea      	bne.n	8003e9e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003eda:	2304      	movs	r3, #4
 8003edc:	e0b1      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0a6      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	22c5      	movs	r2, #197	@ 0xc5
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fd7f 	bl	80039fe <SDIO_GetCommandResponse>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	7afb      	ldrb	r3, [r7, #11]
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d001      	beq.n	8003f0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e099      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003f0e:	2100      	movs	r1, #0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff fd81 	bl	8003a18 <SDIO_GetResponse>
 8003f16:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8004054 <SDMMC_GetCmdResp1+0x1d8>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e08d      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da02      	bge.n	8003f32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003f2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f30:	e087      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003f3c:	2340      	movs	r3, #64	@ 0x40
 8003f3e:	e080      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003f4a:	2380      	movs	r3, #128	@ 0x80
 8003f4c:	e079      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f5c:	e071      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003f68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f6c:	e069      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003f78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f7c:	e061      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003f88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f8c:	e059      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f9c:	e051      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003fa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fac:	e049      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003fb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fbc:	e041      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003fc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fcc:	e039      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003fd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fdc:	e031      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003fe8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003fec:	e029      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003ff8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003ffc:	e021      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004008:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800400c:	e019      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004018:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800401c:	e011      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004028:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800402c:	e009      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004038:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800403c:	e001      	b.n	8004042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800403e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	2000000c 	.word	0x2000000c
 8004050:	10624dd3 	.word	0x10624dd3
 8004054:	fdffe008 	.word	0xfdffe008

08004058 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004060:	4b1f      	ldr	r3, [pc, #124]	@ (80040e0 <SDMMC_GetCmdResp2+0x88>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1f      	ldr	r2, [pc, #124]	@ (80040e4 <SDMMC_GetCmdResp2+0x8c>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	0a5b      	lsrs	r3, r3, #9
 800406c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1e5a      	subs	r2, r3, #1
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004080:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004084:	e026      	b.n	80040d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0ef      	beq.n	8004076 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ea      	bne.n	8004076 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2204      	movs	r2, #4
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040b2:	2304      	movs	r3, #4
 80040b4:	e00e      	b.n	80040d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e003      	b.n	80040d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	22c5      	movs	r2, #197	@ 0xc5
 80040d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	2000000c 	.word	0x2000000c
 80040e4:	10624dd3 	.word	0x10624dd3

080040e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040f0:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <SDMMC_GetCmdResp3+0x74>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <SDMMC_GetCmdResp3+0x78>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	0a5b      	lsrs	r3, r3, #9
 80040fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004100:	fb02 f303 	mul.w	r3, r2, r3
 8004104:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e5a      	subs	r2, r3, #1
 800410a:	60fa      	str	r2, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004110:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004114:	e01b      	b.n	800414e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ef      	beq.n	8004106 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ea      	bne.n	8004106 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2204      	movs	r2, #4
 8004140:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004142:	2304      	movs	r3, #4
 8004144:	e003      	b.n	800414e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	22c5      	movs	r2, #197	@ 0xc5
 800414a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	2000000c 	.word	0x2000000c
 8004160:	10624dd3 	.word	0x10624dd3

08004164 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	460b      	mov	r3, r1
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004172:	4b35      	ldr	r3, [pc, #212]	@ (8004248 <SDMMC_GetCmdResp6+0xe4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a35      	ldr	r2, [pc, #212]	@ (800424c <SDMMC_GetCmdResp6+0xe8>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	0a5b      	lsrs	r3, r3, #9
 800417e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	1e5a      	subs	r2, r3, #1
 800418c:	61fa      	str	r2, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004192:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004196:	e052      	b.n	800423e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ef      	beq.n	8004188 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ea      	bne.n	8004188 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d004      	beq.n	80041c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2204      	movs	r2, #4
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041c4:	2304      	movs	r3, #4
 80041c6:	e03a      	b.n	800423e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041da:	2301      	movs	r3, #1
 80041dc:	e02f      	b.n	800423e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff fc0d 	bl	80039fe <SDIO_GetCommandResponse>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	7afb      	ldrb	r3, [r7, #11]
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d001      	beq.n	80041f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e025      	b.n	800423e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	22c5      	movs	r2, #197	@ 0xc5
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80041f8:	2100      	movs	r1, #0
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff fc0c 	bl	8003a18 <SDIO_GetResponse>
 8004200:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	0c1b      	lsrs	r3, r3, #16
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004216:	2300      	movs	r3, #0
 8004218:	e011      	b.n	800423e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004224:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004228:	e009      	b.n	800423e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004238:	e001      	b.n	800423e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800423a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	2000000c 	.word	0x2000000c
 800424c:	10624dd3 	.word	0x10624dd3

08004250 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004258:	4b22      	ldr	r3, [pc, #136]	@ (80042e4 <SDMMC_GetCmdResp7+0x94>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a22      	ldr	r2, [pc, #136]	@ (80042e8 <SDMMC_GetCmdResp7+0x98>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0a5b      	lsrs	r3, r3, #9
 8004264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1e5a      	subs	r2, r3, #1
 8004272:	60fa      	str	r2, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004278:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800427c:	e02c      	b.n	80042d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004282:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ef      	beq.n	800426e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ea      	bne.n	800426e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2204      	movs	r2, #4
 80042a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042aa:	2304      	movs	r3, #4
 80042ac:	e014      	b.n	80042d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e009      	b.n	80042d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2240      	movs	r2, #64	@ 0x40
 80042d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80042d6:	2300      	movs	r3, #0
  
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	2000000c 	.word	0x2000000c
 80042e8:	10624dd3 	.word	0x10624dd3

080042ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042f4:	4b11      	ldr	r3, [pc, #68]	@ (800433c <SDMMC_GetCmdError+0x50>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a11      	ldr	r2, [pc, #68]	@ (8004340 <SDMMC_GetCmdError+0x54>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	0a5b      	lsrs	r3, r3, #9
 8004300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1e5a      	subs	r2, r3, #1
 800430e:	60fa      	str	r2, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004314:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004318:	e009      	b.n	800432e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f1      	beq.n	800430a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	22c5      	movs	r2, #197	@ 0xc5
 800432a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	2000000c 	.word	0x2000000c
 8004340:	10624dd3 	.word	0x10624dd3

08004344 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004348:	4904      	ldr	r1, [pc, #16]	@ (800435c <MX_FATFS_Init+0x18>)
 800434a:	4805      	ldr	r0, [pc, #20]	@ (8004360 <MX_FATFS_Init+0x1c>)
 800434c:	f003 f960 	bl	8007610 <FATFS_LinkDriver>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	4b03      	ldr	r3, [pc, #12]	@ (8004364 <MX_FATFS_Init+0x20>)
 8004356:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20002180 	.word	0x20002180
 8004360:	0800788c 	.word	0x0800788c
 8004364:	2000217c 	.word	0x2000217c

08004368 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800436c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004382:	f000 f86b 	bl	800445c <BSP_SD_IsDetected>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e005      	b.n	800439c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004390:	4804      	ldr	r0, [pc, #16]	@ (80043a4 <BSP_SD_Init+0x2c>)
 8004392:	f7fe f859 	bl	8002448 <HAL_SD_Init>
 8004396:	4603      	mov	r3, r0
 8004398:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800439a:	79fb      	ldrb	r3, [r7, #7]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	200020ac 	.word	0x200020ac

080043a8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	68f9      	ldr	r1, [r7, #12]
 80043c4:	4806      	ldr	r0, [pc, #24]	@ (80043e0 <BSP_SD_ReadBlocks+0x38>)
 80043c6:	f7fe f8ef 	bl	80025a8 <HAL_SD_ReadBlocks>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200020ac 	.word	0x200020ac

080043e4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	4806      	ldr	r0, [pc, #24]	@ (800441c <BSP_SD_WriteBlocks+0x38>)
 8004402:	f7fe faaf 	bl	8002964 <HAL_SD_WriteBlocks>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004410:	7dfb      	ldrb	r3, [r7, #23]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	200020ac 	.word	0x200020ac

08004420 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004424:	4805      	ldr	r0, [pc, #20]	@ (800443c <BSP_SD_GetCardState+0x1c>)
 8004426:	f7fe fdf3 	bl	8003010 <HAL_SD_GetCardState>
 800442a:	4603      	mov	r3, r0
 800442c:	2b04      	cmp	r3, #4
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
}
 8004436:	4618      	mov	r0, r3
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	200020ac 	.word	0x200020ac

08004440 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4803      	ldr	r0, [pc, #12]	@ (8004458 <BSP_SD_GetCardInfo+0x18>)
 800444c:	f7fe fdb4 	bl	8002fb8 <HAL_SD_GetCardInfo>
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	200020ac 	.word	0x200020ac

0800445c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004462:	2301      	movs	r3, #1
 8004464:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004466:	f000 f80b 	bl	8004480 <BSP_PlatformIsDetected>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004470:	2300      	movs	r3, #0
 8004472:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	b2db      	uxtb	r3, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004486:	2301      	movs	r3, #1
 8004488:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800448a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800448e:	4806      	ldr	r0, [pc, #24]	@ (80044a8 <BSP_PlatformIsDetected+0x28>)
 8004490:	f7fc fe96 	bl	80011c0 <HAL_GPIO_ReadPin>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800449a:	2300      	movs	r3, #0
 800449c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800449e:	79fb      	ldrb	r3, [r7, #7]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40020000 	.word	0x40020000

080044ac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <SD_CheckStatus+0x38>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80044bc:	f7ff ffb0 	bl	8004420 <BSP_SD_GetCardState>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d107      	bne.n	80044d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80044c6:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <SD_CheckStatus+0x38>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4b04      	ldr	r3, [pc, #16]	@ (80044e4 <SD_CheckStatus+0x38>)
 80044d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80044d6:	4b03      	ldr	r3, [pc, #12]	@ (80044e4 <SD_CheckStatus+0x38>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	b2db      	uxtb	r3, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000015 	.word	0x20000015

080044e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80044f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <SD_initialize+0x38>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80044f8:	f7ff ff3e 	bl	8004378 <BSP_SD_Init>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ffd1 	bl	80044ac <SD_CheckStatus>
 800450a:	4603      	mov	r3, r0
 800450c:	461a      	mov	r2, r3
 800450e:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <SD_initialize+0x38>)
 8004510:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004512:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <SD_initialize+0x38>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b2db      	uxtb	r3, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000015 	.word	0x20000015

08004524 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ffbb 	bl	80044ac <SD_CheckStatus>
 8004536:	4603      	mov	r3, r0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4603      	mov	r3, r0
 800454e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004554:	f04f 33ff 	mov.w	r3, #4294967295
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	68b8      	ldr	r0, [r7, #8]
 800455e:	f7ff ff23 	bl	80043a8 <BSP_SD_ReadBlocks>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d107      	bne.n	8004578 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004568:	bf00      	nop
 800456a:	f7ff ff59 	bl	8004420 <BSP_SD_GetCardState>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1fa      	bne.n	800456a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4603      	mov	r3, r0
 8004590:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004596:	f04f 33ff 	mov.w	r3, #4294967295
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	f7ff ff20 	bl	80043e4 <BSP_SD_WriteBlocks>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d107      	bne.n	80045ba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80045aa:	bf00      	nop
 80045ac:	f7ff ff38 	bl	8004420 <BSP_SD_GetCardState>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1fa      	bne.n	80045ac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08c      	sub	sp, #48	@ 0x30
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	603a      	str	r2, [r7, #0]
 80045ce:	71fb      	strb	r3, [r7, #7]
 80045d0:	460b      	mov	r3, r1
 80045d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80045da:	4b25      	ldr	r3, [pc, #148]	@ (8004670 <SD_ioctl+0xac>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <SD_ioctl+0x28>
 80045e8:	2303      	movs	r3, #3
 80045ea:	e03c      	b.n	8004666 <SD_ioctl+0xa2>

  switch (cmd)
 80045ec:	79bb      	ldrb	r3, [r7, #6]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d834      	bhi.n	800465c <SD_ioctl+0x98>
 80045f2:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <SD_ioctl+0x34>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004609 	.word	0x08004609
 80045fc:	08004611 	.word	0x08004611
 8004600:	08004629 	.word	0x08004629
 8004604:	08004643 	.word	0x08004643
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800460e:	e028      	b.n	8004662 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004610:	f107 030c 	add.w	r3, r7, #12
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff ff13 	bl	8004440 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800461a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004626:	e01c      	b.n	8004662 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004628:	f107 030c 	add.w	r3, r7, #12
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ff07 	bl	8004440 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004634:	b29a      	uxth	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004640:	e00f      	b.n	8004662 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004642:	f107 030c 	add.w	r3, r7, #12
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fefa 	bl	8004440 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	0a5a      	lsrs	r2, r3, #9
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800465a:	e002      	b.n	8004662 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800465c:	2304      	movs	r3, #4
 800465e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8004662:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004666:	4618      	mov	r0, r3
 8004668:	3730      	adds	r7, #48	@ 0x30
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000015 	.word	0x20000015

08004674 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	4a08      	ldr	r2, [pc, #32]	@ (80046a4 <disk_status+0x30>)
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	79fa      	ldrb	r2, [r7, #7]
 800468c:	4905      	ldr	r1, [pc, #20]	@ (80046a4 <disk_status+0x30>)
 800468e:	440a      	add	r2, r1
 8004690:	7a12      	ldrb	r2, [r2, #8]
 8004692:	4610      	mov	r0, r2
 8004694:	4798      	blx	r3
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]
  return stat;
 800469a:	7bfb      	ldrb	r3, [r7, #15]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	200023ac 	.word	0x200023ac

080046a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	4a0e      	ldr	r2, [pc, #56]	@ (80046f4 <disk_initialize+0x4c>)
 80046ba:	5cd3      	ldrb	r3, [r2, r3]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d114      	bne.n	80046ea <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	4a0c      	ldr	r2, [pc, #48]	@ (80046f4 <disk_initialize+0x4c>)
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	79fa      	ldrb	r2, [r7, #7]
 80046ce:	4909      	ldr	r1, [pc, #36]	@ (80046f4 <disk_initialize+0x4c>)
 80046d0:	440a      	add	r2, r1
 80046d2:	7a12      	ldrb	r2, [r2, #8]
 80046d4:	4610      	mov	r0, r2
 80046d6:	4798      	blx	r3
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	4a03      	ldr	r2, [pc, #12]	@ (80046f4 <disk_initialize+0x4c>)
 80046e6:	2101      	movs	r1, #1
 80046e8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	200023ac 	.word	0x200023ac

080046f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	4603      	mov	r3, r0
 8004706:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	4a0a      	ldr	r2, [pc, #40]	@ (8004734 <disk_read+0x3c>)
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	689c      	ldr	r4, [r3, #8]
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	4a07      	ldr	r2, [pc, #28]	@ (8004734 <disk_read+0x3c>)
 8004718:	4413      	add	r3, r2
 800471a:	7a18      	ldrb	r0, [r3, #8]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	47a0      	blx	r4
 8004724:	4603      	mov	r3, r0
 8004726:	75fb      	strb	r3, [r7, #23]
  return res;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
}
 800472a:	4618      	mov	r0, r3
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}
 8004732:	bf00      	nop
 8004734:	200023ac 	.word	0x200023ac

08004738 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4603      	mov	r3, r0
 8004746:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	4a0a      	ldr	r2, [pc, #40]	@ (8004774 <disk_write+0x3c>)
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	68dc      	ldr	r4, [r3, #12]
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	4a07      	ldr	r2, [pc, #28]	@ (8004774 <disk_write+0x3c>)
 8004758:	4413      	add	r3, r2
 800475a:	7a18      	ldrb	r0, [r3, #8]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	47a0      	blx	r4
 8004764:	4603      	mov	r3, r0
 8004766:	75fb      	strb	r3, [r7, #23]
  return res;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd90      	pop	{r4, r7, pc}
 8004772:	bf00      	nop
 8004774:	200023ac 	.word	0x200023ac

08004778 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	603a      	str	r2, [r7, #0]
 8004782:	71fb      	strb	r3, [r7, #7]
 8004784:	460b      	mov	r3, r1
 8004786:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <disk_ioctl+0x38>)
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	79fa      	ldrb	r2, [r7, #7]
 8004796:	4906      	ldr	r1, [pc, #24]	@ (80047b0 <disk_ioctl+0x38>)
 8004798:	440a      	add	r2, r1
 800479a:	7a10      	ldrb	r0, [r2, #8]
 800479c:	79b9      	ldrb	r1, [r7, #6]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	4798      	blx	r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	200023ac 	.word	0x200023ac

080047b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3301      	adds	r3, #1
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	b21a      	sxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	b21b      	sxth	r3, r3
 80047d0:	4313      	orrs	r3, r2
 80047d2:	b21b      	sxth	r3, r3
 80047d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80047d6:	89fb      	ldrh	r3, [r7, #14]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3303      	adds	r3, #3
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	3202      	adds	r2, #2
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	3201      	adds	r2, #1
 800480a:	7812      	ldrb	r2, [r2, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
	return rv;
 800481c:	68fb      	ldr	r3, [r7, #12]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	887a      	ldrh	r2, [r7, #2]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	887b      	ldrh	r3, [r7, #2]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00d      	beq.n	80048ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	1c53      	adds	r3, r2, #1
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	1c59      	adds	r1, r3, #1
 80048dc:	6179      	str	r1, [r7, #20]
 80048de:	7812      	ldrb	r2, [r2, #0]
 80048e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f1      	bne.n	80048d2 <mem_cpy+0x1a>
	}
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80048fa:	b480      	push	{r7}
 80048fc:	b087      	sub	sp, #28
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	617a      	str	r2, [r7, #20]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3b01      	subs	r3, #1
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f3      	bne.n	800490a <mem_set+0x10>
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	@ 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	4619      	mov	r1, r3
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	61ba      	str	r2, [r7, #24]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	1acb      	subs	r3, r1, r3
 800495c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3b01      	subs	r3, #1
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <mem_cmp+0x40>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0eb      	beq.n	8004948 <mem_cmp+0x18>

	return r;
 8004970:	697b      	ldr	r3, [r7, #20]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3724      	adds	r7, #36	@ 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004988:	e002      	b.n	8004990 <chk_chr+0x12>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3301      	adds	r3, #1
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <chk_chr+0x26>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d1f2      	bne.n	800498a <chk_chr+0xc>
	return *str;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	781b      	ldrb	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	e029      	b.n	8004a1c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80049c8:	4a27      	ldr	r2, [pc, #156]	@ (8004a68 <chk_lock+0xb4>)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	4413      	add	r3, r2
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01d      	beq.n	8004a12 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80049d6:	4a24      	ldr	r2, [pc, #144]	@ (8004a68 <chk_lock+0xb4>)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4413      	add	r3, r2
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d116      	bne.n	8004a16 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80049e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a68 <chk_lock+0xb4>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	4413      	add	r3, r2
 80049f0:	3304      	adds	r3, #4
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d10c      	bne.n	8004a16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80049fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004a68 <chk_lock+0xb4>)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	4413      	add	r3, r2
 8004a04:	3308      	adds	r3, #8
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d102      	bne.n	8004a16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004a10:	e007      	b.n	8004a22 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d9d2      	bls.n	80049c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d109      	bne.n	8004a3c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <chk_lock+0x80>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d101      	bne.n	8004a38 <chk_lock+0x84>
 8004a34:	2300      	movs	r3, #0
 8004a36:	e010      	b.n	8004a5a <chk_lock+0xa6>
 8004a38:	2312      	movs	r3, #18
 8004a3a:	e00e      	b.n	8004a5a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d108      	bne.n	8004a54 <chk_lock+0xa0>
 8004a42:	4a09      	ldr	r2, [pc, #36]	@ (8004a68 <chk_lock+0xb4>)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	4413      	add	r3, r2
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a52:	d101      	bne.n	8004a58 <chk_lock+0xa4>
 8004a54:	2310      	movs	r3, #16
 8004a56:	e000      	b.n	8004a5a <chk_lock+0xa6>
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	2000218c 	.word	0x2000218c

08004a6c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	e002      	b.n	8004a7e <enq_lock+0x12>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	607b      	str	r3, [r7, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d806      	bhi.n	8004a92 <enq_lock+0x26>
 8004a84:	4a09      	ldr	r2, [pc, #36]	@ (8004aac <enq_lock+0x40>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	4413      	add	r3, r2
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f2      	bne.n	8004a78 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	2000218c 	.word	0x2000218c

08004ab0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e01f      	b.n	8004b00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004ac0:	4a41      	ldr	r2, [pc, #260]	@ (8004bc8 <inc_lock+0x118>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4413      	add	r3, r2
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d113      	bne.n	8004afa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8004bc8 <inc_lock+0x118>)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	4413      	add	r3, r2
 8004ada:	3304      	adds	r3, #4
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d109      	bne.n	8004afa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004ae6:	4a38      	ldr	r2, [pc, #224]	@ (8004bc8 <inc_lock+0x118>)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	4413      	add	r3, r2
 8004aee:	3308      	adds	r3, #8
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d006      	beq.n	8004b08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3301      	adds	r3, #1
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d9dc      	bls.n	8004ac0 <inc_lock+0x10>
 8004b06:	e000      	b.n	8004b0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004b08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d132      	bne.n	8004b76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e002      	b.n	8004b1c <inc_lock+0x6c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d806      	bhi.n	8004b30 <inc_lock+0x80>
 8004b22:	4a29      	ldr	r2, [pc, #164]	@ (8004bc8 <inc_lock+0x118>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	4413      	add	r3, r2
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f2      	bne.n	8004b16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d101      	bne.n	8004b3a <inc_lock+0x8a>
 8004b36:	2300      	movs	r3, #0
 8004b38:	e040      	b.n	8004bbc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4922      	ldr	r1, [pc, #136]	@ (8004bc8 <inc_lock+0x118>)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	440b      	add	r3, r1
 8004b46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	491e      	ldr	r1, [pc, #120]	@ (8004bc8 <inc_lock+0x118>)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	440b      	add	r3, r1
 8004b54:	3304      	adds	r3, #4
 8004b56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	491a      	ldr	r1, [pc, #104]	@ (8004bc8 <inc_lock+0x118>)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	440b      	add	r3, r1
 8004b64:	3308      	adds	r3, #8
 8004b66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004b68:	4a17      	ldr	r2, [pc, #92]	@ (8004bc8 <inc_lock+0x118>)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	4413      	add	r3, r2
 8004b70:	330c      	adds	r3, #12
 8004b72:	2200      	movs	r2, #0
 8004b74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d009      	beq.n	8004b90 <inc_lock+0xe0>
 8004b7c:	4a12      	ldr	r2, [pc, #72]	@ (8004bc8 <inc_lock+0x118>)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	4413      	add	r3, r2
 8004b84:	330c      	adds	r3, #12
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <inc_lock+0xe0>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e015      	b.n	8004bbc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d108      	bne.n	8004ba8 <inc_lock+0xf8>
 8004b96:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc8 <inc_lock+0x118>)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	4413      	add	r3, r2
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	e001      	b.n	8004bac <inc_lock+0xfc>
 8004ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bac:	4906      	ldr	r1, [pc, #24]	@ (8004bc8 <inc_lock+0x118>)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	440b      	add	r3, r1
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3301      	adds	r3, #1
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	2000218c 	.word	0x2000218c

08004bcc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d825      	bhi.n	8004c2c <dec_lock+0x60>
		n = Files[i].ctr;
 8004be0:	4a17      	ldr	r2, [pc, #92]	@ (8004c40 <dec_lock+0x74>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	4413      	add	r3, r2
 8004be8:	330c      	adds	r3, #12
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004bee:	89fb      	ldrh	r3, [r7, #14]
 8004bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf4:	d101      	bne.n	8004bfa <dec_lock+0x2e>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004bfa:	89fb      	ldrh	r3, [r7, #14]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <dec_lock+0x3a>
 8004c00:	89fb      	ldrh	r3, [r7, #14]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004c06:	4a0e      	ldr	r2, [pc, #56]	@ (8004c40 <dec_lock+0x74>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	4413      	add	r3, r2
 8004c0e:	330c      	adds	r3, #12
 8004c10:	89fa      	ldrh	r2, [r7, #14]
 8004c12:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004c14:	89fb      	ldrh	r3, [r7, #14]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <dec_lock+0x5a>
 8004c1a:	4a09      	ldr	r2, [pc, #36]	@ (8004c40 <dec_lock+0x74>)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	4413      	add	r3, r2
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	737b      	strb	r3, [r7, #13]
 8004c2a:	e001      	b.n	8004c30 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004c30:	7b7b      	ldrb	r3, [r7, #13]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	2000218c 	.word	0x2000218c

08004c44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e010      	b.n	8004c74 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004c52:	4a0d      	ldr	r2, [pc, #52]	@ (8004c88 <clear_lock+0x44>)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	4413      	add	r3, r2
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d105      	bne.n	8004c6e <clear_lock+0x2a>
 8004c62:	4a09      	ldr	r2, [pc, #36]	@ (8004c88 <clear_lock+0x44>)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	4413      	add	r3, r2
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d9eb      	bls.n	8004c52 <clear_lock+0xe>
	}
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	2000218c 	.word	0x2000218c

08004c8c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	78db      	ldrb	r3, [r3, #3]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d034      	beq.n	8004d0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	7858      	ldrb	r0, [r3, #1]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	f7ff fd40 	bl	8004738 <disk_write>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
 8004cc2:	e022      	b.n	8004d0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	1ad2      	subs	r2, r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d217      	bcs.n	8004d0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	789b      	ldrb	r3, [r3, #2]
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e010      	b.n	8004d04 <sync_window+0x78>
					wsect += fs->fsize;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4413      	add	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	7858      	ldrb	r0, [r3, #1]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	f7ff fd1d 	bl	8004738 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d8eb      	bhi.n	8004ce2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d01b      	beq.n	8004d64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ffad 	bl	8004c8c <sync_window>
 8004d32:	4603      	mov	r3, r0
 8004d34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d113      	bne.n	8004d64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7858      	ldrb	r0, [r3, #1]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d46:	2301      	movs	r3, #1
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	f7ff fcd5 	bl	80046f8 <disk_read>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295
 8004d58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff87 	bl	8004c8c <sync_window>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d159      	bne.n	8004e3c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d149      	bne.n	8004e24 <sync_fs+0xb4>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	791b      	ldrb	r3, [r3, #4]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d145      	bne.n	8004e24 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	899b      	ldrh	r3, [r3, #12]
 8004da2:	461a      	mov	r2, r3
 8004da4:	2100      	movs	r1, #0
 8004da6:	f7ff fda8 	bl	80048fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3338      	adds	r3, #56	@ 0x38
 8004dae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004db2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fd37 	bl	800482a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3338      	adds	r3, #56	@ 0x38
 8004dc0:	4921      	ldr	r1, [pc, #132]	@ (8004e48 <sync_fs+0xd8>)
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fd4c 	bl	8004860 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3338      	adds	r3, #56	@ 0x38
 8004dcc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004dd0:	491e      	ldr	r1, [pc, #120]	@ (8004e4c <sync_fs+0xdc>)
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fd44 	bl	8004860 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3338      	adds	r3, #56	@ 0x38
 8004ddc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f7ff fd3a 	bl	8004860 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3338      	adds	r3, #56	@ 0x38
 8004df0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7ff fd30 	bl	8004860 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7858      	ldrb	r0, [r3, #1]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f7ff fc8d 	bl	8004738 <disk_write>
			fs->fsi_flag = 0;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fca3 	bl	8004778 <disk_ioctl>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <sync_fs+0xcc>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	41615252 	.word	0x41615252
 8004e4c:	61417272 	.word	0x61417272

08004e50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	3b02      	subs	r3, #2
 8004e5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	3b02      	subs	r3, #2
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d301      	bcc.n	8004e70 <clust2sect+0x20>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e008      	b.n	8004e82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	895b      	ldrh	r3, [r3, #10]
 8004e74:	461a      	mov	r2, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	fb03 f202 	mul.w	r2, r3, r2
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	4413      	add	r3, r2
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d904      	bls.n	8004eae <get_fat+0x20>
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d302      	bcc.n	8004eb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004eae:	2301      	movs	r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e0ba      	b.n	800502a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	f000 8082 	beq.w	8004fc8 <get_fat+0x13a>
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	f300 80a6 	bgt.w	8005016 <get_fat+0x188>
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d002      	beq.n	8004ed4 <get_fat+0x46>
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d055      	beq.n	8004f7e <get_fat+0xf0>
 8004ed2:	e0a0      	b.n	8005016 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	899b      	ldrh	r3, [r3, #12]
 8004eea:	4619      	mov	r1, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6938      	ldr	r0, [r7, #16]
 8004ef8:	f7ff ff0c 	bl	8004d14 <move_window>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f040 808c 	bne.w	800501c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	60fa      	str	r2, [r7, #12]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	8992      	ldrh	r2, [r2, #12]
 8004f0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f12:	fb01 f202 	mul.w	r2, r1, r2
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	899b      	ldrh	r3, [r3, #12]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f32:	4413      	add	r3, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	6938      	ldr	r0, [r7, #16]
 8004f38:	f7ff feec 	bl	8004d14 <move_window>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d16e      	bne.n	8005020 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	899b      	ldrh	r3, [r3, #12]
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f4e:	fb01 f202 	mul.w	r2, r1, r2
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <get_fat+0xe6>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	e002      	b.n	8004f7a <get_fat+0xec>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7a:	617b      	str	r3, [r7, #20]
			break;
 8004f7c:	e055      	b.n	800502a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	899b      	ldrh	r3, [r3, #12]
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f92:	4413      	add	r3, r2
 8004f94:	4619      	mov	r1, r3
 8004f96:	6938      	ldr	r0, [r7, #16]
 8004f98:	f7ff febc 	bl	8004d14 <move_window>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d140      	bne.n	8005024 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	8992      	ldrh	r2, [r2, #12]
 8004fb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fb4:	fb00 f202 	mul.w	r2, r0, r2
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	440b      	add	r3, r1
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fbf9 	bl	80047b4 <ld_word>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	617b      	str	r3, [r7, #20]
			break;
 8004fc6:	e030      	b.n	800502a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	899b      	ldrh	r3, [r3, #12]
 8004fd0:	089b      	lsrs	r3, r3, #2
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fdc:	4413      	add	r3, r2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6938      	ldr	r0, [r7, #16]
 8004fe2:	f7ff fe97 	bl	8004d14 <move_window>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d11d      	bne.n	8005028 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	8992      	ldrh	r2, [r2, #12]
 8004ffa:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ffe:	fb00 f202 	mul.w	r2, r0, r2
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	440b      	add	r3, r1
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fbec 	bl	80047e4 <ld_dword>
 800500c:	4603      	mov	r3, r0
 800500e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005012:	617b      	str	r3, [r7, #20]
			break;
 8005014:	e009      	b.n	800502a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005016:	2301      	movs	r3, #1
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e006      	b.n	800502a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800501c:	bf00      	nop
 800501e:	e004      	b.n	800502a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005020:	bf00      	nop
 8005022:	e002      	b.n	800502a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005024:	bf00      	nop
 8005026:	e000      	b.n	800502a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005028:	bf00      	nop
		}
	}

	return val;
 800502a:	697b      	ldr	r3, [r7, #20]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b089      	sub	sp, #36	@ 0x24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005040:	2302      	movs	r3, #2
 8005042:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b01      	cmp	r3, #1
 8005048:	f240 8109 	bls.w	800525e <put_fat+0x22a>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	f080 8103 	bcs.w	800525e <put_fat+0x22a>
		switch (fs->fs_type) {
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b03      	cmp	r3, #3
 800505e:	f000 80b6 	beq.w	80051ce <put_fat+0x19a>
 8005062:	2b03      	cmp	r3, #3
 8005064:	f300 80fb 	bgt.w	800525e <put_fat+0x22a>
 8005068:	2b01      	cmp	r3, #1
 800506a:	d003      	beq.n	8005074 <put_fat+0x40>
 800506c:	2b02      	cmp	r3, #2
 800506e:	f000 8083 	beq.w	8005178 <put_fat+0x144>
 8005072:	e0f4      	b.n	800525e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4413      	add	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	899b      	ldrh	r3, [r3, #12]
 800508a:	4619      	mov	r1, r3
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005092:	4413      	add	r3, r2
 8005094:	4619      	mov	r1, r3
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7ff fe3c 	bl	8004d14 <move_window>
 800509c:	4603      	mov	r3, r0
 800509e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050a0:	7ffb      	ldrb	r3, [r7, #31]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f040 80d4 	bne.w	8005250 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	61ba      	str	r2, [r7, #24]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	8992      	ldrh	r2, [r2, #12]
 80050b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80050bc:	fb00 f202 	mul.w	r2, r0, r2
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	440b      	add	r3, r1
 80050c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00d      	beq.n	80050ec <put_fat+0xb8>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b25b      	sxtb	r3, r3
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	b25a      	sxtb	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	b25b      	sxtb	r3, r3
 80050e4:	4313      	orrs	r3, r2
 80050e6:	b25b      	sxtb	r3, r3
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	e001      	b.n	80050f0 <put_fat+0xbc>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	899b      	ldrh	r3, [r3, #12]
 8005102:	4619      	mov	r1, r3
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	fbb3 f3f1 	udiv	r3, r3, r1
 800510a:	4413      	add	r3, r2
 800510c:	4619      	mov	r1, r3
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fe00 	bl	8004d14 <move_window>
 8005114:	4603      	mov	r3, r0
 8005116:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005118:	7ffb      	ldrb	r3, [r7, #31]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 809a 	bne.w	8005254 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	899b      	ldrh	r3, [r3, #12]
 800512a:	461a      	mov	r2, r3
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005132:	fb00 f202 	mul.w	r2, r0, r2
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	440b      	add	r3, r1
 800513a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <put_fat+0x11a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e00e      	b.n	800516c <put_fat+0x138>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b25b      	sxtb	r3, r3
 8005154:	f023 030f 	bic.w	r3, r3, #15
 8005158:	b25a      	sxtb	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	b25b      	sxtb	r3, r3
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	b25b      	sxtb	r3, r3
 8005166:	4313      	orrs	r3, r2
 8005168:	b25b      	sxtb	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	70da      	strb	r2, [r3, #3]
			break;
 8005176:	e072      	b.n	800525e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	899b      	ldrh	r3, [r3, #12]
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	b29b      	uxth	r3, r3
 8005184:	4619      	mov	r1, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	fbb3 f3f1 	udiv	r3, r3, r1
 800518c:	4413      	add	r3, r2
 800518e:	4619      	mov	r1, r3
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff fdbf 	bl	8004d14 <move_window>
 8005196:	4603      	mov	r3, r0
 8005198:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800519a:	7ffb      	ldrb	r3, [r7, #31]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d15b      	bne.n	8005258 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	8992      	ldrh	r2, [r2, #12]
 80051ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80051b2:	fb00 f202 	mul.w	r2, r0, r2
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	440b      	add	r3, r1
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	b292      	uxth	r2, r2
 80051be:	4611      	mov	r1, r2
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fb32 	bl	800482a <st_word>
			fs->wflag = 1;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	70da      	strb	r2, [r3, #3]
			break;
 80051cc:	e047      	b.n	800525e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	899b      	ldrh	r3, [r3, #12]
 80051d6:	089b      	lsrs	r3, r3, #2
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4619      	mov	r1, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	fbb3 f3f1 	udiv	r3, r3, r1
 80051e2:	4413      	add	r3, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff fd94 	bl	8004d14 <move_window>
 80051ec:	4603      	mov	r3, r0
 80051ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051f0:	7ffb      	ldrb	r3, [r7, #31]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d132      	bne.n	800525c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	8992      	ldrh	r2, [r2, #12]
 800520a:	fbb3 f0f2 	udiv	r0, r3, r2
 800520e:	fb00 f202 	mul.w	r2, r0, r2
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	440b      	add	r3, r1
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fae4 	bl	80047e4 <ld_dword>
 800521c:	4603      	mov	r3, r0
 800521e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005222:	4323      	orrs	r3, r4
 8005224:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	8992      	ldrh	r2, [r2, #12]
 8005234:	fbb3 f0f2 	udiv	r0, r3, r2
 8005238:	fb00 f202 	mul.w	r2, r0, r2
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	440b      	add	r3, r1
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fb0c 	bl	8004860 <st_dword>
			fs->wflag = 1;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	70da      	strb	r2, [r3, #3]
			break;
 800524e:	e006      	b.n	800525e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005250:	bf00      	nop
 8005252:	e004      	b.n	800525e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005254:	bf00      	nop
 8005256:	e002      	b.n	800525e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005258:	bf00      	nop
 800525a:	e000      	b.n	800525e <put_fat+0x22a>
			if (res != FR_OK) break;
 800525c:	bf00      	nop
		}
	}
	return res;
 800525e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3724      	adds	r7, #36	@ 0x24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd90      	pop	{r4, r7, pc}

08005268 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d904      	bls.n	800528e <remove_chain+0x26>
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	429a      	cmp	r2, r3
 800528c:	d301      	bcc.n	8005292 <remove_chain+0x2a>
 800528e:	2302      	movs	r3, #2
 8005290:	e04b      	b.n	800532a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005298:	f04f 32ff 	mov.w	r2, #4294967295
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	69b8      	ldr	r0, [r7, #24]
 80052a0:	f7ff fec8 	bl	8005034 <put_fat>
 80052a4:	4603      	mov	r3, r0
 80052a6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80052a8:	7ffb      	ldrb	r3, [r7, #31]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <remove_chain+0x4a>
 80052ae:	7ffb      	ldrb	r3, [r7, #31]
 80052b0:	e03b      	b.n	800532a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff fdea 	bl	8004e8e <get_fat>
 80052ba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d031      	beq.n	8005326 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <remove_chain+0x64>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e02e      	b.n	800532a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d101      	bne.n	80052d8 <remove_chain+0x70>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e028      	b.n	800532a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80052d8:	2200      	movs	r2, #0
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	69b8      	ldr	r0, [r7, #24]
 80052de:	f7ff fea9 	bl	8005034 <put_fat>
 80052e2:	4603      	mov	r3, r0
 80052e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <remove_chain+0x88>
 80052ec:	7ffb      	ldrb	r3, [r7, #31]
 80052ee:	e01c      	b.n	800532a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	3b02      	subs	r3, #2
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d20b      	bcs.n	8005316 <remove_chain+0xae>
			fs->free_clst++;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	791b      	ldrb	r3, [r3, #4]
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	b2da      	uxtb	r2, r3
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	429a      	cmp	r2, r3
 8005322:	d3c6      	bcc.n	80052b2 <remove_chain+0x4a>
 8005324:	e000      	b.n	8005328 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005326:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b088      	sub	sp, #32
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10d      	bne.n	8005364 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <create_chain+0x2c>
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	429a      	cmp	r2, r3
 800535c:	d31b      	bcc.n	8005396 <create_chain+0x64>
 800535e:	2301      	movs	r3, #1
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	e018      	b.n	8005396 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fd91 	bl	8004e8e <get_fat>
 800536c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d801      	bhi.n	8005378 <create_chain+0x46>
 8005374:	2301      	movs	r3, #1
 8005376:	e070      	b.n	800545a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d101      	bne.n	8005384 <create_chain+0x52>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	e06a      	b.n	800545a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	429a      	cmp	r2, r3
 800538c:	d201      	bcs.n	8005392 <create_chain+0x60>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	e063      	b.n	800545a <create_chain+0x128>
		scl = clst;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	3301      	adds	r3, #1
 800539e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d307      	bcc.n	80053ba <create_chain+0x88>
				ncl = 2;
 80053aa:	2302      	movs	r3, #2
 80053ac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d901      	bls.n	80053ba <create_chain+0x88>
 80053b6:	2300      	movs	r3, #0
 80053b8:	e04f      	b.n	800545a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80053ba:	69f9      	ldr	r1, [r7, #28]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff fd66 	bl	8004e8e <get_fat>
 80053c2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00e      	beq.n	80053e8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d003      	beq.n	80053d8 <create_chain+0xa6>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d101      	bne.n	80053dc <create_chain+0xaa>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	e03e      	b.n	800545a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d1da      	bne.n	800539a <create_chain+0x68>
 80053e4:	2300      	movs	r3, #0
 80053e6:	e038      	b.n	800545a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80053e8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80053ea:	f04f 32ff 	mov.w	r2, #4294967295
 80053ee:	69f9      	ldr	r1, [r7, #28]
 80053f0:	6938      	ldr	r0, [r7, #16]
 80053f2:	f7ff fe1f 	bl	8005034 <put_fat>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d109      	bne.n	8005414 <create_chain+0xe2>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f7ff fe12 	bl	8005034 <put_fat>
 8005410:	4603      	mov	r3, r0
 8005412:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d116      	bne.n	8005448 <create_chain+0x116>
		fs->last_clst = ncl;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	3b02      	subs	r3, #2
 800542a:	429a      	cmp	r2, r3
 800542c:	d804      	bhi.n	8005438 <create_chain+0x106>
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	1e5a      	subs	r2, r3, #1
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	791b      	ldrb	r3, [r3, #4]
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	b2da      	uxtb	r2, r3
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	711a      	strb	r2, [r3, #4]
 8005446:	e007      	b.n	8005458 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d102      	bne.n	8005454 <create_chain+0x122>
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	e000      	b.n	8005456 <create_chain+0x124>
 8005454:	2301      	movs	r3, #1
 8005456:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005458:	69fb      	ldr	r3, [r7, #28]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005462:	b480      	push	{r7}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005476:	3304      	adds	r3, #4
 8005478:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	899b      	ldrh	r3, [r3, #12]
 800547e:	461a      	mov	r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	fbb3 f3f2 	udiv	r3, r3, r2
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	8952      	ldrh	r2, [r2, #10]
 800548a:	fbb3 f3f2 	udiv	r3, r3, r2
 800548e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1d1a      	adds	r2, r3, #4
 8005494:	613a      	str	r2, [r7, #16]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <clmt_clust+0x42>
 80054a0:	2300      	movs	r3, #0
 80054a2:	e010      	b.n	80054c6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d307      	bcc.n	80054bc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3304      	adds	r3, #4
 80054b8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80054ba:	e7e9      	b.n	8005490 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80054bc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054e8:	d204      	bcs.n	80054f4 <dir_sdi+0x22>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80054f4:	2302      	movs	r3, #2
 80054f6:	e071      	b.n	80055dc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <dir_sdi+0x46>
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d902      	bls.n	8005518 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10c      	bne.n	8005538 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	8912      	ldrh	r2, [r2, #8]
 8005526:	4293      	cmp	r3, r2
 8005528:	d301      	bcc.n	800552e <dir_sdi+0x5c>
 800552a:	2302      	movs	r3, #2
 800552c:	e056      	b.n	80055dc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	61da      	str	r2, [r3, #28]
 8005536:	e02d      	b.n	8005594 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	895b      	ldrh	r3, [r3, #10]
 800553c:	461a      	mov	r2, r3
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	899b      	ldrh	r3, [r3, #12]
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005548:	e019      	b.n	800557e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fc9d 	bl	8004e8e <get_fat>
 8005554:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d101      	bne.n	8005562 <dir_sdi+0x90>
 800555e:	2301      	movs	r3, #1
 8005560:	e03c      	b.n	80055dc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d904      	bls.n	8005572 <dir_sdi+0xa0>
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	429a      	cmp	r2, r3
 8005570:	d301      	bcc.n	8005576 <dir_sdi+0xa4>
 8005572:	2302      	movs	r3, #2
 8005574:	e032      	b.n	80055dc <dir_sdi+0x10a>
			ofs -= csz;
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	429a      	cmp	r2, r3
 8005584:	d2e1      	bcs.n	800554a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005586:	6979      	ldr	r1, [r7, #20]
 8005588:	6938      	ldr	r0, [r7, #16]
 800558a:	f7ff fc61 	bl	8004e50 <clust2sect>
 800558e:	4602      	mov	r2, r0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <dir_sdi+0xd4>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e01a      	b.n	80055dc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	899b      	ldrh	r3, [r3, #12]
 80055ae:	4619      	mov	r1, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055b6:	441a      	add	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	899b      	ldrh	r3, [r3, #12]
 80055c6:	461a      	mov	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80055ce:	fb00 f202 	mul.w	r2, r0, r2
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	18ca      	adds	r2, r1, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	3320      	adds	r3, #32
 80055fa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <dir_next+0x28>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800560a:	d301      	bcc.n	8005610 <dir_next+0x2c>
 800560c:	2304      	movs	r3, #4
 800560e:	e0bb      	b.n	8005788 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	899b      	ldrh	r3, [r3, #12]
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	fbb3 f1f2 	udiv	r1, r3, r2
 800561c:	fb01 f202 	mul.w	r2, r1, r2
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 809d 	bne.w	8005762 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	8912      	ldrh	r2, [r2, #8]
 8005642:	4293      	cmp	r3, r2
 8005644:	f0c0 808d 	bcc.w	8005762 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	61da      	str	r2, [r3, #28]
 800564e:	2304      	movs	r3, #4
 8005650:	e09a      	b.n	8005788 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	899b      	ldrh	r3, [r3, #12]
 8005656:	461a      	mov	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	fbb3 f3f2 	udiv	r3, r3, r2
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	8952      	ldrh	r2, [r2, #10]
 8005662:	3a01      	subs	r2, #1
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d17b      	bne.n	8005762 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7ff fc0b 	bl	8004e8e <get_fat>
 8005678:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d801      	bhi.n	8005684 <dir_next+0xa0>
 8005680:	2302      	movs	r3, #2
 8005682:	e081      	b.n	8005788 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d101      	bne.n	8005690 <dir_next+0xac>
 800568c:	2301      	movs	r3, #1
 800568e:	e07b      	b.n	8005788 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	429a      	cmp	r2, r3
 8005698:	d359      	bcc.n	800574e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	61da      	str	r2, [r3, #28]
 80056a6:	2304      	movs	r3, #4
 80056a8:	e06e      	b.n	8005788 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f7ff fe3d 	bl	8005332 <create_chain>
 80056b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <dir_next+0xe0>
 80056c0:	2307      	movs	r3, #7
 80056c2:	e061      	b.n	8005788 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <dir_next+0xea>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e05c      	b.n	8005788 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d101      	bne.n	80056da <dir_next+0xf6>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e056      	b.n	8005788 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fad6 	bl	8004c8c <sync_window>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <dir_next+0x106>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e04e      	b.n	8005788 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	899b      	ldrh	r3, [r3, #12]
 80056f4:	461a      	mov	r2, r3
 80056f6:	2100      	movs	r1, #0
 80056f8:	f7ff f8ff 	bl	80048fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	6979      	ldr	r1, [r7, #20]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7ff fba4 	bl	8004e50 <clust2sect>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	635a      	str	r2, [r3, #52]	@ 0x34
 800570e:	e012      	b.n	8005736 <dir_next+0x152>
						fs->wflag = 1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff fab8 	bl	8004c8c <sync_window>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <dir_next+0x142>
 8005722:	2301      	movs	r3, #1
 8005724:	e030      	b.n	8005788 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3301      	adds	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	635a      	str	r2, [r3, #52]	@ 0x34
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	895b      	ldrh	r3, [r3, #10]
 800573a:	461a      	mov	r2, r3
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4293      	cmp	r3, r2
 8005740:	d3e6      	bcc.n	8005710 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad2      	subs	r2, r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005754:	6979      	ldr	r1, [r7, #20]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff fb7a 	bl	8004e50 <clust2sect>
 800575c:	4602      	mov	r2, r0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	899b      	ldrh	r3, [r3, #12]
 8005772:	461a      	mov	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	fbb3 f0f2 	udiv	r0, r3, r2
 800577a:	fb00 f202 	mul.w	r2, r0, r2
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	18ca      	adds	r2, r1, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80057a0:	2100      	movs	r1, #0
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff fe95 	bl	80054d2 <dir_sdi>
 80057a8:	4603      	mov	r3, r0
 80057aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d12b      	bne.n	800580a <dir_alloc+0x7a>
		n = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	4619      	mov	r1, r3
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff faa9 	bl	8004d14 <move_window>
 80057c2:	4603      	mov	r3, r0
 80057c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d11d      	bne.n	8005808 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2be5      	cmp	r3, #229	@ 0xe5
 80057d4:	d004      	beq.n	80057e0 <dir_alloc+0x50>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d107      	bne.n	80057f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	3301      	adds	r3, #1
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d102      	bne.n	80057f4 <dir_alloc+0x64>
 80057ee:	e00c      	b.n	800580a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80057f4:	2101      	movs	r1, #1
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fef4 	bl	80055e4 <dir_next>
 80057fc:	4603      	mov	r3, r0
 80057fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0d7      	beq.n	80057b6 <dir_alloc+0x26>
 8005806:	e000      	b.n	800580a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005808:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	2b04      	cmp	r3, #4
 800580e:	d101      	bne.n	8005814 <dir_alloc+0x84>
 8005810:	2307      	movs	r3, #7
 8005812:	75fb      	strb	r3, [r7, #23]
	return res;
 8005814:	7dfb      	ldrb	r3, [r7, #23]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	331a      	adds	r3, #26
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe ffc1 	bl	80047b4 <ld_word>
 8005832:	4603      	mov	r3, r0
 8005834:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b03      	cmp	r3, #3
 800583c:	d109      	bne.n	8005852 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe ffb6 	bl	80047b4 <ld_word>
 8005848:	4603      	mov	r3, r0
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	331a      	adds	r3, #26
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	b292      	uxth	r2, r2
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f7fe ffd9 	bl	800482a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d109      	bne.n	8005894 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f103 0214 	add.w	r2, r3, #20
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	b29b      	uxth	r3, r3
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f7fe ffcb 	bl	800482a <st_word>
	}
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	331a      	adds	r3, #26
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe ff82 	bl	80047b4 <ld_word>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <cmp_lfn+0x1e>
 80058b6:	2300      	movs	r3, #0
 80058b8:	e059      	b.n	800596e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058c2:	1e5a      	subs	r2, r3, #1
 80058c4:	4613      	mov	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80058d0:	2301      	movs	r3, #1
 80058d2:	81fb      	strh	r3, [r7, #14]
 80058d4:	2300      	movs	r3, #0
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	e033      	b.n	8005942 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80058da:	4a27      	ldr	r2, [pc, #156]	@ (8005978 <cmp_lfn+0xdc>)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4413      	add	r3, r2
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	4413      	add	r3, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fe ff63 	bl	80047b4 <ld_word>
 80058ee:	4603      	mov	r3, r0
 80058f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80058f2:	89fb      	ldrh	r3, [r7, #14]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01a      	beq.n	800592e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80058fc:	d812      	bhi.n	8005924 <cmp_lfn+0x88>
 80058fe:	89bb      	ldrh	r3, [r7, #12]
 8005900:	4618      	mov	r0, r3
 8005902:	f001 fed1 	bl	80076a8 <ff_wtoupper>
 8005906:	4603      	mov	r3, r0
 8005908:	461c      	mov	r4, r3
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	617a      	str	r2, [r7, #20]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f001 fec5 	bl	80076a8 <ff_wtoupper>
 800591e:	4603      	mov	r3, r0
 8005920:	429c      	cmp	r4, r3
 8005922:	d001      	beq.n	8005928 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005924:	2300      	movs	r3, #0
 8005926:	e022      	b.n	800596e <cmp_lfn+0xd2>
			}
			wc = uc;
 8005928:	89bb      	ldrh	r3, [r7, #12]
 800592a:	81fb      	strh	r3, [r7, #14]
 800592c:	e006      	b.n	800593c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800592e:	89bb      	ldrh	r3, [r7, #12]
 8005930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005934:	4293      	cmp	r3, r2
 8005936:	d001      	beq.n	800593c <cmp_lfn+0xa0>
 8005938:	2300      	movs	r3, #0
 800593a:	e018      	b.n	800596e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	3301      	adds	r3, #1
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b0c      	cmp	r3, #12
 8005946:	d9c8      	bls.n	80058da <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <cmp_lfn+0xd0>
 8005954:	89fb      	ldrh	r3, [r7, #14]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d008      	beq.n	800596c <cmp_lfn+0xd0>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <cmp_lfn+0xd0>
 8005968:	2300      	movs	r3, #0
 800596a:	e000      	b.n	800596e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800596c:	2301      	movs	r3, #1
}
 800596e:	4618      	mov	r0, r3
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	bd90      	pop	{r4, r7, pc}
 8005976:	bf00      	nop
 8005978:	08007920 	.word	0x08007920

0800597c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	4611      	mov	r1, r2
 8005988:	461a      	mov	r2, r3
 800598a:	460b      	mov	r3, r1
 800598c:	71fb      	strb	r3, [r7, #7]
 800598e:	4613      	mov	r3, r2
 8005990:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	330d      	adds	r3, #13
 8005996:	79ba      	ldrb	r2, [r7, #6]
 8005998:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	330b      	adds	r3, #11
 800599e:	220f      	movs	r2, #15
 80059a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	330c      	adds	r3, #12
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	331a      	adds	r3, #26
 80059ae:	2100      	movs	r1, #0
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe ff3a 	bl	800482a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	1e5a      	subs	r2, r3, #1
 80059ba:	4613      	mov	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	82fb      	strh	r3, [r7, #22]
 80059ca:	2300      	movs	r3, #0
 80059cc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80059ce:	8afb      	ldrh	r3, [r7, #22]
 80059d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <put_lfn+0x6c>
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	61fa      	str	r2, [r7, #28]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80059e8:	4a17      	ldr	r2, [pc, #92]	@ (8005a48 <put_lfn+0xcc>)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	4413      	add	r3, r2
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4413      	add	r3, r2
 80059f6:	8afa      	ldrh	r2, [r7, #22]
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe ff15 	bl	800482a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005a00:	8afb      	ldrh	r3, [r7, #22]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <put_lfn+0x90>
 8005a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a0a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	d9da      	bls.n	80059ce <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005a18:	8afb      	ldrh	r3, [r7, #22]
 8005a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d006      	beq.n	8005a30 <put_lfn+0xb4>
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <put_lfn+0xbc>
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a36:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	79fa      	ldrb	r2, [r7, #7]
 8005a3c:	701a      	strb	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3720      	adds	r7, #32
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	08007920 	.word	0x08007920

08005a4c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08c      	sub	sp, #48	@ 0x30
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005a5a:	220b      	movs	r2, #11
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7fe ff2a 	bl	80048b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d92b      	bls.n	8005ac2 <gen_numname+0x76>
		sr = seq;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005a6e:	e022      	b.n	8005ab6 <gen_numname+0x6a>
			wc = *lfn++;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	1c9a      	adds	r2, r3, #2
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a7e:	e017      	b.n	8005ab0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	005a      	lsls	r2, r3, #1
 8005a84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005a8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <gen_numname+0x5e>
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005aa4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005aa8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	3301      	adds	r3, #1
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	2b0f      	cmp	r3, #15
 8005ab4:	d9e4      	bls.n	8005a80 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1d8      	bne.n	8005a70 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005ac2:	2307      	movs	r3, #7
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	3330      	adds	r3, #48	@ 0x30
 8005ad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ada:	2b39      	cmp	r3, #57	@ 0x39
 8005adc:	d904      	bls.n	8005ae8 <gen_numname+0x9c>
 8005ade:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ae2:	3307      	adds	r3, #7
 8005ae4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aea:	1e5a      	subs	r2, r3, #1
 8005aec:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005aee:	3330      	adds	r3, #48	@ 0x30
 8005af0:	443b      	add	r3, r7
 8005af2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005af6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1df      	bne.n	8005ac6 <gen_numname+0x7a>
	ns[i] = '~';
 8005b06:	f107 0214 	add.w	r2, r7, #20
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	4413      	add	r3, r2
 8005b0e:	227e      	movs	r2, #126	@ 0x7e
 8005b10:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b16:	e002      	b.n	8005b1e <gen_numname+0xd2>
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d205      	bcs.n	8005b32 <gen_numname+0xe6>
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	4413      	add	r3, r2
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d1f2      	bne.n	8005b18 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	2b07      	cmp	r3, #7
 8005b36:	d807      	bhi.n	8005b48 <gen_numname+0xfc>
 8005b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005b3e:	3330      	adds	r3, #48	@ 0x30
 8005b40:	443b      	add	r3, r7
 8005b42:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005b46:	e000      	b.n	8005b4a <gen_numname+0xfe>
 8005b48:	2120      	movs	r1, #32
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	460a      	mov	r2, r1
 8005b56:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	2b07      	cmp	r3, #7
 8005b5c:	d9e9      	bls.n	8005b32 <gen_numname+0xe6>
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	3730      	adds	r7, #48	@ 0x30
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005b74:	230b      	movs	r3, #11
 8005b76:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	0852      	lsrs	r2, r2, #1
 8005b7e:	01db      	lsls	r3, r3, #7
 8005b80:	4313      	orrs	r3, r2
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	6079      	str	r1, [r7, #4]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1ed      	bne.n	8005b78 <sum_sfn+0x10>
	return sum;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005bb8:	2100      	movs	r1, #0
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff fc89 	bl	80054d2 <dir_sdi>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <dir_find+0x24>
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	e0a9      	b.n	8005d22 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005bce:	23ff      	movs	r3, #255	@ 0xff
 8005bd0:	753b      	strb	r3, [r7, #20]
 8005bd2:	7d3b      	ldrb	r3, [r7, #20]
 8005bd4:	757b      	strb	r3, [r7, #21]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4619      	mov	r1, r3
 8005be4:	6938      	ldr	r0, [r7, #16]
 8005be6:	f7ff f895 	bl	8004d14 <move_window>
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f040 8090 	bne.w	8005d16 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005bfe:	7dbb      	ldrb	r3, [r7, #22]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <dir_find+0x60>
 8005c04:	2304      	movs	r3, #4
 8005c06:	75fb      	strb	r3, [r7, #23]
 8005c08:	e08a      	b.n	8005d20 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	330b      	adds	r3, #11
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c16:	73fb      	strb	r3, [r7, #15]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	7bfa      	ldrb	r2, [r7, #15]
 8005c1c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005c1e:	7dbb      	ldrb	r3, [r7, #22]
 8005c20:	2be5      	cmp	r3, #229	@ 0xe5
 8005c22:	d007      	beq.n	8005c34 <dir_find+0x8a>
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <dir_find+0x98>
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	2b0f      	cmp	r3, #15
 8005c32:	d006      	beq.n	8005c42 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c34:	23ff      	movs	r3, #255	@ 0xff
 8005c36:	757b      	strb	r3, [r7, #21]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c40:	e05e      	b.n	8005d00 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d136      	bne.n	8005cb6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d154      	bne.n	8005d00 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005c56:	7dbb      	ldrb	r3, [r7, #22]
 8005c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	7b5b      	ldrb	r3, [r3, #13]
 8005c66:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005c68:	7dbb      	ldrb	r3, [r7, #22]
 8005c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6e:	75bb      	strb	r3, [r7, #22]
 8005c70:	7dbb      	ldrb	r3, [r7, #22]
 8005c72:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c7c:	7dba      	ldrb	r2, [r7, #22]
 8005c7e:	7d7b      	ldrb	r3, [r7, #21]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d115      	bne.n	8005cb0 <dir_find+0x106>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	330d      	adds	r3, #13
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	7d3a      	ldrb	r2, [r7, #20]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d10e      	bne.n	8005cb0 <dir_find+0x106>
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	f7ff fdfd 	bl	800589c <cmp_lfn>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <dir_find+0x106>
 8005ca8:	7d7b      	ldrb	r3, [r7, #21]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	e000      	b.n	8005cb2 <dir_find+0x108>
 8005cb0:	23ff      	movs	r3, #255	@ 0xff
 8005cb2:	757b      	strb	r3, [r7, #21]
 8005cb4:	e024      	b.n	8005d00 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005cb6:	7d7b      	ldrb	r3, [r7, #21]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <dir_find+0x126>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff ff51 	bl	8005b68 <sum_sfn>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	461a      	mov	r2, r3
 8005cca:	7d3b      	ldrb	r3, [r7, #20]
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d024      	beq.n	8005d1a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <dir_find+0x14a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a18      	ldr	r0, [r3, #32]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3324      	adds	r3, #36	@ 0x24
 8005ce6:	220b      	movs	r2, #11
 8005ce8:	4619      	mov	r1, r3
 8005cea:	f7fe fe21 	bl	8004930 <mem_cmp>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d014      	beq.n	8005d1e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005cf4:	23ff      	movs	r3, #255	@ 0xff
 8005cf6:	757b      	strb	r3, [r7, #21]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfe:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005d00:	2100      	movs	r1, #0
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fc6e 	bl	80055e4 <dir_next>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f43f af65 	beq.w	8005bde <dir_find+0x34>
 8005d14:	e004      	b.n	8005d20 <dir_find+0x176>
		if (res != FR_OK) break;
 8005d16:	bf00      	nop
 8005d18:	e002      	b.n	8005d20 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005d1e:	bf00      	nop

	return res;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	@ 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005d40:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <dir_register+0x20>
 8005d48:	2306      	movs	r3, #6
 8005d4a:	e0e0      	b.n	8005f0e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d50:	e002      	b.n	8005d58 <dir_register+0x2c>
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	3301      	adds	r3, #1
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f4      	bne.n	8005d52 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005d6e:	f107 030c 	add.w	r3, r7, #12
 8005d72:	220c      	movs	r2, #12
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe fd9f 	bl	80048b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d032      	beq.n	8005dea <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2240      	movs	r2, #64	@ 0x40
 8005d88:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d90:	e016      	b.n	8005dc0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	f107 010c 	add.w	r1, r7, #12
 8005da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da2:	f7ff fe53 	bl	8005a4c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff feff 	bl	8005baa <dir_find>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005db2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	2b63      	cmp	r3, #99	@ 0x63
 8005dc4:	d9e5      	bls.n	8005d92 <dir_register+0x66>
 8005dc6:	e000      	b.n	8005dca <dir_register+0x9e>
			if (res != FR_OK) break;
 8005dc8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dcc:	2b64      	cmp	r3, #100	@ 0x64
 8005dce:	d101      	bne.n	8005dd4 <dir_register+0xa8>
 8005dd0:	2307      	movs	r3, #7
 8005dd2:	e09c      	b.n	8005f0e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d002      	beq.n	8005de2 <dir_register+0xb6>
 8005ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005de0:	e095      	b.n	8005f0e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005de2:	7dfa      	ldrb	r2, [r7, #23]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <dir_register+0xd8>
 8005df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df6:	330c      	adds	r3, #12
 8005df8:	4a47      	ldr	r2, [pc, #284]	@ (8005f18 <dir_register+0x1ec>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	3301      	adds	r3, #1
 8005e02:	e000      	b.n	8005e06 <dir_register+0xda>
 8005e04:	2301      	movs	r3, #1
 8005e06:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005e08:	6a39      	ldr	r1, [r7, #32]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fcc0 	bl	8005790 <dir_alloc>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005e16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d148      	bne.n	8005eb0 <dir_register+0x184>
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	623b      	str	r3, [r7, #32]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d042      	beq.n	8005eb0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	015b      	lsls	r3, r3, #5
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fb4b 	bl	80054d2 <dir_sdi>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005e42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d132      	bne.n	8005eb0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3324      	adds	r3, #36	@ 0x24
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fe8a 	bl	8005b68 <sum_sfn>
 8005e54:	4603      	mov	r3, r0
 8005e56:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	69f8      	ldr	r0, [r7, #28]
 8005e60:	f7fe ff58 	bl	8004d14 <move_window>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d11d      	bne.n	8005eae <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	6918      	ldr	r0, [r3, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a19      	ldr	r1, [r3, #32]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	7efb      	ldrb	r3, [r7, #27]
 8005e80:	f7ff fd7c 	bl	800597c <put_lfn>
				fs->wflag = 1;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	2201      	movs	r2, #1
 8005e88:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fba9 	bl	80055e4 <dir_next>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005e98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d107      	bne.n	8005eb0 <dir_register+0x184>
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1d5      	bne.n	8005e58 <dir_register+0x12c>
 8005eac:	e000      	b.n	8005eb0 <dir_register+0x184>
				if (res != FR_OK) break;
 8005eae:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d128      	bne.n	8005f0a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	69f8      	ldr	r0, [r7, #28]
 8005ec0:	f7fe ff28 	bl	8004d14 <move_window>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005eca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d11b      	bne.n	8005f0a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fd0d 	bl	80048fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a18      	ldr	r0, [r3, #32]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3324      	adds	r3, #36	@ 0x24
 8005ee8:	220b      	movs	r2, #11
 8005eea:	4619      	mov	r1, r3
 8005eec:	f7fe fce4 	bl	80048b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	330c      	adds	r3, #12
 8005efc:	f002 0218 	and.w	r2, r2, #24
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2201      	movs	r2, #1
 8005f08:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3730      	adds	r7, #48	@ 0x30
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	4ec4ec4f 	.word	0x4ec4ec4f

08005f1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	@ 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	61ba      	str	r2, [r7, #24]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005f4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f4c:	2b1f      	cmp	r3, #31
 8005f4e:	d940      	bls.n	8005fd2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005f50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f52:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f54:	d006      	beq.n	8005f64 <create_name+0x48>
 8005f56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f58:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f5a:	d110      	bne.n	8005f7e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005f5c:	e002      	b.n	8005f64 <create_name+0x48>
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	3301      	adds	r3, #1
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	4413      	add	r3, r2
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f6e:	d0f6      	beq.n	8005f5e <create_name+0x42>
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	4413      	add	r3, r2
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f7a:	d0f0      	beq.n	8005f5e <create_name+0x42>
			break;
 8005f7c:	e02a      	b.n	8005fd4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f82:	d901      	bls.n	8005f88 <create_name+0x6c>
 8005f84:	2306      	movs	r3, #6
 8005f86:	e17d      	b.n	8006284 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005f88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005f8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f90:	2101      	movs	r1, #1
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 fb4c 	bl	8007630 <ff_convert>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005f9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <create_name+0x8a>
 8005fa2:	2306      	movs	r3, #6
 8005fa4:	e16e      	b.n	8006284 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005fa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005faa:	d809      	bhi.n	8005fc0 <create_name+0xa4>
 8005fac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fae:	4619      	mov	r1, r3
 8005fb0:	488d      	ldr	r0, [pc, #564]	@ (80061e8 <create_name+0x2cc>)
 8005fb2:	f7fe fce4 	bl	800497e <chk_chr>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <create_name+0xa4>
 8005fbc:	2306      	movs	r3, #6
 8005fbe:	e161      	b.n	8006284 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	617a      	str	r2, [r7, #20]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005fce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005fd0:	e7b4      	b.n	8005f3c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005fd2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	441a      	add	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005fde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fe0:	2b1f      	cmp	r3, #31
 8005fe2:	d801      	bhi.n	8005fe8 <create_name+0xcc>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	e000      	b.n	8005fea <create_name+0xce>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005fee:	e011      	b.n	8006014 <create_name+0xf8>
		w = lfn[di - 1];
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006004:	2b20      	cmp	r3, #32
 8006006:	d002      	beq.n	800600e <create_name+0xf2>
 8006008:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800600a:	2b2e      	cmp	r3, #46	@ 0x2e
 800600c:	d106      	bne.n	800601c <create_name+0x100>
		di--;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	3b01      	subs	r3, #1
 8006012:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ea      	bne.n	8005ff0 <create_name+0xd4>
 800601a:	e000      	b.n	800601e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800601c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	2200      	movs	r2, #0
 8006028:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <create_name+0x118>
 8006030:	2306      	movs	r3, #6
 8006032:	e127      	b.n	8006284 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3324      	adds	r3, #36	@ 0x24
 8006038:	220b      	movs	r2, #11
 800603a:	2120      	movs	r1, #32
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fc5c 	bl	80048fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e002      	b.n	800604e <create_name+0x132>
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	3301      	adds	r3, #1
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	2b20      	cmp	r3, #32
 800605a:	d0f5      	beq.n	8006048 <create_name+0x12c>
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	2b2e      	cmp	r3, #46	@ 0x2e
 8006068:	d0ee      	beq.n	8006048 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <create_name+0x168>
 8006070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006074:	f043 0303 	orr.w	r3, r3, #3
 8006078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800607c:	e002      	b.n	8006084 <create_name+0x168>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	3b01      	subs	r3, #1
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d009      	beq.n	800609e <create_name+0x182>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006090:	3b01      	subs	r3, #1
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	2b2e      	cmp	r3, #46	@ 0x2e
 800609c:	d1ef      	bne.n	800607e <create_name+0x162>

	i = b = 0; ni = 8;
 800609e:	2300      	movs	r3, #0
 80060a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80060a4:	2300      	movs	r3, #0
 80060a6:	623b      	str	r3, [r7, #32]
 80060a8:	2308      	movs	r3, #8
 80060aa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	61ba      	str	r2, [r7, #24]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80060bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8090 	beq.w	80061e4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80060c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d006      	beq.n	80060d8 <create_name+0x1bc>
 80060ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80060ce:	d10a      	bne.n	80060e6 <create_name+0x1ca>
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d006      	beq.n	80060e6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80060d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060dc:	f043 0303 	orr.w	r3, r3, #3
 80060e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80060e4:	e07d      	b.n	80061e2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d203      	bcs.n	80060f6 <create_name+0x1da>
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d123      	bne.n	800613e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	2b0b      	cmp	r3, #11
 80060fa:	d106      	bne.n	800610a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80060fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006100:	f043 0303 	orr.w	r3, r3, #3
 8006104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006108:	e075      	b.n	80061f6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	429a      	cmp	r2, r3
 8006110:	d005      	beq.n	800611e <create_name+0x202>
 8006112:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006116:	f043 0303 	orr.w	r3, r3, #3
 800611a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	429a      	cmp	r2, r3
 8006124:	d866      	bhi.n	80061f4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	2308      	movs	r3, #8
 800612c:	623b      	str	r3, [r7, #32]
 800612e:	230b      	movs	r3, #11
 8006130:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006132:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800613c:	e051      	b.n	80061e2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800613e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006140:	2b7f      	cmp	r3, #127	@ 0x7f
 8006142:	d914      	bls.n	800616e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006144:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f001 fa71 	bl	8007630 <ff_convert>
 800614e:	4603      	mov	r3, r0
 8006150:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006152:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <create_name+0x246>
 8006158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800615a:	3b80      	subs	r3, #128	@ 0x80
 800615c:	4a23      	ldr	r2, [pc, #140]	@ (80061ec <create_name+0x2d0>)
 800615e:	5cd3      	ldrb	r3, [r2, r3]
 8006160:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006162:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006166:	f043 0302 	orr.w	r3, r3, #2
 800616a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800616e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <create_name+0x268>
 8006174:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006176:	4619      	mov	r1, r3
 8006178:	481d      	ldr	r0, [pc, #116]	@ (80061f0 <create_name+0x2d4>)
 800617a:	f7fe fc00 	bl	800497e <chk_chr>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d008      	beq.n	8006196 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006184:	235f      	movs	r3, #95	@ 0x5f
 8006186:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800618c:	f043 0303 	orr.w	r3, r3, #3
 8006190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006194:	e01b      	b.n	80061ce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006198:	2b40      	cmp	r3, #64	@ 0x40
 800619a:	d909      	bls.n	80061b0 <create_name+0x294>
 800619c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800619e:	2b5a      	cmp	r3, #90	@ 0x5a
 80061a0:	d806      	bhi.n	80061b0 <create_name+0x294>
					b |= 2;
 80061a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061a6:	f043 0302 	orr.w	r3, r3, #2
 80061aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80061ae:	e00e      	b.n	80061ce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80061b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061b2:	2b60      	cmp	r3, #96	@ 0x60
 80061b4:	d90b      	bls.n	80061ce <create_name+0x2b2>
 80061b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061b8:	2b7a      	cmp	r3, #122	@ 0x7a
 80061ba:	d808      	bhi.n	80061ce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80061bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80061c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061ca:	3b20      	subs	r3, #32
 80061cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	623a      	str	r2, [r7, #32]
 80061d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80061d6:	b2d1      	uxtb	r1, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4413      	add	r3, r2
 80061dc:	460a      	mov	r2, r1
 80061de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80061e2:	e763      	b.n	80060ac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80061e4:	bf00      	nop
 80061e6:	e006      	b.n	80061f6 <create_name+0x2da>
 80061e8:	0800782c 	.word	0x0800782c
 80061ec:	080078a0 	.word	0x080078a0
 80061f0:	08007838 	.word	0x08007838
			if (si > di) break;			/* No extension */
 80061f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80061fc:	2be5      	cmp	r3, #229	@ 0xe5
 80061fe:	d103      	bne.n	8006208 <create_name+0x2ec>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2205      	movs	r2, #5
 8006204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b08      	cmp	r3, #8
 800620c:	d104      	bne.n	8006218 <create_name+0x2fc>
 800620e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006218:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b0c      	cmp	r3, #12
 8006222:	d005      	beq.n	8006230 <create_name+0x314>
 8006224:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	2b03      	cmp	r3, #3
 800622e:	d105      	bne.n	800623c <create_name+0x320>
 8006230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800623c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d117      	bne.n	8006278 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006248:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	2b01      	cmp	r3, #1
 8006252:	d105      	bne.n	8006260 <create_name+0x344>
 8006254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006258:	f043 0310 	orr.w	r3, r3, #16
 800625c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006260:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006264:	f003 030c 	and.w	r3, r3, #12
 8006268:	2b04      	cmp	r3, #4
 800626a:	d105      	bne.n	8006278 <create_name+0x35c>
 800626c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006270:	f043 0308 	orr.w	r3, r3, #8
 8006274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800627e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8006282:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	@ 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80062a0:	e002      	b.n	80062a8 <follow_path+0x1c>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80062ae:	d0f8      	beq.n	80062a2 <follow_path+0x16>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80062b6:	d0f4      	beq.n	80062a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b1f      	cmp	r3, #31
 80062c4:	d80a      	bhi.n	80062dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2280      	movs	r2, #128	@ 0x80
 80062ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80062ce:	2100      	movs	r1, #0
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff f8fe 	bl	80054d2 <dir_sdi>
 80062d6:	4603      	mov	r3, r0
 80062d8:	75fb      	strb	r3, [r7, #23]
 80062da:	e048      	b.n	800636e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80062dc:	463b      	mov	r3, r7
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff fe1b 	bl	8005f1c <create_name>
 80062e6:	4603      	mov	r3, r0
 80062e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d139      	bne.n	8006364 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff fc5a 	bl	8005baa <dir_find>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006300:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	2b04      	cmp	r3, #4
 800630c:	d12c      	bne.n	8006368 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d127      	bne.n	8006368 <follow_path+0xdc>
 8006318:	2305      	movs	r3, #5
 800631a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800631c:	e024      	b.n	8006368 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800631e:	7afb      	ldrb	r3, [r7, #11]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d121      	bne.n	800636c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	799b      	ldrb	r3, [r3, #6]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006334:	2305      	movs	r3, #5
 8006336:	75fb      	strb	r3, [r7, #23]
 8006338:	e019      	b.n	800636e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	8992      	ldrh	r2, [r2, #12]
 8006348:	fbb3 f0f2 	udiv	r0, r3, r2
 800634c:	fb00 f202 	mul.w	r2, r0, r2
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	440b      	add	r3, r1
 8006354:	4619      	mov	r1, r3
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff fa61 	bl	800581e <ld_clust>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006362:	e7bb      	b.n	80062dc <follow_path+0x50>
			if (res != FR_OK) break;
 8006364:	bf00      	nop
 8006366:	e002      	b.n	800636e <follow_path+0xe2>
				break;
 8006368:	bf00      	nop
 800636a:	e000      	b.n	800636e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800636c:	bf00      	nop
			}
		}
	}

	return res;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006380:	f04f 33ff 	mov.w	r3, #4294967295
 8006384:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d031      	beq.n	80063f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	e002      	b.n	800639c <get_ldnumber+0x24>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	3301      	adds	r3, #1
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b1f      	cmp	r3, #31
 80063a2:	d903      	bls.n	80063ac <get_ldnumber+0x34>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80063aa:	d1f4      	bne.n	8006396 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80063b2:	d11c      	bne.n	80063ee <get_ldnumber+0x76>
			tp = *path;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	60fa      	str	r2, [r7, #12]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	3b30      	subs	r3, #48	@ 0x30
 80063c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b09      	cmp	r3, #9
 80063ca:	d80e      	bhi.n	80063ea <get_ldnumber+0x72>
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d10a      	bne.n	80063ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d107      	bne.n	80063ea <get_ldnumber+0x72>
					vol = (int)i;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	3301      	adds	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	e002      	b.n	80063f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80063ee:	2300      	movs	r3, #0
 80063f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80063f2:	693b      	ldr	r3, [r7, #16]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	70da      	strb	r2, [r3, #3]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f04f 32ff 	mov.w	r2, #4294967295
 8006416:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7fe fc7a 	bl	8004d14 <move_window>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <check_fs+0x2a>
 8006426:	2304      	movs	r3, #4
 8006428:	e038      	b.n	800649c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3338      	adds	r3, #56	@ 0x38
 800642e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe f9be 	bl	80047b4 <ld_word>
 8006438:	4603      	mov	r3, r0
 800643a:	461a      	mov	r2, r3
 800643c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006440:	429a      	cmp	r2, r3
 8006442:	d001      	beq.n	8006448 <check_fs+0x48>
 8006444:	2303      	movs	r3, #3
 8006446:	e029      	b.n	800649c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800644e:	2be9      	cmp	r3, #233	@ 0xe9
 8006450:	d009      	beq.n	8006466 <check_fs+0x66>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006458:	2beb      	cmp	r3, #235	@ 0xeb
 800645a:	d11e      	bne.n	800649a <check_fs+0x9a>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006462:	2b90      	cmp	r3, #144	@ 0x90
 8006464:	d119      	bne.n	800649a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3338      	adds	r3, #56	@ 0x38
 800646a:	3336      	adds	r3, #54	@ 0x36
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe f9b9 	bl	80047e4 <ld_dword>
 8006472:	4603      	mov	r3, r0
 8006474:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006478:	4a0a      	ldr	r2, [pc, #40]	@ (80064a4 <check_fs+0xa4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d101      	bne.n	8006482 <check_fs+0x82>
 800647e:	2300      	movs	r3, #0
 8006480:	e00c      	b.n	800649c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3338      	adds	r3, #56	@ 0x38
 8006486:	3352      	adds	r3, #82	@ 0x52
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe f9ab 	bl	80047e4 <ld_dword>
 800648e:	4603      	mov	r3, r0
 8006490:	4a05      	ldr	r2, [pc, #20]	@ (80064a8 <check_fs+0xa8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d101      	bne.n	800649a <check_fs+0x9a>
 8006496:	2300      	movs	r3, #0
 8006498:	e000      	b.n	800649c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800649a:	2302      	movs	r3, #2
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	00544146 	.word	0x00544146
 80064a8:	33544146 	.word	0x33544146

080064ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b096      	sub	sp, #88	@ 0x58
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4613      	mov	r3, r2
 80064b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff ff59 	bl	8006378 <get_ldnumber>
 80064c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80064c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da01      	bge.n	80064d2 <find_volume+0x26>
 80064ce:	230b      	movs	r3, #11
 80064d0:	e265      	b.n	800699e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80064d2:	4a9f      	ldr	r2, [pc, #636]	@ (8006750 <find_volume+0x2a4>)
 80064d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064da:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80064dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <find_volume+0x3a>
 80064e2:	230c      	movs	r3, #12
 80064e4:	e25b      	b.n	800699e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	f023 0301 	bic.w	r3, r3, #1
 80064f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80064f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01a      	beq.n	8006532 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80064fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe f8b7 	bl	8004674 <disk_status>
 8006506:	4603      	mov	r3, r0
 8006508:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800650c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10c      	bne.n	8006532 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <find_volume+0x82>
 800651e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800652a:	230a      	movs	r3, #10
 800652c:	e237      	b.n	800699e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800652e:	2300      	movs	r3, #0
 8006530:	e235      	b.n	800699e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	2200      	movs	r2, #0
 8006536:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800653a:	b2da      	uxtb	r2, r3
 800653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe f8af 	bl	80046a8 <disk_initialize>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006550:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800655c:	2303      	movs	r3, #3
 800655e:	e21e      	b.n	800699e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <find_volume+0xca>
 8006566:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006572:	230a      	movs	r3, #10
 8006574:	e213      	b.n	800699e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	7858      	ldrb	r0, [r3, #1]
 800657a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657c:	330c      	adds	r3, #12
 800657e:	461a      	mov	r2, r3
 8006580:	2102      	movs	r1, #2
 8006582:	f7fe f8f9 	bl	8004778 <disk_ioctl>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <find_volume+0xe4>
 800658c:	2301      	movs	r3, #1
 800658e:	e206      	b.n	800699e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	899b      	ldrh	r3, [r3, #12]
 8006594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006598:	d80d      	bhi.n	80065b6 <find_volume+0x10a>
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	899b      	ldrh	r3, [r3, #12]
 800659e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a2:	d308      	bcc.n	80065b6 <find_volume+0x10a>
 80065a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a6:	899b      	ldrh	r3, [r3, #12]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	899b      	ldrh	r3, [r3, #12]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	4013      	ands	r3, r2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <find_volume+0x10e>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e1f1      	b.n	800699e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80065be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80065c2:	f7ff ff1d 	bl	8006400 <check_fs>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80065cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d149      	bne.n	8006668 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80065d4:	2300      	movs	r3, #0
 80065d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80065d8:	e01e      	b.n	8006618 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80065e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80065e8:	4413      	add	r3, r2
 80065ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80065ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ee:	3304      	adds	r3, #4
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d006      	beq.n	8006604 <find_volume+0x158>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f8:	3308      	adds	r3, #8
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe f8f2 	bl	80047e4 <ld_dword>
 8006600:	4602      	mov	r2, r0
 8006602:	e000      	b.n	8006606 <find_volume+0x15a>
 8006604:	2200      	movs	r2, #0
 8006606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	3358      	adds	r3, #88	@ 0x58
 800660c:	443b      	add	r3, r7
 800660e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006614:	3301      	adds	r3, #1
 8006616:	643b      	str	r3, [r7, #64]	@ 0x40
 8006618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800661a:	2b03      	cmp	r3, #3
 800661c:	d9dd      	bls.n	80065da <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800661e:	2300      	movs	r3, #0
 8006620:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <find_volume+0x182>
 8006628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800662a:	3b01      	subs	r3, #1
 800662c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800662e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	3358      	adds	r3, #88	@ 0x58
 8006634:	443b      	add	r3, r7
 8006636:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800663a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800663c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <find_volume+0x1a2>
 8006642:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006644:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006646:	f7ff fedb 	bl	8006400 <check_fs>
 800664a:	4603      	mov	r3, r0
 800664c:	e000      	b.n	8006650 <find_volume+0x1a4>
 800664e:	2303      	movs	r3, #3
 8006650:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006654:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006658:	2b01      	cmp	r3, #1
 800665a:	d905      	bls.n	8006668 <find_volume+0x1bc>
 800665c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800665e:	3301      	adds	r3, #1
 8006660:	643b      	str	r3, [r7, #64]	@ 0x40
 8006662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006664:	2b03      	cmp	r3, #3
 8006666:	d9e2      	bls.n	800662e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006668:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800666c:	2b04      	cmp	r3, #4
 800666e:	d101      	bne.n	8006674 <find_volume+0x1c8>
 8006670:	2301      	movs	r3, #1
 8006672:	e194      	b.n	800699e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006674:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006678:	2b01      	cmp	r3, #1
 800667a:	d901      	bls.n	8006680 <find_volume+0x1d4>
 800667c:	230d      	movs	r3, #13
 800667e:	e18e      	b.n	800699e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006682:	3338      	adds	r3, #56	@ 0x38
 8006684:	330b      	adds	r3, #11
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe f894 	bl	80047b4 <ld_word>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006692:	899b      	ldrh	r3, [r3, #12]
 8006694:	429a      	cmp	r2, r3
 8006696:	d001      	beq.n	800669c <find_volume+0x1f0>
 8006698:	230d      	movs	r3, #13
 800669a:	e180      	b.n	800699e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800669c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669e:	3338      	adds	r3, #56	@ 0x38
 80066a0:	3316      	adds	r3, #22
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe f886 	bl	80047b4 <ld_word>
 80066a8:	4603      	mov	r3, r0
 80066aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80066ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <find_volume+0x214>
 80066b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b4:	3338      	adds	r3, #56	@ 0x38
 80066b6:	3324      	adds	r3, #36	@ 0x24
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe f893 	bl	80047e4 <ld_dword>
 80066be:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80066c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066c4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80066c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80066cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	789b      	ldrb	r3, [r3, #2]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d005      	beq.n	80066e4 <find_volume+0x238>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066da:	789b      	ldrb	r3, [r3, #2]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d001      	beq.n	80066e4 <find_volume+0x238>
 80066e0:	230d      	movs	r3, #13
 80066e2:	e15c      	b.n	800699e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	789b      	ldrb	r3, [r3, #2]
 80066e8:	461a      	mov	r2, r3
 80066ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ec:	fb02 f303 	mul.w	r3, r2, r3
 80066f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80066f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066f8:	461a      	mov	r2, r3
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80066fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006700:	895b      	ldrh	r3, [r3, #10]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <find_volume+0x26c>
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	895b      	ldrh	r3, [r3, #10]
 800670a:	461a      	mov	r2, r3
 800670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670e:	895b      	ldrh	r3, [r3, #10]
 8006710:	3b01      	subs	r3, #1
 8006712:	4013      	ands	r3, r2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <find_volume+0x270>
 8006718:	230d      	movs	r3, #13
 800671a:	e140      	b.n	800699e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800671c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671e:	3338      	adds	r3, #56	@ 0x38
 8006720:	3311      	adds	r3, #17
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe f846 	bl	80047b4 <ld_word>
 8006728:	4603      	mov	r3, r0
 800672a:	461a      	mov	r2, r3
 800672c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006732:	891b      	ldrh	r3, [r3, #8]
 8006734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006736:	8992      	ldrh	r2, [r2, #12]
 8006738:	0952      	lsrs	r2, r2, #5
 800673a:	b292      	uxth	r2, r2
 800673c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006740:	fb01 f202 	mul.w	r2, r1, r2
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	b29b      	uxth	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <find_volume+0x2a8>
 800674c:	230d      	movs	r3, #13
 800674e:	e126      	b.n	800699e <find_volume+0x4f2>
 8006750:	20002184 	.word	0x20002184

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	3338      	adds	r3, #56	@ 0x38
 8006758:	3313      	adds	r3, #19
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe f82a 	bl	80047b4 <ld_word>
 8006760:	4603      	mov	r3, r0
 8006762:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <find_volume+0x2cc>
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	3338      	adds	r3, #56	@ 0x38
 800676e:	3320      	adds	r3, #32
 8006770:	4618      	mov	r0, r3
 8006772:	f7fe f837 	bl	80047e4 <ld_dword>
 8006776:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677a:	3338      	adds	r3, #56	@ 0x38
 800677c:	330e      	adds	r3, #14
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe f818 	bl	80047b4 <ld_word>
 8006784:	4603      	mov	r3, r0
 8006786:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006788:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <find_volume+0x2e6>
 800678e:	230d      	movs	r3, #13
 8006790:	e105      	b.n	800699e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006792:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006796:	4413      	add	r3, r2
 8006798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800679a:	8911      	ldrh	r1, [r2, #8]
 800679c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800679e:	8992      	ldrh	r2, [r2, #12]
 80067a0:	0952      	lsrs	r2, r2, #5
 80067a2:	b292      	uxth	r2, r2
 80067a4:	fbb1 f2f2 	udiv	r2, r1, r2
 80067a8:	b292      	uxth	r2, r2
 80067aa:	4413      	add	r3, r2
 80067ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80067ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d201      	bcs.n	80067ba <find_volume+0x30e>
 80067b6:	230d      	movs	r3, #13
 80067b8:	e0f1      	b.n	800699e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80067ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067c2:	8952      	ldrh	r2, [r2, #10]
 80067c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <find_volume+0x328>
 80067d0:	230d      	movs	r3, #13
 80067d2:	e0e4      	b.n	800699e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80067d4:	2303      	movs	r3, #3
 80067d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d802      	bhi.n	80067ea <find_volume+0x33e>
 80067e4:	2302      	movs	r3, #2
 80067e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d802      	bhi.n	80067fa <find_volume+0x34e>
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	1c9a      	adds	r2, r3, #2
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006806:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006808:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800680a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800680c:	441a      	add	r2, r3
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006812:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	441a      	add	r2, r3
 8006818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800681c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006820:	2b03      	cmp	r3, #3
 8006822:	d11e      	bne.n	8006862 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006826:	3338      	adds	r3, #56	@ 0x38
 8006828:	332a      	adds	r3, #42	@ 0x2a
 800682a:	4618      	mov	r0, r3
 800682c:	f7fd ffc2 	bl	80047b4 <ld_word>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <find_volume+0x38e>
 8006836:	230d      	movs	r3, #13
 8006838:	e0b1      	b.n	800699e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683c:	891b      	ldrh	r3, [r3, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <find_volume+0x39a>
 8006842:	230d      	movs	r3, #13
 8006844:	e0ab      	b.n	800699e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	3338      	adds	r3, #56	@ 0x38
 800684a:	332c      	adds	r3, #44	@ 0x2c
 800684c:	4618      	mov	r0, r3
 800684e:	f7fd ffc9 	bl	80047e4 <ld_dword>
 8006852:	4602      	mov	r2, r0
 8006854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006856:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006860:	e01f      	b.n	80068a2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	891b      	ldrh	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <find_volume+0x3c2>
 800686a:	230d      	movs	r3, #13
 800686c:	e097      	b.n	800699e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800686e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006870:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006874:	441a      	add	r2, r3
 8006876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006878:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800687a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800687e:	2b02      	cmp	r3, #2
 8006880:	d103      	bne.n	800688a <find_volume+0x3de>
 8006882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	e00a      	b.n	80068a0 <find_volume+0x3f4>
 800688a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	4613      	mov	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4413      	add	r3, r2
 8006894:	085a      	lsrs	r2, r3, #1
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80068a0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80068a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a4:	6a1a      	ldr	r2, [r3, #32]
 80068a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a8:	899b      	ldrh	r3, [r3, #12]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ae:	440b      	add	r3, r1
 80068b0:	3b01      	subs	r3, #1
 80068b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068b4:	8989      	ldrh	r1, [r1, #12]
 80068b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d201      	bcs.n	80068c2 <find_volume+0x416>
 80068be:	230d      	movs	r3, #13
 80068c0:	e06d      	b.n	800699e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80068c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c4:	f04f 32ff 	mov.w	r2, #4294967295
 80068c8:	619a      	str	r2, [r3, #24]
 80068ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80068d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d4:	2280      	movs	r2, #128	@ 0x80
 80068d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80068d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d149      	bne.n	8006974 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	3338      	adds	r3, #56	@ 0x38
 80068e4:	3330      	adds	r3, #48	@ 0x30
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fd ff64 	bl	80047b4 <ld_word>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d140      	bne.n	8006974 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80068f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068f4:	3301      	adds	r3, #1
 80068f6:	4619      	mov	r1, r3
 80068f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80068fa:	f7fe fa0b 	bl	8004d14 <move_window>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d137      	bne.n	8006974 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006906:	2200      	movs	r2, #0
 8006908:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800690a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690c:	3338      	adds	r3, #56	@ 0x38
 800690e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006912:	4618      	mov	r0, r3
 8006914:	f7fd ff4e 	bl	80047b4 <ld_word>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006920:	429a      	cmp	r2, r3
 8006922:	d127      	bne.n	8006974 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006926:	3338      	adds	r3, #56	@ 0x38
 8006928:	4618      	mov	r0, r3
 800692a:	f7fd ff5b 	bl	80047e4 <ld_dword>
 800692e:	4603      	mov	r3, r0
 8006930:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <find_volume+0x4fc>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d11e      	bne.n	8006974 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006938:	3338      	adds	r3, #56	@ 0x38
 800693a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800693e:	4618      	mov	r0, r3
 8006940:	f7fd ff50 	bl	80047e4 <ld_dword>
 8006944:	4603      	mov	r3, r0
 8006946:	4a19      	ldr	r2, [pc, #100]	@ (80069ac <find_volume+0x500>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d113      	bne.n	8006974 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800694c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694e:	3338      	adds	r3, #56	@ 0x38
 8006950:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006954:	4618      	mov	r0, r3
 8006956:	f7fd ff45 	bl	80047e4 <ld_dword>
 800695a:	4602      	mov	r2, r0
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	3338      	adds	r3, #56	@ 0x38
 8006964:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006968:	4618      	mov	r0, r3
 800696a:	f7fd ff3b 	bl	80047e4 <ld_dword>
 800696e:	4602      	mov	r2, r0
 8006970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006972:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800697a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800697c:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <find_volume+0x504>)
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <find_volume+0x504>)
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	4b09      	ldr	r3, [pc, #36]	@ (80069b0 <find_volume+0x504>)
 800698a:	881a      	ldrh	r2, [r3, #0]
 800698c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	4a08      	ldr	r2, [pc, #32]	@ (80069b4 <find_volume+0x508>)
 8006994:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006996:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006998:	f7fe f954 	bl	8004c44 <clear_lock>
#endif
	return FR_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3758      	adds	r7, #88	@ 0x58
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	41615252 	.word	0x41615252
 80069ac:	61417272 	.word	0x61417272
 80069b0:	20002188 	.word	0x20002188
 80069b4:	200021ac 	.word	0x200021ac

080069b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80069c2:	2309      	movs	r3, #9
 80069c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01c      	beq.n	8006a06 <validate+0x4e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d018      	beq.n	8006a06 <validate+0x4e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d013      	beq.n	8006a06 <validate+0x4e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	889a      	ldrh	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	88db      	ldrh	r3, [r3, #6]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d10c      	bne.n	8006a06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fd fe3e 	bl	8004674 <disk_status>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <validate+0x4e>
			res = FR_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <validate+0x5a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	e000      	b.n	8006a14 <validate+0x5c>
 8006a12:	2300      	movs	r3, #0
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	6013      	str	r3, [r2, #0]
	return res;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006a36:	f107 0310 	add.w	r3, r7, #16
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fc9c 	bl	8006378 <get_ldnumber>
 8006a40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da01      	bge.n	8006a4c <f_mount+0x28>
 8006a48:	230b      	movs	r3, #11
 8006a4a:	e02b      	b.n	8006aa4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006a4c:	4a17      	ldr	r2, [pc, #92]	@ (8006aac <f_mount+0x88>)
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006a5c:	69b8      	ldr	r0, [r7, #24]
 8006a5e:	f7fe f8f1 	bl	8004c44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	490d      	ldr	r1, [pc, #52]	@ (8006aac <f_mount+0x88>)
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <f_mount+0x66>
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d001      	beq.n	8006a8e <f_mount+0x6a>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e00a      	b.n	8006aa4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006a8e:	f107 010c 	add.w	r1, r7, #12
 8006a92:	f107 0308 	add.w	r3, r7, #8
 8006a96:	2200      	movs	r2, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff fd07 	bl	80064ac <find_volume>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3720      	adds	r7, #32
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20002184 	.word	0x20002184

08006ab0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b09a      	sub	sp, #104	@ 0x68
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	4613      	mov	r3, r2
 8006abc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <f_open+0x18>
 8006ac4:	2309      	movs	r3, #9
 8006ac6:	e1b7      	b.n	8006e38 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ace:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006ad0:	79fa      	ldrb	r2, [r7, #7]
 8006ad2:	f107 0114 	add.w	r1, r7, #20
 8006ad6:	f107 0308 	add.w	r3, r7, #8
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fce6 	bl	80064ac <find_volume>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006ae6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 819b 	bne.w	8006e26 <f_open+0x376>
		dj.obj.fs = fs;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	f107 0318 	add.w	r3, r7, #24
 8006afa:	4611      	mov	r1, r2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff fbc5 	bl	800628c <follow_path>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006b08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d118      	bne.n	8006b42 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006b10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006b14:	b25b      	sxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	da03      	bge.n	8006b22 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006b1a:	2306      	movs	r3, #6
 8006b1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006b20:	e00f      	b.n	8006b42 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	bf8c      	ite	hi
 8006b28:	2301      	movhi	r3, #1
 8006b2a:	2300      	movls	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f107 0318 	add.w	r3, r7, #24
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fd ff3c 	bl	80049b4 <chk_lock>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	f003 031c 	and.w	r3, r3, #28
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d07f      	beq.n	8006c4c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006b4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d017      	beq.n	8006b84 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006b54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d10e      	bne.n	8006b7a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006b5c:	f7fd ff86 	bl	8004a6c <enq_lock>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <f_open+0xc4>
 8006b66:	f107 0318 	add.w	r3, r7, #24
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff f8de 	bl	8005d2c <dir_register>
 8006b70:	4603      	mov	r3, r0
 8006b72:	e000      	b.n	8006b76 <f_open+0xc6>
 8006b74:	2312      	movs	r3, #18
 8006b76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	f043 0308 	orr.w	r3, r3, #8
 8006b80:	71fb      	strb	r3, [r7, #7]
 8006b82:	e010      	b.n	8006ba6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006b84:	7fbb      	ldrb	r3, [r7, #30]
 8006b86:	f003 0311 	and.w	r3, r3, #17
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <f_open+0xe6>
					res = FR_DENIED;
 8006b8e:	2307      	movs	r3, #7
 8006b90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006b94:	e007      	b.n	8006ba6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <f_open+0xf6>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006ba6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d168      	bne.n	8006c80 <f_open+0x1d0>
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d063      	beq.n	8006c80 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006bb8:	f7fd fbd6 	bl	8004368 <get_fattime>
 8006bbc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	330e      	adds	r3, #14
 8006bc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fd fe4b 	bl	8004860 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	3316      	adds	r3, #22
 8006bce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fd fe45 	bl	8004860 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	330b      	adds	r3, #11
 8006bda:	2220      	movs	r2, #32
 8006bdc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe fe1a 	bl	800581e <ld_clust>
 8006bea:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fe32 	bl	800585c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfa:	331c      	adds	r3, #28
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fd fe2e 	bl	8004860 <st_dword>
					fs->wflag = 1;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2201      	movs	r2, #1
 8006c08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d037      	beq.n	8006c80 <f_open+0x1d0>
						dw = fs->winsect;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c14:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006c16:	f107 0318 	add.w	r3, r7, #24
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fb22 	bl	8005268 <remove_chain>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006c2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d126      	bne.n	8006c80 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe f86c 	bl	8004d14 <move_window>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c46:	3a01      	subs	r2, #1
 8006c48:	615a      	str	r2, [r3, #20]
 8006c4a:	e019      	b.n	8006c80 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d115      	bne.n	8006c80 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006c54:	7fbb      	ldrb	r3, [r7, #30]
 8006c56:	f003 0310 	and.w	r3, r3, #16
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006c5e:	2304      	movs	r3, #4
 8006c60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006c64:	e00c      	b.n	8006c80 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <f_open+0x1d0>
 8006c70:	7fbb      	ldrb	r3, [r7, #30]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <f_open+0x1d0>
						res = FR_DENIED;
 8006c7a:	2307      	movs	r3, #7
 8006c7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006c80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d126      	bne.n	8006cd6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006ca2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	bf8c      	ite	hi
 8006cae:	2301      	movhi	r3, #1
 8006cb0:	2300      	movls	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f107 0318 	add.w	r3, r7, #24
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fd fef7 	bl	8004ab0 <inc_lock>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <f_open+0x226>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f040 80a3 	bne.w	8006e26 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe fd99 	bl	800581e <ld_clust>
 8006cec:	4602      	mov	r2, r0
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf4:	331c      	adds	r3, #28
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fd fd74 	bl	80047e4 <ld_dword>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	88da      	ldrh	r2, [r3, #6]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	79fa      	ldrb	r2, [r7, #7]
 8006d1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3330      	adds	r3, #48	@ 0x30
 8006d32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fd fdde 	bl	80048fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d06e      	beq.n	8006e26 <f_open+0x376>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d06a      	beq.n	8006e26 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	895b      	ldrh	r3, [r3, #10]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	899b      	ldrh	r3, [r3, #12]
 8006d62:	fb02 f303 	mul.w	r3, r2, r3
 8006d66:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d74:	e016      	b.n	8006da4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe f887 	bl	8004e8e <get_fat>
 8006d80:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d802      	bhi.n	8006d8e <f_open+0x2de>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d94:	d102      	bne.n	8006d9c <f_open+0x2ec>
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006d9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006da4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d103      	bne.n	8006db4 <f_open+0x304>
 8006dac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d8e0      	bhi.n	8006d76 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006db8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006dba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d131      	bne.n	8006e26 <f_open+0x376>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	899b      	ldrh	r3, [r3, #12]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dca:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dce:	fb01 f202 	mul.w	r2, r1, r2
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d026      	beq.n	8006e26 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe f837 	bl	8004e50 <clust2sect>
 8006de2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <f_open+0x342>
						res = FR_INT_ERR;
 8006dea:	2302      	movs	r3, #2
 8006dec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006df0:	e019      	b.n	8006e26 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	899b      	ldrh	r3, [r3, #12]
 8006df6:	461a      	mov	r2, r3
 8006df8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e00:	441a      	add	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	7858      	ldrb	r0, [r3, #1]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a1a      	ldr	r2, [r3, #32]
 8006e14:	2301      	movs	r3, #1
 8006e16:	f7fd fc6f 	bl	80046f8 <disk_read>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <f_open+0x376>
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006e26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <f_open+0x384>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006e34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3768      	adds	r7, #104	@ 0x68
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08e      	sub	sp, #56	@ 0x38
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f107 0214 	add.w	r2, r7, #20
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fda9 	bl	80069b8 <validate>
 8006e66:	4603      	mov	r3, r0
 8006e68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <f_read+0x44>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	7d5b      	ldrb	r3, [r3, #21]
 8006e78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006e7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <f_read+0x4a>
 8006e84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e88:	e135      	b.n	80070f6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	7d1b      	ldrb	r3, [r3, #20]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <f_read+0x5a>
 8006e96:	2307      	movs	r3, #7
 8006e98:	e12d      	b.n	80070f6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	f240 811e 	bls.w	80070ec <f_read+0x2ac>
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006eb4:	e11a      	b.n	80070ec <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	8992      	ldrh	r2, [r2, #12]
 8006ebe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ec2:	fb01 f202 	mul.w	r2, r1, r2
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 80d5 	bne.w	8007078 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	8992      	ldrh	r2, [r2, #12]
 8006ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	8952      	ldrh	r2, [r2, #10]
 8006ede:	3a01      	subs	r2, #1
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d12f      	bne.n	8006f4a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ef8:	e013      	b.n	8006f22 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	4619      	mov	r1, r3
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7fe faaa 	bl	8005462 <clmt_clust>
 8006f0e:	6338      	str	r0, [r7, #48]	@ 0x30
 8006f10:	e007      	b.n	8006f22 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f7fd ffb7 	bl	8004e8e <get_fat>
 8006f20:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d804      	bhi.n	8006f32 <f_read+0xf2>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	755a      	strb	r2, [r3, #21]
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e0e1      	b.n	80070f6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d104      	bne.n	8006f44 <f_read+0x104>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	755a      	strb	r2, [r3, #21]
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0d8      	b.n	80070f6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f48:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4619      	mov	r1, r3
 8006f52:	4610      	mov	r0, r2
 8006f54:	f7fd ff7c 	bl	8004e50 <clust2sect>
 8006f58:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <f_read+0x12a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2202      	movs	r2, #2
 8006f64:	755a      	strb	r2, [r3, #21]
 8006f66:	2302      	movs	r3, #2
 8006f68:	e0c5      	b.n	80070f6 <f_read+0x2b6>
			sect += csect;
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4413      	add	r3, r2
 8006f70:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	899b      	ldrh	r3, [r3, #12]
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d041      	beq.n	800700a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	4413      	add	r3, r2
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	8952      	ldrh	r2, [r2, #10]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d905      	bls.n	8006fa0 <f_read+0x160>
					cc = fs->csize - csect;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	895b      	ldrh	r3, [r3, #10]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	7858      	ldrb	r0, [r3, #1]
 8006fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006faa:	f7fd fba5 	bl	80046f8 <disk_read>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <f_read+0x17e>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	755a      	strb	r2, [r3, #21]
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e09b      	b.n	80070f6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	7d1b      	ldrb	r3, [r3, #20]
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da18      	bge.n	8006ffa <f_read+0x1ba>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d911      	bls.n	8006ffa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a1a      	ldr	r2, [r3, #32]
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	8992      	ldrh	r2, [r2, #12]
 8006fe2:	fb02 f303 	mul.w	r3, r2, r3
 8006fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe8:	18d0      	adds	r0, r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	899b      	ldrh	r3, [r3, #12]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f7fd fc5f 	bl	80048b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	899b      	ldrh	r3, [r3, #12]
 8006ffe:	461a      	mov	r2, r3
 8007000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007002:	fb02 f303 	mul.w	r3, r2, r3
 8007006:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007008:	e05c      	b.n	80070c4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	429a      	cmp	r2, r3
 8007012:	d02e      	beq.n	8007072 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	7d1b      	ldrb	r3, [r3, #20]
 8007018:	b25b      	sxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	da18      	bge.n	8007050 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	7858      	ldrb	r0, [r3, #1]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1a      	ldr	r2, [r3, #32]
 800702c:	2301      	movs	r3, #1
 800702e:	f7fd fb83 	bl	8004738 <disk_write>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <f_read+0x202>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	755a      	strb	r2, [r3, #21]
 800703e:	2301      	movs	r3, #1
 8007040:	e059      	b.n	80070f6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	7d1b      	ldrb	r3, [r3, #20]
 8007046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800704a:	b2da      	uxtb	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	7858      	ldrb	r0, [r3, #1]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800705a:	2301      	movs	r3, #1
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	f7fd fb4b 	bl	80046f8 <disk_read>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <f_read+0x232>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	755a      	strb	r2, [r3, #21]
 800706e:	2301      	movs	r3, #1
 8007070:	e041      	b.n	80070f6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	899b      	ldrh	r3, [r3, #12]
 800707c:	4618      	mov	r0, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	8992      	ldrh	r2, [r2, #12]
 8007086:	fbb3 f1f2 	udiv	r1, r3, r2
 800708a:	fb01 f202 	mul.w	r2, r1, r2
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	1ac3      	subs	r3, r0, r3
 8007092:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d901      	bls.n	80070a0 <f_read+0x260>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	8992      	ldrh	r2, [r2, #12]
 80070ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80070b2:	fb00 f202 	mul.w	r2, r0, r2
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	440b      	add	r3, r1
 80070ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070bc:	4619      	mov	r1, r3
 80070be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070c0:	f7fd fbfa 	bl	80048b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80070c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c8:	4413      	add	r3, r2
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d2:	441a      	add	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	619a      	str	r2, [r3, #24]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070de:	441a      	add	r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f47f aee1 	bne.w	8006eb6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3738      	adds	r7, #56	@ 0x38
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b08c      	sub	sp, #48	@ 0x30
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
 800710a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f107 0210 	add.w	r2, r7, #16
 800711c:	4611      	mov	r1, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff fc4a 	bl	80069b8 <validate>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800712a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800712e:	2b00      	cmp	r3, #0
 8007130:	d107      	bne.n	8007142 <f_write+0x44>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	7d5b      	ldrb	r3, [r3, #21]
 8007136:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800713a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <f_write+0x4a>
 8007142:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007146:	e16a      	b.n	800741e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	7d1b      	ldrb	r3, [r3, #20]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <f_write+0x5a>
 8007154:	2307      	movs	r3, #7
 8007156:	e162      	b.n	800741e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	441a      	add	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	429a      	cmp	r2, r3
 8007166:	f080 814c 	bcs.w	8007402 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	43db      	mvns	r3, r3
 8007170:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007172:	e146      	b.n	8007402 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	8992      	ldrh	r2, [r2, #12]
 800717c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007180:	fb01 f202 	mul.w	r2, r1, r2
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	2b00      	cmp	r3, #0
 8007188:	f040 80f1 	bne.w	800736e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	8992      	ldrh	r2, [r2, #12]
 8007194:	fbb3 f3f2 	udiv	r3, r3, r2
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	8952      	ldrh	r2, [r2, #10]
 800719c:	3a01      	subs	r2, #1
 800719e:	4013      	ands	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d143      	bne.n	8007230 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10c      	bne.n	80071ca <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d11a      	bne.n	80071f2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe f8b6 	bl	8005332 <create_chain>
 80071c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80071c8:	e013      	b.n	80071f2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d007      	beq.n	80071e2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	4619      	mov	r1, r3
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7fe f942 	bl	8005462 <clmt_clust>
 80071de:	62b8      	str	r0, [r7, #40]	@ 0x28
 80071e0:	e007      	b.n	80071f2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	4619      	mov	r1, r3
 80071ea:	4610      	mov	r0, r2
 80071ec:	f7fe f8a1 	bl	8005332 <create_chain>
 80071f0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8109 	beq.w	800740c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d104      	bne.n	800720a <f_write+0x10c>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2202      	movs	r2, #2
 8007204:	755a      	strb	r2, [r3, #21]
 8007206:	2302      	movs	r3, #2
 8007208:	e109      	b.n	800741e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d104      	bne.n	800721c <f_write+0x11e>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	755a      	strb	r2, [r3, #21]
 8007218:	2301      	movs	r3, #1
 800721a:	e100      	b.n	800741e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007220:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <f_write+0x132>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800722e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	7d1b      	ldrb	r3, [r3, #20]
 8007234:	b25b      	sxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	da18      	bge.n	800726c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	7858      	ldrb	r0, [r3, #1]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a1a      	ldr	r2, [r3, #32]
 8007248:	2301      	movs	r3, #1
 800724a:	f7fd fa75 	bl	8004738 <disk_write>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <f_write+0x160>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	755a      	strb	r2, [r3, #21]
 800725a:	2301      	movs	r3, #1
 800725c:	e0df      	b.n	800741e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	7d1b      	ldrb	r3, [r3, #20]
 8007262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007266:	b2da      	uxtb	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f7fd fdeb 	bl	8004e50 <clust2sect>
 800727a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d104      	bne.n	800728c <f_write+0x18e>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2202      	movs	r2, #2
 8007286:	755a      	strb	r2, [r3, #21]
 8007288:	2302      	movs	r3, #2
 800728a:	e0c8      	b.n	800741e <f_write+0x320>
			sect += csect;
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	4413      	add	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	899b      	ldrh	r3, [r3, #12]
 8007298:	461a      	mov	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	fbb3 f3f2 	udiv	r3, r3, r2
 80072a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d043      	beq.n	8007330 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	4413      	add	r3, r2
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	8952      	ldrh	r2, [r2, #10]
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d905      	bls.n	80072c2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	895b      	ldrh	r3, [r3, #10]
 80072ba:	461a      	mov	r2, r3
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	7858      	ldrb	r0, [r3, #1]
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	69f9      	ldr	r1, [r7, #28]
 80072cc:	f7fd fa34 	bl	8004738 <disk_write>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <f_write+0x1e2>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	755a      	strb	r2, [r3, #21]
 80072dc:	2301      	movs	r3, #1
 80072de:	e09e      	b.n	800741e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1a      	ldr	r2, [r3, #32]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	6a3a      	ldr	r2, [r7, #32]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d918      	bls.n	8007320 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1a      	ldr	r2, [r3, #32]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	8992      	ldrh	r2, [r2, #12]
 8007300:	fb02 f303 	mul.w	r3, r2, r3
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	18d1      	adds	r1, r2, r3
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	899b      	ldrh	r3, [r3, #12]
 800730c:	461a      	mov	r2, r3
 800730e:	f7fd fad3 	bl	80048b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	7d1b      	ldrb	r3, [r3, #20]
 8007316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800731a:	b2da      	uxtb	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	899b      	ldrh	r3, [r3, #12]
 8007324:	461a      	mov	r2, r3
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	fb02 f303 	mul.w	r3, r2, r3
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800732e:	e04b      	b.n	80073c8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	429a      	cmp	r2, r3
 8007338:	d016      	beq.n	8007368 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007342:	429a      	cmp	r2, r3
 8007344:	d210      	bcs.n	8007368 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	7858      	ldrb	r0, [r3, #1]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007350:	2301      	movs	r3, #1
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	f7fd f9d0 	bl	80046f8 <disk_read>
 8007358:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	755a      	strb	r2, [r3, #21]
 8007364:	2301      	movs	r3, #1
 8007366:	e05a      	b.n	800741e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	899b      	ldrh	r3, [r3, #12]
 8007372:	4618      	mov	r0, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	8992      	ldrh	r2, [r2, #12]
 800737c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007380:	fb01 f202 	mul.w	r2, r1, r2
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	1ac3      	subs	r3, r0, r3
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800738a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	429a      	cmp	r2, r3
 8007390:	d901      	bls.n	8007396 <f_write+0x298>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	8992      	ldrh	r2, [r2, #12]
 80073a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80073a8:	fb00 f202 	mul.w	r2, r0, r2
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	440b      	add	r3, r1
 80073b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b2:	69f9      	ldr	r1, [r7, #28]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fd fa7f 	bl	80048b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	7d1b      	ldrb	r3, [r3, #20]
 80073be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80073c8:	69fa      	ldr	r2, [r7, #28]
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	4413      	add	r3, r2
 80073ce:	61fb      	str	r3, [r7, #28]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	699a      	ldr	r2, [r3, #24]
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	441a      	add	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	619a      	str	r2, [r3, #24]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	bf38      	it	cc
 80073e8:	461a      	movcc	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	60da      	str	r2, [r3, #12]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f4:	441a      	add	r2, r3
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	f47f aeb5 	bne.w	8007174 <f_write+0x76>
 800740a:	e000      	b.n	800740e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800740c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	7d1b      	ldrb	r3, [r3, #20]
 8007412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007416:	b2da      	uxtb	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3730      	adds	r7, #48	@ 0x30
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b086      	sub	sp, #24
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f107 0208 	add.w	r2, r7, #8
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fabe 	bl	80069b8 <validate>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d168      	bne.n	8007518 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	7d1b      	ldrb	r3, [r3, #20]
 800744a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d062      	beq.n	8007518 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7d1b      	ldrb	r3, [r3, #20]
 8007456:	b25b      	sxtb	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	da15      	bge.n	8007488 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	7858      	ldrb	r0, [r3, #1]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1a      	ldr	r2, [r3, #32]
 800746a:	2301      	movs	r3, #1
 800746c:	f7fd f964 	bl	8004738 <disk_write>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <f_sync+0x54>
 8007476:	2301      	movs	r3, #1
 8007478:	e04f      	b.n	800751a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7d1b      	ldrb	r3, [r3, #20]
 800747e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007482:	b2da      	uxtb	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007488:	f7fc ff6e 	bl	8004368 <get_fattime>
 800748c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7fd fc3c 	bl	8004d14 <move_window>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d138      	bne.n	8007518 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074aa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	330b      	adds	r3, #11
 80074b0:	781a      	ldrb	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	330b      	adds	r3, #11
 80074b6:	f042 0220 	orr.w	r2, r2, #32
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	461a      	mov	r2, r3
 80074c8:	68f9      	ldr	r1, [r7, #12]
 80074ca:	f7fe f9c7 	bl	800585c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f103 021c 	add.w	r2, r3, #28
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f7fd f9c0 	bl	8004860 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3316      	adds	r3, #22
 80074e4:	6939      	ldr	r1, [r7, #16]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fd f9ba 	bl	8004860 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3312      	adds	r3, #18
 80074f0:	2100      	movs	r1, #0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fd f999 	bl	800482a <st_word>
					fs->wflag = 1;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2201      	movs	r2, #1
 80074fc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd fc35 	bl	8004d70 <sync_fs>
 8007506:	4603      	mov	r3, r0
 8007508:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	7d1b      	ldrb	r3, [r3, #20]
 800750e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007512:	b2da      	uxtb	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007518:	7dfb      	ldrb	r3, [r7, #23]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff ff7b 	bl	8007426 <f_sync>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d118      	bne.n	800756c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f107 0208 	add.w	r2, r7, #8
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff fa38 	bl	80069b8 <validate>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10c      	bne.n	800756c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	4618      	mov	r0, r3
 8007558:	f7fd fb38 	bl	8004bcc <dec_lock>
 800755c:	4603      	mov	r3, r0
 800755e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d102      	bne.n	800756c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007586:	2301      	movs	r3, #1
 8007588:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800758e:	4b1f      	ldr	r3, [pc, #124]	@ (800760c <FATFS_LinkDriverEx+0x94>)
 8007590:	7a5b      	ldrb	r3, [r3, #9]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d131      	bne.n	80075fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007598:	4b1c      	ldr	r3, [pc, #112]	@ (800760c <FATFS_LinkDriverEx+0x94>)
 800759a:	7a5b      	ldrb	r3, [r3, #9]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	4b1a      	ldr	r3, [pc, #104]	@ (800760c <FATFS_LinkDriverEx+0x94>)
 80075a2:	2100      	movs	r1, #0
 80075a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80075a6:	4b19      	ldr	r3, [pc, #100]	@ (800760c <FATFS_LinkDriverEx+0x94>)
 80075a8:	7a5b      	ldrb	r3, [r3, #9]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	4a17      	ldr	r2, [pc, #92]	@ (800760c <FATFS_LinkDriverEx+0x94>)
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80075b6:	4b15      	ldr	r3, [pc, #84]	@ (800760c <FATFS_LinkDriverEx+0x94>)
 80075b8:	7a5b      	ldrb	r3, [r3, #9]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	4b13      	ldr	r3, [pc, #76]	@ (800760c <FATFS_LinkDriverEx+0x94>)
 80075c0:	4413      	add	r3, r2
 80075c2:	79fa      	ldrb	r2, [r7, #7]
 80075c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80075c6:	4b11      	ldr	r3, [pc, #68]	@ (800760c <FATFS_LinkDriverEx+0x94>)
 80075c8:	7a5b      	ldrb	r3, [r3, #9]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	b2d1      	uxtb	r1, r2
 80075d0:	4a0e      	ldr	r2, [pc, #56]	@ (800760c <FATFS_LinkDriverEx+0x94>)
 80075d2:	7251      	strb	r1, [r2, #9]
 80075d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80075d6:	7dbb      	ldrb	r3, [r7, #22]
 80075d8:	3330      	adds	r3, #48	@ 0x30
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	3301      	adds	r3, #1
 80075e4:	223a      	movs	r2, #58	@ 0x3a
 80075e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	3302      	adds	r3, #2
 80075ec:	222f      	movs	r2, #47	@ 0x2f
 80075ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3303      	adds	r3, #3
 80075f4:	2200      	movs	r2, #0
 80075f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	200023ac 	.word	0x200023ac

08007610 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800761a:	2200      	movs	r2, #0
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff ffaa 	bl	8007578 <FATFS_LinkDriverEx>
 8007624:	4603      	mov	r3, r0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800763c:	88fb      	ldrh	r3, [r7, #6]
 800763e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007640:	d802      	bhi.n	8007648 <ff_convert+0x18>
		c = chr;
 8007642:	88fb      	ldrh	r3, [r7, #6]
 8007644:	81fb      	strh	r3, [r7, #14]
 8007646:	e025      	b.n	8007694 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	2bff      	cmp	r3, #255	@ 0xff
 8007652:	d805      	bhi.n	8007660 <ff_convert+0x30>
 8007654:	88fb      	ldrh	r3, [r7, #6]
 8007656:	3b80      	subs	r3, #128	@ 0x80
 8007658:	4a12      	ldr	r2, [pc, #72]	@ (80076a4 <ff_convert+0x74>)
 800765a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800765e:	e000      	b.n	8007662 <ff_convert+0x32>
 8007660:	2300      	movs	r3, #0
 8007662:	81fb      	strh	r3, [r7, #14]
 8007664:	e016      	b.n	8007694 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007666:	2300      	movs	r3, #0
 8007668:	81fb      	strh	r3, [r7, #14]
 800766a:	e009      	b.n	8007680 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800766c:	89fb      	ldrh	r3, [r7, #14]
 800766e:	4a0d      	ldr	r2, [pc, #52]	@ (80076a4 <ff_convert+0x74>)
 8007670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007674:	88fa      	ldrh	r2, [r7, #6]
 8007676:	429a      	cmp	r2, r3
 8007678:	d006      	beq.n	8007688 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800767a:	89fb      	ldrh	r3, [r7, #14]
 800767c:	3301      	adds	r3, #1
 800767e:	81fb      	strh	r3, [r7, #14]
 8007680:	89fb      	ldrh	r3, [r7, #14]
 8007682:	2b7f      	cmp	r3, #127	@ 0x7f
 8007684:	d9f2      	bls.n	800766c <ff_convert+0x3c>
 8007686:	e000      	b.n	800768a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007688:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800768a:	89fb      	ldrh	r3, [r7, #14]
 800768c:	3380      	adds	r3, #128	@ 0x80
 800768e:	b29b      	uxth	r3, r3
 8007690:	b2db      	uxtb	r3, r3
 8007692:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007694:	89fb      	ldrh	r3, [r7, #14]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	08007930 	.word	0x08007930

080076a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b8:	d201      	bcs.n	80076be <ff_wtoupper+0x16>
 80076ba:	4b3e      	ldr	r3, [pc, #248]	@ (80077b4 <ff_wtoupper+0x10c>)
 80076bc:	e000      	b.n	80076c0 <ff_wtoupper+0x18>
 80076be:	4b3e      	ldr	r3, [pc, #248]	@ (80077b8 <ff_wtoupper+0x110>)
 80076c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	1c9a      	adds	r2, r3, #2
 80076c6:	617a      	str	r2, [r7, #20]
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80076cc:	8a7b      	ldrh	r3, [r7, #18]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d068      	beq.n	80077a4 <ff_wtoupper+0xfc>
 80076d2:	88fa      	ldrh	r2, [r7, #6]
 80076d4:	8a7b      	ldrh	r3, [r7, #18]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d364      	bcc.n	80077a4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	617a      	str	r2, [r7, #20]
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	823b      	strh	r3, [r7, #16]
 80076e4:	8a3b      	ldrh	r3, [r7, #16]
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	81fb      	strh	r3, [r7, #14]
 80076ea:	8a3b      	ldrh	r3, [r7, #16]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80076f0:	88fa      	ldrh	r2, [r7, #6]
 80076f2:	8a79      	ldrh	r1, [r7, #18]
 80076f4:	8a3b      	ldrh	r3, [r7, #16]
 80076f6:	440b      	add	r3, r1
 80076f8:	429a      	cmp	r2, r3
 80076fa:	da49      	bge.n	8007790 <ff_wtoupper+0xe8>
			switch (cmd) {
 80076fc:	89fb      	ldrh	r3, [r7, #14]
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d84f      	bhi.n	80077a2 <ff_wtoupper+0xfa>
 8007702:	a201      	add	r2, pc, #4	@ (adr r2, 8007708 <ff_wtoupper+0x60>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	0800772d 	.word	0x0800772d
 800770c:	0800773f 	.word	0x0800773f
 8007710:	08007755 	.word	0x08007755
 8007714:	0800775d 	.word	0x0800775d
 8007718:	08007765 	.word	0x08007765
 800771c:	0800776d 	.word	0x0800776d
 8007720:	08007775 	.word	0x08007775
 8007724:	0800777d 	.word	0x0800777d
 8007728:	08007785 	.word	0x08007785
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800772c:	88fa      	ldrh	r2, [r7, #6]
 800772e:	8a7b      	ldrh	r3, [r7, #18]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	80fb      	strh	r3, [r7, #6]
 800773c:	e027      	b.n	800778e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	8a7b      	ldrh	r3, [r7, #18]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	b29b      	uxth	r3, r3
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	b29b      	uxth	r3, r3
 800774c:	88fa      	ldrh	r2, [r7, #6]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	80fb      	strh	r3, [r7, #6]
 8007752:	e01c      	b.n	800778e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	3b10      	subs	r3, #16
 8007758:	80fb      	strh	r3, [r7, #6]
 800775a:	e018      	b.n	800778e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	3b20      	subs	r3, #32
 8007760:	80fb      	strh	r3, [r7, #6]
 8007762:	e014      	b.n	800778e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	3b30      	subs	r3, #48	@ 0x30
 8007768:	80fb      	strh	r3, [r7, #6]
 800776a:	e010      	b.n	800778e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	3b1a      	subs	r3, #26
 8007770:	80fb      	strh	r3, [r7, #6]
 8007772:	e00c      	b.n	800778e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007774:	88fb      	ldrh	r3, [r7, #6]
 8007776:	3308      	adds	r3, #8
 8007778:	80fb      	strh	r3, [r7, #6]
 800777a:	e008      	b.n	800778e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	3b50      	subs	r3, #80	@ 0x50
 8007780:	80fb      	strh	r3, [r7, #6]
 8007782:	e004      	b.n	800778e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800778a:	80fb      	strh	r3, [r7, #6]
 800778c:	bf00      	nop
			}
			break;
 800778e:	e008      	b.n	80077a2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007790:	89fb      	ldrh	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d195      	bne.n	80076c2 <ff_wtoupper+0x1a>
 8007796:	8a3b      	ldrh	r3, [r7, #16]
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	4413      	add	r3, r2
 800779e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80077a0:	e78f      	b.n	80076c2 <ff_wtoupper+0x1a>
			break;
 80077a2:	bf00      	nop
	}

	return chr;
 80077a4:	88fb      	ldrh	r3, [r7, #6]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	08007a30 	.word	0x08007a30
 80077b8:	08007c24 	.word	0x08007c24

080077bc <memset>:
 80077bc:	4402      	add	r2, r0
 80077be:	4603      	mov	r3, r0
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d100      	bne.n	80077c6 <memset+0xa>
 80077c4:	4770      	bx	lr
 80077c6:	f803 1b01 	strb.w	r1, [r3], #1
 80077ca:	e7f9      	b.n	80077c0 <memset+0x4>

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007804 <__libc_init_array+0x38>)
 80077d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007808 <__libc_init_array+0x3c>)
 80077d2:	1b64      	subs	r4, r4, r5
 80077d4:	10a4      	asrs	r4, r4, #2
 80077d6:	2600      	movs	r6, #0
 80077d8:	42a6      	cmp	r6, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	4d0b      	ldr	r5, [pc, #44]	@ (800780c <__libc_init_array+0x40>)
 80077de:	4c0c      	ldr	r4, [pc, #48]	@ (8007810 <__libc_init_array+0x44>)
 80077e0:	f000 f818 	bl	8007814 <_init>
 80077e4:	1b64      	subs	r4, r4, r5
 80077e6:	10a4      	asrs	r4, r4, #2
 80077e8:	2600      	movs	r6, #0
 80077ea:	42a6      	cmp	r6, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f4:	4798      	blx	r3
 80077f6:	3601      	adds	r6, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fe:	4798      	blx	r3
 8007800:	3601      	adds	r6, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	08007ce8 	.word	0x08007ce8
 8007808:	08007ce8 	.word	0x08007ce8
 800780c:	08007ce8 	.word	0x08007ce8
 8007810:	08007cec 	.word	0x08007cec

08007814 <_init>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr

08007820 <_fini>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr
