
NUCLEO-F446RE_prototypes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004104  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a8c  08004a8c  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a94  08004a94  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004a9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000001c  08004ab8  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08004ab8  000060e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0a8  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d7  00000000  00000000  000110f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  000131d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077b  00000000  00000000  00013bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002169a  00000000  00000000  0001434b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e36c  00000000  00000000  000359e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cae5f  00000000  00000000  00043d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ebb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  0010ebf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001113c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080042b0 	.word	0x080042b0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	080042b0 	.word	0x080042b0

08000204 <__aeabi_dmul>:
 8000204:	b570      	push	{r4, r5, r6, lr}
 8000206:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800020e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000212:	bf1d      	ittte	ne
 8000214:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000218:	ea94 0f0c 	teqne	r4, ip
 800021c:	ea95 0f0c 	teqne	r5, ip
 8000220:	f000 f8de 	bleq	80003e0 <__aeabi_dmul+0x1dc>
 8000224:	442c      	add	r4, r5
 8000226:	ea81 0603 	eor.w	r6, r1, r3
 800022a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000232:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000236:	bf18      	it	ne
 8000238:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800023c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000240:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000244:	d038      	beq.n	80002b8 <__aeabi_dmul+0xb4>
 8000246:	fba0 ce02 	umull	ip, lr, r0, r2
 800024a:	f04f 0500 	mov.w	r5, #0
 800024e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000252:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000256:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025a:	f04f 0600 	mov.w	r6, #0
 800025e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000262:	f09c 0f00 	teq	ip, #0
 8000266:	bf18      	it	ne
 8000268:	f04e 0e01 	orrne.w	lr, lr, #1
 800026c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000270:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000274:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000278:	d204      	bcs.n	8000284 <__aeabi_dmul+0x80>
 800027a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027e:	416d      	adcs	r5, r5
 8000280:	eb46 0606 	adc.w	r6, r6, r6
 8000284:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000288:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800028c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000290:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000294:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000298:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800029c:	bf88      	it	hi
 800029e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a2:	d81e      	bhi.n	80002e2 <__aeabi_dmul+0xde>
 80002a4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002a8:	bf08      	it	eq
 80002aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ae:	f150 0000 	adcs.w	r0, r0, #0
 80002b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002bc:	ea46 0101 	orr.w	r1, r6, r1
 80002c0:	ea40 0002 	orr.w	r0, r0, r2
 80002c4:	ea81 0103 	eor.w	r1, r1, r3
 80002c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002cc:	bfc2      	ittt	gt
 80002ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d6:	bd70      	popgt	{r4, r5, r6, pc}
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f04f 0e00 	mov.w	lr, #0
 80002e0:	3c01      	subs	r4, #1
 80002e2:	f300 80ab 	bgt.w	800043c <__aeabi_dmul+0x238>
 80002e6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ea:	bfde      	ittt	le
 80002ec:	2000      	movle	r0, #0
 80002ee:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f2:	bd70      	pople	{r4, r5, r6, pc}
 80002f4:	f1c4 0400 	rsb	r4, r4, #0
 80002f8:	3c20      	subs	r4, #32
 80002fa:	da35      	bge.n	8000368 <__aeabi_dmul+0x164>
 80002fc:	340c      	adds	r4, #12
 80002fe:	dc1b      	bgt.n	8000338 <__aeabi_dmul+0x134>
 8000300:	f104 0414 	add.w	r4, r4, #20
 8000304:	f1c4 0520 	rsb	r5, r4, #32
 8000308:	fa00 f305 	lsl.w	r3, r0, r5
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f205 	lsl.w	r2, r1, r5
 8000314:	ea40 0002 	orr.w	r0, r0, r2
 8000318:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800031c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	fa21 f604 	lsr.w	r6, r1, r4
 8000328:	eb42 0106 	adc.w	r1, r2, r6
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 040c 	rsb	r4, r4, #12
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f304 	lsl.w	r3, r0, r4
 8000344:	fa20 f005 	lsr.w	r0, r0, r5
 8000348:	fa01 f204 	lsl.w	r2, r1, r4
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	f141 0100 	adc.w	r1, r1, #0
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f205 	lsl.w	r2, r0, r5
 8000370:	ea4e 0e02 	orr.w	lr, lr, r2
 8000374:	fa20 f304 	lsr.w	r3, r0, r4
 8000378:	fa01 f205 	lsl.w	r2, r1, r5
 800037c:	ea43 0302 	orr.w	r3, r3, r2
 8000380:	fa21 f004 	lsr.w	r0, r1, r4
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	fa21 f204 	lsr.w	r2, r1, r4
 800038c:	ea20 0002 	bic.w	r0, r0, r2
 8000390:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000398:	bf08      	it	eq
 800039a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f094 0f00 	teq	r4, #0
 80003a4:	d10f      	bne.n	80003c6 <__aeabi_dmul+0x1c2>
 80003a6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003aa:	0040      	lsls	r0, r0, #1
 80003ac:	eb41 0101 	adc.w	r1, r1, r1
 80003b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b4:	bf08      	it	eq
 80003b6:	3c01      	subeq	r4, #1
 80003b8:	d0f7      	beq.n	80003aa <__aeabi_dmul+0x1a6>
 80003ba:	ea41 0106 	orr.w	r1, r1, r6
 80003be:	f095 0f00 	teq	r5, #0
 80003c2:	bf18      	it	ne
 80003c4:	4770      	bxne	lr
 80003c6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	eb43 0303 	adc.w	r3, r3, r3
 80003d0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d4:	bf08      	it	eq
 80003d6:	3d01      	subeq	r5, #1
 80003d8:	d0f7      	beq.n	80003ca <__aeabi_dmul+0x1c6>
 80003da:	ea43 0306 	orr.w	r3, r3, r6
 80003de:	4770      	bx	lr
 80003e0:	ea94 0f0c 	teq	r4, ip
 80003e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e8:	bf18      	it	ne
 80003ea:	ea95 0f0c 	teqne	r5, ip
 80003ee:	d00c      	beq.n	800040a <__aeabi_dmul+0x206>
 80003f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f4:	bf18      	it	ne
 80003f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fa:	d1d1      	bne.n	80003a0 <__aeabi_dmul+0x19c>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f04f 0000 	mov.w	r0, #0
 8000408:	bd70      	pop	{r4, r5, r6, pc}
 800040a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040e:	bf06      	itte	eq
 8000410:	4610      	moveq	r0, r2
 8000412:	4619      	moveq	r1, r3
 8000414:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000418:	d019      	beq.n	800044e <__aeabi_dmul+0x24a>
 800041a:	ea94 0f0c 	teq	r4, ip
 800041e:	d102      	bne.n	8000426 <__aeabi_dmul+0x222>
 8000420:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000424:	d113      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000426:	ea95 0f0c 	teq	r5, ip
 800042a:	d105      	bne.n	8000438 <__aeabi_dmul+0x234>
 800042c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000430:	bf1c      	itt	ne
 8000432:	4610      	movne	r0, r2
 8000434:	4619      	movne	r1, r3
 8000436:	d10a      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000440:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd70      	pop	{r4, r5, r6, pc}
 800044e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000452:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000456:	bd70      	pop	{r4, r5, r6, pc}

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	@ 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_d2uiz>:
 80007d0:	004a      	lsls	r2, r1, #1
 80007d2:	d211      	bcs.n	80007f8 <__aeabi_d2uiz+0x28>
 80007d4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007d8:	d211      	bcs.n	80007fe <__aeabi_d2uiz+0x2e>
 80007da:	d50d      	bpl.n	80007f8 <__aeabi_d2uiz+0x28>
 80007dc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e4:	d40e      	bmi.n	8000804 <__aeabi_d2uiz+0x34>
 80007e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f2:	fa23 f002 	lsr.w	r0, r3, r2
 80007f6:	4770      	bx	lr
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	4770      	bx	lr
 80007fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000802:	d102      	bne.n	800080a <__aeabi_d2uiz+0x3a>
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	4770      	bx	lr
 800080a:	f04f 0000 	mov.w	r0, #0
 800080e:	4770      	bx	lr

08000810 <__aeabi_uldivmod>:
 8000810:	b953      	cbnz	r3, 8000828 <__aeabi_uldivmod+0x18>
 8000812:	b94a      	cbnz	r2, 8000828 <__aeabi_uldivmod+0x18>
 8000814:	2900      	cmp	r1, #0
 8000816:	bf08      	it	eq
 8000818:	2800      	cmpeq	r0, #0
 800081a:	bf1c      	itt	ne
 800081c:	f04f 31ff 	movne.w	r1, #4294967295
 8000820:	f04f 30ff 	movne.w	r0, #4294967295
 8000824:	f000 b96a 	b.w	8000afc <__aeabi_idiv0>
 8000828:	f1ad 0c08 	sub.w	ip, sp, #8
 800082c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000830:	f000 f806 	bl	8000840 <__udivmoddi4>
 8000834:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr

08000840 <__udivmoddi4>:
 8000840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000844:	9d08      	ldr	r5, [sp, #32]
 8000846:	460c      	mov	r4, r1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d14e      	bne.n	80008ea <__udivmoddi4+0xaa>
 800084c:	4694      	mov	ip, r2
 800084e:	458c      	cmp	ip, r1
 8000850:	4686      	mov	lr, r0
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	d962      	bls.n	800091e <__udivmoddi4+0xde>
 8000858:	b14a      	cbz	r2, 800086e <__udivmoddi4+0x2e>
 800085a:	f1c2 0320 	rsb	r3, r2, #32
 800085e:	4091      	lsls	r1, r2
 8000860:	fa20 f303 	lsr.w	r3, r0, r3
 8000864:	fa0c fc02 	lsl.w	ip, ip, r2
 8000868:	4319      	orrs	r1, r3
 800086a:	fa00 fe02 	lsl.w	lr, r0, r2
 800086e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000872:	fa1f f68c 	uxth.w	r6, ip
 8000876:	fbb1 f4f7 	udiv	r4, r1, r7
 800087a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800087e:	fb07 1114 	mls	r1, r7, r4, r1
 8000882:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000886:	fb04 f106 	mul.w	r1, r4, r6
 800088a:	4299      	cmp	r1, r3
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x64>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f104 30ff 	add.w	r0, r4, #4294967295
 8000896:	f080 8112 	bcs.w	8000abe <__udivmoddi4+0x27e>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 810f 	bls.w	8000abe <__udivmoddi4+0x27e>
 80008a0:	3c02      	subs	r4, #2
 80008a2:	4463      	add	r3, ip
 80008a4:	1a59      	subs	r1, r3, r1
 80008a6:	fa1f f38e 	uxth.w	r3, lr
 80008aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ae:	fb07 1110 	mls	r1, r7, r0, r1
 80008b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b6:	fb00 f606 	mul.w	r6, r0, r6
 80008ba:	429e      	cmp	r6, r3
 80008bc:	d90a      	bls.n	80008d4 <__udivmoddi4+0x94>
 80008be:	eb1c 0303 	adds.w	r3, ip, r3
 80008c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c6:	f080 80fc 	bcs.w	8000ac2 <__udivmoddi4+0x282>
 80008ca:	429e      	cmp	r6, r3
 80008cc:	f240 80f9 	bls.w	8000ac2 <__udivmoddi4+0x282>
 80008d0:	4463      	add	r3, ip
 80008d2:	3802      	subs	r0, #2
 80008d4:	1b9b      	subs	r3, r3, r6
 80008d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008da:	2100      	movs	r1, #0
 80008dc:	b11d      	cbz	r5, 80008e6 <__udivmoddi4+0xa6>
 80008de:	40d3      	lsrs	r3, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	e9c5 3200 	strd	r3, r2, [r5]
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d905      	bls.n	80008fa <__udivmoddi4+0xba>
 80008ee:	b10d      	cbz	r5, 80008f4 <__udivmoddi4+0xb4>
 80008f0:	e9c5 0100 	strd	r0, r1, [r5]
 80008f4:	2100      	movs	r1, #0
 80008f6:	4608      	mov	r0, r1
 80008f8:	e7f5      	b.n	80008e6 <__udivmoddi4+0xa6>
 80008fa:	fab3 f183 	clz	r1, r3
 80008fe:	2900      	cmp	r1, #0
 8000900:	d146      	bne.n	8000990 <__udivmoddi4+0x150>
 8000902:	42a3      	cmp	r3, r4
 8000904:	d302      	bcc.n	800090c <__udivmoddi4+0xcc>
 8000906:	4290      	cmp	r0, r2
 8000908:	f0c0 80f0 	bcc.w	8000aec <__udivmoddi4+0x2ac>
 800090c:	1a86      	subs	r6, r0, r2
 800090e:	eb64 0303 	sbc.w	r3, r4, r3
 8000912:	2001      	movs	r0, #1
 8000914:	2d00      	cmp	r5, #0
 8000916:	d0e6      	beq.n	80008e6 <__udivmoddi4+0xa6>
 8000918:	e9c5 6300 	strd	r6, r3, [r5]
 800091c:	e7e3      	b.n	80008e6 <__udivmoddi4+0xa6>
 800091e:	2a00      	cmp	r2, #0
 8000920:	f040 8090 	bne.w	8000a44 <__udivmoddi4+0x204>
 8000924:	eba1 040c 	sub.w	r4, r1, ip
 8000928:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800092c:	fa1f f78c 	uxth.w	r7, ip
 8000930:	2101      	movs	r1, #1
 8000932:	fbb4 f6f8 	udiv	r6, r4, r8
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb08 4416 	mls	r4, r8, r6, r4
 800093e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000942:	fb07 f006 	mul.w	r0, r7, r6
 8000946:	4298      	cmp	r0, r3
 8000948:	d908      	bls.n	800095c <__udivmoddi4+0x11c>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x11a>
 8000954:	4298      	cmp	r0, r3
 8000956:	f200 80cd 	bhi.w	8000af4 <__udivmoddi4+0x2b4>
 800095a:	4626      	mov	r6, r4
 800095c:	1a1c      	subs	r4, r3, r0
 800095e:	fa1f f38e 	uxth.w	r3, lr
 8000962:	fbb4 f0f8 	udiv	r0, r4, r8
 8000966:	fb08 4410 	mls	r4, r8, r0, r4
 800096a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096e:	fb00 f707 	mul.w	r7, r0, r7
 8000972:	429f      	cmp	r7, r3
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x148>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 34ff 	add.w	r4, r0, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x146>
 8000980:	429f      	cmp	r7, r3
 8000982:	f200 80b0 	bhi.w	8000ae6 <__udivmoddi4+0x2a6>
 8000986:	4620      	mov	r0, r4
 8000988:	1bdb      	subs	r3, r3, r7
 800098a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098e:	e7a5      	b.n	80008dc <__udivmoddi4+0x9c>
 8000990:	f1c1 0620 	rsb	r6, r1, #32
 8000994:	408b      	lsls	r3, r1
 8000996:	fa22 f706 	lsr.w	r7, r2, r6
 800099a:	431f      	orrs	r7, r3
 800099c:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a0:	fa04 f301 	lsl.w	r3, r4, r1
 80009a4:	ea43 030c 	orr.w	r3, r3, ip
 80009a8:	40f4      	lsrs	r4, r6
 80009aa:	fa00 f801 	lsl.w	r8, r0, r1
 80009ae:	0c38      	lsrs	r0, r7, #16
 80009b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b4:	fbb4 fef0 	udiv	lr, r4, r0
 80009b8:	fa1f fc87 	uxth.w	ip, r7
 80009bc:	fb00 441e 	mls	r4, r0, lr, r4
 80009c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c4:	fb0e f90c 	mul.w	r9, lr, ip
 80009c8:	45a1      	cmp	r9, r4
 80009ca:	fa02 f201 	lsl.w	r2, r2, r1
 80009ce:	d90a      	bls.n	80009e6 <__udivmoddi4+0x1a6>
 80009d0:	193c      	adds	r4, r7, r4
 80009d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009d6:	f080 8084 	bcs.w	8000ae2 <__udivmoddi4+0x2a2>
 80009da:	45a1      	cmp	r9, r4
 80009dc:	f240 8081 	bls.w	8000ae2 <__udivmoddi4+0x2a2>
 80009e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e4:	443c      	add	r4, r7
 80009e6:	eba4 0409 	sub.w	r4, r4, r9
 80009ea:	fa1f f983 	uxth.w	r9, r3
 80009ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f2:	fb00 4413 	mls	r4, r0, r3, r4
 80009f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80009fe:	45a4      	cmp	ip, r4
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x1d2>
 8000a02:	193c      	adds	r4, r7, r4
 8000a04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a08:	d267      	bcs.n	8000ada <__udivmoddi4+0x29a>
 8000a0a:	45a4      	cmp	ip, r4
 8000a0c:	d965      	bls.n	8000ada <__udivmoddi4+0x29a>
 8000a0e:	3b02      	subs	r3, #2
 8000a10:	443c      	add	r4, r7
 8000a12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a16:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1a:	eba4 040c 	sub.w	r4, r4, ip
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	46ce      	mov	lr, r9
 8000a22:	469c      	mov	ip, r3
 8000a24:	d351      	bcc.n	8000aca <__udivmoddi4+0x28a>
 8000a26:	d04e      	beq.n	8000ac6 <__udivmoddi4+0x286>
 8000a28:	b155      	cbz	r5, 8000a40 <__udivmoddi4+0x200>
 8000a2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000a2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000a32:	fa04 f606 	lsl.w	r6, r4, r6
 8000a36:	40cb      	lsrs	r3, r1
 8000a38:	431e      	orrs	r6, r3
 8000a3a:	40cc      	lsrs	r4, r1
 8000a3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	e750      	b.n	80008e6 <__udivmoddi4+0xa6>
 8000a44:	f1c2 0320 	rsb	r3, r2, #32
 8000a48:	fa20 f103 	lsr.w	r1, r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa24 f303 	lsr.w	r3, r4, r3
 8000a54:	4094      	lsls	r4, r2
 8000a56:	430c      	orrs	r4, r1
 8000a58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3110 	mls	r1, r8, r0, r3
 8000a6c:	0c23      	lsrs	r3, r4, #16
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb00 f107 	mul.w	r1, r0, r7
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x24c>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a82:	d22c      	bcs.n	8000ade <__udivmoddi4+0x29e>
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d92a      	bls.n	8000ade <__udivmoddi4+0x29e>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1a5b      	subs	r3, r3, r1
 8000a8e:	b2a4      	uxth	r4, r4
 8000a90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a94:	fb08 3311 	mls	r3, r8, r1, r3
 8000a98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a9c:	fb01 f307 	mul.w	r3, r1, r7
 8000aa0:	42a3      	cmp	r3, r4
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x276>
 8000aa4:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000aac:	d213      	bcs.n	8000ad6 <__udivmoddi4+0x296>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d911      	bls.n	8000ad6 <__udivmoddi4+0x296>
 8000ab2:	3902      	subs	r1, #2
 8000ab4:	4464      	add	r4, ip
 8000ab6:	1ae4      	subs	r4, r4, r3
 8000ab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000abc:	e739      	b.n	8000932 <__udivmoddi4+0xf2>
 8000abe:	4604      	mov	r4, r0
 8000ac0:	e6f0      	b.n	80008a4 <__udivmoddi4+0x64>
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e706      	b.n	80008d4 <__udivmoddi4+0x94>
 8000ac6:	45c8      	cmp	r8, r9
 8000ac8:	d2ae      	bcs.n	8000a28 <__udivmoddi4+0x1e8>
 8000aca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ace:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	e7a8      	b.n	8000a28 <__udivmoddi4+0x1e8>
 8000ad6:	4631      	mov	r1, r6
 8000ad8:	e7ed      	b.n	8000ab6 <__udivmoddi4+0x276>
 8000ada:	4603      	mov	r3, r0
 8000adc:	e799      	b.n	8000a12 <__udivmoddi4+0x1d2>
 8000ade:	4630      	mov	r0, r6
 8000ae0:	e7d4      	b.n	8000a8c <__udivmoddi4+0x24c>
 8000ae2:	46d6      	mov	lr, sl
 8000ae4:	e77f      	b.n	80009e6 <__udivmoddi4+0x1a6>
 8000ae6:	4463      	add	r3, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e74d      	b.n	8000988 <__udivmoddi4+0x148>
 8000aec:	4606      	mov	r6, r0
 8000aee:	4623      	mov	r3, r4
 8000af0:	4608      	mov	r0, r1
 8000af2:	e70f      	b.n	8000914 <__udivmoddi4+0xd4>
 8000af4:	3e02      	subs	r6, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	e730      	b.n	800095c <__udivmoddi4+0x11c>
 8000afa:	bf00      	nop

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b40      	ldr	r3, [pc, #256]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b3d      	ldr	r3, [pc, #244]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b39      	ldr	r3, [pc, #228]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a38      	ldr	r2, [pc, #224]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b36      	ldr	r3, [pc, #216]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b32      	ldr	r3, [pc, #200]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a31      	ldr	r2, [pc, #196]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a2a      	ldr	r2, [pc, #168]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <MX_GPIO_Init+0x11c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	210d      	movs	r1, #13
 8000b8a:	4825      	ldr	r0, [pc, #148]	@ (8000c20 <MX_GPIO_Init+0x120>)
 8000b8c:	f001 fff4 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2120      	movs	r1, #32
 8000b94:	4823      	ldr	r0, [pc, #140]	@ (8000c24 <MX_GPIO_Init+0x124>)
 8000b96:	f001 ffef 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4822      	ldr	r0, [pc, #136]	@ (8000c28 <MX_GPIO_Init+0x128>)
 8000ba0:	f001 ffea 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000baa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4819      	ldr	r0, [pc, #100]	@ (8000c20 <MX_GPIO_Init+0x120>)
 8000bbc:	f001 fe48 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000bc0:	230d      	movs	r3, #13
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4812      	ldr	r0, [pc, #72]	@ (8000c20 <MX_GPIO_Init+0x120>)
 8000bd8:	f001 fe3a 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <MX_GPIO_Init+0x124>)
 8000bf4:	f001 fe2c 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <MX_GPIO_Init+0x128>)
 8000c10:	f001 fe1e 	bl	8002850 <HAL_GPIO_Init>

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	@ 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020400 	.word	0x40020400

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c32:	f001 fc91 	bl	8002558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c36:	f000 f815 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3a:	f7ff ff61 	bl	8000b00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c3e:	f000 f97f 	bl	8000f40 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000c42:	f000 f883 	bl	8000d4c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;//SCAN_DIR_DFT = D2U_L2R
 8000c46:	2300      	movs	r3, #0
 8000c48:	71fb      	strb	r3, [r7, #7]
	LCD_Init( Lcd_ScanDir );
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fc17 	bl	8001480 <LCD_Init>

	/*---------------------------------------------------------------------------------
					//LCD basic skill
	---------------------------------------------------------------------------------*/
	LCD_Show();
 8000c52:	f001 f9ff 	bl	8002054 <LCD_Show>
	Driver_Delay_ms(1000);
 8000c56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c5a:	f000 fa21 	bl	80010a0 <Driver_Delay_ms>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c5e:	bf00      	nop
 8000c60:	e7fd      	b.n	8000c5e <main+0x32>
	...

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	@ 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2234      	movs	r2, #52	@ 0x34
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 faf0 	bl	8004258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d38 <SystemClock_Config+0xd4>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	4a29      	ldr	r2, [pc, #164]	@ (8000d38 <SystemClock_Config+0xd4>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c98:	4b27      	ldr	r3, [pc, #156]	@ (8000d38 <SystemClock_Config+0xd4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <SystemClock_Config+0xd8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cb0:	4a22      	ldr	r2, [pc, #136]	@ (8000d3c <SystemClock_Config+0xd8>)
 8000cb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <SystemClock_Config+0xd8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cdc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ce0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 faa4 	bl	8003240 <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cfe:	f000 f81f 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2302      	movs	r3, #2
 8000d08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 ff44 	bl	8002bac <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d2a:	f000 f809 	bl	8000d40 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3750      	adds	r7, #80	@ 0x50
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40007000 	.word	0x40007000

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d52:	4a19      	ldr	r2, [pc, #100]	@ (8000db8 <MX_SPI3_Init+0x6c>)
 8000d54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d64:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d82:	2218      	movs	r2, #24
 8000d84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000d9a:	220a      	movs	r2, #10
 8000d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_SPI3_Init+0x68>)
 8000da0:	f002 fcec 	bl	800377c <HAL_SPI_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000daa:	f7ff ffc9 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000038 	.word	0x20000038
 8000db8:	40003c00 	.word	0x40003c00

08000dbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <HAL_SPI_MspInit+0xa4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d13c      	bne.n	8000e58 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <HAL_SPI_MspInit+0xa8>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e64 <HAL_SPI_MspInit+0xa8>)
 8000de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <HAL_SPI_MspInit+0xa8>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <HAL_SPI_MspInit+0xa8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a18      	ldr	r2, [pc, #96]	@ (8000e64 <HAL_SPI_MspInit+0xa8>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <HAL_SPI_MspInit+0xa8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000e26:	2305      	movs	r3, #5
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <HAL_SPI_MspInit+0xac>)
 8000e32:	f001 fd0d 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <HAL_SPI_MspInit+0xac>)
 8000e54:	f001 fcfc 	bl	8002850 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	@ 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40003c00 	.word	0x40003c00
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020800 	.word	0x40020800

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb8 <HAL_MspInit+0x4c>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a08      	ldr	r2, [pc, #32]	@ (8000eb8 <HAL_MspInit+0x4c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eaa:	2007      	movs	r0, #7
 8000eac:	f001 fc9c 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f001 fb73 	bl	80025fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <MX_USART2_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f78:	f002 feaa 	bl	8003cd0 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f7ff fedd 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000090 	.word	0x20000090
 8000f90:	40004400 	.word	0x40004400

08000f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a19      	ldr	r2, [pc, #100]	@ (8001018 <HAL_UART_MspInit+0x84>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d12b      	bne.n	800100e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b18      	ldr	r3, [pc, #96]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	4a17      	ldr	r2, [pc, #92]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a10      	ldr	r2, [pc, #64]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffe:	2307      	movs	r3, #7
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <HAL_UART_MspInit+0x8c>)
 800100a:	f001 fc21 	bl	8002850 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	@ 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40004400 	.word	0x40004400
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800105c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001028:	f7ff ff78 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	@ (8001064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	@ (8001070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001052:	f003 f909 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fde9 	bl	8000c2c <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001068:	08004a9c 	.word	0x08004a9c
  ldr r2, =_sbss
 800106c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001070:	200000e8 	.word	0x200000e8

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <SPI_Write_Byte>:
/*********************************************


*********************************************/	
 uint8_t SPI_Write_Byte(uint8_t value)                                    
{    
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
#if 1
	HAL_SPI_Transmit(&hspi3, &value, 1, 500);
 8001082:	1df9      	adds	r1, r7, #7
 8001084:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001088:	2201      	movs	r2, #1
 800108a:	4804      	ldr	r0, [pc, #16]	@ (800109c <SPI_Write_Byte+0x24>)
 800108c:	f002 fbff 	bl	800388e <HAL_SPI_Transmit>
        while((SPI3->SR & (1<<0)) == 0) ; // Wait for the receiving area to be empty
        
        return *((__IO uint8_t *)(&SPI3->DR));

#endif
}
 8001090:	bf00      	nop
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000038 	.word	0x20000038

080010a0 <Driver_Delay_ms>:
/*********************************************


*********************************************/	
void Driver_Delay_ms(uint32_t xms)	
{	
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f001 fac7 	bl	800263c <HAL_Delay>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <LCD_Reset>:
***********************************************************************************************************************/
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_Reset(void){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	LCD_RST_1;
 80010bc:	2201      	movs	r2, #1
 80010be:	2104      	movs	r1, #4
 80010c0:	480b      	ldr	r0, [pc, #44]	@ (80010f0 <LCD_Reset+0x38>)
 80010c2:	f001 fd59 	bl	8002b78 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80010c6:	2064      	movs	r0, #100	@ 0x64
 80010c8:	f7ff ffea 	bl	80010a0 <Driver_Delay_ms>
	LCD_RST_0;
 80010cc:	2200      	movs	r2, #0
 80010ce:	2104      	movs	r1, #4
 80010d0:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <LCD_Reset+0x38>)
 80010d2:	f001 fd51 	bl	8002b78 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80010d6:	2064      	movs	r0, #100	@ 0x64
 80010d8:	f7ff ffe2 	bl	80010a0 <Driver_Delay_ms>
	LCD_RST_1;
 80010dc:	2201      	movs	r2, #1
 80010de:	2104      	movs	r1, #4
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <LCD_Reset+0x38>)
 80010e2:	f001 fd49 	bl	8002b78 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80010e6:	2064      	movs	r0, #100	@ 0x64
 80010e8:	f7ff ffda 	bl	80010a0 <Driver_Delay_ms>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020800 	.word	0x40020800

080010f4 <LCD_WriteReg>:

/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_WriteReg(uint8_t Reg){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	LCD_DC_0;
 80010fe:	2200      	movs	r2, #0
 8001100:	2101      	movs	r1, #1
 8001102:	480a      	ldr	r0, [pc, #40]	@ (800112c <LCD_WriteReg+0x38>)
 8001104:	f001 fd38 	bl	8002b78 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8001108:	2200      	movs	r2, #0
 800110a:	2101      	movs	r1, #1
 800110c:	4808      	ldr	r0, [pc, #32]	@ (8001130 <LCD_WriteReg+0x3c>)
 800110e:	f001 fd33 	bl	8002b78 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Reg);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffaf 	bl	8001078 <SPI_Write_Byte>
	LCD_CS_1;
 800111a:	2201      	movs	r2, #1
 800111c:	2101      	movs	r1, #1
 800111e:	4804      	ldr	r0, [pc, #16]	@ (8001130 <LCD_WriteReg+0x3c>)
 8001120:	f001 fd2a 	bl	8002b78 <HAL_GPIO_WritePin>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800

08001134 <LCD_WriteData_8Bit>:

static void LCD_WriteData_8Bit(uint8_t Data){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_1;
 800113e:	2201      	movs	r2, #1
 8001140:	2101      	movs	r1, #1
 8001142:	480a      	ldr	r0, [pc, #40]	@ (800116c <LCD_WriteData_8Bit+0x38>)
 8001144:	f001 fd18 	bl	8002b78 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8001148:	2200      	movs	r2, #0
 800114a:	2101      	movs	r1, #1
 800114c:	4808      	ldr	r0, [pc, #32]	@ (8001170 <LCD_WriteData_8Bit+0x3c>)
 800114e:	f001 fd13 	bl	8002b78 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Data);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff8f 	bl	8001078 <SPI_Write_Byte>
	LCD_CS_1;
 800115a:	2201      	movs	r2, #1
 800115c:	2101      	movs	r1, #1
 800115e:	4804      	ldr	r0, [pc, #16]	@ (8001170 <LCD_WriteData_8Bit+0x3c>)
 8001160:	f001 fd0a 	bl	8002b78 <HAL_GPIO_WritePin>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020400 	.word	0x40020400
 8001170:	40020800 	.word	0x40020800

08001174 <LCD_WriteData_NLen16Bit>:
	SPI_Write_Byte(Data >> 8);
	SPI_Write_Byte(Data & 0XFF);
	LCD_CS_1;
}

static void LCD_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	LCD_DC_1;
 8001180:	2201      	movs	r2, #1
 8001182:	2101      	movs	r1, #1
 8001184:	4813      	ldr	r0, [pc, #76]	@ (80011d4 <LCD_WriteData_NLen16Bit+0x60>)
 8001186:	f001 fcf7 	bl	8002b78 <HAL_GPIO_WritePin>
	LCD_CS_0;
 800118a:	2200      	movs	r2, #0
 800118c:	2101      	movs	r1, #1
 800118e:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <LCD_WriteData_NLen16Bit+0x64>)
 8001190:	f001 fcf2 	bl	8002b78 <HAL_GPIO_WritePin>
	for(i = 0; i < DataLen; i++){
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e00e      	b.n	80011b8 <LCD_WriteData_NLen16Bit+0x44>
		SPI_Write_Byte( (uint8_t)(Data >> 8) );
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff68 	bl	8001078 <SPI_Write_Byte>
		SPI_Write_Byte( (uint8_t)(Data & 0XFF) );
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff63 	bl	8001078 <SPI_Write_Byte>
	for(i = 0; i < DataLen; i++){
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3ec      	bcc.n	800119a <LCD_WriteData_NLen16Bit+0x26>
	}	
	LCD_CS_1;
 80011c0:	2201      	movs	r2, #1
 80011c2:	2101      	movs	r1, #1
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <LCD_WriteData_NLen16Bit+0x64>)
 80011c6:	f001 fcd7 	bl	8002b78 <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800

080011dc <LCD_InitReg>:

/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void){	
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	//ST7735R Frame Rate
	LCD_WriteReg(0xB1); 
 80011e0:	20b1      	movs	r0, #177	@ 0xb1
 80011e2:	f7ff ff87 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80011e6:	2001      	movs	r0, #1
 80011e8:	f7ff ffa4 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80011ec:	202c      	movs	r0, #44	@ 0x2c
 80011ee:	f7ff ffa1 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80011f2:	202d      	movs	r0, #45	@ 0x2d
 80011f4:	f7ff ff9e 	bl	8001134 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB2); 
 80011f8:	20b2      	movs	r0, #178	@ 0xb2
 80011fa:	f7ff ff7b 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff ff98 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8001204:	202c      	movs	r0, #44	@ 0x2c
 8001206:	f7ff ff95 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 800120a:	202d      	movs	r0, #45	@ 0x2d
 800120c:	f7ff ff92 	bl	8001134 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB3); 
 8001210:	20b3      	movs	r0, #179	@ 0xb3
 8001212:	f7ff ff6f 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff ff8c 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 800121c:	202c      	movs	r0, #44	@ 0x2c
 800121e:	f7ff ff89 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8001222:	202d      	movs	r0, #45	@ 0x2d
 8001224:	f7ff ff86 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x01); 
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff ff83 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 800122e:	202c      	movs	r0, #44	@ 0x2c
 8001230:	f7ff ff80 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8001234:	202d      	movs	r0, #45	@ 0x2d
 8001236:	f7ff ff7d 	bl	8001134 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xB4); //Column inversion 
 800123a:	20b4      	movs	r0, #180	@ 0xb4
 800123c:	f7ff ff5a 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x07); 
 8001240:	2007      	movs	r0, #7
 8001242:	f7ff ff77 	bl	8001134 <LCD_WriteData_8Bit>
	
	//ST7735R Power Sequence
	LCD_WriteReg(0xC0); 
 8001246:	20c0      	movs	r0, #192	@ 0xc0
 8001248:	f7ff ff54 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xA2); 
 800124c:	20a2      	movs	r0, #162	@ 0xa2
 800124e:	f7ff ff71 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 8001252:	2002      	movs	r0, #2
 8001254:	f7ff ff6e 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x84); 
 8001258:	2084      	movs	r0, #132	@ 0x84
 800125a:	f7ff ff6b 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC1); 
 800125e:	20c1      	movs	r0, #193	@ 0xc1
 8001260:	f7ff ff48 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xC5); 
 8001264:	20c5      	movs	r0, #197	@ 0xc5
 8001266:	f7ff ff65 	bl	8001134 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC2); 
 800126a:	20c2      	movs	r0, #194	@ 0xc2
 800126c:	f7ff ff42 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0A); 
 8001270:	200a      	movs	r0, #10
 8001272:	f7ff ff5f 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff ff5c 	bl	8001134 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC3); 
 800127c:	20c3      	movs	r0, #195	@ 0xc3
 800127e:	f7ff ff39 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 8001282:	208a      	movs	r0, #138	@ 0x8a
 8001284:	f7ff ff56 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2A); 
 8001288:	202a      	movs	r0, #42	@ 0x2a
 800128a:	f7ff ff53 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC4); 
 800128e:	20c4      	movs	r0, #196	@ 0xc4
 8001290:	f7ff ff30 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 8001294:	208a      	movs	r0, #138	@ 0x8a
 8001296:	f7ff ff4d 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0xEE); 
 800129a:	20ee      	movs	r0, #238	@ 0xee
 800129c:	f7ff ff4a 	bl	8001134 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xC5); //VCOM 
 80012a0:	20c5      	movs	r0, #197	@ 0xc5
 80012a2:	f7ff ff27 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0E); 
 80012a6:	200e      	movs	r0, #14
 80012a8:	f7ff ff44 	bl	8001134 <LCD_WriteData_8Bit>
	
	//ST7735R Gamma Sequence
	LCD_WriteReg(0xe0); 
 80012ac:	20e0      	movs	r0, #224	@ 0xe0
 80012ae:	f7ff ff21 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 80012b2:	200f      	movs	r0, #15
 80012b4:	f7ff ff3e 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1a); 
 80012b8:	201a      	movs	r0, #26
 80012ba:	f7ff ff3b 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 80012be:	200f      	movs	r0, #15
 80012c0:	f7ff ff38 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x18); 
 80012c4:	2018      	movs	r0, #24
 80012c6:	f7ff ff35 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2f); 
 80012ca:	202f      	movs	r0, #47	@ 0x2f
 80012cc:	f7ff ff32 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x28); 
 80012d0:	2028      	movs	r0, #40	@ 0x28
 80012d2:	f7ff ff2f 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x20); 
 80012d6:	2020      	movs	r0, #32
 80012d8:	f7ff ff2c 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x22); 
 80012dc:	2022      	movs	r0, #34	@ 0x22
 80012de:	f7ff ff29 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1f); 
 80012e2:	201f      	movs	r0, #31
 80012e4:	f7ff ff26 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 80012e8:	201b      	movs	r0, #27
 80012ea:	f7ff ff23 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x23); 
 80012ee:	2023      	movs	r0, #35	@ 0x23
 80012f0:	f7ff ff20 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x37); 
 80012f4:	2037      	movs	r0, #55	@ 0x37
 80012f6:	f7ff ff1d 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 	
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff ff1a 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8001300:	2007      	movs	r0, #7
 8001302:	f7ff ff17 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 8001306:	2002      	movs	r0, #2
 8001308:	f7ff ff14 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10); 
 800130c:	2010      	movs	r0, #16
 800130e:	f7ff ff11 	bl	8001134 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xe1); 
 8001312:	20e1      	movs	r0, #225	@ 0xe1
 8001314:	f7ff feee 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 8001318:	200f      	movs	r0, #15
 800131a:	f7ff ff0b 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 800131e:	201b      	movs	r0, #27
 8001320:	f7ff ff08 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8001324:	200f      	movs	r0, #15
 8001326:	f7ff ff05 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x17); 
 800132a:	2017      	movs	r0, #23
 800132c:	f7ff ff02 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x33); 
 8001330:	2033      	movs	r0, #51	@ 0x33
 8001332:	f7ff feff 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2c); 
 8001336:	202c      	movs	r0, #44	@ 0x2c
 8001338:	f7ff fefc 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x29); 
 800133c:	2029      	movs	r0, #41	@ 0x29
 800133e:	f7ff fef9 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2e); 
 8001342:	202e      	movs	r0, #46	@ 0x2e
 8001344:	f7ff fef6 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 8001348:	2030      	movs	r0, #48	@ 0x30
 800134a:	f7ff fef3 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 800134e:	2030      	movs	r0, #48	@ 0x30
 8001350:	f7ff fef0 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x39); 
 8001354:	2039      	movs	r0, #57	@ 0x39
 8001356:	f7ff feed 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x3f); 
 800135a:	203f      	movs	r0, #63	@ 0x3f
 800135c:	f7ff feea 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fee7 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8001366:	2007      	movs	r0, #7
 8001368:	f7ff fee4 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x03); 
 800136c:	2003      	movs	r0, #3
 800136e:	f7ff fee1 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10);  
 8001372:	2010      	movs	r0, #16
 8001374:	f7ff fede 	bl	8001134 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0xF0); //Enable test command  
 8001378:	20f0      	movs	r0, #240	@ 0xf0
 800137a:	f7ff febb 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff fed8 	bl	8001134 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xF6); //Disable ram power save mode 
 8001384:	20f6      	movs	r0, #246	@ 0xf6
 8001386:	f7ff feb5 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x00); 
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff fed2 	bl	8001134 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0x3A); //65k mode 
 8001390:	203a      	movs	r0, #58	@ 0x3a
 8001392:	f7ff feaf 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x05); 
 8001396:	2005      	movs	r0, #5
 8001398:	f7ff fecc 	bl	8001134 <LCD_WriteData_8Bit>
		
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <LCD_SetGramScanWay>:
function:	Set the display scan and color transfer modes
parameter: 
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir){		
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 80013aa:	4a34      	ldr	r2, [pc, #208]	@ (800147c <LCD_SetGramScanWay+0xdc>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	7113      	strb	r3, [r2, #4]
	
	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d008      	beq.n	80013c8 <LCD_SetGramScanWay+0x28>
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <LCD_SetGramScanWay+0x28>
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d002      	beq.n	80013c8 <LCD_SetGramScanWay+0x28>
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d10c      	bne.n	80013e2 <LCD_SetGramScanWay+0x42>
		sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 80013c8:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <LCD_SetGramScanWay+0xdc>)
 80013ca:	2280      	movs	r2, #128	@ 0x80
 80013cc:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;		
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <LCD_SetGramScanWay+0xdc>)
 80013d0:	22a0      	movs	r2, #160	@ 0xa0
 80013d2:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_X;
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <LCD_SetGramScanWay+0xdc>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_Y;
 80013da:	4b28      	ldr	r3, [pc, #160]	@ (800147c <LCD_SetGramScanWay+0xdc>)
 80013dc:	2201      	movs	r2, #1
 80013de:	811a      	strh	r2, [r3, #8]
 80013e0:	e00b      	b.n	80013fa <LCD_SetGramScanWay+0x5a>
	}else{
		sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <LCD_SetGramScanWay+0xdc>)
 80013e4:	22a0      	movs	r2, #160	@ 0xa0
 80013e6:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;	
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <LCD_SetGramScanWay+0xdc>)
 80013ea:	2280      	movs	r2, #128	@ 0x80
 80013ec:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_Y;
 80013ee:	4b23      	ldr	r3, [pc, #140]	@ (800147c <LCD_SetGramScanWay+0xdc>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_X;
 80013f4:	4b21      	ldr	r3, [pc, #132]	@ (800147c <LCD_SetGramScanWay+0xdc>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	811a      	strh	r2, [r3, #8]
	}
	
	// Gets the scan direction of GRAM
	uint16_t MemoryAccessReg_Data=0;  //0x36	
 80013fa:	2300      	movs	r3, #0
 80013fc:	81fb      	strh	r3, [r7, #14]
	switch (Scan_dir){				
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b07      	cmp	r3, #7
 8001402:	d82b      	bhi.n	800145c <LCD_SetGramScanWay+0xbc>
 8001404:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <LCD_SetGramScanWay+0x6c>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	0800142d 	.word	0x0800142d
 8001410:	08001433 	.word	0x08001433
 8001414:	08001439 	.word	0x08001439
 8001418:	0800143f 	.word	0x0800143f
 800141c:	08001445 	.word	0x08001445
 8001420:	0800144b 	.word	0x0800144b
 8001424:	08001451 	.word	0x08001451
 8001428:	08001457 	.word	0x08001457
		case L2R_U2D:
			MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 800142c:	2300      	movs	r3, #0
 800142e:	81fb      	strh	r3, [r7, #14]
			break;
 8001430:	e014      	b.n	800145c <LCD_SetGramScanWay+0xbc>
		case L2R_D2U:
			MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 8001432:	2380      	movs	r3, #128	@ 0x80
 8001434:	81fb      	strh	r3, [r7, #14]
			break;
 8001436:	e011      	b.n	800145c <LCD_SetGramScanWay+0xbc>
		case R2L_U2D://	0X4
			MemoryAccessReg_Data = 0x40 | 0x00;
 8001438:	2340      	movs	r3, #64	@ 0x40
 800143a:	81fb      	strh	r3, [r7, #14]
			break;
 800143c:	e00e      	b.n	800145c <LCD_SetGramScanWay+0xbc>
		case R2L_D2U://	0XC
			MemoryAccessReg_Data = 0x40 | 0x80;
 800143e:	23c0      	movs	r3, #192	@ 0xc0
 8001440:	81fb      	strh	r3, [r7, #14]
			break;
 8001442:	e00b      	b.n	800145c <LCD_SetGramScanWay+0xbc>
		case U2D_L2R://0X2
			MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 8001444:	2320      	movs	r3, #32
 8001446:	81fb      	strh	r3, [r7, #14]
			break;
 8001448:	e008      	b.n	800145c <LCD_SetGramScanWay+0xbc>
		case U2D_R2L://0X6
			MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800144a:	2360      	movs	r3, #96	@ 0x60
 800144c:	81fb      	strh	r3, [r7, #14]
			break;
 800144e:	e005      	b.n	800145c <LCD_SetGramScanWay+0xbc>
		case D2U_L2R://0XA
			MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8001450:	23a0      	movs	r3, #160	@ 0xa0
 8001452:	81fb      	strh	r3, [r7, #14]
			break;
 8001454:	e002      	b.n	800145c <LCD_SetGramScanWay+0xbc>
		case D2U_R2L://0XE
			MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 8001456:	23e0      	movs	r3, #224	@ 0xe0
 8001458:	81fb      	strh	r3, [r7, #14]
			break;
 800145a:	bf00      	nop
	}
	

	// Set the read / write scan direction of the frame memory
	LCD_WriteReg(0x36); //MX, MY, RGB mode 	
 800145c:	2036      	movs	r0, #54	@ 0x36
 800145e:	f7ff fe49 	bl	80010f4 <LCD_WriteReg>
#if defined(LCD_1IN44)
	LCD_WriteData_8Bit( MemoryAccessReg_Data | 0x08);	//0x08 set RGB
#elif defined(LCD_1IN8)
	LCD_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f023 0308 	bic.w	r3, r3, #8
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fe61 	bl	8001134 <LCD_WriteData_8Bit>
#endif
	
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000d8 	.word	0x200000d8

08001480 <LCD_Init>:

/********************************************************************************
function:	
			initialization
********************************************************************************/
void LCD_Init( LCD_SCAN_DIR Lcd_ScanDir ){	
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	//Turn on the backlight
	LCD_BL_1;
 800148a:	2201      	movs	r2, #1
 800148c:	2108      	movs	r1, #8
 800148e:	480f      	ldr	r0, [pc, #60]	@ (80014cc <LCD_Init+0x4c>)
 8001490:	f001 fb72 	bl	8002b78 <HAL_GPIO_WritePin>
	
	//Hardware reset
	LCD_Reset(); 
 8001494:	f7ff fe10 	bl	80010b8 <LCD_Reset>
	
	//Set the initialization register
	LCD_InitReg();
 8001498:	f7ff fea0 	bl	80011dc <LCD_InitReg>
	
	//Set the display scan and color transfer modes	
	LCD_SetGramScanWay( Lcd_ScanDir );
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff7e 	bl	80013a0 <LCD_SetGramScanWay>
	Driver_Delay_ms(200); 
 80014a4:	20c8      	movs	r0, #200	@ 0xc8
 80014a6:	f7ff fdfb 	bl	80010a0 <Driver_Delay_ms>
	
	//sleep out
	LCD_WriteReg(0x11);
 80014aa:	2011      	movs	r0, #17
 80014ac:	f7ff fe22 	bl	80010f4 <LCD_WriteReg>
	Driver_Delay_ms(120);
 80014b0:	2078      	movs	r0, #120	@ 0x78
 80014b2:	f7ff fdf5 	bl	80010a0 <Driver_Delay_ms>
	
	//Turn on the LCD display
	LCD_WriteReg(0x29);	
 80014b6:	2029      	movs	r0, #41	@ 0x29
 80014b8:	f7ff fe1c 	bl	80010f4 <LCD_WriteReg>

	//clear
	LCD_Clear(WHITE);	
 80014bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014c0:	f000 f8d8 	bl	8001674 <LCD_Clear>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40020800 	.word	0x40020800

080014d0 <LCD_SetWindows>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend ){
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4604      	mov	r4, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4623      	mov	r3, r4
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	4603      	mov	r3, r0
 80014e4:	80bb      	strh	r3, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]
 80014ea:	4613      	mov	r3, r2
 80014ec:	803b      	strh	r3, [r7, #0]

	//set the X coordinates
	LCD_WriteReg ( 0x2A ); 				
 80014ee:	202a      	movs	r0, #42	@ 0x2a
 80014f0:	f7ff fe00 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fe1d 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Xstart & 0xff) + sLCD_DIS.LCD_X_Adjust);			//Set the horizontal starting point to the low octet
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <LCD_SetWindows+0xa8>)
 8001500:	88db      	ldrh	r3, [r3, #6]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe13 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fe10 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_DIS.LCD_X_Adjust);	//Set the horizontal end to the low octet
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <LCD_SetWindows+0xa8>)
 800151a:	88db      	ldrh	r3, [r3, #6]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4413      	add	r3, r2
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe04 	bl	8001134 <LCD_WriteData_8Bit>

	//set the Y coordinates
	LCD_WriteReg ( 0x2B );
 800152c:	202b      	movs	r0, #43	@ 0x2b
 800152e:	f7ff fde1 	bl	80010f4 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff fdfe 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Ystart & 0xff) + sLCD_DIS.LCD_Y_Adjust);
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <LCD_SetWindows+0xa8>)
 800153e:	891b      	ldrh	r3, [r3, #8]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4413      	add	r3, r2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fdf4 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff fdf1 	bl	8001134 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_DIS.LCD_Y_Adjust);
 8001552:	883b      	ldrh	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <LCD_SetWindows+0xa8>)
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fde5 	bl	8001134 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0x2C);	
 800156a:	202c      	movs	r0, #44	@ 0x2c
 800156c:	f7ff fdc2 	bl	80010f4 <LCD_WriteReg>
	
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	200000d8 	.word	0x200000d8

0800157c <LCD_SetCursor>:
function:	Set the display point (Xpoint, Ypoint)
parameter: 
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor ( POINT Xpoint, POINT Ypoint ){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	460a      	mov	r2, r1
 8001586:	80fb      	strh	r3, [r7, #6]
 8001588:	4613      	mov	r3, r2
 800158a:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	88b9      	ldrh	r1, [r7, #4]
 8001592:	88f8      	ldrh	r0, [r7, #6]
 8001594:	f7ff ff9c 	bl	80014d0 <LCD_SetWindows>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LCD_SetColor>:
function:	Set show color
parameter: 
		Color  :   Set show color
********************************************************************************/
//static void LCD_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint){		
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	460b      	mov	r3, r1
 80015ac:	80bb      	strh	r3, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	807b      	strh	r3, [r7, #2]
	LCD_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint); 
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	887a      	ldrh	r2, [r7, #2]
 80015b6:	fb03 f202 	mul.w	r2, r3, r2
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fdd8 	bl	8001174 <LCD_WriteData_NLen16Bit>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <LCD_SetPointlColor>:
parameter: 
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor ( POINT Xpoint, POINT Ypoint, COLOR Color ){	
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	460b      	mov	r3, r1
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	807b      	strh	r3, [r7, #2]
	if ( ( Xpoint <= sLCD_DIS.LCD_Dis_Column ) && ( Ypoint <= sLCD_DIS.LCD_Dis_Page ) ){		
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <LCD_SetPointlColor+0x48>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	88fa      	ldrh	r2, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d810      	bhi.n	800160a <LCD_SetPointlColor+0x3e>
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <LCD_SetPointlColor+0x48>)
 80015ea:	885b      	ldrh	r3, [r3, #2]
 80015ec:	88ba      	ldrh	r2, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d80b      	bhi.n	800160a <LCD_SetPointlColor+0x3e>
		LCD_SetCursor (Xpoint, Ypoint);		
 80015f2:	88ba      	ldrh	r2, [r7, #4]
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ffbf 	bl	800157c <LCD_SetCursor>
		LCD_SetColor ( Color , 1 , 1);
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	2201      	movs	r2, #1
 8001602:	2101      	movs	r1, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ffcb 	bl	80015a0 <LCD_SetColor>
	}
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200000d8 	.word	0x200000d8

08001618 <LCD_SetArealColor>:
		Ystart :   Start point y coordinate
		Xend   :   End point coordinates
		Yend   :   End point coordinates
		Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor (POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR  Color){	
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4604      	mov	r4, r0
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	4623      	mov	r3, r4
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	4603      	mov	r3, r0
 800162c:	80bb      	strh	r3, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	807b      	strh	r3, [r7, #2]
 8001632:	4613      	mov	r3, r2
 8001634:	803b      	strh	r3, [r7, #0]
	if((Xend > Xstart) && (Yend > Ystart)){			
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	429a      	cmp	r2, r3
 800163c:	d915      	bls.n	800166a <LCD_SetArealColor+0x52>
 800163e:	883a      	ldrh	r2, [r7, #0]
 8001640:	88bb      	ldrh	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d911      	bls.n	800166a <LCD_SetArealColor+0x52>
		LCD_SetWindows( Xstart , Ystart , Xend , Yend  );
 8001646:	883b      	ldrh	r3, [r7, #0]
 8001648:	887a      	ldrh	r2, [r7, #2]
 800164a:	88b9      	ldrh	r1, [r7, #4]
 800164c:	88f8      	ldrh	r0, [r7, #6]
 800164e:	f7ff ff3f 	bl	80014d0 <LCD_SetWindows>
		LCD_SetColor ( Color ,Xend - Xstart , Yend - Ystart );
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	b299      	uxth	r1, r3
 800165a:	883a      	ldrh	r2, [r7, #0]
 800165c:	88bb      	ldrh	r3, [r7, #4]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	b29a      	uxth	r2, r3
 8001662:	8b3b      	ldrh	r3, [r7, #24]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff9b 	bl	80015a0 <LCD_SetColor>
	}
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
	...

08001674 <LCD_Clear>:

/********************************************************************************
function:	
			Clear screen 
********************************************************************************/
void LCD_Clear(COLOR  Color){
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af02      	add	r7, sp, #8
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]

	LCD_SetArealColor(0,0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page  , Color);	
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <LCD_Clear+0x28>)
 8001680:	881a      	ldrh	r2, [r3, #0]
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <LCD_Clear+0x28>)
 8001684:	8859      	ldrh	r1, [r3, #2]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	460b      	mov	r3, r1
 800168c:	2100      	movs	r1, #0
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff ffc2 	bl	8001618 <LCD_SetArealColor>

}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200000d8 	.word	0x200000d8

080016a0 <LCD_DrawPoint>:
			Dot_Pixel	:	point size
********************************************************************************/
void LCD_DrawPoint(	POINT Xpoint, POINT Ypoint, 
					COLOR Color, 
					DOT_PIXEL Dot_Pixel,
					DOT_STYLE DOT_STYLE){		
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4604      	mov	r4, r0
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	4623      	mov	r3, r4
 80016b0:	80fb      	strh	r3, [r7, #6]
 80016b2:	4603      	mov	r3, r0
 80016b4:	80bb      	strh	r3, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	807b      	strh	r3, [r7, #2]
 80016ba:	4613      	mov	r3, r2
 80016bc:	707b      	strb	r3, [r7, #1]
						
	if ( Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page ) {
 80016be:	4b33      	ldr	r3, [pc, #204]	@ (800178c <LCD_DrawPoint+0xec>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	88fa      	ldrh	r2, [r7, #6]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d85c      	bhi.n	8001782 <LCD_DrawPoint+0xe2>
 80016c8:	4b30      	ldr	r3, [pc, #192]	@ (800178c <LCD_DrawPoint+0xec>)
 80016ca:	885b      	ldrh	r3, [r3, #2]
 80016cc:	88ba      	ldrh	r2, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d857      	bhi.n	8001782 <LCD_DrawPoint+0xe2>
		return;
	}
	
	uint16_t XDir_Num ,YDir_Num;
	if(DOT_STYLE == DOT_FILL_AROUND){
 80016d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d12c      	bne.n	8001734 <LCD_DrawPoint+0x94>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 80016da:	2300      	movs	r3, #0
 80016dc:	81fb      	strh	r3, [r7, #14]
 80016de:	e022      	b.n	8001726 <LCD_DrawPoint+0x86>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 80016e0:	2300      	movs	r3, #0
 80016e2:	81bb      	strh	r3, [r7, #12]
 80016e4:	e016      	b.n	8001714 <LCD_DrawPoint+0x74>
				LCD_SetPointlColor( Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80016e6:	88fa      	ldrh	r2, [r7, #6]
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	4413      	add	r3, r2
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	787b      	ldrb	r3, [r7, #1]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	b298      	uxth	r0, r3
 80016f6:	88ba      	ldrh	r2, [r7, #4]
 80016f8:	89bb      	ldrh	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	787b      	ldrb	r3, [r7, #1]
 8001700:	b29b      	uxth	r3, r3
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	b29b      	uxth	r3, r3
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff ff5f 	bl	80015cc <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 800170e:	89bb      	ldrh	r3, [r7, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	81bb      	strh	r3, [r7, #12]
 8001714:	89ba      	ldrh	r2, [r7, #12]
 8001716:	787b      	ldrb	r3, [r7, #1]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	3b01      	subs	r3, #1
 800171c:	429a      	cmp	r2, r3
 800171e:	dbe2      	blt.n	80016e6 <LCD_DrawPoint+0x46>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	3301      	adds	r3, #1
 8001724:	81fb      	strh	r3, [r7, #14]
 8001726:	89fa      	ldrh	r2, [r7, #14]
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	3b01      	subs	r3, #1
 800172e:	429a      	cmp	r2, r3
 8001730:	dbd6      	blt.n	80016e0 <LCD_DrawPoint+0x40>
 8001732:	e027      	b.n	8001784 <LCD_DrawPoint+0xe4>
			}
		}
	}else{
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8001734:	2300      	movs	r3, #0
 8001736:	81fb      	strh	r3, [r7, #14]
 8001738:	e01d      	b.n	8001776 <LCD_DrawPoint+0xd6>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 800173a:	2300      	movs	r3, #0
 800173c:	81bb      	strh	r3, [r7, #12]
 800173e:	e012      	b.n	8001766 <LCD_DrawPoint+0xc6>
				LCD_SetPointlColor( Xpoint + XDir_Num - 1 , Ypoint + YDir_Num -1 , Color);
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	4413      	add	r3, r2
 8001746:	b29b      	uxth	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b298      	uxth	r0, r3
 800174c:	88ba      	ldrh	r2, [r7, #4]
 800174e:	89bb      	ldrh	r3, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29b      	uxth	r3, r3
 8001758:	887a      	ldrh	r2, [r7, #2]
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff ff36 	bl	80015cc <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8001760:	89bb      	ldrh	r3, [r7, #12]
 8001762:	3301      	adds	r3, #1
 8001764:	81bb      	strh	r3, [r7, #12]
 8001766:	787b      	ldrb	r3, [r7, #1]
 8001768:	b29b      	uxth	r3, r3
 800176a:	89ba      	ldrh	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3e7      	bcc.n	8001740 <LCD_DrawPoint+0xa0>
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	3301      	adds	r3, #1
 8001774:	81fb      	strh	r3, [r7, #14]
 8001776:	787b      	ldrb	r3, [r7, #1]
 8001778:	b29b      	uxth	r3, r3
 800177a:	89fa      	ldrh	r2, [r7, #14]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3dc      	bcc.n	800173a <LCD_DrawPoint+0x9a>
 8001780:	e000      	b.n	8001784 <LCD_DrawPoint+0xe4>
		return;
 8001782:	bf00      	nop
			}
		}
	}	
}
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	bf00      	nop
 800178c:	200000d8 	.word	0x200000d8

08001790 <LCD_DrawLine>:
********************************************************************************/
void LCD_DrawLine ( POINT Xstart, POINT Ystart, 
					POINT Xend, POINT Yend, 
					COLOR Color,
					LINE_STYLE Line_Style,
					DOT_PIXEL Dot_Pixel){
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b08d      	sub	sp, #52	@ 0x34
 8001794:	af02      	add	r7, sp, #8
 8001796:	4604      	mov	r4, r0
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	461a      	mov	r2, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	80fb      	strh	r3, [r7, #6]
 80017a2:	4603      	mov	r3, r0
 80017a4:	80bb      	strh	r3, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	807b      	strh	r3, [r7, #2]
 80017aa:	4613      	mov	r3, r2
 80017ac:	803b      	strh	r3, [r7, #0]
						
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80017ae:	4b4e      	ldr	r3, [pc, #312]	@ (80018e8 <LCD_DrawLine+0x158>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	88fa      	ldrh	r2, [r7, #6]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f200 808f 	bhi.w	80018d8 <LCD_DrawLine+0x148>
 80017ba:	4b4b      	ldr	r3, [pc, #300]	@ (80018e8 <LCD_DrawLine+0x158>)
 80017bc:	885b      	ldrh	r3, [r3, #2]
 80017be:	88ba      	ldrh	r2, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	f200 8089 	bhi.w	80018d8 <LCD_DrawLine+0x148>
 80017c6:	4b48      	ldr	r3, [pc, #288]	@ (80018e8 <LCD_DrawLine+0x158>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f200 8083 	bhi.w	80018d8 <LCD_DrawLine+0x148>
 80017d2:	4b45      	ldr	r3, [pc, #276]	@ (80018e8 <LCD_DrawLine+0x158>)
 80017d4:	885b      	ldrh	r3, [r3, #2]
 80017d6:	883a      	ldrh	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d87d      	bhi.n	80018d8 <LCD_DrawLine+0x148>
		return;
	}	
	
	POINT Xpoint = Xstart; 
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	84fb      	strh	r3, [r7, #38]	@ 0x26
	POINT Ypoint = Ystart; 
 80017e0:	88bb      	ldrh	r3, [r7, #4]
 80017e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bfb8      	it	lt
 80017ee:	425b      	neglt	r3, r3
 80017f0:	61bb      	str	r3, [r7, #24]
	int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80017f2:	883a      	ldrh	r2, [r7, #0]
 80017f4:	88bb      	ldrh	r3, [r7, #4]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bfb8      	it	lt
 80017fc:	425b      	neglt	r3, r3
 80017fe:	425b      	negs	r3, r3
 8001800:	617b      	str	r3, [r7, #20]
	
	// Increment direction, 1 is positive, -1 is counter;
	int32_t XAddway = Xstart < Xend ? 1 : -1;
 8001802:	88fa      	ldrh	r2, [r7, #6]
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	429a      	cmp	r2, r3
 8001808:	d201      	bcs.n	800180e <LCD_DrawLine+0x7e>
 800180a:	2301      	movs	r3, #1
 800180c:	e001      	b.n	8001812 <LCD_DrawLine+0x82>
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	613b      	str	r3, [r7, #16]
	int32_t YAddway = Ystart < Yend ? 1 : -1;
 8001814:	88ba      	ldrh	r2, [r7, #4]
 8001816:	883b      	ldrh	r3, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d201      	bcs.n	8001820 <LCD_DrawLine+0x90>
 800181c:	2301      	movs	r3, #1
 800181e:	e001      	b.n	8001824 <LCD_DrawLine+0x94>
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	60fb      	str	r3, [r7, #12]
	
	//Cumulative error
	int32_t Esp = dx + dy;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4413      	add	r3, r2
 800182c:	623b      	str	r3, [r7, #32]
	int8_t Line_Style_Temp = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	77fb      	strb	r3, [r7, #31]

	for (;;){
		Line_Style_Temp++;
 8001832:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	77fb      	strb	r3, [r7, #31]
		//Painted dotted line, 2 point is really virtual
		if(Line_Style == LINE_DOTTED && Line_Style_Temp %3 == 0){
 800183e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001842:	2b01      	cmp	r3, #1
 8001844:	d11a      	bne.n	800187c <LCD_DrawLine+0xec>
 8001846:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800184a:	4b28      	ldr	r3, [pc, #160]	@ (80018ec <LCD_DrawLine+0x15c>)
 800184c:	fb83 3102 	smull	r3, r1, r3, r2
 8001850:	17d3      	asrs	r3, r2, #31
 8001852:	1ac9      	subs	r1, r1, r3
 8001854:	460b      	mov	r3, r1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	440b      	add	r3, r1
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	b25b      	sxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10c      	bne.n	800187c <LCD_DrawLine+0xec>
			LCD_DrawPoint( Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 8001862:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001866:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001868:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800186a:	2201      	movs	r2, #1
 800186c:	9200      	str	r2, [sp, #0]
 800186e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001872:	f7ff ff15 	bl	80016a0 <LCD_DrawPoint>
			Line_Style_Temp = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	77fb      	strb	r3, [r7, #31]
 800187a:	e008      	b.n	800188e <LCD_DrawLine+0xfe>
		}else{
			LCD_DrawPoint( Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 800187c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001880:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001882:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001884:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8001886:	2401      	movs	r4, #1
 8001888:	9400      	str	r4, [sp, #0]
 800188a:	f7ff ff09 	bl	80016a0 <LCD_DrawPoint>
		}	
        if (2 * Esp >= dy) {
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	dc0c      	bgt.n	80018b2 <LCD_DrawLine+0x122>
			if (Xpoint == Xend) break;			
 8001898:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	429a      	cmp	r2, r3
 800189e:	d01d      	beq.n	80018dc <LCD_DrawLine+0x14c>
            Esp += dy; 
 80018a0:	6a3a      	ldr	r2, [r7, #32]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	4413      	add	r3, r2
 80018a6:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018ae:	4413      	add	r3, r2
 80018b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if (2 * Esp <= dx) {
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbba      	blt.n	8001832 <LCD_DrawLine+0xa2>
			if (Ypoint == Yend) break;	
 80018bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018be:	883b      	ldrh	r3, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d00d      	beq.n	80018e0 <LCD_DrawLine+0x150>
            Esp += dx; 
 80018c4:	6a3a      	ldr	r2, [r7, #32]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4413      	add	r3, r2
 80018ca:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80018d2:	4413      	add	r3, r2
 80018d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		Line_Style_Temp++;
 80018d6:	e7ac      	b.n	8001832 <LCD_DrawLine+0xa2>
		return;
 80018d8:	bf00      	nop
 80018da:	e002      	b.n	80018e2 <LCD_DrawLine+0x152>
			if (Xpoint == Xend) break;			
 80018dc:	bf00      	nop
 80018de:	e000      	b.n	80018e2 <LCD_DrawLine+0x152>
			if (Ypoint == Yend) break;	
 80018e0:	bf00      	nop
        }
	}
}   
 80018e2:	372c      	adds	r7, #44	@ 0x2c
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	200000d8 	.word	0x200000d8
 80018ec:	55555556 	.word	0x55555556

080018f0 <LCD_DrawRectangle>:
********************************************************************************/
void LCD_DrawRectangle ( 	POINT Xstart, POINT Ystart, 
							POINT Xend, POINT Yend, 
							COLOR Color, 
							DRAW_FILL Filled,
							DOT_PIXEL Dot_Pixel ){
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af04      	add	r7, sp, #16
 80018f6:	4604      	mov	r4, r0
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	80fb      	strh	r3, [r7, #6]
 8001902:	4603      	mov	r3, r0
 8001904:	80bb      	strh	r3, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	807b      	strh	r3, [r7, #2]
 800190a:	4613      	mov	r3, r2
 800190c:	803b      	strh	r3, [r7, #0]
					
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800190e:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <LCD_DrawRectangle+0xdc>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	429a      	cmp	r2, r3
 8001916:	d854      	bhi.n	80019c2 <LCD_DrawRectangle+0xd2>
 8001918:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <LCD_DrawRectangle+0xdc>)
 800191a:	885b      	ldrh	r3, [r3, #2]
 800191c:	88ba      	ldrh	r2, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	d84f      	bhi.n	80019c2 <LCD_DrawRectangle+0xd2>
 8001922:	4b2a      	ldr	r3, [pc, #168]	@ (80019cc <LCD_DrawRectangle+0xdc>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	429a      	cmp	r2, r3
 800192a:	d84a      	bhi.n	80019c2 <LCD_DrawRectangle+0xd2>
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <LCD_DrawRectangle+0xdc>)
 800192e:	885b      	ldrh	r3, [r3, #2]
 8001930:	883a      	ldrh	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d845      	bhi.n	80019c2 <LCD_DrawRectangle+0xd2>
		return;
	}	
	
	if ( Filled ){
 8001936:	7f3b      	ldrb	r3, [r7, #28]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <LCD_DrawRectangle+0x60>
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 800193c:	883c      	ldrh	r4, [r7, #0]
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	88b9      	ldrh	r1, [r7, #4]
 8001942:	88f8      	ldrh	r0, [r7, #6]
 8001944:	8b3b      	ldrh	r3, [r7, #24]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4623      	mov	r3, r4
 800194a:	f7ff fe65 	bl	8001618 <LCD_SetArealColor>
 800194e:	e039      	b.n	80019c4 <LCD_DrawRectangle+0xd4>
	}else{
		LCD_DrawLine ( Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8001950:	88bc      	ldrh	r4, [r7, #4]
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	88b9      	ldrh	r1, [r7, #4]
 8001956:	88f8      	ldrh	r0, [r7, #6]
 8001958:	f897 3020 	ldrb.w	r3, [r7, #32]
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2300      	movs	r3, #0
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	8b3b      	ldrh	r3, [r7, #24]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	4623      	mov	r3, r4
 8001968:	f7ff ff12 	bl	8001790 <LCD_DrawLine>
		LCD_DrawLine ( Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 800196c:	883c      	ldrh	r4, [r7, #0]
 800196e:	88fa      	ldrh	r2, [r7, #6]
 8001970:	88b9      	ldrh	r1, [r7, #4]
 8001972:	88f8      	ldrh	r0, [r7, #6]
 8001974:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	2300      	movs	r3, #0
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	8b3b      	ldrh	r3, [r7, #24]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4623      	mov	r3, r4
 8001984:	f7ff ff04 	bl	8001790 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8001988:	88bc      	ldrh	r4, [r7, #4]
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	8839      	ldrh	r1, [r7, #0]
 800198e:	8878      	ldrh	r0, [r7, #2]
 8001990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	2300      	movs	r3, #0
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	8b3b      	ldrh	r3, [r7, #24]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4623      	mov	r3, r4
 80019a0:	f7ff fef6 	bl	8001790 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);		
 80019a4:	883c      	ldrh	r4, [r7, #0]
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	8839      	ldrh	r1, [r7, #0]
 80019aa:	8878      	ldrh	r0, [r7, #2]
 80019ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	2300      	movs	r3, #0
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	8b3b      	ldrh	r3, [r7, #24]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4623      	mov	r3, r4
 80019bc:	f7ff fee8 	bl	8001790 <LCD_DrawLine>
 80019c0:	e000      	b.n	80019c4 <LCD_DrawRectangle+0xd4>
		return;
 80019c2:	bf00      	nop
	}
}
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000d8 	.word	0x200000d8

080019d0 <LCD_DrawCircle>:
			Filled : Whether it is filled: 1 filling 0��Do not
********************************************************************************/
void LCD_DrawCircle ( 	POINT X_Center, POINT Y_Center, LENGTH Radius, 
						COLOR Color, 
						DRAW_FILL  Draw_Fill ,
						DOT_PIXEL Dot_Pixel ){
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	4604      	mov	r4, r0
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4623      	mov	r3, r4
 80019e0:	80fb      	strh	r3, [r7, #6]
 80019e2:	4603      	mov	r3, r0
 80019e4:	80bb      	strh	r3, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]
 80019ea:	4613      	mov	r3, r2
 80019ec:	803b      	strh	r3, [r7, #0]
							
	if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 80019ee:	4ba1      	ldr	r3, [pc, #644]	@ (8001c74 <LCD_DrawCircle+0x2a4>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	88fa      	ldrh	r2, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f200 8161 	bhi.w	8001cbc <LCD_DrawCircle+0x2ec>
 80019fa:	4b9e      	ldr	r3, [pc, #632]	@ (8001c74 <LCD_DrawCircle+0x2a4>)
 80019fc:	885b      	ldrh	r3, [r3, #2]
 80019fe:	88ba      	ldrh	r2, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f080 815b 	bcs.w	8001cbc <LCD_DrawCircle+0x2ec>
		return;
	}						
	
	//Draw a circle from (0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0; 
 8001a06:	2300      	movs	r3, #0
 8001a08:	81fb      	strh	r3, [r7, #14]
	YCurrent = Radius;	
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	81bb      	strh	r3, [r7, #12]
	
	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - ( Radius << 1 );
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f1c3 0303 	rsb	r3, r3, #3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	817b      	strh	r3, [r7, #10]
	
	int16_t sCountY;
	if ( Draw_Fill ){
 8001a1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8143 	beq.w	8001cac <LCD_DrawCircle+0x2dc>
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8001a26:	e096      	b.n	8001b56 <LCD_DrawCircle+0x186>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	813b      	strh	r3, [r7, #8]
 8001a2c:	e065      	b.n	8001afa <LCD_DrawCircle+0x12a>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center + sCountY,   Color );           //1
 8001a2e:	89fa      	ldrh	r2, [r7, #14]
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	4413      	add	r3, r2
 8001a34:	b298      	uxth	r0, r3
 8001a36:	893a      	ldrh	r2, [r7, #8]
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	883a      	ldrh	r2, [r7, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff fdc3 	bl	80015cc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center + sCountY,   Color );           //2       
 8001a46:	89fb      	ldrh	r3, [r7, #14]
 8001a48:	88fa      	ldrh	r2, [r7, #6]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b298      	uxth	r0, r3
 8001a4e:	893a      	ldrh	r2, [r7, #8]
 8001a50:	88bb      	ldrh	r3, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	883a      	ldrh	r2, [r7, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff fdb7 	bl	80015cc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center + XCurrent, Color );           //3
 8001a5e:	893b      	ldrh	r3, [r7, #8]
 8001a60:	88fa      	ldrh	r2, [r7, #6]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	b298      	uxth	r0, r3
 8001a66:	89fa      	ldrh	r2, [r7, #14]
 8001a68:	88bb      	ldrh	r3, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	883a      	ldrh	r2, [r7, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff fdab 	bl	80015cc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center - XCurrent, Color );           //4
 8001a76:	893b      	ldrh	r3, [r7, #8]
 8001a78:	88fa      	ldrh	r2, [r7, #6]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	b298      	uxth	r0, r3
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
 8001a80:	88ba      	ldrh	r2, [r7, #4]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	883a      	ldrh	r2, [r7, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff fd9f 	bl	80015cc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center - sCountY,   Color );           //5    
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	88fa      	ldrh	r2, [r7, #6]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b298      	uxth	r0, r3
 8001a96:	893b      	ldrh	r3, [r7, #8]
 8001a98:	88ba      	ldrh	r2, [r7, #4]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	883a      	ldrh	r2, [r7, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff fd93 	bl	80015cc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center - sCountY,   Color );           //6
 8001aa6:	89fa      	ldrh	r2, [r7, #14]
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b298      	uxth	r0, r3
 8001aae:	893b      	ldrh	r3, [r7, #8]
 8001ab0:	88ba      	ldrh	r2, [r7, #4]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	883a      	ldrh	r2, [r7, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff fd87 	bl	80015cc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center - XCurrent, Color );           //7 	
 8001abe:	893a      	ldrh	r2, [r7, #8]
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b298      	uxth	r0, r3
 8001ac6:	89fb      	ldrh	r3, [r7, #14]
 8001ac8:	88ba      	ldrh	r2, [r7, #4]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	883a      	ldrh	r2, [r7, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff fd7b 	bl	80015cc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center + XCurrent, Color );           //0				
 8001ad6:	893a      	ldrh	r2, [r7, #8]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4413      	add	r3, r2
 8001adc:	b298      	uxth	r0, r3
 8001ade:	89fa      	ldrh	r2, [r7, #14]
 8001ae0:	88bb      	ldrh	r3, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	883a      	ldrh	r2, [r7, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff fd6f 	bl	80015cc <LCD_SetPointlColor>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8001aee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3301      	adds	r3, #1
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	813b      	strh	r3, [r7, #8]
 8001afa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001afe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dd93      	ble.n	8001a2e <LCD_DrawCircle+0x5e>
			}
			if ( Esp < 0 ) 
 8001b06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da09      	bge.n	8001b22 <LCD_DrawCircle+0x152>
				Esp += 4 * XCurrent + 6;	  
 8001b0e:	89fb      	ldrh	r3, [r7, #14]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	817b      	strh	r3, [r7, #10]
 8001b20:	e013      	b.n	8001b4a <LCD_DrawCircle+0x17a>
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8001b22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	897b      	ldrh	r3, [r7, #10]
 8001b34:	4413      	add	r3, r2
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	330a      	adds	r3, #10
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8001b3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8001b4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8001b56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	f77f af62 	ble.w	8001a28 <LCD_DrawCircle+0x58>
 8001b64:	e0ab      	b.n	8001cbe <LCD_DrawCircle+0x2ee>
		}
	}else{ //Draw a hollow circle  
		while ( XCurrent <= YCurrent ){ 	
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //1
 8001b66:	89fa      	ldrh	r2, [r7, #14]
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b298      	uxth	r0, r3
 8001b6e:	89ba      	ldrh	r2, [r7, #12]
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	b299      	uxth	r1, r3
 8001b76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b7a:	883a      	ldrh	r2, [r7, #0]
 8001b7c:	2401      	movs	r4, #1
 8001b7e:	9400      	str	r4, [sp, #0]
 8001b80:	f7ff fd8e 	bl	80016a0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //2      
 8001b84:	89fb      	ldrh	r3, [r7, #14]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	b298      	uxth	r0, r3
 8001b8c:	89ba      	ldrh	r2, [r7, #12]
 8001b8e:	88bb      	ldrh	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	b299      	uxth	r1, r3
 8001b94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b98:	883a      	ldrh	r2, [r7, #0]
 8001b9a:	2401      	movs	r4, #1
 8001b9c:	9400      	str	r4, [sp, #0]
 8001b9e:	f7ff fd7f 	bl	80016a0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //3
 8001ba2:	89bb      	ldrh	r3, [r7, #12]
 8001ba4:	88fa      	ldrh	r2, [r7, #6]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	b298      	uxth	r0, r3
 8001baa:	89fa      	ldrh	r2, [r7, #14]
 8001bac:	88bb      	ldrh	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	b299      	uxth	r1, r3
 8001bb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bb6:	883a      	ldrh	r2, [r7, #0]
 8001bb8:	2401      	movs	r4, #1
 8001bba:	9400      	str	r4, [sp, #0]
 8001bbc:	f7ff fd70 	bl	80016a0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //4
 8001bc0:	89bb      	ldrh	r3, [r7, #12]
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	b298      	uxth	r0, r3
 8001bc8:	89fb      	ldrh	r3, [r7, #14]
 8001bca:	88ba      	ldrh	r2, [r7, #4]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	b299      	uxth	r1, r3
 8001bd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bd4:	883a      	ldrh	r2, [r7, #0]
 8001bd6:	2401      	movs	r4, #1
 8001bd8:	9400      	str	r4, [sp, #0]
 8001bda:	f7ff fd61 	bl	80016a0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //5       
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b298      	uxth	r0, r3
 8001be6:	89bb      	ldrh	r3, [r7, #12]
 8001be8:	88ba      	ldrh	r2, [r7, #4]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b299      	uxth	r1, r3
 8001bee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bf2:	883a      	ldrh	r2, [r7, #0]
 8001bf4:	2401      	movs	r4, #1
 8001bf6:	9400      	str	r4, [sp, #0]
 8001bf8:	f7ff fd52 	bl	80016a0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //6
 8001bfc:	89fa      	ldrh	r2, [r7, #14]
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	4413      	add	r3, r2
 8001c02:	b298      	uxth	r0, r3
 8001c04:	89bb      	ldrh	r3, [r7, #12]
 8001c06:	88ba      	ldrh	r2, [r7, #4]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c10:	883a      	ldrh	r2, [r7, #0]
 8001c12:	2401      	movs	r4, #1
 8001c14:	9400      	str	r4, [sp, #0]
 8001c16:	f7ff fd43 	bl	80016a0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //7 
 8001c1a:	89ba      	ldrh	r2, [r7, #12]
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b298      	uxth	r0, r3
 8001c22:	89fb      	ldrh	r3, [r7, #14]
 8001c24:	88ba      	ldrh	r2, [r7, #4]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	b299      	uxth	r1, r3
 8001c2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c2e:	883a      	ldrh	r2, [r7, #0]
 8001c30:	2401      	movs	r4, #1
 8001c32:	9400      	str	r4, [sp, #0]
 8001c34:	f7ff fd34 	bl	80016a0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //0
 8001c38:	89ba      	ldrh	r2, [r7, #12]
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	89fa      	ldrh	r2, [r7, #14]
 8001c42:	88bb      	ldrh	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	b299      	uxth	r1, r3
 8001c48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c4c:	883a      	ldrh	r2, [r7, #0]
 8001c4e:	2401      	movs	r4, #1
 8001c50:	9400      	str	r4, [sp, #0]
 8001c52:	f7ff fd25 	bl	80016a0 <LCD_DrawPoint>
			
			if ( Esp < 0 ) 
 8001c56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da0c      	bge.n	8001c78 <LCD_DrawCircle+0x2a8>
				Esp += 4 * XCurrent + 6;	  
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	897b      	ldrh	r3, [r7, #10]
 8001c66:	4413      	add	r3, r2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3306      	adds	r3, #6
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	817b      	strh	r3, [r7, #10]
 8001c70:	e016      	b.n	8001ca0 <LCD_DrawCircle+0x2d0>
 8001c72:	bf00      	nop
 8001c74:	200000d8 	.word	0x200000d8
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8001c78:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	897b      	ldrh	r3, [r7, #10]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	330a      	adds	r3, #10
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8001c94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8001ca0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ 	
 8001cac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f77f af56 	ble.w	8001b66 <LCD_DrawCircle+0x196>
 8001cba:	e000      	b.n	8001cbe <LCD_DrawCircle+0x2ee>
		return;
 8001cbc:	bf00      	nop
		}
	}
}
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <LCD_DisplayChar>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayChar( 	POINT Xpoint, POINT Ypoint, const char Acsii_Char,
						sFONT* Font, COLOR Color_Background,	COLOR Color_Foreground ){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	81fb      	strh	r3, [r7, #14]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	81bb      	strh	r3, [r7, #12]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	72fb      	strb	r3, [r7, #11]
	POINT Page, Column;
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8001cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e10 <LCD_DisplayChar+0x14c>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	89fa      	ldrh	r2, [r7, #14]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	f080 8091 	bcs.w	8001e06 <LCD_DisplayChar+0x142>
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8001e10 <LCD_DisplayChar+0x14c>)
 8001ce6:	885b      	ldrh	r3, [r3, #2]
 8001ce8:	89ba      	ldrh	r2, [r7, #12]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	f080 808b 	bcs.w	8001e06 <LCD_DisplayChar+0x142>
		return;
	}
	
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
 8001cf2:	3b20      	subs	r3, #32
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	88d2      	ldrh	r2, [r2, #6]
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	8892      	ldrh	r2, [r2, #4]
 8001d00:	08d2      	lsrs	r2, r2, #3
 8001d02:	b292      	uxth	r2, r2
 8001d04:	4611      	mov	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	8892      	ldrh	r2, [r2, #4]
 8001d0a:	f002 0207 	and.w	r2, r2, #7
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2201      	movne	r2, #1
 8001d16:	2200      	moveq	r2, #0
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440a      	add	r2, r1
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
	const unsigned char* ptr = &Font->table[Char_Offset];
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4413      	add	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]

	for ( Page = 0; Page < Font->Height; Page ++ ){
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	83fb      	strh	r3, [r7, #30]
 8001d30:	e063      	b.n	8001dfa <LCD_DisplayChar+0x136>
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8001d32:	2300      	movs	r3, #0
 8001d34:	83bb      	strh	r3, [r7, #28]
 8001d36:	e04e      	b.n	8001dd6 <LCD_DisplayChar+0x112>
			
			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background){//this process is to speed up the scan
 8001d38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d118      	bne.n	8001d74 <LCD_DisplayChar+0xb0>
				if (*ptr & (0x80 >> (Column % 8)))
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	8bbb      	ldrh	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	fa42 f303 	asr.w	r3, r2, r3
 8001d54:	400b      	ands	r3, r1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d031      	beq.n	8001dbe <LCD_DisplayChar+0xfa>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8001d5a:	89fa      	ldrh	r2, [r7, #14]
 8001d5c:	8bbb      	ldrh	r3, [r7, #28]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b298      	uxth	r0, r3
 8001d62:	89ba      	ldrh	r2, [r7, #12]
 8001d64:	8bfb      	ldrh	r3, [r7, #30]
 8001d66:	4413      	add	r3, r2
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7ff fc2d 	bl	80015cc <LCD_SetPointlColor>
 8001d72:	e024      	b.n	8001dbe <LCD_DisplayChar+0xfa>
			}else{
				if (*ptr & (0x80 >> (Column % 8))){
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	8bbb      	ldrh	r3, [r7, #28]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	2280      	movs	r2, #128	@ 0x80
 8001d82:	fa42 f303 	asr.w	r3, r2, r3
 8001d86:	400b      	ands	r3, r1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00c      	beq.n	8001da6 <LCD_DisplayChar+0xe2>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8001d8c:	89fa      	ldrh	r2, [r7, #14]
 8001d8e:	8bbb      	ldrh	r3, [r7, #28]
 8001d90:	4413      	add	r3, r2
 8001d92:	b298      	uxth	r0, r3
 8001d94:	89ba      	ldrh	r2, [r7, #12]
 8001d96:	8bfb      	ldrh	r3, [r7, #30]
 8001d98:	4413      	add	r3, r2
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7ff fc14 	bl	80015cc <LCD_SetPointlColor>
 8001da4:	e00b      	b.n	8001dbe <LCD_DisplayChar+0xfa>
				}else{
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Background );
 8001da6:	89fa      	ldrh	r2, [r7, #14]
 8001da8:	8bbb      	ldrh	r3, [r7, #28]
 8001daa:	4413      	add	r3, r2
 8001dac:	b298      	uxth	r0, r3
 8001dae:	89ba      	ldrh	r2, [r7, #12]
 8001db0:	8bfb      	ldrh	r3, [r7, #30]
 8001db2:	4413      	add	r3, r2
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7ff fc07 	bl	80015cc <LCD_SetPointlColor>
				}
			}
			//One pixel is 8 bits
            if (Column % 8 == 7) {
 8001dbe:	8bbb      	ldrh	r3, [r7, #28]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b07      	cmp	r3, #7
 8001dc8:	d102      	bne.n	8001dd0 <LCD_DisplayChar+0x10c>
                ptr++;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61bb      	str	r3, [r7, #24]
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8001dd0:	8bbb      	ldrh	r3, [r7, #28]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	83bb      	strh	r3, [r7, #28]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	889b      	ldrh	r3, [r3, #4]
 8001dda:	8bba      	ldrh	r2, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d3ab      	bcc.n	8001d38 <LCD_DisplayChar+0x74>
            }	
		}/* Write a line */
		if (Font->Width % 8 != 0) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	889b      	ldrh	r3, [r3, #4]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <LCD_DisplayChar+0x130>
				ptr++;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61bb      	str	r3, [r7, #24]
	for ( Page = 0; Page < Font->Height; Page ++ ){
 8001df4:	8bfb      	ldrh	r3, [r7, #30]
 8001df6:	3301      	adds	r3, #1
 8001df8:	83fb      	strh	r3, [r7, #30]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	88db      	ldrh	r3, [r3, #6]
 8001dfe:	8bfa      	ldrh	r2, [r7, #30]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d396      	bcc.n	8001d32 <LCD_DisplayChar+0x6e>
 8001e04:	e000      	b.n	8001e08 <LCD_DisplayChar+0x144>
		return;
 8001e06:	bf00      	nop
		}
	}/* Write all */
}
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200000d8 	.word	0x200000d8

08001e14 <LCD_DisplayString>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayString (	POINT Xstart, POINT Ystart, const char * pString, 
							sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60ba      	str	r2, [r7, #8]
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	81fb      	strh	r3, [r7, #14]
 8001e22:	460b      	mov	r3, r1
 8001e24:	81bb      	strh	r3, [r7, #12]
	POINT Xpoint = Xstart;
 8001e26:	89fb      	ldrh	r3, [r7, #14]
 8001e28:	82fb      	strh	r3, [r7, #22]
	POINT Ypoint = Ystart;
 8001e2a:	89bb      	ldrh	r3, [r7, #12]
 8001e2c:	82bb      	strh	r3, [r7, #20]

	if (Xstart >= sLCD_DIS.LCD_Dis_Column || Ystart >= sLCD_DIS.LCD_Dis_Page) {
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <LCD_DisplayString+0xa0>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	89fa      	ldrh	r2, [r7, #14]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d238      	bcs.n	8001eaa <LCD_DisplayString+0x96>
 8001e38:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <LCD_DisplayString+0xa0>)
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	89ba      	ldrh	r2, [r7, #12]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d233      	bcs.n	8001eaa <LCD_DisplayString+0x96>
		return;
	}
		
	while ( * pString != '\0')
 8001e42:	e02d      	b.n	8001ea0 <LCD_DisplayString+0x8c>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
		if ( ( Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ){
 8001e44:	8afb      	ldrh	r3, [r7, #22]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	8892      	ldrh	r2, [r2, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a19      	ldr	r2, [pc, #100]	@ (8001eb4 <LCD_DisplayString+0xa0>)
 8001e4e:	8812      	ldrh	r2, [r2, #0]
 8001e50:	4293      	cmp	r3, r2
 8001e52:	dd06      	ble.n	8001e62 <LCD_DisplayString+0x4e>
			Xpoint = Xstart;
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	88da      	ldrh	r2, [r3, #6]
 8001e5c:	8abb      	ldrh	r3, [r7, #20]
 8001e5e:	4413      	add	r3, r2
 8001e60:	82bb      	strh	r3, [r7, #20]
		}
		
		// If the Y direction is full, reposition to (Xstart, Ystart)
		if ( ( Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ){
 8001e62:	8abb      	ldrh	r3, [r7, #20]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	88d2      	ldrh	r2, [r2, #6]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a12      	ldr	r2, [pc, #72]	@ (8001eb4 <LCD_DisplayString+0xa0>)
 8001e6c:	8852      	ldrh	r2, [r2, #2]
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	dd03      	ble.n	8001e7a <LCD_DisplayString+0x66>
			Xpoint = Xstart;
 8001e72:	89fb      	ldrh	r3, [r7, #14]
 8001e74:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 8001e76:	89bb      	ldrh	r3, [r7, #12]
 8001e78:	82bb      	strh	r3, [r7, #20]
		}		
		LCD_DisplayChar ( Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground );
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	8ab9      	ldrh	r1, [r7, #20]
 8001e80:	8af8      	ldrh	r0, [r7, #22]
 8001e82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	8c3b      	ldrh	r3, [r7, #32]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f7ff ff1a 	bl	8001cc4 <LCD_DisplayChar>
		
		//The next character of the address
		pString ++;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60bb      	str	r3, [r7, #8]
		
		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;	
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	889a      	ldrh	r2, [r3, #4]
 8001e9a:	8afb      	ldrh	r3, [r7, #22]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	82fb      	strh	r3, [r7, #22]
	while ( * pString != '\0')
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1cd      	bne.n	8001e44 <LCD_DisplayString+0x30>
 8001ea8:	e000      	b.n	8001eac <LCD_DisplayString+0x98>
		return;
 8001eaa:	bf00      	nop
	}
}
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200000d8 	.word	0x200000d8

08001eb8 <LCD_DisplayNum>:
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
#define  ARRAY_LEN 255
void LCD_DisplayNum(	POINT Xpoint, POINT Ypoint, int32_t Nummber, 
						sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8001ebe:	af02      	add	r7, sp, #8
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	4608      	mov	r0, r1
 8001ec4:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8001ec8:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 8001ecc:	600a      	str	r2, [r1, #0]
 8001ece:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001ed2:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001edc:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001ee0:	4622      	mov	r2, r4
 8001ee2:	801a      	strh	r2, [r3, #0]
 8001ee4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ee8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001eec:	4602      	mov	r2, r0
 8001eee:	801a      	strh	r2, [r3, #0]
		
	int16_t Num_Bit = 0, Str_Bit = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
	uint8_t Str_Array[ARRAY_LEN] = {0},Num_Array[ARRAY_LEN] = {0};
 8001efc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	22fb      	movs	r2, #251	@ 0xfb
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 f9a2 	bl	8004258 <memset>
 8001f14:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001f18:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	3304      	adds	r3, #4
 8001f22:	22fb      	movs	r2, #251	@ 0xfb
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 f996 	bl	8004258 <memset>
	uint8_t *pStr = Str_Array;
 8001f2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f30:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8001f34:	4b45      	ldr	r3, [pc, #276]	@ (800204c <LCD_DisplayNum+0x194>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001f3c:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 8001f40:	8812      	ldrh	r2, [r2, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d27d      	bcs.n	8002042 <LCD_DisplayNum+0x18a>
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <LCD_DisplayNum+0x194>)
 8001f48:	885b      	ldrh	r3, [r3, #2]
 8001f4a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001f4e:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8001f52:	8812      	ldrh	r2, [r2, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d274      	bcs.n	8002042 <LCD_DisplayNum+0x18a>
		return;
	}
	
	//Converts a number to a string
	while(Nummber){
 8001f58:	e030      	b.n	8001fbc <LCD_DisplayNum+0x104>
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 8001f5a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001f5e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b3a      	ldr	r3, [pc, #232]	@ (8002050 <LCD_DisplayNum+0x198>)
 8001f66:	fb83 1302 	smull	r1, r3, r3, r2
 8001f6a:	1099      	asrs	r1, r3, #2
 8001f6c:	17d3      	asrs	r3, r2, #31
 8001f6e:	1ac9      	subs	r1, r1, r3
 8001f70:	460b      	mov	r3, r1
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	1ad1      	subs	r1, r2, r3
 8001f7a:	b2ca      	uxtb	r2, r1
 8001f7c:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001f80:	3230      	adds	r2, #48	@ 0x30
 8001f82:	b2d1      	uxtb	r1, r2
 8001f84:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001f88:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 8001f8c:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8001f8e:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
		Nummber /= 10;
 8001f9c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001fa0:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8001fa4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001fa8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4928      	ldr	r1, [pc, #160]	@ (8002050 <LCD_DisplayNum+0x198>)
 8001fb0:	fb81 0103 	smull	r0, r1, r1, r3
 8001fb4:	1089      	asrs	r1, r1, #2
 8001fb6:	17db      	asrs	r3, r3, #31
 8001fb8:	1acb      	subs	r3, r1, r3
 8001fba:	6013      	str	r3, [r2, #0]
	while(Nummber){
 8001fbc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001fc0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1c7      	bne.n	8001f5a <LCD_DisplayNum+0xa2>
    }
	
	//The string is inverted
	while( Num_Bit > 0){
 8001fca:	e01c      	b.n	8002006 <LCD_DisplayNum+0x14e>
		Str_Array[Str_Bit] = Num_Array[Num_Bit -1];
 8001fcc:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8001fd6:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8001fda:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 8001fde:	5c89      	ldrb	r1, [r1, r2]
 8001fe0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001fe4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001fe8:	54d1      	strb	r1, [r2, r3]
		Str_Bit ++;
 8001fea:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
		Num_Bit --;
 8001ff8:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29b      	uxth	r3, r3
 8002002:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	while( Num_Bit > 0){
 8002006:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800200a:	2b00      	cmp	r3, #0
 800200c:	dcde      	bgt.n	8001fcc <LCD_DisplayNum+0x114>
	}
	
	//show
	LCD_DisplayString( Xpoint, Ypoint,  (const char*)pStr, Font, Color_Background, Color_Foreground );
 800200e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002012:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002016:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800201a:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 800201e:	8811      	ldrh	r1, [r2, #0]
 8002020:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8002024:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 8002028:	8810      	ldrh	r0, [r2, #0]
 800202a:	f8b7 222c 	ldrh.w	r2, [r7, #556]	@ 0x22c
 800202e:	9201      	str	r2, [sp, #4]
 8002030:	f8b7 2228 	ldrh.w	r2, [r7, #552]	@ 0x228
 8002034:	9200      	str	r2, [sp, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800203c:	f7ff feea 	bl	8001e14 <LCD_DisplayString>
 8002040:	e000      	b.n	8002044 <LCD_DisplayNum+0x18c>
		return;
 8002042:	bf00      	nop
}
 8002044:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	200000d8 	.word	0x200000d8
 8002050:	66666667 	.word	0x66666667

08002054 <LCD_Show>:


void LCD_Show(void)
{
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b090      	sub	sp, #64	@ 0x40
 8002058:	af04      	add	r7, sp, #16
	if(sLCD_DIS.LCD_Dis_Column <= sLCD_DIS.LCD_Dis_Page){//Horizontal screen display
 800205a:	4b9c      	ldr	r3, [pc, #624]	@ (80022cc <LCD_Show+0x278>)
 800205c:	881a      	ldrh	r2, [r3, #0]
 800205e:	4b9b      	ldr	r3, [pc, #620]	@ (80022cc <LCD_Show+0x278>)
 8002060:	885b      	ldrh	r3, [r3, #2]
 8002062:	429a      	cmp	r2, r3
 8002064:	f200 8142 	bhi.w	80022ec <LCD_Show+0x298>

		////printf("LCD Draw Line \r\n");
		LCD_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column, 10, RED,LINE_SOLID, DOT_PIXEL_2X2);
 8002068:	4b98      	ldr	r3, [pc, #608]	@ (80022cc <LCD_Show+0x278>)
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	2302      	movs	r3, #2
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	2300      	movs	r3, #0
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	230a      	movs	r3, #10
 800207c:	210a      	movs	r1, #10
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fb86 	bl	8001790 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 10, RED,LINE_SOLID, DOT_PIXEL_2X2);	
 8002084:	4b91      	ldr	r3, [pc, #580]	@ (80022cc <LCD_Show+0x278>)
 8002086:	885b      	ldrh	r3, [r3, #2]
 8002088:	3b0a      	subs	r3, #10
 800208a:	b299      	uxth	r1, r3
 800208c:	4b8f      	ldr	r3, [pc, #572]	@ (80022cc <LCD_Show+0x278>)
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	4b8e      	ldr	r3, [pc, #568]	@ (80022cc <LCD_Show+0x278>)
 8002092:	885b      	ldrh	r3, [r3, #2]
 8002094:	3b0a      	subs	r3, #10
 8002096:	b29b      	uxth	r3, r3
 8002098:	2002      	movs	r0, #2
 800209a:	9002      	str	r0, [sp, #8]
 800209c:	2000      	movs	r0, #0
 800209e:	9001      	str	r0, [sp, #4]
 80020a0:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80020a4:	9000      	str	r0, [sp, #0]
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff fb72 	bl	8001790 <LCD_DrawLine>
		LCD_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column, 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 80020ac:	4b87      	ldr	r3, [pc, #540]	@ (80022cc <LCD_Show+0x278>)
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	2301      	movs	r3, #1
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	2301      	movs	r3, #1
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2314      	movs	r3, #20
 80020c0:	2114      	movs	r1, #20
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7ff fb64 	bl	8001790 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 80020c8:	4b80      	ldr	r3, [pc, #512]	@ (80022cc <LCD_Show+0x278>)
 80020ca:	885b      	ldrh	r3, [r3, #2]
 80020cc:	3b14      	subs	r3, #20
 80020ce:	b299      	uxth	r1, r3
 80020d0:	4b7e      	ldr	r3, [pc, #504]	@ (80022cc <LCD_Show+0x278>)
 80020d2:	881a      	ldrh	r2, [r3, #0]
 80020d4:	4b7d      	ldr	r3, [pc, #500]	@ (80022cc <LCD_Show+0x278>)
 80020d6:	885b      	ldrh	r3, [r3, #2]
 80020d8:	3b14      	subs	r3, #20
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2001      	movs	r0, #1
 80020de:	9002      	str	r0, [sp, #8]
 80020e0:	2001      	movs	r0, #1
 80020e2:	9001      	str	r0, [sp, #4]
 80020e4:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80020e8:	9000      	str	r0, [sp, #0]
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff fb50 	bl	8001790 <LCD_DrawLine>

		////printf("LCD Draw Rectangle \r\n");
		LCD_DrawRectangle(0,0,sLCD_DIS.LCD_Dis_Column,8,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 80020f0:	4b76      	ldr	r3, [pc, #472]	@ (80022cc <LCD_Show+0x278>)
 80020f2:	881a      	ldrh	r2, [r3, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2301      	movs	r3, #1
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	231f      	movs	r3, #31
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2308      	movs	r3, #8
 8002102:	2100      	movs	r1, #0
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff fbf3 	bl	80018f0 <LCD_DrawRectangle>
		LCD_DrawRectangle(0,sLCD_DIS.LCD_Dis_Page - 10,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 800210a:	4b70      	ldr	r3, [pc, #448]	@ (80022cc <LCD_Show+0x278>)
 800210c:	885b      	ldrh	r3, [r3, #2]
 800210e:	3b0a      	subs	r3, #10
 8002110:	b299      	uxth	r1, r3
 8002112:	4b6e      	ldr	r3, [pc, #440]	@ (80022cc <LCD_Show+0x278>)
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	4b6d      	ldr	r3, [pc, #436]	@ (80022cc <LCD_Show+0x278>)
 8002118:	885b      	ldrh	r3, [r3, #2]
 800211a:	2001      	movs	r0, #1
 800211c:	9002      	str	r0, [sp, #8]
 800211e:	2001      	movs	r0, #1
 8002120:	9001      	str	r0, [sp, #4]
 8002122:	201f      	movs	r0, #31
 8002124:	9000      	str	r0, [sp, #0]
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff fbe2 	bl	80018f0 <LCD_DrawRectangle>
		LCD_DrawRectangle(1,1,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,RED,DRAW_EMPTY,DOT_PIXEL_2X2);
 800212c:	4b67      	ldr	r3, [pc, #412]	@ (80022cc <LCD_Show+0x278>)
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <LCD_Show+0x278>)
 8002132:	885b      	ldrh	r3, [r3, #2]
 8002134:	2102      	movs	r1, #2
 8002136:	9102      	str	r1, [sp, #8]
 8002138:	2100      	movs	r1, #0
 800213a:	9101      	str	r1, [sp, #4]
 800213c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8002140:	9100      	str	r1, [sp, #0]
 8002142:	2101      	movs	r1, #1
 8002144:	2001      	movs	r0, #1
 8002146:	f7ff fbd3 	bl	80018f0 <LCD_DrawRectangle>
		
		////printf("LCD Draw Olympic Rings\r\n");
		uint16_t Cx1 = 40, Cy1 = 85, Cr = 12;
 800214a:	2328      	movs	r3, #40	@ 0x28
 800214c:	833b      	strh	r3, [r7, #24]
 800214e:	2355      	movs	r3, #85	@ 0x55
 8002150:	82fb      	strh	r3, [r7, #22]
 8002152:	230c      	movs	r3, #12
 8002154:	82bb      	strh	r3, [r7, #20]
		uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 8002156:	8b3b      	ldrh	r3, [r7, #24]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe facf 	bl	80006fc <__aeabi_i2d>
 800215e:	4604      	mov	r4, r0
 8002160:	460d      	mov	r5, r1
 8002162:	8abb      	ldrh	r3, [r7, #20]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fac9 	bl	80006fc <__aeabi_i2d>
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	4b58      	ldr	r3, [pc, #352]	@ (80022d0 <LCD_Show+0x27c>)
 8002170:	f7fe f848 	bl	8000204 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4620      	mov	r0, r4
 800217a:	4629      	mov	r1, r5
 800217c:	f7fe f972 	bl	8000464 <__adddf3>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fb22 	bl	80007d0 <__aeabi_d2uiz>
 800218c:	4603      	mov	r3, r0
 800218e:	827b      	strh	r3, [r7, #18]
 8002190:	8afb      	ldrh	r3, [r7, #22]
 8002192:	823b      	strh	r3, [r7, #16]
		uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8002194:	8abb      	ldrh	r3, [r7, #20]
 8002196:	461a      	mov	r2, r3
 8002198:	0092      	lsls	r2, r2, #2
 800219a:	4413      	add	r3, r2
 800219c:	b29a      	uxth	r2, r3
 800219e:	8b3b      	ldrh	r3, [r7, #24]
 80021a0:	4413      	add	r3, r2
 80021a2:	81fb      	strh	r3, [r7, #14]
 80021a4:	8afb      	ldrh	r3, [r7, #22]
 80021a6:	81bb      	strh	r3, [r7, #12]
		uint16_t Cx4 = ( Cx1 + Cx2 )/2, Cy4 = Cy1 + Cr;
 80021a8:	8b3a      	ldrh	r2, [r7, #24]
 80021aa:	8a7b      	ldrh	r3, [r7, #18]
 80021ac:	4413      	add	r3, r2
 80021ae:	0fda      	lsrs	r2, r3, #31
 80021b0:	4413      	add	r3, r2
 80021b2:	105b      	asrs	r3, r3, #1
 80021b4:	817b      	strh	r3, [r7, #10]
 80021b6:	8afa      	ldrh	r2, [r7, #22]
 80021b8:	8abb      	ldrh	r3, [r7, #20]
 80021ba:	4413      	add	r3, r2
 80021bc:	813b      	strh	r3, [r7, #8]
		uint16_t Cx5 = ( Cx2 + Cx3 )/2, Cy5 = Cy1 + Cr;
 80021be:	8a7a      	ldrh	r2, [r7, #18]
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	4413      	add	r3, r2
 80021c4:	0fda      	lsrs	r2, r3, #31
 80021c6:	4413      	add	r3, r2
 80021c8:	105b      	asrs	r3, r3, #1
 80021ca:	80fb      	strh	r3, [r7, #6]
 80021cc:	8afa      	ldrh	r2, [r7, #22]
 80021ce:	8abb      	ldrh	r3, [r7, #20]
 80021d0:	4413      	add	r3, r2
 80021d2:	80bb      	strh	r3, [r7, #4]

		LCD_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 80021d4:	8aba      	ldrh	r2, [r7, #20]
 80021d6:	8af9      	ldrh	r1, [r7, #22]
 80021d8:	8b38      	ldrh	r0, [r7, #24]
 80021da:	2301      	movs	r3, #1
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	2300      	movs	r3, #0
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	231f      	movs	r3, #31
 80021e4:	f7ff fbf4 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_DFT);
 80021e8:	8aba      	ldrh	r2, [r7, #20]
 80021ea:	8a39      	ldrh	r1, [r7, #16]
 80021ec:	8a78      	ldrh	r0, [r7, #18]
 80021ee:	2301      	movs	r3, #1
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2300      	movs	r3, #0
 80021f8:	f7ff fbea 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 80021fc:	8aba      	ldrh	r2, [r7, #20]
 80021fe:	89b9      	ldrh	r1, [r7, #12]
 8002200:	89f8      	ldrh	r0, [r7, #14]
 8002202:	2301      	movs	r3, #1
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2300      	movs	r3, #0
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800220e:	f7ff fbdf 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_DFT);
 8002212:	8aba      	ldrh	r2, [r7, #20]
 8002214:	8939      	ldrh	r1, [r7, #8]
 8002216:	8978      	ldrh	r0, [r7, #10]
 8002218:	2301      	movs	r3, #1
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2300      	movs	r3, #0
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002224:	f7ff fbd4 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_DFT);
 8002228:	8aba      	ldrh	r2, [r7, #20]
 800222a:	88b9      	ldrh	r1, [r7, #4]
 800222c:	88f8      	ldrh	r0, [r7, #6]
 800222e:	2301      	movs	r3, #1
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2300      	movs	r3, #0
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800223a:	f7ff fbc9 	bl	80019d0 <LCD_DrawCircle>

		////printf("LCD Draw Realistic circles\r\n");
		LCD_DrawCircle(15, 110, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 800223e:	2301      	movs	r3, #1
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	2301      	movs	r3, #1
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 800224a:	220a      	movs	r2, #10
 800224c:	216e      	movs	r1, #110	@ 0x6e
 800224e:	200f      	movs	r0, #15
 8002250:	f7ff fbbe 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle(sLCD_DIS.LCD_Dis_Column - 15, 110, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 8002254:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <LCD_Show+0x278>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	3b0f      	subs	r3, #15
 800225a:	b298      	uxth	r0, r3
 800225c:	2301      	movs	r3, #1
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	2301      	movs	r3, #1
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 8002268:	220a      	movs	r2, #10
 800226a:	216e      	movs	r1, #110	@ 0x6e
 800226c:	f7ff fbb0 	bl	80019d0 <LCD_DrawCircle>

		////printf("LCD Display String \r\n");
		LCD_DisplayString(35,20,"WaveShare",&Font12,LCD_BACKGROUND,BLUE);
 8002270:	231f      	movs	r3, #31
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <LCD_Show+0x280>)
 800227c:	4a16      	ldr	r2, [pc, #88]	@ (80022d8 <LCD_Show+0x284>)
 800227e:	2114      	movs	r1, #20
 8002280:	2023      	movs	r0, #35	@ 0x23
 8002282:	f7ff fdc7 	bl	8001e14 <LCD_DisplayString>
		LCD_DisplayString(32,33,"Electronic",&Font12,LCD_BACKGROUND,BLUE);
 8002286:	231f      	movs	r3, #31
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <LCD_Show+0x280>)
 8002292:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <LCD_Show+0x288>)
 8002294:	2121      	movs	r1, #33	@ 0x21
 8002296:	2020      	movs	r0, #32
 8002298:	f7ff fdbc 	bl	8001e14 <LCD_DisplayString>
		LCD_DisplayString(28,45,"1.8inch TFTLCD",&Font8,RED,GRED);
 800229c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <LCD_Show+0x28c>)
 80022aa:	4a0e      	ldr	r2, [pc, #56]	@ (80022e4 <LCD_Show+0x290>)
 80022ac:	212d      	movs	r1, #45	@ 0x2d
 80022ae:	201c      	movs	r0, #28
 80022b0:	f7ff fdb0 	bl	8001e14 <LCD_DisplayString>

		//printf("LCD Display Nummber \r\n");
		LCD_DisplayNum(28,55,1234567890,&Font12,LCD_BACKGROUND,BLUE);
 80022b4:	231f      	movs	r3, #31
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <LCD_Show+0x280>)
 80022c0:	4a09      	ldr	r2, [pc, #36]	@ (80022e8 <LCD_Show+0x294>)
 80022c2:	2137      	movs	r1, #55	@ 0x37
 80022c4:	201c      	movs	r0, #28
 80022c6:	f7ff fdf7 	bl	8001eb8 <LCD_DisplayNum>

		//printf("LCD Display Nummber \r\n");
		LCD_DisplayNum(35,50,1234567890,&Font12,LCD_BACKGROUND,BLUE);

	}
}
 80022ca:	e135      	b.n	8002538 <LCD_Show+0x4e4>
 80022cc:	200000d8 	.word	0x200000d8
 80022d0:	40040000 	.word	0x40040000
 80022d4:	20000004 	.word	0x20000004
 80022d8:	080042c8 	.word	0x080042c8
 80022dc:	080042d4 	.word	0x080042d4
 80022e0:	2000000c 	.word	0x2000000c
 80022e4:	080042e0 	.word	0x080042e0
 80022e8:	499602d2 	.word	0x499602d2
		LCD_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column, 10, RED,LINE_SOLID, DOT_PIXEL_2X2);
 80022ec:	4b94      	ldr	r3, [pc, #592]	@ (8002540 <LCD_Show+0x4ec>)
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	2302      	movs	r3, #2
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	230a      	movs	r3, #10
 8002300:	210a      	movs	r1, #10
 8002302:	2000      	movs	r0, #0
 8002304:	f7ff fa44 	bl	8001790 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 10, RED,LINE_SOLID, DOT_PIXEL_2X2);	
 8002308:	4b8d      	ldr	r3, [pc, #564]	@ (8002540 <LCD_Show+0x4ec>)
 800230a:	885b      	ldrh	r3, [r3, #2]
 800230c:	3b0a      	subs	r3, #10
 800230e:	b299      	uxth	r1, r3
 8002310:	4b8b      	ldr	r3, [pc, #556]	@ (8002540 <LCD_Show+0x4ec>)
 8002312:	881a      	ldrh	r2, [r3, #0]
 8002314:	4b8a      	ldr	r3, [pc, #552]	@ (8002540 <LCD_Show+0x4ec>)
 8002316:	885b      	ldrh	r3, [r3, #2]
 8002318:	3b0a      	subs	r3, #10
 800231a:	b29b      	uxth	r3, r3
 800231c:	2002      	movs	r0, #2
 800231e:	9002      	str	r0, [sp, #8]
 8002320:	2000      	movs	r0, #0
 8002322:	9001      	str	r0, [sp, #4]
 8002324:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8002328:	9000      	str	r0, [sp, #0]
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff fa30 	bl	8001790 <LCD_DrawLine>
		LCD_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column, 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8002330:	4b83      	ldr	r3, [pc, #524]	@ (8002540 <LCD_Show+0x4ec>)
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	2301      	movs	r3, #1
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	2301      	movs	r3, #1
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2314      	movs	r3, #20
 8002344:	2114      	movs	r1, #20
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff fa22 	bl	8001790 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 800234c:	4b7c      	ldr	r3, [pc, #496]	@ (8002540 <LCD_Show+0x4ec>)
 800234e:	885b      	ldrh	r3, [r3, #2]
 8002350:	3b14      	subs	r3, #20
 8002352:	b299      	uxth	r1, r3
 8002354:	4b7a      	ldr	r3, [pc, #488]	@ (8002540 <LCD_Show+0x4ec>)
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	4b79      	ldr	r3, [pc, #484]	@ (8002540 <LCD_Show+0x4ec>)
 800235a:	885b      	ldrh	r3, [r3, #2]
 800235c:	3b14      	subs	r3, #20
 800235e:	b29b      	uxth	r3, r3
 8002360:	2001      	movs	r0, #1
 8002362:	9002      	str	r0, [sp, #8]
 8002364:	2001      	movs	r0, #1
 8002366:	9001      	str	r0, [sp, #4]
 8002368:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800236c:	9000      	str	r0, [sp, #0]
 800236e:	2000      	movs	r0, #0
 8002370:	f7ff fa0e 	bl	8001790 <LCD_DrawLine>
		LCD_DrawRectangle(0,0,sLCD_DIS.LCD_Dis_Column,8,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 8002374:	4b72      	ldr	r3, [pc, #456]	@ (8002540 <LCD_Show+0x4ec>)
 8002376:	881a      	ldrh	r2, [r3, #0]
 8002378:	2301      	movs	r3, #1
 800237a:	9302      	str	r3, [sp, #8]
 800237c:	2301      	movs	r3, #1
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	231f      	movs	r3, #31
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2308      	movs	r3, #8
 8002386:	2100      	movs	r1, #0
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff fab1 	bl	80018f0 <LCD_DrawRectangle>
		LCD_DrawRectangle(0,sLCD_DIS.LCD_Dis_Page - 10,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 800238e:	4b6c      	ldr	r3, [pc, #432]	@ (8002540 <LCD_Show+0x4ec>)
 8002390:	885b      	ldrh	r3, [r3, #2]
 8002392:	3b0a      	subs	r3, #10
 8002394:	b299      	uxth	r1, r3
 8002396:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <LCD_Show+0x4ec>)
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	4b69      	ldr	r3, [pc, #420]	@ (8002540 <LCD_Show+0x4ec>)
 800239c:	885b      	ldrh	r3, [r3, #2]
 800239e:	2001      	movs	r0, #1
 80023a0:	9002      	str	r0, [sp, #8]
 80023a2:	2001      	movs	r0, #1
 80023a4:	9001      	str	r0, [sp, #4]
 80023a6:	201f      	movs	r0, #31
 80023a8:	9000      	str	r0, [sp, #0]
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff faa0 	bl	80018f0 <LCD_DrawRectangle>
		LCD_DrawRectangle(1,1,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,RED,DRAW_EMPTY,DOT_PIXEL_2X2);
 80023b0:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <LCD_Show+0x4ec>)
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	4b62      	ldr	r3, [pc, #392]	@ (8002540 <LCD_Show+0x4ec>)
 80023b6:	885b      	ldrh	r3, [r3, #2]
 80023b8:	2102      	movs	r1, #2
 80023ba:	9102      	str	r1, [sp, #8]
 80023bc:	2100      	movs	r1, #0
 80023be:	9101      	str	r1, [sp, #4]
 80023c0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80023c4:	9100      	str	r1, [sp, #0]
 80023c6:	2101      	movs	r1, #1
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff fa91 	bl	80018f0 <LCD_DrawRectangle>
		uint16_t Cx1 = 45, Cy1 = 80, Cr = 12;
 80023ce:	232d      	movs	r3, #45	@ 0x2d
 80023d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80023d2:	2350      	movs	r3, #80	@ 0x50
 80023d4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80023d6:	230c      	movs	r3, #12
 80023d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 80023da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f98d 	bl	80006fc <__aeabi_i2d>
 80023e2:	4604      	mov	r4, r0
 80023e4:	460d      	mov	r5, r1
 80023e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f987 	bl	80006fc <__aeabi_i2d>
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	4b54      	ldr	r3, [pc, #336]	@ (8002544 <LCD_Show+0x4f0>)
 80023f4:	f7fd ff06 	bl	8000204 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4620      	mov	r0, r4
 80023fe:	4629      	mov	r1, r5
 8002400:	f7fe f830 	bl	8000464 <__adddf3>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe f9e0 	bl	80007d0 <__aeabi_d2uiz>
 8002410:	4603      	mov	r3, r0
 8002412:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002414:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002416:	84fb      	strh	r3, [r7, #38]	@ 0x26
		uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8002418:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800241a:	461a      	mov	r2, r3
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	4413      	add	r3, r2
 8002420:	b29a      	uxth	r2, r3
 8002422:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002424:	4413      	add	r3, r2
 8002426:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002428:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800242a:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint16_t Cx4 = ( Cx1 + Cx2 )/2, Cy4 = Cy1 + Cr;
 800242c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800242e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002430:	4413      	add	r3, r2
 8002432:	0fda      	lsrs	r2, r3, #31
 8002434:	4413      	add	r3, r2
 8002436:	105b      	asrs	r3, r3, #1
 8002438:	843b      	strh	r3, [r7, #32]
 800243a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800243c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800243e:	4413      	add	r3, r2
 8002440:	83fb      	strh	r3, [r7, #30]
		uint16_t Cx5 = ( Cx2 + Cx3 )/2, Cy5 = Cy1 + Cr;
 8002442:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002444:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002446:	4413      	add	r3, r2
 8002448:	0fda      	lsrs	r2, r3, #31
 800244a:	4413      	add	r3, r2
 800244c:	105b      	asrs	r3, r3, #1
 800244e:	83bb      	strh	r3, [r7, #28]
 8002450:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002452:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002454:	4413      	add	r3, r2
 8002456:	837b      	strh	r3, [r7, #26]
		LCD_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8002458:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800245a:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800245c:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800245e:	2301      	movs	r3, #1
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	2300      	movs	r3, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	231f      	movs	r3, #31
 8002468:	f7ff fab2 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_DFT);
 800246c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800246e:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8002470:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8002472:	2301      	movs	r3, #1
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	2300      	movs	r3, #0
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	f7ff faa8 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 8002480:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002482:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8002484:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8002486:	2301      	movs	r3, #1
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	2300      	movs	r3, #0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002492:	f7ff fa9d 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_DFT);
 8002496:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002498:	8bf9      	ldrh	r1, [r7, #30]
 800249a:	8c38      	ldrh	r0, [r7, #32]
 800249c:	2301      	movs	r3, #1
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2300      	movs	r3, #0
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024a8:	f7ff fa92 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_DFT);
 80024ac:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80024ae:	8b79      	ldrh	r1, [r7, #26]
 80024b0:	8bb8      	ldrh	r0, [r7, #28]
 80024b2:	2301      	movs	r3, #1
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	2300      	movs	r3, #0
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80024be:	f7ff fa87 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle(15, 90, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 80024c2:	2301      	movs	r3, #1
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	2301      	movs	r3, #1
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 80024ce:	220a      	movs	r2, #10
 80024d0:	215a      	movs	r1, #90	@ 0x5a
 80024d2:	200f      	movs	r0, #15
 80024d4:	f7ff fa7c 	bl	80019d0 <LCD_DrawCircle>
		LCD_DrawCircle(sLCD_DIS.LCD_Dis_Column - 15, 90, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <LCD_Show+0x4ec>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	3b0f      	subs	r3, #15
 80024de:	b298      	uxth	r0, r3
 80024e0:	2301      	movs	r3, #1
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2301      	movs	r3, #1
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 80024ec:	220a      	movs	r2, #10
 80024ee:	215a      	movs	r1, #90	@ 0x5a
 80024f0:	f7ff fa6e 	bl	80019d0 <LCD_DrawCircle>
		LCD_DisplayString(10,20,"WaveShare Electronic",&Font12,LCD_BACKGROUND,BLUE);
 80024f4:	231f      	movs	r3, #31
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <LCD_Show+0x4f4>)
 8002500:	4a12      	ldr	r2, [pc, #72]	@ (800254c <LCD_Show+0x4f8>)
 8002502:	2114      	movs	r1, #20
 8002504:	200a      	movs	r0, #10
 8002506:	f7ff fc85 	bl	8001e14 <LCD_DisplayString>
		LCD_DisplayString(35,35,"1.8inch TFTLCD",&Font12,RED,GRED);
 800250a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <LCD_Show+0x4f4>)
 8002518:	4a0d      	ldr	r2, [pc, #52]	@ (8002550 <LCD_Show+0x4fc>)
 800251a:	2123      	movs	r1, #35	@ 0x23
 800251c:	2023      	movs	r0, #35	@ 0x23
 800251e:	f7ff fc79 	bl	8001e14 <LCD_DisplayString>
		LCD_DisplayNum(35,50,1234567890,&Font12,LCD_BACKGROUND,BLUE);
 8002522:	231f      	movs	r3, #31
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <LCD_Show+0x4f4>)
 800252e:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <LCD_Show+0x500>)
 8002530:	2132      	movs	r1, #50	@ 0x32
 8002532:	2023      	movs	r0, #35	@ 0x23
 8002534:	f7ff fcc0 	bl	8001eb8 <LCD_DisplayNum>
}
 8002538:	bf00      	nop
 800253a:	3730      	adds	r7, #48	@ 0x30
 800253c:	46bd      	mov	sp, r7
 800253e:	bdb0      	pop	{r4, r5, r7, pc}
 8002540:	200000d8 	.word	0x200000d8
 8002544:	40040000 	.word	0x40040000
 8002548:	20000004 	.word	0x20000004
 800254c:	080042f0 	.word	0x080042f0
 8002550:	080042e0 	.word	0x080042e0
 8002554:	499602d2 	.word	0x499602d2

08002558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800255c:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_Init+0x40>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0d      	ldr	r2, [pc, #52]	@ (8002598 <HAL_Init+0x40>)
 8002562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002568:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <HAL_Init+0x40>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <HAL_Init+0x40>)
 800256e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002574:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <HAL_Init+0x40>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a07      	ldr	r2, [pc, #28]	@ (8002598 <HAL_Init+0x40>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002580:	2003      	movs	r0, #3
 8002582:	f000 f931 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002586:	2000      	movs	r0, #0
 8002588:	f000 f808 	bl	800259c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800258c:	f7fe fc6e 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023c00 	.word	0x40023c00

0800259c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a4:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_InitTick+0x54>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_InitTick+0x58>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f93b 	bl	8002836 <HAL_SYSTICK_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00e      	b.n	80025e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	d80a      	bhi.n	80025e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d0:	2200      	movs	r2, #0
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f000 f911 	bl	80027fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025dc:	4a06      	ldr	r2, [pc, #24]	@ (80025f8 <HAL_InitTick+0x5c>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e000      	b.n	80025e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000018 	.word	0x20000018
 80025f8:	20000014 	.word	0x20000014

080025fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x20>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_IncTick+0x24>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4413      	add	r3, r2
 800260c:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <HAL_IncTick+0x24>)
 800260e:	6013      	str	r3, [r2, #0]
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000018 	.word	0x20000018
 8002620:	200000e4 	.word	0x200000e4

08002624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return uwTick;
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <HAL_GetTick+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	200000e4 	.word	0x200000e4

0800263c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002644:	f7ff ffee 	bl	8002624 <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d005      	beq.n	8002662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_Delay+0x44>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4413      	add	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002662:	bf00      	nop
 8002664:	f7ff ffde 	bl	8002624 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	d8f7      	bhi.n	8002664 <HAL_Delay+0x28>
  {
  }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000018 	.word	0x20000018

08002684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b6:	4a04      	ldr	r2, [pc, #16]	@ (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	60d3      	str	r3, [r2, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d0:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <__NVIC_GetPriorityGrouping+0x18>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 0307 	and.w	r3, r3, #7
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	db0a      	blt.n	8002712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	490c      	ldr	r1, [pc, #48]	@ (8002734 <__NVIC_SetPriority+0x4c>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002710:	e00a      	b.n	8002728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4908      	ldr	r1, [pc, #32]	@ (8002738 <__NVIC_SetPriority+0x50>)
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3b04      	subs	r3, #4
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	440b      	add	r3, r1
 8002726:	761a      	strb	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	@ 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f1c3 0307 	rsb	r3, r3, #7
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf28      	it	cs
 800275a:	2304      	movcs	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3304      	adds	r3, #4
 8002762:	2b06      	cmp	r3, #6
 8002764:	d902      	bls.n	800276c <NVIC_EncodePriority+0x30>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3b03      	subs	r3, #3
 800276a:	e000      	b.n	800276e <NVIC_EncodePriority+0x32>
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002784:	f04f 31ff 	mov.w	r1, #4294967295
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43d9      	mvns	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	4313      	orrs	r3, r2
         );
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	@ 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f7ff ff8e 	bl	80026e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff47 	bl	8002684 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff5c 	bl	80026cc <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff8e 	bl	800273c <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5d 	bl	80026e8 <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffb0 	bl	80027a4 <SysTick_Config>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	@ 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e165      	b.n	8002b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	f040 8154 	bne.w	8002b32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d005      	beq.n	80028a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d130      	bne.n	8002904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 0201 	and.w	r2, r3, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b03      	cmp	r3, #3
 800290e:	d017      	beq.n	8002940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d123      	bne.n	8002994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	08da      	lsrs	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3208      	adds	r2, #8
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80ae 	beq.w	8002b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b5d      	ldr	r3, [pc, #372]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	4a5c      	ldr	r2, [pc, #368]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f2:	4a58      	ldr	r2, [pc, #352]	@ (8002b54 <HAL_GPIO_Init+0x304>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4f      	ldr	r2, [pc, #316]	@ (8002b58 <HAL_GPIO_Init+0x308>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d025      	beq.n	8002a6a <HAL_GPIO_Init+0x21a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4e      	ldr	r2, [pc, #312]	@ (8002b5c <HAL_GPIO_Init+0x30c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01f      	beq.n	8002a66 <HAL_GPIO_Init+0x216>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4d      	ldr	r2, [pc, #308]	@ (8002b60 <HAL_GPIO_Init+0x310>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x212>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4c      	ldr	r2, [pc, #304]	@ (8002b64 <HAL_GPIO_Init+0x314>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x20e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4b      	ldr	r2, [pc, #300]	@ (8002b68 <HAL_GPIO_Init+0x318>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x20a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4a      	ldr	r2, [pc, #296]	@ (8002b6c <HAL_GPIO_Init+0x31c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x206>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a49      	ldr	r2, [pc, #292]	@ (8002b70 <HAL_GPIO_Init+0x320>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x202>
 8002a4e:	2306      	movs	r3, #6
 8002a50:	e00c      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e00a      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f002 0203 	and.w	r2, r2, #3
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a7c:	4935      	ldr	r1, [pc, #212]	@ (8002b54 <HAL_GPIO_Init+0x304>)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b74 <HAL_GPIO_Init+0x324>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aae:	4a31      	ldr	r2, [pc, #196]	@ (8002b74 <HAL_GPIO_Init+0x324>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8002b74 <HAL_GPIO_Init+0x324>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad8:	4a26      	ldr	r2, [pc, #152]	@ (8002b74 <HAL_GPIO_Init+0x324>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ade:	4b25      	ldr	r3, [pc, #148]	@ (8002b74 <HAL_GPIO_Init+0x324>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b02:	4a1c      	ldr	r2, [pc, #112]	@ (8002b74 <HAL_GPIO_Init+0x324>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b08:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <HAL_GPIO_Init+0x324>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2c:	4a11      	ldr	r2, [pc, #68]	@ (8002b74 <HAL_GPIO_Init+0x324>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	f67f ae96 	bls.w	800286c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3724      	adds	r7, #36	@ 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	40020c00 	.word	0x40020c00
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40021400 	.word	0x40021400
 8002b70:	40021800 	.word	0x40021800
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b94:	e003      	b.n	8002b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	619a      	str	r2, [r3, #24]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0cc      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b68      	ldr	r3, [pc, #416]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d90c      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b65      	ldr	r3, [pc, #404]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b63      	ldr	r3, [pc, #396]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0b8      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c00:	4b59      	ldr	r3, [pc, #356]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a58      	ldr	r2, [pc, #352]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c18:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c24:	4b50      	ldr	r3, [pc, #320]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	494d      	ldr	r1, [pc, #308]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d044      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d119      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e07f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e067      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4934      	ldr	r1, [pc, #208]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c9c:	f7ff fcc2 	bl	8002624 <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7ff fcbe 	bl	8002624 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e04f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d20c      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b22      	ldr	r3, [pc, #136]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e032      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d00:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4916      	ldr	r1, [pc, #88]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1e:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	490e      	ldr	r1, [pc, #56]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d32:	f000 f855 	bl	8002de0 <HAL_RCC_GetSysClockFreq>
 8002d36:	4602      	mov	r2, r0
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	490a      	ldr	r1, [pc, #40]	@ (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	5ccb      	ldrb	r3, [r1, r3]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	4a09      	ldr	r2, [pc, #36]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d4e:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fc22 	bl	800259c <HAL_InitTick>

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023c00 	.word	0x40023c00
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	08004308 	.word	0x08004308
 8002d70:	20000000 	.word	0x20000000
 8002d74:	20000014 	.word	0x20000014

08002d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	@ (8002d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000000 	.word	0x20000000

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0a9b      	lsrs	r3, r3, #10
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	@ (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	08004318 	.word	0x08004318

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dbc:	f7ff ffdc 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0b5b      	lsrs	r3, r3, #13
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	@ (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08004318 	.word	0x08004318

08002de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de4:	b0ae      	sub	sp, #184	@ 0xb8
 8002de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e06:	4bcb      	ldr	r3, [pc, #812]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	f200 8206 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x440>
 8002e14:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08003221 	.word	0x08003221
 8002e24:	08003221 	.word	0x08003221
 8002e28:	08003221 	.word	0x08003221
 8002e2c:	08002e59 	.word	0x08002e59
 8002e30:	08003221 	.word	0x08003221
 8002e34:	08003221 	.word	0x08003221
 8002e38:	08003221 	.word	0x08003221
 8002e3c:	08002e61 	.word	0x08002e61
 8002e40:	08003221 	.word	0x08003221
 8002e44:	08003221 	.word	0x08003221
 8002e48:	08003221 	.word	0x08003221
 8002e4c:	08003051 	.word	0x08003051
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4bb9      	ldr	r3, [pc, #740]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e56:	e1e7      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e58:	4bb8      	ldr	r3, [pc, #736]	@ (800313c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e5e:	e1e3      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4bb4      	ldr	r3, [pc, #720]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6c:	4bb1      	ldr	r3, [pc, #708]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d071      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e78:	4bae      	ldr	r3, [pc, #696]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e84:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	0159      	lsls	r1, r3, #5
 8002eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb0:	0150      	lsls	r0, r2, #5
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	1a51      	subs	r1, r2, r1
 8002eba:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	018b      	lsls	r3, r1, #6
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eda:	4641      	mov	r1, r8
 8002edc:	018a      	lsls	r2, r1, #6
 8002ede:	4641      	mov	r1, r8
 8002ee0:	1a51      	subs	r1, r2, r1
 8002ee2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ef8:	4649      	mov	r1, r9
 8002efa:	00cb      	lsls	r3, r1, #3
 8002efc:	4641      	mov	r1, r8
 8002efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f02:	4641      	mov	r1, r8
 8002f04:	00ca      	lsls	r2, r1, #3
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f12:	462b      	mov	r3, r5
 8002f14:	460a      	mov	r2, r1
 8002f16:	eb42 0303 	adc.w	r3, r2, r3
 8002f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f28:	4629      	mov	r1, r5
 8002f2a:	024b      	lsls	r3, r1, #9
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f32:	4621      	mov	r1, r4
 8002f34:	024a      	lsls	r2, r1, #9
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002f4c:	f7fd fc60 	bl	8000810 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4613      	mov	r3, r2
 8002f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f5a:	e067      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5c:	4b75      	ldr	r3, [pc, #468]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f76:	2300      	movs	r3, #0
 8002f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002f7e:	4622      	mov	r2, r4
 8002f80:	462b      	mov	r3, r5
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	0159      	lsls	r1, r3, #5
 8002f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f90:	0150      	lsls	r0, r2, #5
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4621      	mov	r1, r4
 8002f98:	1a51      	subs	r1, r2, r1
 8002f9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	018b      	lsls	r3, r1, #6
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fba:	4641      	mov	r1, r8
 8002fbc:	018a      	lsls	r2, r1, #6
 8002fbe:	4641      	mov	r1, r8
 8002fc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fde:	4692      	mov	sl, r2
 8002fe0:	469b      	mov	fp, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	eb1a 0303 	adds.w	r3, sl, r3
 8002fe8:	623b      	str	r3, [r7, #32]
 8002fea:	462b      	mov	r3, r5
 8002fec:	eb4b 0303 	adc.w	r3, fp, r3
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ffe:	4629      	mov	r1, r5
 8003000:	028b      	lsls	r3, r1, #10
 8003002:	4621      	mov	r1, r4
 8003004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003008:	4621      	mov	r1, r4
 800300a:	028a      	lsls	r2, r1, #10
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003014:	2200      	movs	r2, #0
 8003016:	673b      	str	r3, [r7, #112]	@ 0x70
 8003018:	677a      	str	r2, [r7, #116]	@ 0x74
 800301a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800301e:	f7fd fbf7 	bl	8000810 <__aeabi_uldivmod>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4613      	mov	r3, r2
 8003028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800302c:	4b41      	ldr	r3, [pc, #260]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	3301      	adds	r3, #1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800303e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800304e:	e0eb      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003050:	4b38      	ldr	r3, [pc, #224]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800305c:	4b35      	ldr	r3, [pc, #212]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d06b      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003068:	4b32      	ldr	r3, [pc, #200]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	2200      	movs	r2, #0
 8003070:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003074:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307a:	663b      	str	r3, [r7, #96]	@ 0x60
 800307c:	2300      	movs	r3, #0
 800307e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003080:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003084:	4622      	mov	r2, r4
 8003086:	462b      	mov	r3, r5
 8003088:	f04f 0000 	mov.w	r0, #0
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	0159      	lsls	r1, r3, #5
 8003092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003096:	0150      	lsls	r0, r2, #5
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4621      	mov	r1, r4
 800309e:	1a51      	subs	r1, r2, r1
 80030a0:	61b9      	str	r1, [r7, #24]
 80030a2:	4629      	mov	r1, r5
 80030a4:	eb63 0301 	sbc.w	r3, r3, r1
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030b6:	4659      	mov	r1, fp
 80030b8:	018b      	lsls	r3, r1, #6
 80030ba:	4651      	mov	r1, sl
 80030bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030c0:	4651      	mov	r1, sl
 80030c2:	018a      	lsls	r2, r1, #6
 80030c4:	4651      	mov	r1, sl
 80030c6:	ebb2 0801 	subs.w	r8, r2, r1
 80030ca:	4659      	mov	r1, fp
 80030cc:	eb63 0901 	sbc.w	r9, r3, r1
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e4:	4690      	mov	r8, r2
 80030e6:	4699      	mov	r9, r3
 80030e8:	4623      	mov	r3, r4
 80030ea:	eb18 0303 	adds.w	r3, r8, r3
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	462b      	mov	r3, r5
 80030f2:	eb49 0303 	adc.w	r3, r9, r3
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003104:	4629      	mov	r1, r5
 8003106:	024b      	lsls	r3, r1, #9
 8003108:	4621      	mov	r1, r4
 800310a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800310e:	4621      	mov	r1, r4
 8003110:	024a      	lsls	r2, r1, #9
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800311a:	2200      	movs	r2, #0
 800311c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800311e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003120:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003124:	f7fd fb74 	bl	8000810 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4613      	mov	r3, r2
 800312e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003132:	e065      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x420>
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003140:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x458>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	2200      	movs	r2, #0
 8003148:	4618      	mov	r0, r3
 800314a:	4611      	mov	r1, r2
 800314c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003150:	653b      	str	r3, [r7, #80]	@ 0x50
 8003152:	2300      	movs	r3, #0
 8003154:	657b      	str	r3, [r7, #84]	@ 0x54
 8003156:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800315a:	4642      	mov	r2, r8
 800315c:	464b      	mov	r3, r9
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	0159      	lsls	r1, r3, #5
 8003168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316c:	0150      	lsls	r0, r2, #5
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4641      	mov	r1, r8
 8003174:	1a51      	subs	r1, r2, r1
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	4649      	mov	r1, r9
 800317a:	eb63 0301 	sbc.w	r3, r3, r1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800318c:	4659      	mov	r1, fp
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	4651      	mov	r1, sl
 8003192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003196:	4651      	mov	r1, sl
 8003198:	018a      	lsls	r2, r1, #6
 800319a:	4651      	mov	r1, sl
 800319c:	1a54      	subs	r4, r2, r1
 800319e:	4659      	mov	r1, fp
 80031a0:	eb63 0501 	sbc.w	r5, r3, r1
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	00eb      	lsls	r3, r5, #3
 80031ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b2:	00e2      	lsls	r2, r4, #3
 80031b4:	4614      	mov	r4, r2
 80031b6:	461d      	mov	r5, r3
 80031b8:	4643      	mov	r3, r8
 80031ba:	18e3      	adds	r3, r4, r3
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	464b      	mov	r3, r9
 80031c0:	eb45 0303 	adc.w	r3, r5, r3
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031d2:	4629      	mov	r1, r5
 80031d4:	028b      	lsls	r3, r1, #10
 80031d6:	4621      	mov	r1, r4
 80031d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031dc:	4621      	mov	r1, r4
 80031de:	028a      	lsls	r2, r1, #10
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031e8:	2200      	movs	r2, #0
 80031ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80031ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031f2:	f7fd fb0d 	bl	8000810 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4613      	mov	r3, r2
 80031fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003200:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x458>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	0f1b      	lsrs	r3, r3, #28
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800320e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800321e:	e003      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003222:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003226:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800322c:	4618      	mov	r0, r3
 800322e:	37b8      	adds	r7, #184	@ 0xb8
 8003230:	46bd      	mov	sp, r7
 8003232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	00f42400 	.word	0x00f42400

08003240 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e28d      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8083 	beq.w	8003366 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003260:	4b94      	ldr	r3, [pc, #592]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b04      	cmp	r3, #4
 800326a:	d019      	beq.n	80032a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800326c:	4b91      	ldr	r3, [pc, #580]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
        || \
 8003274:	2b08      	cmp	r3, #8
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003278:	4b8e      	ldr	r3, [pc, #568]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003284:	d00c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003286:	4b8b      	ldr	r3, [pc, #556]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d112      	bne.n	80032b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4b88      	ldr	r3, [pc, #544]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b84      	ldr	r3, [pc, #528]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <HAL_RCC_OscConfig+0x124>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d157      	bne.n	8003364 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e25a      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x90>
 80032c2:	4b7c      	ldr	r3, [pc, #496]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7b      	ldr	r2, [pc, #492]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xcc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0xb4>
 80032da:	4b76      	ldr	r3, [pc, #472]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a75      	ldr	r2, [pc, #468]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b73      	ldr	r3, [pc, #460]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a72      	ldr	r2, [pc, #456]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xcc>
 80032f4:	4b6f      	ldr	r3, [pc, #444]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a6e      	ldr	r2, [pc, #440]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b6c      	ldr	r3, [pc, #432]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6b      	ldr	r2, [pc, #428]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7ff f986 	bl	8002624 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff f982 	bl	8002624 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	@ 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e21f      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b61      	ldr	r3, [pc, #388]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xdc>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7ff f972 	bl	8002624 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7ff f96e 	bl	8002624 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	@ 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e20b      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b57      	ldr	r3, [pc, #348]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x104>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d06f      	beq.n	8003452 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003372:	4b50      	ldr	r3, [pc, #320]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800337e:	4b4d      	ldr	r3, [pc, #308]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
        || \
 8003386:	2b08      	cmp	r3, #8
 8003388:	d105      	bne.n	8003396 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800338a:	4b4a      	ldr	r3, [pc, #296]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003396:	4b47      	ldr	r3, [pc, #284]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d11c      	bne.n	80033dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a2:	4b44      	ldr	r3, [pc, #272]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d116      	bne.n	80033dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	4b41      	ldr	r3, [pc, #260]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_RCC_OscConfig+0x186>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1d3      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c6:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4937      	ldr	r1, [pc, #220]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	e03a      	b.n	8003452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <HAL_RCC_OscConfig+0x278>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7ff f91b 	bl	8002624 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7ff f917 	bl	8002624 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1b4      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	4b2b      	ldr	r3, [pc, #172]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b28      	ldr	r3, [pc, #160]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4925      	ldr	r1, [pc, #148]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	4b24      	ldr	r3, [pc, #144]	@ (80034b8 <HAL_RCC_OscConfig+0x278>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7ff f8fa 	bl	8002624 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003434:	f7ff f8f6 	bl	8002624 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e193      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d036      	beq.n	80034cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003466:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <HAL_RCC_OscConfig+0x27c>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7ff f8da 	bl	8002624 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003474:	f7ff f8d6 	bl	8002624 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e173      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x234>
 8003492:	e01b      	b.n	80034cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003494:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <HAL_RCC_OscConfig+0x27c>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7ff f8c3 	bl	8002624 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	e00e      	b.n	80034c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a2:	f7ff f8bf 	bl	8002624 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d907      	bls.n	80034c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e15c      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
 80034b4:	40023800 	.word	0x40023800
 80034b8:	42470000 	.word	0x42470000
 80034bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c0:	4b8a      	ldr	r3, [pc, #552]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ea      	bne.n	80034a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8097 	beq.w	8003608 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034de:	4b83      	ldr	r3, [pc, #524]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10f      	bne.n	800350a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	4b7f      	ldr	r3, [pc, #508]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	4a7e      	ldr	r2, [pc, #504]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034fa:	4b7c      	ldr	r3, [pc, #496]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	4b79      	ldr	r3, [pc, #484]	@ (80036f0 <HAL_RCC_OscConfig+0x4b0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d118      	bne.n	8003548 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003516:	4b76      	ldr	r3, [pc, #472]	@ (80036f0 <HAL_RCC_OscConfig+0x4b0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a75      	ldr	r2, [pc, #468]	@ (80036f0 <HAL_RCC_OscConfig+0x4b0>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003522:	f7ff f87f 	bl	8002624 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352a:	f7ff f87b 	bl	8002624 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e118      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	4b6c      	ldr	r3, [pc, #432]	@ (80036f0 <HAL_RCC_OscConfig+0x4b0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x31e>
 8003550:	4b66      	ldr	r3, [pc, #408]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003554:	4a65      	ldr	r2, [pc, #404]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6713      	str	r3, [r2, #112]	@ 0x70
 800355c:	e01c      	b.n	8003598 <HAL_RCC_OscConfig+0x358>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b05      	cmp	r3, #5
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x340>
 8003566:	4b61      	ldr	r3, [pc, #388]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356a:	4a60      	ldr	r2, [pc, #384]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	6713      	str	r3, [r2, #112]	@ 0x70
 8003572:	4b5e      	ldr	r3, [pc, #376]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003576:	4a5d      	ldr	r2, [pc, #372]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6713      	str	r3, [r2, #112]	@ 0x70
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0x358>
 8003580:	4b5a      	ldr	r3, [pc, #360]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003584:	4a59      	ldr	r2, [pc, #356]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	6713      	str	r3, [r2, #112]	@ 0x70
 800358c:	4b57      	ldr	r3, [pc, #348]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	4a56      	ldr	r2, [pc, #344]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003592:	f023 0304 	bic.w	r3, r3, #4
 8003596:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7ff f840 	bl	8002624 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	e00a      	b.n	80035be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7ff f83c 	bl	8002624 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0d7      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	4b4b      	ldr	r3, [pc, #300]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ee      	beq.n	80035a8 <HAL_RCC_OscConfig+0x368>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7ff f82a 	bl	8002624 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7ff f826 	bl	8002624 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e0c1      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ea:	4b40      	ldr	r3, [pc, #256]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1ee      	bne.n	80035d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fc:	4b3b      	ldr	r3, [pc, #236]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	4a3a      	ldr	r2, [pc, #232]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003606:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80ad 	beq.w	800376c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003612:	4b36      	ldr	r3, [pc, #216]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b08      	cmp	r3, #8
 800361c:	d060      	beq.n	80036e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d145      	bne.n	80036b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b33      	ldr	r3, [pc, #204]	@ (80036f4 <HAL_RCC_OscConfig+0x4b4>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe fffa 	bl	8002624 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe fff6 	bl	8002624 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e093      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	4b29      	ldr	r3, [pc, #164]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	019b      	lsls	r3, r3, #6
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	3b01      	subs	r3, #1
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	071b      	lsls	r3, r3, #28
 800367e:	491b      	ldr	r1, [pc, #108]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003684:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <HAL_RCC_OscConfig+0x4b4>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe ffcb 	bl	8002624 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe ffc7 	bl	8002624 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e064      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a4:	4b11      	ldr	r3, [pc, #68]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x452>
 80036b0:	e05c      	b.n	800376c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <HAL_RCC_OscConfig+0x4b4>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe ffb4 	bl	8002624 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fe ffb0 	bl	8002624 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e04d      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x480>
 80036de:	e045      	b.n	800376c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e040      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000
 80036f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <HAL_RCC_OscConfig+0x538>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d030      	beq.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d129      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d122      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800372e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003730:	4293      	cmp	r3, r2
 8003732:	d119      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	3b01      	subs	r3, #1
 8003742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d10f      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e07b      	b.n	8003886 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800379e:	d009      	beq.n	80037b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]
 80037a6:	e005      	b.n	80037b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd faf4 	bl	8000dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003838:	ea42 0103 	orr.w	r1, r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	f003 0104 	and.w	r1, r3, #4
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	f003 0210 	and.w	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003874:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b088      	sub	sp, #32
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800389e:	f7fe fec1 	bl	8002624 <HAL_GetTick>
 80038a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d001      	beq.n	80038b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
 80038b6:	e12a      	b.n	8003b0e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Transmit+0x36>
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e122      	b.n	8003b0e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_SPI_Transmit+0x48>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e11b      	b.n	8003b0e <HAL_SPI_Transmit+0x280>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2203      	movs	r2, #3
 80038e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003924:	d10f      	bne.n	8003946 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003934:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003944:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	d007      	beq.n	8003964 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800396c:	d152      	bne.n	8003a14 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_SPI_Transmit+0xee>
 8003976:	8b7b      	ldrh	r3, [r7, #26]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d145      	bne.n	8003a08 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039a0:	e032      	b.n	8003a08 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d112      	bne.n	80039d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039d4:	e018      	b.n	8003a08 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d6:	f7fe fe25 	bl	8002624 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d803      	bhi.n	80039ee <HAL_SPI_Transmit+0x160>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d102      	bne.n	80039f4 <HAL_SPI_Transmit+0x166>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e082      	b.n	8003b0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1c7      	bne.n	80039a2 <HAL_SPI_Transmit+0x114>
 8003a12:	e053      	b.n	8003abc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_SPI_Transmit+0x194>
 8003a1c:	8b7b      	ldrh	r3, [r7, #26]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d147      	bne.n	8003ab2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	7812      	ldrb	r2, [r2, #0]
 8003a2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a48:	e033      	b.n	8003ab2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d113      	bne.n	8003a80 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a7e:	e018      	b.n	8003ab2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a80:	f7fe fdd0 	bl	8002624 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d803      	bhi.n	8003a98 <HAL_SPI_Transmit+0x20a>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Transmit+0x210>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e02d      	b.n	8003b0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1c6      	bne.n	8003a4a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	6839      	ldr	r1, [r7, #0]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f8b1 	bl	8003c28 <SPI_EndRxTxTransaction>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b28:	f7fe fd7c 	bl	8002624 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b38:	f7fe fd74 	bl	8002624 <HAL_GetTick>
 8003b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b3e:	4b39      	ldr	r3, [pc, #228]	@ (8003c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	015b      	lsls	r3, r3, #5
 8003b44:	0d1b      	lsrs	r3, r3, #20
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	fb02 f303 	mul.w	r3, r2, r3
 8003b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b4e:	e054      	b.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d050      	beq.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b58:	f7fe fd64 	bl	8002624 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d902      	bls.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d13d      	bne.n	8003bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b86:	d111      	bne.n	8003bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b90:	d004      	beq.n	8003b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9a:	d107      	bne.n	8003bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb4:	d10f      	bne.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e017      	b.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d19b      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000000 	.word	0x20000000

08003c28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff ff6a 	bl	8003b18 <SPI_WaitFlagStateUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e032      	b.n	8003cc0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc8 <SPI_EndRxTxTransaction+0xa0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ccc <SPI_EndRxTxTransaction+0xa4>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	0d5b      	lsrs	r3, r3, #21
 8003c66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c78:	d112      	bne.n	8003ca0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2200      	movs	r2, #0
 8003c82:	2180      	movs	r1, #128	@ 0x80
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7ff ff47 	bl	8003b18 <SPI_WaitFlagStateUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d016      	beq.n	8003cbe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e00f      	b.n	8003cc0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b80      	cmp	r3, #128	@ 0x80
 8003cb8:	d0f2      	beq.n	8003ca0 <SPI_EndRxTxTransaction+0x78>
 8003cba:	e000      	b.n	8003cbe <SPI_EndRxTxTransaction+0x96>
        break;
 8003cbc:	bf00      	nop
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	165e9f81 	.word	0x165e9f81

08003cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e042      	b.n	8003d68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd f94c 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2224      	movs	r2, #36	@ 0x24
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f82b 	bl	8003d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d74:	b0c0      	sub	sp, #256	@ 0x100
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	68d9      	ldr	r1, [r3, #12]
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	ea40 0301 	orr.w	r3, r0, r1
 8003d98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dc8:	f021 010c 	bic.w	r1, r1, #12
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	6999      	ldr	r1, [r3, #24]
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	ea40 0301 	orr.w	r3, r0, r1
 8003df6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b8f      	ldr	r3, [pc, #572]	@ (800403c <UART_SetConfig+0x2cc>)
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d005      	beq.n	8003e10 <UART_SetConfig+0xa0>
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004040 <UART_SetConfig+0x2d0>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d104      	bne.n	8003e1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e10:	f7fe ffd2 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8003e14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e18:	e003      	b.n	8003e22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e1a:	f7fe ffb9 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8003e1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2c:	f040 810c 	bne.w	8004048 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
 8003e46:	1891      	adds	r1, r2, r2
 8003e48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e4a:	415b      	adcs	r3, r3
 8003e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e52:	4621      	mov	r1, r4
 8003e54:	eb12 0801 	adds.w	r8, r2, r1
 8003e58:	4629      	mov	r1, r5
 8003e5a:	eb43 0901 	adc.w	r9, r3, r1
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e72:	4690      	mov	r8, r2
 8003e74:	4699      	mov	r9, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	eb18 0303 	adds.w	r3, r8, r3
 8003e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e80:	462b      	mov	r3, r5
 8003e82:	eb49 0303 	adc.w	r3, r9, r3
 8003e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	18db      	adds	r3, r3, r3
 8003ea2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	eb42 0303 	adc.w	r3, r2, r3
 8003eaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003eb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003eb4:	f7fc fcac 	bl	8000810 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4b61      	ldr	r3, [pc, #388]	@ (8004044 <UART_SetConfig+0x2d4>)
 8003ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	011c      	lsls	r4, r3, #4
 8003ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ed0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ed4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ee8:	4641      	mov	r1, r8
 8003eea:	eb12 0a01 	adds.w	sl, r2, r1
 8003eee:	4649      	mov	r1, r9
 8003ef0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f08:	4692      	mov	sl, r2
 8003f0a:	469b      	mov	fp, r3
 8003f0c:	4643      	mov	r3, r8
 8003f0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f16:	464b      	mov	r3, r9
 8003f18:	eb4b 0303 	adc.w	r3, fp, r3
 8003f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f34:	460b      	mov	r3, r1
 8003f36:	18db      	adds	r3, r3, r3
 8003f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	eb42 0303 	adc.w	r3, r2, r3
 8003f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f4a:	f7fc fc61 	bl	8000810 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	4b3b      	ldr	r3, [pc, #236]	@ (8004044 <UART_SetConfig+0x2d4>)
 8003f56:	fba3 2301 	umull	r2, r3, r3, r1
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2264      	movs	r2, #100	@ 0x64
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	1acb      	subs	r3, r1, r3
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f6a:	4b36      	ldr	r3, [pc, #216]	@ (8004044 <UART_SetConfig+0x2d4>)
 8003f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f78:	441c      	add	r4, r3
 8003f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f94:	415b      	adcs	r3, r3
 8003f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	1851      	adds	r1, r2, r1
 8003fa0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	414b      	adcs	r3, r1
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	00cb      	lsls	r3, r1, #3
 8003fb8:	4651      	mov	r1, sl
 8003fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	00ca      	lsls	r2, r1, #3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4642      	mov	r2, r8
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	eb42 0303 	adc.w	r3, r2, r3
 8003fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fe8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	18db      	adds	r3, r3, r3
 8003ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	eb42 0303 	adc.w	r3, r2, r3
 8003ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004002:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004006:	f7fc fc03 	bl	8000810 <__aeabi_uldivmod>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <UART_SetConfig+0x2d4>)
 8004010:	fba3 1302 	umull	r1, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	2164      	movs	r1, #100	@ 0x64
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	3332      	adds	r3, #50	@ 0x32
 8004022:	4a08      	ldr	r2, [pc, #32]	@ (8004044 <UART_SetConfig+0x2d4>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	f003 0207 	and.w	r2, r3, #7
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4422      	add	r2, r4
 8004036:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004038:	e106      	b.n	8004248 <UART_SetConfig+0x4d8>
 800403a:	bf00      	nop
 800403c:	40011000 	.word	0x40011000
 8004040:	40011400 	.word	0x40011400
 8004044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800404c:	2200      	movs	r2, #0
 800404e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004052:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800405a:	4642      	mov	r2, r8
 800405c:	464b      	mov	r3, r9
 800405e:	1891      	adds	r1, r2, r2
 8004060:	6239      	str	r1, [r7, #32]
 8004062:	415b      	adcs	r3, r3
 8004064:	627b      	str	r3, [r7, #36]	@ 0x24
 8004066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800406a:	4641      	mov	r1, r8
 800406c:	1854      	adds	r4, r2, r1
 800406e:	4649      	mov	r1, r9
 8004070:	eb43 0501 	adc.w	r5, r3, r1
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	00eb      	lsls	r3, r5, #3
 800407e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004082:	00e2      	lsls	r2, r4, #3
 8004084:	4614      	mov	r4, r2
 8004086:	461d      	mov	r5, r3
 8004088:	4643      	mov	r3, r8
 800408a:	18e3      	adds	r3, r4, r3
 800408c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004090:	464b      	mov	r3, r9
 8004092:	eb45 0303 	adc.w	r3, r5, r3
 8004096:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040b6:	4629      	mov	r1, r5
 80040b8:	008b      	lsls	r3, r1, #2
 80040ba:	4621      	mov	r1, r4
 80040bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040c0:	4621      	mov	r1, r4
 80040c2:	008a      	lsls	r2, r1, #2
 80040c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040c8:	f7fc fba2 	bl	8000810 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4b60      	ldr	r3, [pc, #384]	@ (8004254 <UART_SetConfig+0x4e4>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011c      	lsls	r4, r3, #4
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	61b9      	str	r1, [r7, #24]
 80040f4:	415b      	adcs	r3, r3
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040fc:	4641      	mov	r1, r8
 80040fe:	1851      	adds	r1, r2, r1
 8004100:	6139      	str	r1, [r7, #16]
 8004102:	4649      	mov	r1, r9
 8004104:	414b      	adcs	r3, r1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004114:	4659      	mov	r1, fp
 8004116:	00cb      	lsls	r3, r1, #3
 8004118:	4651      	mov	r1, sl
 800411a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411e:	4651      	mov	r1, sl
 8004120:	00ca      	lsls	r2, r1, #3
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	4603      	mov	r3, r0
 8004128:	4642      	mov	r2, r8
 800412a:	189b      	adds	r3, r3, r2
 800412c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004130:	464b      	mov	r3, r9
 8004132:	460a      	mov	r2, r1
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004146:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004154:	4649      	mov	r1, r9
 8004156:	008b      	lsls	r3, r1, #2
 8004158:	4641      	mov	r1, r8
 800415a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800415e:	4641      	mov	r1, r8
 8004160:	008a      	lsls	r2, r1, #2
 8004162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004166:	f7fc fb53 	bl	8000810 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4611      	mov	r1, r2
 8004170:	4b38      	ldr	r3, [pc, #224]	@ (8004254 <UART_SetConfig+0x4e4>)
 8004172:	fba3 2301 	umull	r2, r3, r3, r1
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	2264      	movs	r2, #100	@ 0x64
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	1acb      	subs	r3, r1, r3
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	3332      	adds	r3, #50	@ 0x32
 8004184:	4a33      	ldr	r2, [pc, #204]	@ (8004254 <UART_SetConfig+0x4e4>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004190:	441c      	add	r4, r3
 8004192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004196:	2200      	movs	r2, #0
 8004198:	673b      	str	r3, [r7, #112]	@ 0x70
 800419a:	677a      	str	r2, [r7, #116]	@ 0x74
 800419c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	415b      	adcs	r3, r3
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b0:	4641      	mov	r1, r8
 80041b2:	1851      	adds	r1, r2, r1
 80041b4:	6039      	str	r1, [r7, #0]
 80041b6:	4649      	mov	r1, r9
 80041b8:	414b      	adcs	r3, r1
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041c8:	4659      	mov	r1, fp
 80041ca:	00cb      	lsls	r3, r1, #3
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d2:	4651      	mov	r1, sl
 80041d4:	00ca      	lsls	r2, r1, #3
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	4642      	mov	r2, r8
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041e2:	464b      	mov	r3, r9
 80041e4:	460a      	mov	r2, r1
 80041e6:	eb42 0303 	adc.w	r3, r2, r3
 80041ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80041f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004204:	4649      	mov	r1, r9
 8004206:	008b      	lsls	r3, r1, #2
 8004208:	4641      	mov	r1, r8
 800420a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420e:	4641      	mov	r1, r8
 8004210:	008a      	lsls	r2, r1, #2
 8004212:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004216:	f7fc fafb 	bl	8000810 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <UART_SetConfig+0x4e4>)
 8004220:	fba3 1302 	umull	r1, r3, r3, r2
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	2164      	movs	r1, #100	@ 0x64
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	3332      	adds	r3, #50	@ 0x32
 8004232:	4a08      	ldr	r2, [pc, #32]	@ (8004254 <UART_SetConfig+0x4e4>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	f003 020f 	and.w	r2, r3, #15
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4422      	add	r2, r4
 8004246:	609a      	str	r2, [r3, #8]
}
 8004248:	bf00      	nop
 800424a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800424e:	46bd      	mov	sp, r7
 8004250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004254:	51eb851f 	.word	0x51eb851f

08004258 <memset>:
 8004258:	4402      	add	r2, r0
 800425a:	4603      	mov	r3, r0
 800425c:	4293      	cmp	r3, r2
 800425e:	d100      	bne.n	8004262 <memset+0xa>
 8004260:	4770      	bx	lr
 8004262:	f803 1b01 	strb.w	r1, [r3], #1
 8004266:	e7f9      	b.n	800425c <memset+0x4>

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4d0d      	ldr	r5, [pc, #52]	@ (80042a0 <__libc_init_array+0x38>)
 800426c:	4c0d      	ldr	r4, [pc, #52]	@ (80042a4 <__libc_init_array+0x3c>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	2600      	movs	r6, #0
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	4d0b      	ldr	r5, [pc, #44]	@ (80042a8 <__libc_init_array+0x40>)
 800427a:	4c0c      	ldr	r4, [pc, #48]	@ (80042ac <__libc_init_array+0x44>)
 800427c:	f000 f818 	bl	80042b0 <_init>
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	2600      	movs	r6, #0
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004a94 	.word	0x08004a94
 80042a4:	08004a94 	.word	0x08004a94
 80042a8:	08004a94 	.word	0x08004a94
 80042ac:	08004a98 	.word	0x08004a98

080042b0 <_init>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr

080042bc <_fini>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr
